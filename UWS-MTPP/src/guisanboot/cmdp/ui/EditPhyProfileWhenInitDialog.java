/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditPhyProfileWhenInitDialog.java
 *
 * Created on 2010-6-7, 13:56:19
 */

package guisanboot.cmdp.ui;

import guisanboot.cmdp.entity.PPProfile;
import guisanboot.cmdp.entity.PPProfileItem;
import guisanboot.data.MirrorGrp;
import guisanboot.data.Service;
import guisanboot.data.VolumeMap;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.SanBootView;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.TitledBorder;

/**
 *
 * @author zjj
 */
public class EditPhyProfileWhenInitDialog extends javax.swing.JDialog{
    /** Creates new form EditPhyProfileWhenInitDialog */
    public EditPhyProfileWhenInitDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public EditPhyProfileWhenInitDialog( SanBootView view,
        PPProfile ppprof,
        ArrayList<PPProfileItem> allDisks,
        Vector servicesList,
        ArrayList<PPProfile> curProfList
    ){
        this( view,true );
        myInit( view,ppprof,allDisks,servicesList,curProfList );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel10 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("selected disk"));
        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(395, 40));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        jButton4.setText("Modify");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton4);

        jPanel3.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Contents", jPanel3);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Interval :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Days");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanel4.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Hours");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanel4.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Minutes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 0, 0);
        jPanel4.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Min. Incremental Size :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jLabel5, gridBagConstraints);

        jTextField4.setPreferredSize(new java.awt.Dimension(60, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel4.add(jTextField4, gridBagConstraints);

        jLabel6.setText("Bytes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 5, 0, 0);
        jPanel4.add(jLabel6, gridBagConstraints);

        jLabel7.setText("Max. Versions :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jLabel7, gridBagConstraints);

        jTextField5.setPreferredSize(new java.awt.Dimension(35, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel4.add(jTextField5, gridBagConstraints);

        jLabel8.setText("Snapshot Block Size :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel4.add(jLabel9, gridBagConstraints);

        jLabel10.setText("Pool :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jLabel10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel4.add(jLabel11, gridBagConstraints);

        jRadioButton1.setText("Linear Strategy");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("Non-Linear Strategy");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel4.add(jRadioButton2, gridBagConstraints);

        jButton3.setText("Edit");
        jButton3.setPreferredSize(new java.awt.Dimension(55, 25));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 0, 0);
        jPanel4.add(jButton3, gridBagConstraints);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(null);
        jScrollPane3.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel4.add(jScrollPane3, gridBagConstraints);

        jSpinner1.setPreferredSize(new java.awt.Dimension(48, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        jPanel4.add(jSpinner1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jSpinner2, gridBagConstraints);

        jSpinner3.setPreferredSize(new java.awt.Dimension(35, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jSpinner3, gridBagConstraints);

        jCheckBox1.setText("Mini-Overload mode");
        jCheckBox1.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        jPanel4.add(jCheckBox1, gridBagConstraints);

        jTabbedPane1.addTab("Scheduler", jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel8.setPreferredSize(new java.awt.Dimension(482, 60));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel12.setText("Database Type :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel8.add(jLabel12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel8.add(jComboBox1, gridBagConstraints);

        jLabel13.setText("Database Instance :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel8.add(jLabel13, gridBagConstraints);

        jTextField6.setPreferredSize(new java.awt.Dimension(300, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel8.add(jTextField6, gridBagConstraints);

        jPanel5.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Related Services"));
        jPanel9.setLayout(new java.awt.BorderLayout());
        jPanel9.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel10.setPreferredSize(new java.awt.Dimension(466, 40));
        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        jButton7.setText("Modify");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton7);

        jPanel9.add(jPanel10, java.awt.BorderLayout.SOUTH);

        jPanel5.add(jPanel9, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Advanced", jPanel5);

        jPanel1.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(400, 40));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        do_ModDisk();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        do_ModService();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ok_btnProcess();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        do_selRotate();
}//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        do_selCron();
}//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        do_editCron();
}//GEN-LAST:event_jButton3ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EditPhyProfileWhenInitDialog dialog = new EditPhyProfileWhenInitDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables

    ButtonGroup bg = new ButtonGroup();
    DefaultListModel model = new DefaultListModel();
    JList diskList = new JList( model );

    DefaultListModel model1 = new DefaultListModel();
    JList serviceList = new JList( model1 );

    SanBootView view;
    PPProfile ppprof;
    ArrayList<PPProfileItem> allDisks;
    Vector services;
    ArrayList<PPProfile> curProfList;

    private void myInit( SanBootView view,PPProfile ppprof,ArrayList<PPProfileItem> allDisks,Vector services,ArrayList<PPProfile> curProfList ){
        this.view = view;
        this.ppprof = ppprof;
        this.allDisks = allDisks;
        this.services = services;
        this.curProfList = curProfList;

        jScrollPane1.getViewport().add( diskList, null );
        jScrollPane1.getViewport().setBackground( Color.white );
        diskList.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        diskList.setCellRenderer( new VolumeRenderer() );

        jScrollPane2.getViewport().add( serviceList, null );
        jScrollPane2.getViewport().setBackground( Color.white );
        serviceList.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );

        setupDBTypeCombox();
        this.setLanguage();
        this.setupLinearStrategy();

        jPanel4.remove( jLabel8 );
        jPanel4.remove( jLabel10 );

        bg.add( this.jRadioButton1 );
        bg.add( this.jRadioButton2 );
        
        initUI( ppprof );
    }

    private void setupLinearStrategy(){
        this.jSpinner1.setModel( new SpinnerNumberModel( 0,0,10000,1 ) );
        this.jSpinner2.setModel( new SpinnerNumberModel( 0,0,23,1 ) );
        this.jSpinner3.setModel( new SpinnerNumberModel( 0,0,59,1 ) );
    }

    private void setupDBTypeCombox(){
        jComboBox1.addItem( VolumeMap.DB_TYPE_NONE );
        jComboBox1.addItem( VolumeMap.DB_TYPE_ORA );
        jComboBox1.addItem( VolumeMap.DB_TYPE_SYB );
        jComboBox1.addItem( VolumeMap.DB_TYPE_MSSQL );
    }

    private void setLanguage(){
        this.setTitle( SanBootView.res.getString("EditProfileDialog.diagTitle2") );

        this.jLabel1.setText(SanBootView.res.getString("EditProfileDialog.label.interval"));
        this.jLabel2.setText(SanBootView.res.getString("EditProfileDialog.label.day"));
        this.jLabel3.setText(SanBootView.res.getString("EditProfileDialog.label.hour"));
        this.jLabel4.setText(SanBootView.res.getString("EditProfileDialog.label.min"));
        this.jLabel5.setText(SanBootView.res.getString("EditProfileDialog.label.minsize"));
        this.jLabel6.setText(SanBootView.res.getString("EditProfileDialog.label.bytes"));
        this.jLabel7.setText(SanBootView.res.getString("EditProfileDialog.label.maxver"));
        this.jLabel8.setText(SanBootView.res.getString("EditProfileDialog.label.blksize"));
        this.jLabel10.setText(SanBootView.res.getString("EditProfileDialog.label.pool"));
        this.jLabel12.setText(SanBootView.res.getString("EditProfileDialog.label.dbtype"));
        this.jLabel13.setText(SanBootView.res.getString("EditProfileDialog.label.instance"));
        this.jCheckBox1.setText( SanBootView.res.getString("EditProfileDialog.checkbox.mini-overload") );

        this.jButton1.setText(SanBootView.res.getString("common.button.ok") );
        this.jButton2.setText(SanBootView.res.getString("common.button.cancel") );
        this.jButton3.setText(SanBootView.res.getString("common.button.mod") );
        this.jButton4.setText(SanBootView.res.getString("common.button.mod") );
        this.jButton7.setText(SanBootView.res.getString("common.button.mod") );
        this.jRadioButton1.setText( SanBootView.res.getString("common.linear"));
        this.jRadioButton2.setText(SanBootView.res.getString("common.non-linear"));

        TitledBorder bor = (TitledBorder)jPanel9.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditProfileDialog.borderTitle.service")
        );
        bor = (TitledBorder)jPanel6.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditProfileDialog.borderTitle.selDisks")
        );

        int index = jTabbedPane1.indexOfComponent( jPanel3 );
        jTabbedPane1.setTitleAt( index,
            SanBootView.res.getString("EditProfileDialog.tabTitle.content")
        );
        index = jTabbedPane1.indexOfComponent( jPanel4 );
        jTabbedPane1.setTitleAt( index,
            SanBootView.res.getString("EditProfileDialog.tabTitle.version")
        );
        index = jTabbedPane1.indexOfComponent( jPanel5 );
        jTabbedPane1.setTitleAt( index,
            SanBootView.res.getString("EditProfileDialog.tabTitle.advOpt")
        );
    }

    private void setupDiskPane( ArrayList<PPProfileItem> elements ){
        this.model.removeAllElements();
        int size = elements.size();
        for( int i=0; i<size; i++ ){
            model.addElement( elements.get( i ) );
        }
    }

    private void setupDiskPane( PPProfileItem[] elements ){
        this.model.removeAllElements();
        for( int i=0; i<elements.length; i++ ){
            model.addElement( elements[i] );
        }
    }

    private void setupServicePane( String[] services){
        this.model1.removeAllElements();
        for( int i=0; i<services.length; i++ ){
            if( !services[i].equals("") ){
                Service serv = this.getServiceOnName( services[i] );
                if( serv != null ){
                    this.model1.addElement( serv );
                }else{
SanBootView.log.warning( getClass().getName(), "don't exist the service on host, it's name: " + services[i] );
                }
            }
        }
    }

    private void setupServicePane( Vector services ){
        this.model1.removeAllElements();
        int size = services.size();
        for( int i=0; i<size; i++ ){
            String service = (String)services.get(i);
            if( !service.equals("") ){
                Service serv = this.getServiceOnName( service );
                if( serv != null ){
                    this.model1.addElement( serv );
                }else{
SanBootView.log.warning( getClass().getName(), "don't exist the service on host, it's name: " + services );
                }
            }
        }
    }

    private MirrorGrp schInfo_mg = null;
    private void initUI( PPProfile ppprof ){
        if( ppprof == null ) return;
        this.setupDiskPane( ppprof.getElements() );

        schInfo_mg = new MirrorGrp(
            ppprof.getTemp_mg_schedule_type(),
            ppprof.getTemp_mg_schedule_minute(),
            ppprof.getTemp_mg_schedule_hour(),
            ppprof.getTemp_mg_schedule_day(),
            ppprof.getTemp_mg_schedule_month(),
            ppprof.getTemp_mg_schedule_week(),
            ppprof.getTemp_mg_schedule_clock_zone(),
            ppprof.getTemp_mg_schedule_hour1(),
            ppprof.getTemp_mg_schedule_clock_set()
        );
        if( ppprof.getTemp_mg_schedule_type() == MirrorGrp.MG_SCH_TYPE_ROTATE ){
            Integer[] itemOfinterval = MirrorGrp.getDayOfIntervalTime( ppprof.getTemp_interval_time() );
            if( itemOfinterval != null ){
                jSpinner1.setValue( itemOfinterval[2] );
                jSpinner2.setValue( itemOfinterval[1] );
                jSpinner3.setValue( itemOfinterval[0] );
            }
            this.jRadioButton1.setSelected( true );
            this.jTextArea1.setText( SanBootView.res.getString("common.nonLinearContent") );
            this.setEnableForNonLinear( false );
        }else{
            this.jTextArea1.setText( schInfo_mg.getCronSchString() );
            this.jRadioButton2.setSelected( true );
            this.setEnableForLinear( false );
        }

        jTextField4.setText( ppprof.getTemp_min_size()+"" );
        jTextField5.setText( ppprof.getTemp_max_snap()+"" );

        // 快照块大小和pool信息无需显示出来，因为不能修改
        //jLabel9.setText("");
        //jLabel11.setText("");
        //int db_type = mainDisk.getVolMap().getDBType();
        int db_type = ppprof.getTemp_db_type();
SanBootView.log.debug( getClass().getName(), " db_type: "+ db_type );
        String dbTypeStr = VolumeMap.getDbString( db_type );
        jComboBox1.setSelectedItem( dbTypeStr );
        jTextField6.setText( ppprof.getTemp_db_instance() );

        this.setupServicePane( VolumeMap.getServices( ppprof.getTemp_services() ) );

        this.jCheckBox1.setSelected( ppprof.isMiniOverloadMode() );
    }

    private void setEnableForLinear( boolean val ){
        this.jSpinner1.setEnabled( val );
        this.jSpinner2.setEnabled( val );
        this.jSpinner3.setEnabled( val );
        this.jLabel2.setEnabled( val );
        this.jLabel3.setEnabled( val );
        this.jLabel4.setEnabled( val );
    }

    private void setEnableForNonLinear( boolean val ){
        this.jTextArea1.setEnabled( val );
        this.jTextArea1.setOpaque( val );
        this.jButton3.setEnabled( val );
    }

    private void do_selRotate(){
        this.setEnableForNonLinear( false );
        this.setEnableForLinear( true );
    }

    private void do_selCron(){
        this.setEnableForLinear( false );
        this.setEnableForNonLinear( true );
    }

    private void do_editCron(){
        EditCronSchDialog dialog = new EditCronSchDialog( view,schInfo_mg );
        int width  = 525+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 490+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( view.getCenterPoint( width,height ) );
        dialog.setVisible( true );

        Object[] ret = dialog.getRetValues();
        if( ret == null ) return;

        schInfo_mg.setMg_schedule_minute( (String)ret[0] );
        schInfo_mg.setMg_schedule_hour1( (String)ret[1] );
        schInfo_mg.setMg_schedule_day( (String)ret[2] );
        schInfo_mg.setMg_schedule_month( (String)ret[3] );
        schInfo_mg.setMg_schedule_week( (String)ret[4] );
        schInfo_mg.setMg_schedule_clock_zone( (String)ret[5] );
        schInfo_mg.setMg_schedule_hour( (String)ret[6] );
        schInfo_mg.setMg_schedule_clock_set( (String)ret[7] );
        schInfo_mg.setMg_schedule_type( ((Integer)ret[8]).intValue() );

        this.jTextArea1.setText( this.schInfo_mg.getCronSchString() );
    }

    private boolean isThisDiskSelected( ArrayList<PPProfileItem> selDisks,PPProfileItem item ){
        int size = selDisks.size();
        for( int i=0; i<size; i++ ){
            PPProfileItem selItem = selDisks.get( i );
            if( selItem.getVolMap().getVolDiskLabel().equals( item.getVolMap().getVolDiskLabel() ) ) {
                return true;
            }
        }
        return false;
    }

    private ArrayList<PPProfileItem> getUnSelectedDisk( ArrayList<PPProfileItem> allDisks,ArrayList<PPProfileItem> selDisks ){
        ArrayList<PPProfileItem> unSelDisks = new ArrayList<PPProfileItem>();
        int size = allDisks.size();
        for( int i=0; i<size; i++ ){
            PPProfileItem item = allDisks.get( i );
            if( !isThisDiskSelected( selDisks, item ) ){
                unSelDisks.add( item );
            }
        }
        return unSelDisks;
    }

    private ArrayList<PPProfileItem> getSelDisksOnGUI(){
        ArrayList<PPProfileItem> selDisksOnGUI = new ArrayList<PPProfileItem>();
        int size = model.size();
        for( int i=0; i<size; i++ ){
            selDisksOnGUI.add( (PPProfileItem)model.get( i ) );
        }
        return selDisksOnGUI;
    }

    private ArrayList<Service> getSelServiceOnGUI(){
        ArrayList<Service> selServiceOnGui = new ArrayList<Service>();
        int size = model1.size();
        for( int i=0; i<size; i++ ){
            selServiceOnGui.add( (Service)model1.get(i) );
        }
        return selServiceOnGui;
    }

    private void do_ModDisk(){
        ArrayList<PPProfileItem> selDisks = this.getSelDisksOnGUI();
        ArrayList<PPProfileItem> unSelDisks = this.getUnSelectedDisk( allDisks, selDisks );

        EditVolumeDialog dialog = new EditVolumeDialog( view,selDisks,unSelDisks );
        int width  = 370+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 275+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( view.getCenterPoint( width,height ) );
        dialog.setVisible( true );

        PPProfileItem[] ret = dialog.getValues();
        if( ret == null ) return;

        this.setupDiskPane( ret );
    }

    private Service getServiceOnName( String serviceName ){
        int size = this.services.size();
        for( int i=0; i<size; i++ ){
            Service serv = (Service)this.services.get(i);
            if( serv.getServName().equals( serviceName ) ){
                return serv;
            }
        }
        return null;
    }

    private void do_ModService(){
        EditServiceDialog dialog = new EditServiceDialog( this,services,getSelServiceOnGUI() );
        int width  = 540+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 275+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( view.getCenterPoint( width,height ) );
        dialog.setVisible( true );

        Object ret = dialog.getRet();
        if( ret == null ) return;

        Vector newSelService = (Vector)ret;
        setupServicePane( newSelService );
    }

    private boolean hasSameProfile( ArrayList<PPProfileItem> selDisks ){
        ArrayList<PPProfile> ppprofList = view.initor.mdb.getPPProfile( this.ppprof.getHostID() );
        String selDiskList = PPProfile.getDiskList( selDisks );
        int size = ppprofList.size();
        for( int i=0; i<size; i++ ){
            if( selDiskList.equals( ppprofList.get(i).getDiskList() ) ){
               return true;
            }
        }
        return false;
    }

    private boolean hasContainOne( String singleDiskLabel,ArrayList<PPProfileItem> diskSet){
        int size = diskSet.size();
        for( int i=0; i<size; i++ ){
            PPProfileItem item = diskSet.get(i);
            if( item.getVolMap().getVolDiskLabel().equals( singleDiskLabel ) ){
                return true;
            }
        }
        return false;
    }

    int day;
    int hour;
    int min;
    int minSize;
    int maxSnap;
    int sch_type;
    private boolean checkValid(){
        boolean ret = true;

        if( this.jRadioButton1.isSelected() ){
            sch_type = 0;
        }else{
            if( this.jTextArea1.getText().equals( SanBootView.res.getString("common.nonLinearContent") ) ||
                this.jTextArea1.getText().equals("")
            ){
                ret = false;
                JOptionPane.showMessageDialog(this, SanBootView.res.getString("EditProfileDialog.error.emptyNonLinear") );
            }
            sch_type = schInfo_mg.getMg_schedule_type();
        }

        day  = ((Integer)jSpinner1.getValue()).intValue();
        hour = ((Integer)jSpinner2.getValue()).intValue();
        min  = ((Integer)jSpinner3.getValue()).intValue();

        String minSizeStr = jTextField4.getText().trim();
        try{
            minSize = Integer.parseInt( minSizeStr );
            if( minSize <0 || minSize >104857600 ){
                ret = false;
                JOptionPane.showMessageDialog(this, SanBootView.res.getString("EditProfileDialog.error.invalidMinSize") );
            }
        }catch(Exception ex){
            ret = false;
            JOptionPane.showMessageDialog(this, SanBootView.res.getString("EditProfileDialog.error.invalidMinSize") );
        }

        String maxSnapStr = jTextField5.getText().trim();
        try{
            maxSnap = Integer.parseInt( maxSnapStr );
            if( maxSnap <=0 || maxSnap > ResourceCenter.MAX_SNAP_CMDP_NUM ){
                ret = false;
                JOptionPane.showMessageDialog(this, SanBootView.res.getString("EditProfileDialog.error.invalidMaxSnap")+ResourceCenter.MAX_SNAP_CMDP_NUM );
            }
        }catch(Exception ex){
            ret = false;
            JOptionPane.showMessageDialog(this, SanBootView.res.getString("EditProfileDialog.error.invalidMaxSnap")+ResourceCenter.MAX_SNAP_CMDP_NUM );
        }

        // 检查磁盘组成是否有冲突
        ArrayList<PPProfileItem> selDisks = this.getSelDisksOnGUI();
        int orgDiskNum = this.ppprof.getDiskSize();
        int selDiskNum = selDisks.size();

        if( ( orgDiskNum == 1) && ( selDiskNum > 1 ) ){ // single disk ===> drivegroup
            if( !hasContainOne( ppprof.getMainDiskItem().getVolMap().getVolDiskLabel(),selDisks ) ){
                if( this.hasSameProfile( selDisks ) ){
                    JOptionPane.showMessageDialog( this,SanBootView.res.getString("EditProfileDialog.error.hasOverlap"));
                    ret = false;
                }
            }
        }else if( ( orgDiskNum == 1 ) && ( selDiskNum ==1 ) ) { // single disk === > single disk
            if( !this.ppprof.getDiskList().equals( PPProfile.getDiskList( selDisks ) ) ){
                if( this.hasSameProfile( selDisks ) ){
                    // 存在一个内容和selDisks一样的profile
                    JOptionPane.showMessageDialog( this,SanBootView.res.getString("EditProfileDialog.error.hasOverlap"));
                    ret = false;
                }
            }
        }else if( ( orgDiskNum >1 ) && ( selDiskNum ==1 ) ) { // drivegroup ===> single disk
            if( !this.hasContainOne( selDisks.get(0).getVolMap().getVolDiskLabel(), this.ppprof.getElements() ) ){
                if( this.hasSameProfile( selDisks ) ){
                    // 存在一个内容和selDisks一样的profile
                    JOptionPane.showMessageDialog( this,SanBootView.res.getString("EditProfileDialog.error.hasOverlap"));
                    ret = false;
                }
            }
        }else{ // drivegroup ====> drivegroup
            if( !this.ppprof.getDiskList().equals( PPProfile.getDiskList( selDisks ) ) ){
                if( this.hasSameProfile( selDisks ) ){
                    // 存在一个内容和selDisks一样的profile
                    JOptionPane.showMessageDialog( this,SanBootView.res.getString("EditProfileDialog.error.hasOverlap"));
                    ret = false;
                }
            }
        }

        return ret;
    }

    public void ok_btnProcess(){
        if( !this.checkValid() ) return;

        ArrayList<PPProfileItem> selDisks = this.getSelDisksOnGUI();
        int db_type = VolumeMap.getDbType( (String)jComboBox1.getSelectedItem() );
        String instances = "";
        if( db_type != VolumeMap.CMDP_DB_TYPE_NONE ) {
            instances = this.jTextField6.getText().trim();
        }
        ArrayList<Service> selServices = this.getSelServiceOnGUI();
        this.dispose();

        // 在内存中修改prof即可，不进行真正的修改
        EditPPProfileWhenInit editActor = new EditPPProfileWhenInit(
            this.ppprof,
            selDisks,
            this.sch_type,
            this.day,
            this.hour,
            this.min,
            this.schInfo_mg,
            this.minSize,
            this.maxSnap,
            db_type,
            instances,
            selServices,
            this.curProfList,
            this.allDisks,
            this.jCheckBox1.isSelected()
        );

        if( !editActor.realRun() ){
            JOptionPane.showMessageDialog( this,editActor.getErrMsg() );
        }
    }
}
