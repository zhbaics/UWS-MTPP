/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditCronSchDialog.java
 *
 * Created on 2010-12-15, 13:06:44
 */

package guisanboot.cmdp.ui;

import guisanboot.data.MirrorGrp;
import guisanboot.datadup.data.Clock;
import guisanboot.datadup.data.CronSchedule;
import guisanboot.datadup.ui.MonthlyPane;
import guisanboot.datadup.ui.SchedDialog;
import guisanboot.datadup.ui.WeeklyPane;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.SanBootView;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.TitledBorder;

/**
 *
 * @author zjj
 */
public class EditCronSchDialog extends javax.swing.JDialog {

    /** Creates new form EditCronSchDialog */
    public EditCronSchDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public EditCronSchDialog( SanBootView view,MirrorGrp mg ){
        this( view,true );
        myInit( mg );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jRadioButton6 = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel10 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Occur Freq"));
        jPanel7.setPreferredSize(new java.awt.Dimension(80, 10));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jRadioButton3.setText("Daily");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel7.add(jRadioButton3, gridBagConstraints);

        jRadioButton4.setText("Weekly");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel7.add(jRadioButton4, gridBagConstraints);

        jRadioButton5.setText("Monthly");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel7.add(jRadioButton5, gridBagConstraints);

        jPanel5.add(jPanel7, java.awt.BorderLayout.WEST);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel8.setLayout(new java.awt.BorderLayout());
        jPanel5.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Daily Freq"));
        jPanel6.setPreferredSize(new java.awt.Dimension(10, 315));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jRadioButton1.setText("Once Occur");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("Freq Occur");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jRadioButton2, gridBagConstraints);

        jLabel3.setText("Hour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel6.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Minute");
        jLabel4.setPreferredSize(new java.awt.Dimension(150, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel6.add(jLabel4, gridBagConstraints);

        jComboBox5.setPreferredSize(new java.awt.Dimension(29, 22));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel6.add(jComboBox5, gridBagConstraints);

        jPanel3.setPreferredSize(new java.awt.Dimension(26, 100));
        jPanel3.setLayout(null);

        jCheckBox1.setText("Time Zone");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox1);
        jCheckBox1.setBounds(10, 0, 89, 25);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("aaa"));
        jPanel4.setPreferredSize(new java.awt.Dimension(360, 90));
        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jPanel4);
        jPanel4.setBounds(0, 0, 360, 90);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jPanel3, gridBagConstraints);

        jSpinner1.setPreferredSize(new java.awt.Dimension(35, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jSpinner1, gridBagConstraints);

        jSpinner2.setPreferredSize(new java.awt.Dimension(40, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jSpinner2, gridBagConstraints);

        jSpinner3.setPreferredSize(new java.awt.Dimension(50, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jSpinner3, gridBagConstraints);

        jRadioButton6.setText("Multi Occur");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jRadioButton6, gridBagConstraints);

        jPanel9.setPreferredSize(new java.awt.Dimension(10, 100));
        jPanel9.setLayout(new java.awt.BorderLayout());
        jPanel9.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel10.setLayout(new java.awt.GridBagLayout());

        jButton3.setText("Add");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel10.add(jButton3, gridBagConstraints);

        jButton4.setText("Modify");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 0, 0);
        jPanel10.add(jButton4, gridBagConstraints);

        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 0, 0);
        jPanel10.add(jButton5, gridBagConstraints);

        jPanel9.add(jPanel10, java.awt.BorderLayout.EAST);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jPanel9, gridBagConstraints);

        jPanel1.add(jPanel6, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        dailyRadioButton_actionPerformed();
}//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        weeklyRadioButton_actionPerformed();
}//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        monthlyRadioButton_actionPerformed();
}//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        onceOccurRadioButton_actionPerformed( evt );
}//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        freqOccurRadioButton_actionPerformed( evt );
}//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        unitComboBox_actionPerformed( evt );
}//GEN-LAST:event_jComboBox5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        values = null;
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        do_okButton();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        do_clockZoneControl();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        add_clock();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        mod_clock();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        del_clock();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        // TODO add your handling code here:
        multiOccurRadioButton_actionPerformed( evt );
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EditCronSchDialog dialog = new EditCronSchDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    // End of variables declaration//GEN-END:variables

    MirrorGrp mg;
    ButtonGroup group1 = new ButtonGroup();
    ButtonGroup group2 = new ButtonGroup();

    MonthlyPane monthPane = new MonthlyPane();
    WeeklyPane weekPane = new WeeklyPane();
    ClockPane clockPane = new ClockPane();

    private DefaultListModel clockModel = new DefaultListModel();
    private JList clock_list = new JList( clockModel );
    
    Object[] values;

    private void myInit( MirrorGrp mg ){
        this.mg = mg;
        jPanel4.add( clockPane, BorderLayout.CENTER );
        
        group1.add( jRadioButton1 );
        group1.add( jRadioButton2 );
        group1.add( jRadioButton6 );
        group2.add( jRadioButton3 );
        group2.add( jRadioButton4 );
        group2.add( jRadioButton5 );
        this.jScrollPane1.getViewport().setBackground( Color.WHITE );
        this.jScrollPane1.getViewport().add( this.clock_list );
        this.clock_list.setCellRenderer( new ClockRenderer() );
        
        this.setupTime();
        this.setupLanguage();
        this.setupDefault();
    }
    
    private void setupLanguage(){
        setTitle( SanBootView.res.getString("SchedDialog.dialogTitle1"));
        ((TitledBorder)jPanel7.getBorder()).setTitle(
            SanBootView.res.getString("SchedDialog.borderTitle.frequence")
        );
        ((TitledBorder)jPanel6.getBorder()).setTitle(
            SanBootView.res.getString("SchedDialog.borderTitle.dailyfreq")
        );
        jButton2.setText( SanBootView.res.getString("common.button.cancel"));
        jButton1.setText( SanBootView.res.getString("common.button.ok"));
        jButton3.setText( SanBootView.res.getString("common.button.add1"));
        jButton4.setText( SanBootView.res.getString("common.button.mod1"));
        jButton5.setText( SanBootView.res.getString("common.button.del"));
        jLabel3.setText( SanBootView.res.getString("SchedDialog.label.hour"));
        jLabel4.setText( SanBootView.res.getString("SchedDialog.label.min"));
        jRadioButton6.setText( SanBootView.res.getString("SchedDialog.radioButton.multiOccur"));
        jRadioButton5.setText( SanBootView.res.getString("SchedDialog.radioButton.monthly"));
        jRadioButton4.setText( SanBootView.res.getString("SchedDialog.radioButton.weekly"));
        jRadioButton3.setText(SanBootView.res.getString("SchedDialog.radioButton.daily"));
        jRadioButton1.setText( SanBootView.res.getString("SchedDialog.radioButton.onceOccur"));
        jRadioButton2.setText( SanBootView.res.getString("SchedDialog.radioButton.freqOccur"));
        this.jCheckBox1.setText( SanBootView.res.getString("common.clockzone"));
    }
    
    private void setupDefault(){
        if( mg == null ){ // new a scheduler
            jRadioButton3.setSelected( true );
            ((TitledBorder)jPanel8.getBorder()).setTitle(
                SanBootView.res.getString("SchedDialog.borderTitle.daily")
            );
            jRadioButton1.setSelected( true );
            enableFreqOccurAt( false );
        }else{  // modify a scheduler
            initCronScheduler( mg );
        }
    }

    private void initCronScheduler( MirrorGrp mg ) {
        String time = mg.getTimeStr();

        int type = CronSchedule.getCronSchedulerType( time );
        if( type == CronSchedule.TYPE_DAILY ){
            jRadioButton3.setSelected( true );
            ((TitledBorder)jPanel8.getBorder()).setTitle(
                SanBootView.res.getString("SchedDialog.borderTitle.daily")
            );
        }else if( type == CronSchedule.TYPE_MONTHLY ){
            jRadioButton5.setSelected( true );
            monthlyRadioButton_actionPerformed();
            Vector mlist = mg.getMonthdayList();
            monthPane.initMonthPane( mlist );
        }else {
            jRadioButton4.setSelected( true );
            weeklyRadioButton_actionPerformed();
            Vector dlist = mg.getWeekdayList();
            weekPane.initWeekPane( dlist );
        }
        
        if( mg.isCronType() || mg.isRotateType() ){
            // mg原来的调度为rotate，也归在这种情况下
            type = CronSchedule.getDailyFreqOfCronScheduler( time );
            if( type == CronSchedule.TYPE_DAILY_FREQ ){
                jRadioButton2.setSelected( true );
                enableOnceOccurAt( false );
                this.enableMultiOccurAt( false );
                this.enableFreqOccurAt( true );

                type = CronSchedule.getDailyFreqOccurType( time );
                if( type == CronSchedule.TYPE_DAILY_HOUR_OCR ){
                    jComboBox5.setSelectedItem(
                        SanBootView.res.getString(SchedDialog.TIME_UNIT_HOUR)
                    );
                    jSpinner3.setValue( mg.getHourFreqVal() );
                }else{
                    jComboBox5.setSelectedItem(
                        SanBootView.res.getString(SchedDialog.TIME_UNIT_MIN)
                    );
                    jSpinner3.setValue( mg.getMinuteFreqVal() );
                }

                if( mg.hasClockZone() ){
                    jCheckBox1.setSelected( true );
                    this.clockPane.enableOwn( true );
                    Vector clist = mg.getClockZoneList();
                    this.clockPane.initClockPane( clist );
                }else{
                    jCheckBox1.setSelected( false );
                    this.clockPane.enableOwn( false );
                }
            }else{
                jRadioButton1.setSelected( true );
                enableFreqOccurAt( false );
                this.enableMultiOccurAt( false );
                this.enableOnceOccurAt( true );
                jSpinner1.setValue( mg.getIntMg_schedule_hour1() );
                jSpinner2.setValue( mg.getIntMg_schedule_minute() );
            }
        }else{ // multi occur type
            jRadioButton6.setSelected( true );
            enableOnceOccurAt( false );
            this.enableFreqOccurAt( false );
            this.enableMultiOccurAt( true );

            ArrayList<Clock> clockList = mg.getMultiClock();
            int size = clockList.size();
            for( int i=0; i<size; i++ ){
                this.clockModel.addElement( clockList.get(i) );
            }
        }
    }

    private void setupTime(){
        this.jSpinner1.setModel( new SpinnerNumberModel( 0,0,23,1 ) );
        this.jSpinner2.setModel(new SpinnerNumberModel( 0,0,59,1) );
        jComboBox5.addItem(
            SanBootView.res.getString(SchedDialog.TIME_UNIT_HOUR)
        );
        jComboBox5.addItem(
            SanBootView.res.getString(SchedDialog.TIME_UNIT_MIN)
        );
    }

    void dailyRadioButton_actionPerformed() {
        jPanel8.removeAll();
        ((TitledBorder)jPanel8.getBorder()).setTitle(
                SanBootView.res.getString("SchedDialog.borderTitle.daily")
        );
        jPanel8.validate();
        jPanel8.repaint();
    }

    void weeklyRadioButton_actionPerformed() {
        jPanel8.removeAll();
        ((TitledBorder)jPanel8.getBorder()).setTitle(
            SanBootView.res.getString("SchedDialog.borderTitle.weekly")
        );
        jPanel8.add(weekPane,BorderLayout.CENTER);
        jPanel8.validate();
        jPanel8.repaint();
    }

    void monthlyRadioButton_actionPerformed() {
        jPanel8.removeAll();
        ((TitledBorder)jPanel8.getBorder()).setTitle(
            SanBootView.res.getString("SchedDialog.borderTitle.monthly")
        );
        jPanel8.add( monthPane,BorderLayout.CENTER );
        jPanel8.validate();
        jPanel8.repaint();
    }

    private void enableFreqPane(boolean val ){
        this.enableFreqTypePane( val );

        if (jPanel8.getComponentCount() >0 ){
            Component com = jPanel8.getComponent(0);
            if( com instanceof MonthlyPane ){
                monthPane.enableMonthlyPane( val );
            }else if ( com instanceof WeeklyPane ){
                weekPane.enableOwn( val );
            }
        }

        enableDailyFreqPane( val );
    }

    private void enableFreqTypePane(boolean val ){
        jRadioButton3.setEnabled( val );
        jRadioButton4.setEnabled( val );
        jRadioButton5.setEnabled( val );
    }

    private void enableDailyFreqPane(boolean val ){
        jRadioButton2.setEnabled( val );
        jRadioButton1.setEnabled( val );
        enableFreqOccurAt( val );
        enableOnceOccurAt( val );
        if( val ){
            if( jRadioButton2.isSelected() ){
                enableOnceOccurAt( false);
            }else{
                enableFreqOccurAt( false);
            }
        }
    }

    void onceOccurRadioButton_actionPerformed(ActionEvent e) {
        this.enableMultiOccurAt( false );
        enableFreqOccurAt( false );
        enableOnceOccurAt( true );
        
        this.clockPane.enableOwn( false );
        this.jCheckBox1.setEnabled( false );
    }

    void multiOccurRadioButton_actionPerformed( ActionEvent e ){
        enableFreqOccurAt( false );
        this.enableOnceOccurAt( false );
        this.enableMultiOccurAt( true );

        this.clockPane.enableOwn( false );
        this.jCheckBox1.setEnabled( false );
    }

    private void enableOnceOccurAt(boolean val ){
        jSpinner1.setEnabled( val );
        jSpinner2.setEnabled( val );
        this.jLabel3.setEnabled( val );
        this.jLabel4.setEnabled( val );
    }
    
    private void enableMultiOccurAt( boolean val ){
        this.clock_list.setEnabled( val );
        this.jButton3.setEnabled( val );
        this.jButton4.setEnabled( val );
        this.jButton5.setEnabled( val );
    }
    
    private void enableFreqOccurAt(boolean val){
        jSpinner3.setEnabled( val );
        jComboBox5.setEnabled( val );
        this.jCheckBox1.setEnabled( val );
        do_clockZoneControl();
    }

    void freqOccurRadioButton_actionPerformed(ActionEvent e) {
        this.enableMultiOccurAt( false );
        this.enableOnceOccurAt( false );
        this.enableFreqOccurAt( true);
    }

    void unitComboBox_actionPerformed(ActionEvent e) {
        String unit = (String)jComboBox5.getSelectedItem();
        if( unit.equals( SanBootView.res.getString( SchedDialog.TIME_UNIT_HOUR ) ) ){
            jSpinner3.setModel( new SpinnerNumberModel(1,1,23,1) );
        }else{
            jSpinner3.setModel( new SpinnerNumberModel(1,1,59,1) );
        }
    }

    private void do_clockZoneControl(){
        this.clockPane.enableOwn( this.jCheckBox1.isSelected() );
    }

    private void add_clock(){
        this.do_what = 0;
        EditClockDialog dialog = new EditClockDialog( this,null );
        int width  = 280+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 110+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( getCenterPoint( width,height ) );
        dialog.setVisible( true );

        Object[] ret = dialog.getRetValue();
        if( ret == null ) return;
        
        Clock clock = new Clock();
        clock.setHour( (String)ret[0] );
        clock.setMin( (String)ret[1]);
        this.clockModel.addElement( clock );
    }

    public boolean isSameClock( Clock cl ){
        int size = this.clockModel.size();
        for( int i=0; i<size; i++ ){
            Clock one = (Clock)clockModel.getElementAt(i);
            if( this.do_what == 0 ){
                if( one.isSame( cl ) ){
                    return true;
                }
            }else{
                if( i != this.selectLine ){
                    if( one.isSame( cl ) ){
                        return true;
                    }
                }
            }
        }
        return false;
    }

    int selectLine = 0;
    int do_what = 0; // 0: add 1:mod 2:del
    private void mod_clock(){
        selectLine = this.clock_list.getSelectedIndex();
        if( selectLine < 0 ){
            JOptionPane.showMessageDialog( this,SanBootView.res.getString("SchedDialog.errmsg.noSelClock1") );
            return;
        }
        Clock selClock = (Clock)this.clockModel.getElementAt( selectLine );
        do_what = 1;

        EditClockDialog dialog = new EditClockDialog( this,selClock );
        int width  = 280+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 110+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( getCenterPoint( width,height ) );
        dialog.setVisible( true );

        Object[] ret = dialog.getRetValue();
        if( ret == null ) return;
        
        Clock clock = new Clock();
        clock.setHour( (String)ret[0] );
        clock.setMin( (String)ret[1]);
        this.clockModel.setElementAt( clock, selectLine );
    }

    private void del_clock(){
        selectLine = this.clock_list.getSelectedIndex();
        if( selectLine < 0 ){
            JOptionPane.showMessageDialog( this,SanBootView.res.getString("SchedDialog.errmsg.noSelClock1") );
            return;
        }
        this.do_what = 2;

        this.clockModel.remove( selectLine );
    }
    
    private void do_okButton(){
        String minute="*",hour1="*";
        String clock_set="";
        int sch_type = 1;

        Object[] info = getDailyFreqInfo();
        if( info[0] instanceof String ){ // once occur or daily freq
            minute = (String)info[0];
            hour1  = (String)info[1];
            try{
                sch_type = Integer.parseInt( (String)info[2] );
            }catch(Exception ex){}
        }else{  // multi occur
            boolean isFirst = true;
            StringBuffer buf = new StringBuffer();
            for( int i=0; i<info.length-1; i++ ){
                if( isFirst ){
                    buf.append( ((Clock)info[i]).toString() );
                    isFirst = false;
                }else{
                    buf.append(";");
                    buf.append( ((Clock)info[i]).toString() );
                }
            }
            clock_set = buf.toString();
            try{
                sch_type = Integer.parseInt( (String)info[info.length-1] );
            }catch(Exception ex){}
        }
        
        String daymonth = "";
        String month = "";
        String dayweek = "";
        String clock_zone = "";
        if( jRadioButton3.isSelected() ){ // daily freq
            daymonth = "*"; // 天/月
            month = "*";    // 月
            dayweek = "*";  // 天/周
        }else if ( jRadioButton4.isSelected() ){  // weekly freq
            daymonth = "*";
            month = "*";
            dayweek = this.weekPane.getInfo();
            if( dayweek.equals("")){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SchedDialog.errmsg.noDayofWeek")
                );
                return;
            }
        }else{  // monthly freq
            daymonth = this.monthPane.getInfo();
            if( daymonth.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SchedDialog.errmsg.noDayofMonth")
                );
                return;
            }
            month = "*";
            dayweek = "*";
        }

        if( this.jCheckBox1.isSelected() ){
            clock_zone = this.clockPane.getInfo();
            if( clock_zone.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SchedDialog.errmsg.noSelClock")
                );
                return;
            }
        }
        
        values = new Object[9];
        values[0] = minute;
        values[1] = hour1;
        values[2] = daymonth;
        values[3] = month;
        values[4] = dayweek;
        values[5] = clock_zone;
        values[6] = this.getRealSchHour( hour1,clock_zone );  // 结合clock_zone和hour1重新生成
        values[7] = clock_set;
        values[8] = new Integer( sch_type );
        
        this.dispose();
    }

    private Object[] getDailyFreqInfo(){
        Object[] aValues;

        if( jRadioButton1.isSelected() ){ // once occur
            aValues = new String[3];
            aValues[0] = jSpinner2.getValue().toString(); // 分
            aValues[1] = jSpinner1.getValue().toString(); // 钟
            aValues[2] = "1";
        }else if( this.jRadioButton6.isSelected() ){ // multi occur
            int size = this.clockModel.size();
            aValues = new Object[size+1];
            for( int i=0; i<size; i++ ){
                aValues[i] = clockModel.getElementAt(i);
            }
            aValues[size] = "2";
        }else{ // 每日周期发生
            aValues = new String[3];
            Integer num  = (Integer)jSpinner3.getValue();
            String unit = (String)jComboBox5.getSelectedItem();
            if( unit.equals( SanBootView.res.getString(SchedDialog.TIME_UNIT_HOUR))){
                aValues[0] = "0";
                if( num.intValue() == 1 ){
                    aValues[1] = "*";
                }else{
                    // 每num小时发生一次
                    aValues[1] = getHourFreq( num.intValue() );
                }
            }else{
                if( num.intValue() == 1  ){
                    aValues[0] = "*";
                }else{
                    // 每num分钟发生一次
                    aValues[0] = getMinuteFreq( num.intValue() );
                }
                aValues[1] = "*";
            }
            aValues[2] = "1";
        }

        return aValues;
    }

    private String getHourFreq(int step){
        String ret="";
        boolean isFirst = true;

        for(int i=0;i<24;i+=step){
            if( isFirst ){
                ret = i+"";
                isFirst = false;
            }else{
                ret += ","+i;
            }
        }
        return ret;
    }

    private String getMinuteFreq(int step){
        String ret="";
        boolean isFirst = true;

        for(int i=0;i<60;i+=step){
            if( isFirst ){
                ret = i+"";
                isFirst = false;
            }else{
                ret += ","+i;
            }
        }

        return ret;
    }

    private String getRealSchHour( String hour1,String clock_zone ){
        StringBuffer buf = new StringBuffer();
        boolean isFirst = true;

        if( hour1.indexOf(",") <= 0 ){
            if( hour1.equals("*") ){
                if( clock_zone.equals("") ){
                    buf.append("*");
                }else{
                    buf.append( clock_zone );
                }
            }else{
                buf.append( hour1 );
            }
        }else{
            if( clock_zone.equals("") ){
                buf.append( hour1 );
            }else{
                String[] list = Pattern.compile(",").split( hour1 );
                for( int i=0; i<list.length; i++ ){
                    try{
                        int clock = Integer.parseInt( list[i] );
                        if( isValidHour( clock,clock_zone ) ){
                            if( isFirst ){
                                buf.append( ""+clock );
                                isFirst = false;
                            }else{
                                buf.append(",");
                                buf.append( clock );
                            }
                        }

                    }catch(Exception ex){}
                }
            }
        }
        return buf.toString();
    }

    private boolean isValidHour( int clock,String clock_zone ){
        String[] list = Pattern.compile(",").split( clock_zone );
        for( int i=0; i<list.length; i++ ){
            try{
                int valid_clock = Integer.parseInt( list[i] );
                if( valid_clock == clock ){
                    return true;
                }
            }catch(Exception ex){
            }
        }
        return false;
    }

    public Object[] getRetValues(){
        return this.values;
    }

    public Point getCenterPoint(int width,int height){
        int x = ( getSize().width - width ) / 2 + getX();
        int y = ( getSize().height - height ) / 2 + getY();
        return new Point(x,y);
    }
}


class ClockRenderer extends DefaultListCellRenderer{
    @Override public Component getListCellRendererComponent( JList list,
                                             Object value,
                                             int index,
                                             boolean isSelected,
                                             boolean cellHasFocus){
        super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
        if( value != null ){
            setIcon( ResourceCenter.SMALL_SCH );
            this.setFont( new java.awt.Font("Dialog", 1, 15 ) );
            this.setText( ((Clock)value).toString() );
        }
        return this;
    }
}