/*
 * PhyRestoreOriginalDiskWizardDialog.java
 *
 * Created on 2010/07/06,�PM 14:49
 */

package guisanboot.cmdp.ui;

import guisanboot.MenuAndBtnCenterForMainUi;
import guisanboot.audit.data.Audit;
import javax.swing.*;
import java.util.*;
import java.io.*;
import guisanboot.ui.*;
import guisanboot.data.*;
import guisanboot.res.*;
import guisanboot.cmdp.entity.PPProfile;
import guisanboot.cmdp.entity.ServicesOnVolume;
import guisanboot.cmdp.service.GetBuildProgress;
import guisanboot.datadup.cmd.RunBackup;
import guisanboot.datadup.data.BackupClient;
import guisanboot.datadup.data.UniProBackup;
import guisanboot.datadup.data.UniProDrive;
import guisanboot.datadup.data.UniProHeader;
import guisanboot.datadup.data.UniProIBoot;
import guisanboot.datadup.data.UniProIdentity;
import guisanboot.datadup.data.UniProfile;
import guisanboot.datadup.ui.GetDataDupProcess;

/**
 *
 * @author  Administrator
 */
public class PhyRestoreOriginalDiskWizardDialog extends WizardDialogSample implements RecordUWSRptable,RestoreOrigiDiskable,RestoreOriginalDiskInterface{
    ActModePaneForRestWinOrgDisk actModePane;
    DefineRstRelationshipPane definePane;
    SelectRestoreDiskPane selectRestDiskPane;
    SelectSnapshotPane selectSnapshotPane;
    InputSnapshotCmdPane inputSnapCmdPane;
    RunningTaskForRestoreLocalDisk runPane;
    
    String fWindir;
    SanBootView view;
    DestAgent host = null;
    String targetSrvName;
    Vector sysPartList;
    boolean needModUUID;
    boolean isSwitchDisk;   // 是否进行网络盘切换对应的源盘恢复
    ArrayList<ServicesOnVolume> service_list;

    Vector volList = null;
    Vector partList = null;
    ArrayList oldDiskPartList = null;
    ArrayList newDiskPartList = null;
    HashMap rstMapperList = null;
    
    /** Creates new form PhyRestoreOriginalDiskWizardDialog */
    public PhyRestoreOriginalDiskWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public PhyRestoreOriginalDiskWizardDialog(
        String windir,SanBootView view,
        DestAgent host,String targetSrvName,
        Vector sysPartList,
        boolean needModUUID,
        boolean isSwitchDisk,
        ArrayList<ServicesOnVolume> service_list
    ){
        super( view );
        myInit( windir,view,host,targetSrvName,sysPartList,needModUUID,isSwitchDisk,service_list );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitBootHostWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private void myInit( String windir,SanBootView _view,DestAgent _host,
            String _targetSrvName,Vector sysPartList,boolean needModUUID,boolean isSwitchDisk,
            ArrayList<ServicesOnVolume> list
    ){
        fWindir = windir;
        view = _view;
        host = _host;
        targetSrvName = _targetSrvName;
        this.sysPartList = sysPartList;
        this.needModUUID = needModUUID;
        this.isSwitchDisk = isSwitchDisk;
        this.service_list = list;
        
        
        setTitle( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
        enableBackButton( false );
        
        setWizardTipText( 
            SanBootView.res.getString( "WizardDialogSample.wizardText"),
            SanBootView.res.getString( "RestoreOriginalDiskWizardDialog.wizardText1" ) 
        );
        
        setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
        
        actModePane = new ActModePaneForRestWinOrgDisk( view );
        definePane = new DefineRstRelationshipPane( view );
        selectRestDiskPane = new SelectRestoreDiskPane( view,host,this,ResourceCenter.CMD_TYPE_CMDP );
        inputSnapCmdPane = new InputSnapshotCmdPane( view );
        selectSnapshotPane = new SelectSnapshotPane( view ,ResourceCenter.CMD_TYPE_CMDP );
        BootHost bhost = view.initor.mdb.getBootHostFromVector( host.getID() );
        selectSnapshotPane.setHost( bhost );
        runPane = new RunningTaskForRestoreLocalDisk( view,host ); 
    }

    @Override public void backButtonProcess(){ 
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1").trim() ) == 0 ){
            enableBackButton( false );
            removeCenterPane();
            addImagePaneOntoCenterPane();
            addWizardTipTextPane();
            setWizardTipText(
                SanBootView.res.getString("WizardDialogSample.wizardText"),
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.wizardText1")
            );
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2").trim() ) == 0 ){     
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1") );
            removePaneFromContentPane( definePane );
            addPaneOntoContentPane( actModePane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3").trim() ) == 0 ){
            removePaneFromContentPane( selectRestDiskPane );
            if( useOldRstMap ){
                enableBackButton( false );
                removeCenterPane();
                addImagePaneOntoCenterPane();
                addWizardTipTextPane();
                setWizardTipText(
                    SanBootView.res.getString("WizardDialogSample.wizardText"),
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.wizardText1")
                );
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
                refreshCenterPane();
                return;
            }else{
                if( actModePane.isAutoRst() ){
                    setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2") );
                    addPaneOntoContentPane( definePane );
                }else{
                    setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1") );
                    addPaneOntoContentPane(  actModePane );
                }
            }
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4").trim() ) == 0 ){     
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
            removePaneFromContentPane( inputSnapCmdPane );
            addPaneOntoContentPane( selectRestDiskPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4-1").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
            removePaneFromContentPane( selectSnapshotPane );
            addPaneOntoContentPane( selectRestDiskPane );
            refreshCenterPane();
            return;
        }
    }
    
    boolean isFirst = true;
    boolean isFirst1 = true;
    boolean useOldRstMap = false;
    JPanel pane = null;
    String title = null;
    BootVerList oldBootVerList; 
    @Override public void nextButtonProcess(){
        boolean isOk;
        int ret;
        Vector rstList1;
        Vector bindList = null;
        Hashtable rstList;
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1").trim() ) == 0 ){      
            if( actModePane.isAutoRst() ){ // 自动分区及格式化
                if( oldDiskPartList == null ){
                    isOk = view.initor.mdb.getOldDiskPartitionTableForWin( host.getOldDiskConfAbsPath() ); 
                    if( isOk ){
                        oldDiskPartList = view.initor.mdb.getAllOldDiskPartList();
                        if( oldDiskPartList.size() == 0 ){
                            oldDiskPartList = null;
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getOldDiskInfo")
                            );
                            return;
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getOldDiskInfo")+" : "+
                                view.initor.mdb.getErrorMessage()
                        );
                        return;
                    }
                }
                
                if( newDiskPartList == null ){
                    isOk = view.initor.mdb.getNewDiskPartitionTableForWin( host.getIP(),host.getPort(),"ib_save_partition.exe -list_local",ResourceCenter.CMD_TYPE_CMDP );
                    if( isOk ){
                        newDiskPartList = view.initor.mdb.getAllNewDiskPartList();
                        if( newDiskPartList.size() == 0 ){
                            newDiskPartList = null;
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getNewDiskInfo")
                            );
                            return;
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getNewDiskInfo")+" : "+
                                view.initor.mdb.getErrorMessage()
                        );
                        return;
                    }
                }
                
                if( isFirst ){
                    definePane.setupTable( oldDiskPartList,newDiskPartList );
                    isFirst = false;
                }
                removePaneFromContentPane( actModePane );
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2") );
                addPaneOntoContentPane( definePane );
            }else{ // manually create partitions
                removePaneFromContentPane( actModePane );
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
                addPaneOntoContentPane( selectRestDiskPane );
            }
            
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2").trim() ) == 0 ){
            definePane.fireEditingStopMsg();
            
            if( !definePane.hasRestoreDisk() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRstDisk")
                );
                return ;
            }
            
            // 不检查是否恢复了含有操作系统分区的旧磁盘
            
            if( !definePane.checkVolInfoValidity() ){
                return;
            }
            
            if( definePane.hasNoSeledDisk() ){
                ret = JOptionPane.showConfirmDialog(
                    view,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.confirm1"),
                    SanBootView.res.getString("common.confirm"),  //"Confirm",
                    JOptionPane.OK_CANCEL_OPTION
                );
                if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                    return;
                }
            } 
            
            ret = JOptionPane.showConfirmDialog(
                view,
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.confirm2"),
                SanBootView.res.getString("common.confirm"),  //"Confirm",
                JOptionPane.OK_CANCEL_OPTION
            );
            if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                return;
            }
            
            // 开始分区并格式化新磁盘
            InitProgramDialog initDiag = new InitProgramDialog( 
                view,
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTitle.rst"),
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTip.rst")
            );
            
            RestoreNewDiskThread rstNewDisk = new RestoreNewDiskThread( this, view,definePane.getDiskInfo(),host,ResourceCenter.CMD_TYPE_CMDP );
            Thread initThread = new Thread( new LaunchSomething( initDiag,rstNewDisk ) );
            initThread.start();
            
            int width  = 300+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 120+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            initDiag.setSize( width, height );
            initDiag.setLocation( view.getCenterPoint(width,height) ); 
            initDiag.setVisible( true );
            
            if( !rstNewDisk.isSuccessfully() ){
                return;
            }
            
            removePaneFromContentPane( definePane );
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
            HashMap map = rstNewDisk.getRstMapper();
            selectRestDiskPane.updateDest( map );  // 根据自动格式化的结果，更新“恢复目的”列
            addPaneOntoContentPane( selectRestDiskPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3").trim() ) == 0 ){      
            selectRestDiskPane.fireEditingStopMsg();

            // 检查恢复次序是否合适
            PPProfile prof = selectRestDiskPane.checkSeqValid();
            if( prof != null ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.belongDG") + "  " + prof.getDiskList()
                );
                return;
            }

            if( !this.isSwitchDisk ){
                if( !selectRestDiskPane.isOSDiskSelected() ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noneOSDisk")
                    );
                    return ;
                }
            }
            
            if( !selectRestDiskPane.hasRestoredDisk() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRestoredDisk")
                );
                return ;
            }
            
            // 检查恢复的"源"和"目的"的有效性（一定要加入对整盘容量的判断）
            if( !selectRestDiskPane.checkVolInfoValidity() ){
                return;
            }

            if( selectRestDiskPane.isInputSnapCmd() ){
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4") );
                removePaneFromContentPane( selectRestDiskPane );
                rstList = selectRestDiskPane.getSelectedVolume1();
                inputSnapCmdPane.updateGUI( rstList );
                addPaneOntoContentPane( inputSnapCmdPane );
                refreshCenterPane();
                return;
            }else if( selectRestDiskPane.isSelectSnapshot() ) {
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4-1") );
                removePaneFromContentPane( selectRestDiskPane );
                // 正在准备快照版本
                    ProgressDialog initDiag = new ProgressDialog(
                        view,
                        SanBootView.res.getString("View.pdiagTitle.getSnapVer"),
                        SanBootView.res.getString("View.pdiagTip.getSnapVer")
                    );

                    GetRstVersion getRstVer = new GetRstVersion( initDiag,view,host.getID(),true,true );
                    getRstVer.start();
                    initDiag.mySetSize();
                    initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                    initDiag.setVisible( true );

                    bindList = getRstVer.getBindList();
                    Vector osBindList = new Vector<BindofVolAndSnap>();
                    for( int i = 0 ; i < bindList.size() ; i++ ){
                        BindofVolAndSnap obj = (BindofVolAndSnap)bindList.get(i);
                        if( obj.getVolMap().isOsVolMap() ){
                            osBindList.add(obj);
                        }
                    }
                    
                    oldBootVerList = view.getBootVer( host.getID() );
                selectSnapshotPane.setupTable(osBindList ,oldBootVerList.bootVerList);
                addPaneOntoContentPane( selectSnapshotPane );
                refreshCenterPane();
                return;
            } else {
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5") );
                removePaneFromContentPane( selectRestDiskPane );
                setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
                enableNextButton( false );
                enableBackButton( false );
                enableCancelButton( false );
                setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
                // rstList = selectRestDiskPane.getSelectedVolume();
                rstList = selectRestDiskPane.getSelectedVolume1();
                runPane.updateGUI( rstList );
                addPaneOntoContentPane( runPane );
                refreshCenterPane();
                
                beginRestoring();
                
                return;
            }
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4").trim() ) == 0 ){    
            inputSnapCmdPane.fireEditingStopMsg();
            
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5") );
            removePaneFromContentPane( inputSnapCmdPane );
            setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton( false );
            enableBackButton( false );
            enableCancelButton( false );
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
            rstList1 = inputSnapCmdPane.getTasks();
            runPane.updateGUI1( rstList1 );
            addPaneOntoContentPane( runPane );
            refreshCenterPane();
            
            beginRestoring();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4-1").trim() ) == 0 ){
            selectSnapshotPane.fireEditingStopMsg();
            
            if( !selectSnapshotPane.toRecoverOSDisk() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.notRecoverCDisk")
                );
                return;
            }
            Object objSnap = selectSnapshotPane.getOSSnapVer();
            String letter = "C";
            View newView = null ;
            if( objSnap instanceof SnapWrapper ){
                SnapWrapper swrapper = (SnapWrapper)objSnap;
                String newViewName = ResourceCenter.NET_START_VIEW + letter.toUpperCase();
                isOk = view.initor.mdb.addView(newViewName, swrapper.snap.getSnap_root_id(), swrapper.snap.getSnap_local_snapid()
                        );
                if( isOk ){
                    newView = view.initor.mdb.getCrtView();
                } else {
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("CreateVMHost.error.wrongcrtview")
                    );
                    return;
                }
            }else if( objSnap instanceof ViewWrapper ){
                ViewWrapper vwrapper = (ViewWrapper)objSnap;
                newView = vwrapper.view;
            }
            int tid = newView.getSnap_target_id();
            String ip = host.getIP();
            int port = host.getPort();
            String iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + tid;
            isOk = view.initor.mdb.addLunMap( tid, host.getIP(), "255.255.255.255", "rw", "", "", "", "" );
            if( isOk ){
                String drvLetter = selectRestDiskPane.getRealOsRestSourceDiskLetter();
                if( !drvLetter.equals("C") ){
                    // 重试3次，因为在win2000上第一次往往不成功(2010.9.19)
                    int retryCnt = 0;
                    while ( retryCnt < 3 ){
                        isOk = view.initor.mdb.assignDriver( ip,port,
                            view.initor.getTxIP(ip), ResourceCenter.ISCSI_LOGIN_PORT+"", iscsiVar,
                            drvLetter,ResourceCenter.CMD_TYPE_CMDP
                        );
                        if( isOk ){
                            break;
                        }else{
                            SanBootView.log.info(getClass().getName(), "sleep 10 sec. and then retry set-partition again......");
                            try{
                                Thread.sleep( 10*1000 );
                            }catch(Exception ex){}
                            retryCnt++;
                        }
                    }
//                    isOk = view.initor.mdb.addPersistentTarget( ip,port,iscsiVar,ResourceCenter.CMD_TYPE_CMDP );
//                    if( isOk ){
//                        isOk = view.initor.mdb.addPersistentTarget( ip,port,iscsiVar,ResourceCenter.CMD_TYPE_CMDP );
//                    } else {
//                        JOptionPane.showMessageDialog(view, SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.wrongOperationForOSCopy")
//                                );
//                        return;
//                    }
                }
            }
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5") );
            removePaneFromContentPane( selectSnapshotPane );
            setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton( false );
            enableBackButton( false );
            enableCancelButton( false );
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
            // rstList = selectRestDiskPane.getSelectedVolume();
            rstList = selectRestDiskPane.getSelectedVolume1();
            runPane.updateGUI( rstList );
            addPaneOntoContentPane( runPane );
            refreshCenterPane();
                
            beginRestoring();
                
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5").trim() ) == 0 ){
            if( allFinished ){
                if( this.isSwitchDisk ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") + "\n" +
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.todo1")
                    );
                }else{
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") + "\n" +
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.todo")
                    );
                }
            }else{
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.needReRestore")
                );
            }
            dispose();
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title").trim() ) == 0 ){  
            if( partList == null ){
                // 图形化展示初始操作
                ProgressDialog initDiag = new ProgressDialog( 
                    view,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTitle.prepare"),
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTip.prepare")
                );
                PrepareWork prepare = new PrepareWork( initDiag,this,view,host );
                prepare.start();
                initDiag.mySetSize();
                initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                initDiag.setVisible( true );
                
                this.partList = prepare.getPartList();
                if( partList == null ){
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_GET_PARTITION )+" : "+
                            view.initor.mdb.getErrorMessage()
                    );
                    return;
                }
                
                this.rstMapperList = prepare.getRstMap();
                this.volList = prepare.getVolList();
                if( volList.size() > 0 ){
                    selectRestDiskPane.setInputSnapCmdFlag( false );
                    selectRestDiskPane.setupTable( this.volList );
                    // 更新 dest 列��
                    selectRestDiskPane.updateDest( this.rstMapperList );
                    
                    if( rstMapperList.size() >0 ){
                        ret = JOptionPane.showConfirmDialog(
                            view,
                            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.confirm3"),
                            SanBootView.res.getString("common.confirm"),  //"Confirm",
                            JOptionPane.OK_CANCEL_OPTION
                        );
                        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                            // 用户要修改恢复关系
                            title = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1");
                            pane = actModePane;
                        }else{ // 用户同意继续使用原有恢复关系
                            // 按上次源盘恢复时保存的恢复关系将本地目的盘mount起来
                            ProgressDialog mntDiag = new ProgressDialog( 
                                view,
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTitle.mntoldfs"),
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTip.mntoldfs")
                            );
                            MountOldDrive mntThread = new MountOldDrive( mntDiag,this );
                            mntThread.start();
                            mntDiag.mySetSize();
                            mntDiag.setLocation( view.getCenterPoint( mntDiag.getDefWidth(),mntDiag.getDefHeight() ) );
                            mntDiag.setVisible( true );
                            
                            useOldRstMap = true;
                            title = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3");
                            pane = selectRestDiskPane;
                        }
                    }else{
                        title = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1");
                        pane = actModePane;
                    }
                }else{
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRestoredDisk")
                    );
                    return ;
                }
            }
            
            if( volList.size() == 0 ){ // impossible to happen                
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRestoredDisk")
                );
                return ;
            }
            
            setTipTextOnTopPane( title );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( pane );
            if( isFirst1 ){
                if( pane instanceof ActModePaneForRestWinOrgDisk ){
                    ((ActModePaneForRestWinOrgDisk)pane).setAutoRst( true );
                }
                isFirst1 = false;
            }
            refreshCenterPane();
            return;
        }else{
            return;
        }
    }
    
    public void setProcess(){
    }

    private void beginRestoring(){
        Thread initThread = new Thread( new RestoreLocalDisk( this ) );
        initThread.start();
    }
    
    boolean allFinished = true; /// 表明所有task都成功完成了
    String errMsg;
    public void writeLogBuf( String errMsg ){
        if( isWrFirst ){
            logBuf.append( replaceLine( errMsg ) );
            isWrFirst = false;
        }else{
            logBuf.append( ResourceCenter.NEWLINE_STRING + replaceLine( errMsg ) );
        }
    }
    
    public void putIntoLogBuf( String errMsg,int which ){
        writeLogBuf( errMsg );
    }
    
    public void reGetSysPart(){
        // 重新获取最新的系统分区信息
        boolean isOk = view.initor.mdb.getSystemPart( host.getIP(), host.getPort(), "ib_get_partition_info.exe",ResourceCenter.CMD_TYPE_CMDP );
        if( isOk ){
            partList = view.initor.mdb.getSysPart();
        }else{
            errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.freshVolInfo");
SanBootView.log.error( getClass().getName(),"failed to get latest partition info. on [ "+ host.getIP()+" / " + host.getPort()+" ]" );
            // 否则用原来的
        } 
    }

    public boolean reGetVolInfo(){
        // 重新获取最新的带有uuid的vol信息
        boolean isOk = view.initor.mdb.getVolInfoForCMDP( host.getIP(), host.getPort() );
        if( isOk ){
            this.sysPartList = view.initor.mdb.getVolInfoForCMDP();
        }else{
            errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.freshVolInfo");
SanBootView.log.error( getClass().getName(),"failed to get latest volinfo( containing UUID info ) on [ "+ host.getIP()+" / " + host.getPort()+" ]" );
            // 否则用原来的
        }
        return isOk;
    }
    
    private boolean regOS( boolean isLargeThanVista,String ip,int port,String realWinDir,String osDest ){
        int boot_mode = host.getBootMode();
        String realRestSrc = this.selectRestDiskPane.getRealOsRestSourceDiskLetter();

        int cnt=0;
        boolean isOk = false;
        while( cnt<3 ){
            // 从target到本地盘复制时,startsyscopy无法正确修改boot.ini,所以需要重新运行修改过的startbootreg.ext
            if( boot_mode == BootHost.BOOT_MODE_EM ){
                if( !isLargeThanVista ){
                    if( host.is64BitOS() && !realRestSrc.equals("C") ){
                        // 需要手动修改注册表。2011.4.14
                        // isOk = view.initor.mdb.regOS( ip,port, ResourceCenter.REG_MODE_LOCAL_DISK, realWinDir, "localdisk",ResourceCenter.CMD_TYPE_CMDP );
                        isOk = view.initor.mdb.ib_driver_comp( ip, port, osDest, ResourceCenter.CMD_TYPE_CMDP );
                    }else{
                        // cmdp agent自动将ib_driver_comp包在了regOS系列命令中，所以不需要在这里运行ib_driver_comp
                        isOk = view.initor.mdb.regOS( ip,port, ResourceCenter.REG_MODE_LOCAL_DISK, realWinDir, "localdisk",ResourceCenter.CMD_TYPE_CMDP );
                    }
                }else{
                    if( host.is64BitOS() && !realRestSrc.equals("C") ){
                        // 需要手动修改注册表。2011.4.14
                        // isOk = view.initor.mdb.regOS1( ip, port, realWinDir,ResourceCenter.CMD_TYPE_CMDP );
                        isOk = view.initor.mdb.ib_driver_comp( ip, port, osDest, ResourceCenter.CMD_TYPE_CMDP );
                    }else{
                        isOk = view.initor.mdb.regOS1( ip, port, realWinDir,ResourceCenter.CMD_TYPE_CMDP );
                    }
                }
                if( isOk ){
                    break;
                }else{
                    cnt++;
                }
            }else if( boot_mode == BootHost.BOOT_MODE_IBOOT ){
                isOk = view.initor.mdb.regOS2( ip,port, ResourceCenter.REG_MODE_LOCAL_DISK1,realWinDir,"localdisk",ResourceCenter.CMD_TYPE_CMDP );
                if( isOk ){
                    break;
                }else{
                    cnt++;
                }
            }else { // iscsi HBA
                isOk = view.initor.mdb.regOS3( ip,port,realWinDir,ResourceCenter.CMD_TYPE_CMDP );
                if( isOk ){
                    break;
                }else{
                    cnt++;
                }
            }                
        }
        
        return isOk;
    }

    boolean regOsOk = false;
    public void realRestore(){
        int row,num,i,size,size1,j;
        InitTask task;
        boolean isOk,isFinished,getPartInfoOk,savePartInfoOk,saveRstMapOk,umountOk;
        boolean isOkForCopy,refreshVolInfo,registerOS,delRstMirrorOk,checkDiskOk;
        boolean isOkForHandleUUID,isOkForSetAftRecover,isOkForVerifyIsSync;
        boolean isOkForStopService,isOkForStartService;
        String rstMapStr,dest,osDest,name;
        GetDataDupProcess getProcessThread_mtpp;
        SystemPartitionForWin part;
        GetBuildProgress getProcessThread;
        BindOfSrcAndDest binder;
        Vector destList;
        UniProfile profile;
        File tmpFile;
        RunBackup rst = null;
        ArrayList profList = new ArrayList();

        num = runPane.getTableRow(); 
        for( row=0; row<num; row++ ){
            task = runPane.getTask( row );  // 肯定有这个任务�
            
            if( row == num-1 ){ // 保存信息( the last task )
                runPane.setCurTabPane( row );
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), row, 2
                );
                
                getPartInfoOk = view.initor.mdb.getSystemPart( host.getIP(), host.getPort(), "ib_get_partition_info.exe",ResourceCenter.CMD_TYPE_CMDP );
                savePartInfoOk = false;
                if( !getPartInfoOk ){
                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.getPartInfo")+" "+
                              SanBootView.res.getString("common.failed");
                    runPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg );
                }else{
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.getPartInfo")+" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                    
                    // 保存网络启动时的磁盘情况,在"Failback(iSCSI->localdisk)"中要用到该表
                    savePartInfoOk = saveInfo( 
                        host.getNetbootDiskInfo(),
                        view.initor.mdb.getSysPartContentsFromCmd(),
                        row
                    );
                    if( savePartInfoOk ){
                        runPane.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                                SanBootView.res.getString("common.ok"),
                            row
                        );
                    }else{
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                                  SanBootView.res.getString("common.failed"); 
                        runPane.setLogOnTabpane( errMsg,row );
                        writeLogBuf( errMsg );
                    }
                    
                    // 将最新的信息保存到partList中；否则还用旧的
                    this.partList = view.initor.mdb.getSysPart();
                }
                
                // 获取恢复mapping表
                rstMapStr = selectRestDiskPane.getRstMappingTable();
                
                // 保存该mapping表, 在"Failback(iSCSI->localdisk)"中要用到该表
                saveRstMapOk = saveInfo( 
                    host.getRstMapFileName(), 
                    rstMapStr, 
                    row
                );
                if( saveRstMapOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.saveRstMapInfo")+" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                }else{
                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.saveRstMapInfo")+" "+
                              SanBootView.res.getString("common.failed"); 
                    runPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg );
                }

                // 对于cmdp来说，恢复完c盘后马上修改注册表失败，所以在这里再修改一次。
                // 或者，对于mtpp来说，直接在这里修改
                registerOS = true;
                if( !this.regOsOk ){
                    // 多次修改reg
                    String OSDest = selectRestDiskPane.getOSDest();
                    boolean isOSProtectedByCMDP = selectRestDiskPane.isOSProtectedbyCMDP();
                    if( OSDest != null ){
                        boolean aIsOk = true;
                        if( isOSProtectedByCMDP ){
                            // check volume
                            aIsOk = view.initor.mdb.checkVolumeAftRegister( host.getIP(), host.getPort(), OSDest );
                        }
                        if( aIsOk ){
                            String aWindir = ( host.isLargerThanVista()? OSDest + ":\\": OSDest + ":\\" + fWindir );
                            if( regOS( host.isLargerThanVista(),host.getIP(),host.getPort(), aWindir,OSDest+":" ) ){
                                if( !host.is64BitOS() || this.selectRestDiskPane.getRealOsRestSourceDiskLetter().equals("C") ){
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("InitBootHostWizardDialog.log.regOS1")+" "+
                                                SanBootView.res.getString("common.ok"),
                                        row
                                    );
                                }else{
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("InitBootHostWizardDialog.log.regOS3")+" "+
                                                SanBootView.res.getString("common.ok"),
                                        row
                                    );
                                }
                            }else{
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.regOS1")+" "+
                                              SanBootView.res.getString("common.failed");
                                runPane.setLogOnTabpane( errMsg,row );
                                writeLogBuf( errMsg );
                                registerOS = false;
                            }
                        }else{
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.regOS2")+" "+
                                          SanBootView.res.getString("common.failed");
                            runPane.setLogOnTabpane( errMsg,row );
                            writeLogBuf( errMsg );
                            registerOS = false;
                        }
                    }
                }
                
                if( allFinished ){
                    size = partList.size();
                    for( i=0; i<size; i++ ){
SanBootView.log.info( getClass().getName(),"delete adjust-driver-temp-file.");
                        // 删除adjust-driver-temp-file,不管结果
                        part = (SystemPartitionForWin)partList.elementAt( i );
                        view.initor.mdb.delAdjustDriverTmpFile( host.getIP(),host.getPort(),part.getDiskLabel().substring(0,1),ResourceCenter.CMD_TYPE_CMDP );
                    }
                    
                    destList = selectRestDiskPane.getRstSrcDestList();
                    size = destList.size();
                    for( i=0; i<size; i++ ){
SanBootView.log.info( getClass().getName(),"adjust driver using d_2_f method.");
                        RestoreMapper map = (RestoreMapper)destList.elementAt(i);
                        // 执行adjust driver cmd,不管结果(将盘符信息保存在各自的临时文件中)
                        view.initor.mdb.adjustDriver( host.getIP(),host.getPort(),map.getDest().getMp(),ResourceCenter.CMD_TYPE_CMDP );
                        view.initor.mdb.adjustDriver( host.getIP(),host.getPort(),map.getSrc(),ResourceCenter.CMD_TYPE_CMDP );
                    }
                }
                
                // 如果源盘恢复全部成功，则将临时mount起来的本地盘umount掉
                umountOk = true;
                if( allFinished ){
                    destList = selectRestDiskPane.getRstDestList();
                    size = destList.size();
                    size1 = partList.size();
                    for( i=0; i<size; i++ ){
                        dest = (String)destList.elementAt(i);
SanBootView.log.debug(getClass().getName(),  " dest: " + dest +" partList size: " + size1 );
                        for( j=0; j<size1; j++ ){
                            part = (SystemPartitionForWin)partList.elementAt(j);
SanBootView.log.debug(getClass().getName()," part info: "+part.getDiskLabel() );
                            if( part.getDiskLabel().equals( dest.toUpperCase()+":\\")){
                                // 执行umount命令
                                isOk = view.initor.mdb.assignDriver( host.getIP(),host.getPort(), "NULL","NULL",part.getVolInfo(),"0",ResourceCenter.CMD_TYPE_CMDP );
                                if( isOk ){
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.umount") +dest+" "+
                                            SanBootView.res.getString("common.ok"), 
                                        row
                                    );
                                }else{
                                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.umount") +dest+" "+
                                              SanBootView.res.getString("common.failed") + " "+ view.initor.mdb.getErrorMessage(); 
                                    runPane.setLogOnTabpane( errMsg,row );
                                    writeLogBuf( errMsg );
                                    umountOk = false;
                                }
                        
                                break;
                            }
                        }
                    }

                    // 确认umount全部成功
                    if( view.initor.mdb.getSystemPart( host.getIP(), host.getPort(), "ib_get_partition_info.exe", ResourceCenter.CMD_TYPE_CMDP ) ){
                        partList = view.initor.mdb.getSysPart();
                        size = destList.size();
                        size1 = partList.size();
                        for( i=0; i<size; i++ ){
                            dest = (String)destList.elementAt( i );
SanBootView.log.debug(getClass().getName(),  " dest: " + dest +" partList size: " + size1 );
                            for( j=0; j<size1; j++ ){
                                part = (SystemPartitionForWin)partList.elementAt( j );
SanBootView.log.debug(getClass().getName()," part info: " + part.getDiskLabel() );
                                if( part.getDiskLabel().substring(0,1).toUpperCase().equals( dest.substring(0,1).toUpperCase() ) ){
                                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.umount") + dest +" "+
                                              SanBootView.res.getString("common.failed");
                                    runPane.setLogOnTabpane( errMsg,row );
                                    writeLogBuf( errMsg );
                                    umountOk = false;
                                    break;
                                }
                            }
                        }
                    }else{
                        errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.getPartInfo")+" "+
                                  SanBootView.res.getString("common.failed");
                        runPane.setLogOnTabpane( errMsg,row );
                        writeLogBuf( errMsg );
                        umountOk = false;
                    }
                }

                // 不管结果如何
                // this.del_delegate_os_snap_and_view();
                if( getPartInfoOk && savePartInfoOk && saveRstMapOk && umountOk && registerOS ){
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), row, 2
                    );
                    
                    if( allFinished ){
                        allFinished = true;
                    }
                }else{
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                    );
                    allFinished = false;
                }
                
                recordUWSRpt( allFinished,partList );
                
                continue;
            } // all tasks are finished. 

            // 开始数据复制
            runPane.setCurTabPane( row );
            runPane.setTaskStatus( InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), row, 2 );

            if( task.ptype == BootHost.PROTECT_TYPE_MTPP ){
                // 复制操作系统时，先复制后检查是否为活动分区
                osDest = "";
                size = task.parm.size();
                for( i=0; i<size; i++ ){
                    binder = (BindOfSrcAndDest)task.parm.elementAt( i );
                    // 记录 操作系统 所在的盘符
                    if( binder.src.toUpperCase().equals("C:") ){
                        osDest = binder.dest;
//                        if( host.isEmBoot() ){    //解除只针对"64位emboot"的限定
                            binder.os_delegate_letter = this.selectRestDiskPane.getRealOsRestSourceDiskLetter()+":";
//                        }
                    }
                }

                if( osDest.equals("") ){
                    profile = collectRestInfo( task.parm,task.preSnapCmd,task.postSnapCmd,"" );
                }else{
                    // 含有os的复制,要修改注册表
                    profile = collectRestInfo( task.parm,task.preSnapCmd,task.postSnapCmd, "localdisk" );
                }
                if( profile == null ){
                    runPane.setLogOnTabpane( errMsg, row );
                    writeLogBuf( errMsg );
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                    );
                    allFinished = false;
                }else{
                    tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_RESTORE );
                    if( tmpFile == null ){
                        errMsg =  SanBootView.res.getString( "common.errmsg.crtTmpFileLocallyFailed" );
                        writeLogBuf( errMsg );
                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                        );
                        allFinished = false;
                    }else{
                        name = ResourceCenter.TMP_DIR  + tmpFile.getName();
                        profile.setProfileName( name );
                        profile.setIdentityProfileName();
                        profile.setHeaderProfileName();
SanBootView.log.info(getClass().getName(), " restore profile:\n" + profile.prtMe() );

                        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(), profile.prtMe() ) ){
                            errMsg =  SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                                        view.initor.mdb.getErrorMessage();
                            writeLogBuf( errMsg );
                            runPane.setTaskStatus(
                                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                            );
                            allFinished = false;
                            tmpFile.delete();
                        }else{
                            tmpFile.delete();

                            isOkForHandleUUID = true;
                            if( !osDest.equals("") ){
                                isOkForHandleUUID = handleUUID( row );
                            }

                            if( isOkForHandleUUID ){
                                try{
                                    rst = new RunBackup(
                                        ResourceCenter.getCmd( ResourceCenter.CMD_DATA_ANTI_DUP )+
                                        profile.getProfileName() +
                                        " -clnt=" +
                                        bkClnt.getID(),
                                        view.getSocket()
                                    );
SanBootView.log.info( getClass().getName(), " data-restore cmd: " + rst.getCmdLine() );
                                    rst.run();
                                }catch( Exception ex ){
                                    rst.setExceptionErrMsg( ex);
                                    rst.setExceptionRetCode( ex );
                                }
SanBootView.log.info( getClass().getName(), " data-restore cmd retcode: " + rst.getRetCode() );

                                if( !rst.isOk() ){
SanBootView.log.error( getClass().getName(), " data-restore cmd errmsg: " + rst.getErrMsg() );
                                    allFinished = false;
                                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.dupRstCmdFail");
                                    runPane.setLogOnTabpane( errMsg,row );
                                    writeLogBuf( errMsg  );
                                    runPane.setTaskStatus(
                                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                                    );
                                }else{
                                    // 开始监控
                                    profList.clear();
                                    profList.add( profile );
                                    getProcessThread_mtpp = new GetDataDupProcess(
                                        view,
                                        runPane,
                                        profList,
                                        task.toString(),
                                        row
                                    );
                                    getProcessThread_mtpp.start();

                                    isFinished = false;
                                    while( !isFinished ){
                                        isFinished = getProcessThread_mtpp.isToEnd();
                                        try{
                                            Thread.sleep( 4*1000 );
                                        }catch(Exception ex){
                                        }
                                    }

                                    if ( allFinished ){ // 截至到上一次，任务全部成功
                                        allFinished = getProcessThread_mtpp.getLastResult();
                                    }

                                    if( getProcessThread_mtpp.getLastResult() ){
                                        runPane.setTaskStatus(
                                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), row, 2
                                        );
                                    }else{
                                        runPane.setTaskStatus(
                                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                                        );
                                    }
                                }
                            }else{
                                if ( allFinished ){ // 截至到上一次，任务全部成功
                                    allFinished = false;
                                }
                                runPane.setTaskStatus(
                                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                                );
                            }
                        }
                    }
                }
            }else{ // 按照cmdp方式恢复
                if( !buildRestoreMirror( task.parm ) ){
                    runPane.setLogOnTabpane( errMsg, row );
                    writeLogBuf( errMsg );
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                    );
                    allFinished = false;
                }else{
                    if( !assignUUID( task.parm ) ) { // 下面的进度查询需要使用uuid
                        runPane.setLogOnTabpane( errMsg, row );
                        writeLogBuf( errMsg );
                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                        );
                        allFinished = false;
                    }else{
                        refreshVolInfo = true;
                        delRstMirrorOk = true;
                        checkDiskOk = true;
                        isOkForCopy = true;
                        isOkForHandleUUID = true;
                        isOkForSetAftRecover = true;
                        isOkForVerifyIsSync = true;
                        isOkForStopService = true;
                        isOkForStartService = true;
                        registerOS = true;

                        // 处理uuid的问题。只有在源机上恢复才保留原来的uuid,否则换一个新的
                        if( isRstOS( task.parm ) ){
                            if( this.needModUUID ){
                                isOkForHandleUUID = view.initor.mdb.reCrtUUID( host.getDst_agent_ip(), host.getDst_agent_port(), ResourceCenter.CMD_TYPE_CMDP,true );
                                if( !isOkForHandleUUID ){
                                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.reCrtUUID");
SanBootView.log.error( getClass().getName(),"can not re-create uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ]" );
                                    runPane.setLogOnTabpane( errMsg, row );
                                    writeLogBuf( errMsg );
                                }
                            }else{
                                view.initor.mdb.getHostUUID( host.getDst_agent_ip(), host.getDst_agent_port(),true,ResourceCenter.CMD_TYPE_CMDP );
                                String curUUID = view.initor.mdb.getUUID();
                                isOkForHandleUUID = !curUUID.equals("");
                                if( isOkForHandleUUID ){
                                    if( !curUUID.equals( host.getHostUUID() ) ){
                                        isOkForHandleUUID = view.initor.mdb.setUUID( host.getDst_agent_ip(), host.getDst_agent_port(),host.getHostUUID(),ResourceCenter.CMD_TYPE_CMDP,true );
                                        if( !isOkForHandleUUID ){
SanBootView.log.error( getClass().getName(),"can not set uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ] for new-uuid: " +host.getHostUUID() );
                                            errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.setUUID");
                                            runPane.setLogOnTabpane( errMsg, row );
                                            writeLogBuf( errMsg );
                                        }
                                    }
                                }else{
SanBootView.log.error( getClass().getName(),"can not get uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ]" );
                                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getUUID");
                                    runPane.setLogOnTabpane( errMsg, row );
                                    writeLogBuf( errMsg );
                                }
                            }
                        }

                        if( isOkForHandleUUID ){
                            // 开始监控
                            getProcessThread = new GetBuildProgress(
                                view,
                                runPane,
                                task.parm,
                                host.getDst_agent_ip(),
                                host.getDst_agent_port(),
                                row
                            );
                            getProcessThread.start();

                            isFinished = false;
                            while( !isFinished ){
                                isFinished = getProcessThread.isToEnd();
                                try{
                                    Thread.sleep( 4*1000 );
                                }catch( Exception ex ){
                                }
                            }

                            isOkForCopy = getProcessThread.getLastResult();
                        }

                        //////////////////////////////////////////////////////////////////
                        //
                        //     按陈连武的要求，做下列事情之前，先将涉及到的服务全部停掉
                        //
                        //////////////////////////////////////////////////////////////////
                        if( isOkForHandleUUID && isOkForCopy ){
SanBootView.log.info( getClass().getName(), "going to stop related service.");
                            isOkForStopService = stopOrStartServiceOnVg( task.parm,false );
                            if( !isOkForStopService ){
                                runPane.setLogOnTabpane( errMsg, row );
                                writeLogBuf( errMsg );
                            }
                        }

                        if( isOkForHandleUUID && isOkForCopy && isOkForStopService ){
                            // 在删除 mirror 之前先 flush disk
                            flushDisk( task.parm );
                            try{
SanBootView.log.info( getClass().getName(), "sleep 30 sec after flush disk....." );
                                Thread.sleep( 30*1000 );  // sleep for 30 sec
                            }catch( Exception ex ){
                                ex.printStackTrace();
                            }
                            // re-flush disk
                            flushDisk( task.parm );
                            /*
                            try{
SanBootView.log.info(getClass().getName(), "sleep 20 sec again after flush disk.....");
                                Thread.sleep( 20000 ); // sleep for 20 sec
                            }catch(Exception ex){
                                ex.printStackTrace();
                            }
                            */
                        }

                        if( isOkForHandleUUID && isOkForCopy && isOkForStopService ){
                            // 判断是否同步（连续判断5次），如果不是同步或者得不到状态，就退出(2010.11.4)
                            isOkForVerifyIsSync = verifySyncStatus(
                                host.getDst_agent_ip(),
                                host.getDst_agent_port(),
                                task.parm
                            );
                            if( !isOkForVerifyIsSync ){
                                runPane.setLogOnTabpane( errMsg, row );
                                writeLogBuf( errMsg );
                            }
                        }

                        if( isOkForHandleUUID && isOkForCopy && isOkForStopService && isOkForVerifyIsSync ){
                            // 刷新一下volume info(带uuid)，否则 check disk 时会出错（因为使用旧的volname）
                            refreshVolInfo = this.reGetVolInfo();
                            if( !refreshVolInfo ){
                                runPane.setLogOnTabpane( errMsg, row );
                                writeLogBuf( errMsg );
                            }
                        }

                        if( isOkForHandleUUID && isOkForCopy && isOkForStopService
                                && isOkForVerifyIsSync && refreshVolInfo ){
                            // 删除mirror关系，如果是group要把所有成员都删除完。
                            // 如果group包含有系统盘，先删除其他的恢复关系，再删除系统盘的mirror
                            delRstMirrorOk = deleteRestoreMirror( task.parm ) ;
                            if( !delRstMirrorOk ){
                                runPane.setLogOnTabpane( errMsg, row );
                                writeLogBuf( errMsg );
                            }
                        }

                        if( isOkForHandleUUID && isOkForCopy && isOkForStopService
                                && isOkForVerifyIsSync && refreshVolInfo && delRstMirrorOk
                        ){
                            // 再将目标盘mount起来( 因为建立 rest mirror 后会顺带将目标盘 umount 掉），然后做checkdisk
                            checkDiskOk = checkDisk( task.parm );
                            if( !checkDiskOk ){
                                runPane.setLogOnTabpane( errMsg, row );
                                writeLogBuf( errMsg );
                            }
                        }

                        if( isOkForHandleUUID && isOkForCopy && isOkForStopService
                                && isOkForVerifyIsSync && refreshVolInfo && delRstMirrorOk && checkDiskOk ){
                            if( this.isRstOS( task.parm ) ){
                                // 如果有C盘,则马上修改注册表，以便支持本地盘启动
                                // 多次修改reg
                                String OSDest = selectRestDiskPane.getOSDest();
                                if( OSDest != null ){
                                    boolean aIsOk = view.initor.mdb.checkVolumeAftRegister( host.getIP(),host.getPort(),OSDest );
                                    if( aIsOk ){
                                        String aWindir = ( host.isLargerThanVista()? OSDest + ":\\": OSDest + ":\\" + fWindir );
                                        if( regOS( host.isLargerThanVista(),host.getIP(),host.getPort(), aWindir,OSDest+":" ) ){
                                            if( !host.is64BitOS() || this.selectRestDiskPane.getRealOsRestSourceDiskLetter().equals("C") ){
                                                runPane.setLogOnTabpane(
                                                    SanBootView.res.getString("InitBootHostWizardDialog.log.regOS1")+" "+
                                                            SanBootView.res.getString("common.ok"),
                                                    row
                                                );
                                            }else{
                                                runPane.setLogOnTabpane(
                                                    SanBootView.res.getString("InitBootHostWizardDialog.log.regOS3")+" "+
                                                            SanBootView.res.getString("common.ok"),
                                                    row
                                                );
                                            }
                                            regOsOk = true;
                                        }else{
                                            errMsg = SanBootView.res.getString("common.loglevel.warning") + " : " +
                                                     SanBootView.res.getString("InitBootHostWizardDialog.log.regOS1")+" "+
                                                     SanBootView.res.getString("common.failed");
                                            runPane.setLogOnTabpane( errMsg,row );
                                            writeLogBuf( errMsg );
                                            registerOS = false;
                                        }
                                    }else{
                                         errMsg = SanBootView.res.getString("common.loglevel.warning") + " : " +
                                                 SanBootView.res.getString("InitBootHostWizardDialog.log.regOS2")+" "+
                                                 SanBootView.res.getString("common.failed");
                                        runPane.setLogOnTabpane( errMsg,row );
                                        writeLogBuf( errMsg );
                                        registerOS = false;
                                    }
                                }
                            }
                        }

                        if( isOkForHandleUUID && isOkForCopy && isOkForStopService
                                && isOkForVerifyIsSync && refreshVolInfo && delRstMirrorOk
                                // && checkDiskOk && registerOS
                                && checkDiskOk
                        ){
                            // 修改数据库，以便调整volMap中记录的新盘( destination disk )的uuid
                            isOkForSetAftRecover = modifyMDBAftRecover( task.parm );
                            if( !isOkForSetAftRecover ){
                                runPane.setLogOnTabpane( errMsg, row );
                                writeLogBuf( errMsg );
                            }
                        }

                        if( isOkForHandleUUID && isOkForCopy && isOkForStopService
                                && isOkForVerifyIsSync && refreshVolInfo && delRstMirrorOk
                                //&& checkDiskOk && registerOS && isOkForSetAftRecover
                                && checkDiskOk && isOkForSetAftRecover
                        ){
                            // 所有事情处理完毕后，再将服务启动
SanBootView.log.info( getClass().getName(), "going to start related service.");               
                            isOkForStartService = this.stopOrStartServiceOnVg( task.parm, true );
                            if( !isOkForStartService ){
                                runPane.setLogOnTabpane( errMsg, row );
                                writeLogBuf( errMsg );
                            }
                        }

                        if( allFinished ){
                            allFinished = isOkForHandleUUID && isOkForCopy && isOkForStopService
                                 && isOkForVerifyIsSync && refreshVolInfo && delRstMirrorOk
                                 //&& checkDiskOk && registerOS && isOkForSetAftRecover
                                 && checkDiskOk && isOkForSetAftRecover
                                 && isOkForStartService;
                        }

                        if( isOkForHandleUUID && isOkForCopy && isOkForStopService
                                && isOkForVerifyIsSync && refreshVolInfo && delRstMirrorOk
                                //&& checkDiskOk && registerOS && isOkForSetAftRecover
                                && checkDiskOk && isOkForSetAftRecover
                                && isOkForStartService
                        ){
                            runPane.setTaskStatus(
                                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), row, 2
                            );
                        }else{
                            runPane.setTaskStatus(
                                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                            );
                        }
                    }
                }
            }
        }
    }

    private boolean handleUUID( int row ){
        boolean isOkForHandleUUID;
        if( this.needModUUID ){
            isOkForHandleUUID = view.initor.mdb.reCrtUUID( host.getDst_agent_ip(), host.getDst_agent_port(),ResourceCenter.CMD_TYPE_CMDP,true );
            if( !isOkForHandleUUID ){
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.reCrtUUID");
SanBootView.log.error( getClass().getName(),"can not re-create uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ]" );
                runPane.setLogOnTabpane( errMsg, row );
                writeLogBuf( errMsg );
            }
        }else{
            view.initor.mdb.getHostUUID( host.getDst_agent_ip(), host.getDst_agent_port(),true,ResourceCenter.CMD_TYPE_CMDP );
            String curUUID = view.initor.mdb.getUUID();
            isOkForHandleUUID = !curUUID.equals("");
            if( isOkForHandleUUID ){
                if( !curUUID.equals( host.getHostUUID() ) ){
                    isOkForHandleUUID = view.initor.mdb.setUUID( host.getDst_agent_ip(), host.getDst_agent_port(),host.getHostUUID(),ResourceCenter.CMD_TYPE_CMDP,true );
                    if( !isOkForHandleUUID ){
SanBootView.log.error( getClass().getName(),"can not set uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ] for new-uuid: " + host.getHostUUID() );
                        errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.setUUID");
                        runPane.setLogOnTabpane( errMsg, row );
                        writeLogBuf( errMsg );
                    }
                }
            }else{
SanBootView.log.error( getClass().getName(),"can not get uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ]" );
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getUUID");
                runPane.setLogOnTabpane( errMsg, row );
                writeLogBuf( errMsg );
            }
        }
        return isOkForHandleUUID;
    }

    BackupClient bkClnt = null;
    public UniProfile collectRestInfo( Vector mpList,String snapBefCmd,String snapPostCmd,String mac ){
        UniProfile profile  = new UniProfile();
        UniProIdentity identity = profile.getUniProIdentity();
        UniProHeader header  = profile.getUniProHeader();
        UniProDrive  drive1  = profile.getUniProDrive1();
        UniProBackup backup  = profile.getUniProBackup();
        UniProIBoot  iboot   = profile.getUniProIBoot();

        if( host.isOriginalBootHost() ){
            BootHost bHost = view.initor.mdb.getBootHostFromVector( host.getID() );
            if( bHost == null ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.missingBHost");
SanBootView.log.error( getClass().getName(),"Missing client,id: "+host.getID() );
                return null;
            }

            if( bkClnt == null ){
                if( bHost.isCluster() ){
                    bkClnt = view.initor.mdb.getClientFromVector( bHost.getClnt_d2d_cid() );
                }else{
                    bkClnt = view.initor.mdb.getBkClntOnUUID( bHost.getUUID() );
                }
                if( bkClnt == null ) {
                    errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.missingD2DClnt");
SanBootView.log.error( getClass().getName(),"Missing d2d client,uuid: "+bHost.getUUID() );
                    return null;
                }else{
                    bkClnt.setPort( bHost.getMtppPort() );
                }
            }
        }else {
            bkClnt = view.initor.mdb.getBkClntForRestOriDisk( host.getDst_agent_ip(), host.getDst_agent_port() );
            if( bkClnt == null ){
                bkClnt = new BackupClient(
                    BackupClient.FLAG_FOR_RST_ORI_DISK, host.getDst_agent_ip(), BackupClient.FLAG_FOR_RST_ORI_DISK,host.getPort1(), host.getDst_agent_ostype(), host.getDst_agent_id()
                );

                if( view.initor.mdb.addOneClient( bkClnt ) ){
                    bkClnt.setID( view.initor.mdb.getNewId() );
                    view.initor.mdb.addBakClntIntoCache( bkClnt );
                }else{
                    errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_CLIENT ) +": "+ view.initor.mdb.getErrorMessage();
SanBootView.log.error( getClass().getName(),"add d2d client for restoring original disk failed." );
                    return null;
                }
            }
SanBootView.log.info( getClass().getName()," ready to restore original disk using this ip: "+ host.getDst_agent_ip() );
        }

        int size = mpList.size();
        String src = "";
        String target="";
        String osDest="";
        boolean aIsFirst = true;
        if( !host.isWin2000() ){
            for( int i=0; i<size; i++ ){
                BindOfSrcAndDest binder = (BindOfSrcAndDest)mpList.elementAt( i );
                // 记录 操作系统 所在的盘符
                if( binder.src.toUpperCase().equals("C:") ){
                    osDest = binder.dest;
                }
                src += binder.getRealSrc() + ";";
                if( aIsFirst ){
                    target = binder.getRealSrc()+"-?"+binder.dest;
                    aIsFirst = false;
                }else{
                    target += "-?"+binder.getRealSrc()+"-?"+binder.dest;
                }
            }
        }else{
            for( int i=0; i<size; i++ ){
                BindOfSrcAndDest binder = (BindOfSrcAndDest)mpList.elementAt( i );

                // 记录 操作系统 所在的盘符
                if( binder.src.toUpperCase().equals("C:") ){
                    if( !mac.equals("") ){
                        osDest = binder.dest;
                        src = binder.getRealSrc();
                        target = binder.getRealSrc() + "-?" + binder.dest;
                        break;
                    }
                }else{
                    // 真正的命令参数
                    src +=binder.getRealSrc() + ";";

                    if( aIsFirst ){
                        target = binder.getRealSrc() + "-?" + binder.dest;
                        aIsFirst = false;
                    }else{
                        target += "-?"+binder.getRealSrc()+"-?"+binder.dest;
                    }
                }
            }
        }

        // 生成 identity 部分
        identity.setClntID( bkClnt.getID()+"" );
        identity.setAction("restore-file");
        identity.setTarget( target );

        // 生成 header 部分
        header.setAct("restore-file");
        header.setSnapPreCmd( snapBefCmd );
        header.setSnapPostCmd( snapPostCmd );

        getMpListForWin( mpList );
        String src_dest_map = getDestDevPathForWin( true );
        if( src_dest_map == null ){
            return null;
        }else{
            header.setSource_dest_reference( src_dest_map );
        }

        // 生成 drive-1部分
        String path = getDestDevPathForWin( false );
        if( path == null ){
            return null;
        }else{
            drive1.setPath( path );
        }

        // 生成 Backup部分
        backup.setSrc( src );
        backup.setSrcType( "4" );
        backup.setTarget( target );
        backup.setKillPreCmd( "1" );
        backup.setBlkIncRstMode( "0" );
        backup.setPhyIncJudgeTimeFlag( "0" );

        /*  //for wenjian's test on 2009-2-5
        if( !host.isWin2000() ){
            backup.setBakWithSnapFlag( "1" );
        }else{
            backup.setBakWithSnapFlag( "0" );
        }
        */ //for wenjian's test on 2009-2-5
        backup.setBakWithSnapFlag( "0" );

        // 生成iboot部分
        iboot.cleanIboot_af_cmd();
        iboot.cleanIboot_bf_cmd();
        if( !mac.equals("") && !osDest.equals("") ){
            String windir = ":\\"+fWindir;
            Object[] val = RestoreOriginalDiskWizardDialog.generateIboot_cmd( osDest,windir,mac,host.isWin2000() );
            ArrayList bef = (ArrayList)val[0];
            ArrayList aft = (ArrayList)val[1];
            size = bef.size();
            for( int i=0;i<size;i++ ){
                iboot.addIboot_bf_cmd( (String)bef.get(i) );
            }
            size = aft.size();
            for( int j=0;j<size;j++ ){
                iboot.addIboot_af_cmd( (String)aft.get(j) );
            }
        }

        iboot.setUws_username( view.initor.user );
        iboot.setUws_passwd( view.initor.passwd );
        iboot.setUws_ip( view.initor.getTxIP(bkClnt.getIP()) );
        iboot.setUws_port( view.initor.port+"" );

        return profile;
    }
    
    Hashtable winSrcList = new Hashtable();
    private void getMpListForWin( Vector mpList ){
        BindOfFSAndDevNo binder;
        BindOfSrcAndDest binder1;

        winSrcList.clear();
        int size = mpList.size();
        for( int i=0; i<size; i++ ){
            binder1 = (BindOfSrcAndDest)mpList.elementAt( i );
            binder = new BindOfFSAndDevNo();
            binder.mp = binder1.src;
            binder.real_mp = binder1.getRealSrc();
            winSrcList.put( binder1.src, binder );
        }
    }

    public VolumeMap getRealLVOnClntIDAndMP( Vector list,String mp ){
        VolumeMap lv;

        int size = list.size();
        for( int i=0; i<size; i++ ){
            lv = (VolumeMap)list.elementAt(i);
            if( lv.getVolDiskLabel().toUpperCase().equals( mp ) ){
                return lv;
            }
        }

        return null;
    }

    public MirrorDiskInfo getRealLVOnClntIDAndMP( ArrayList list,String mp ){
        MirrorDiskInfo md;

        int size = list.size();
        for( int i=0; i<size; i++ ){
            md = (MirrorDiskInfo)list.get( i );
            if( md.getSrc_agent_mp().toUpperCase().equals( mp ) ){
                return md;
            }
        }

        return null;
    }

    private String getDestDevPathForWin( boolean withLabel ){
        VolumeMap lv = null;
        MirrorDiskInfo md = null;
        BindOfFSAndDevNo binder;
        String drivepath="",src,realSrc;
        boolean aIsFirst = true;
        int tid;

        errMsg = "";

        // 获取srcClnt上的卷信息
        Vector volMapList;
        if( host.isCluster() ){
            volMapList = view.initor.mdb.getVolFromCluster1( host.getClusterID() );
        }else{
            volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
        }
        ArrayList diskInfoList = view.initor.mdb.getMDIFromCacheOnSrcAgntID( host.getID() );

SanBootView.log.debug( getClass().getName()," mp size:" + winSrcList.size() );

        if( winSrcList.size() <= 0 ){
            errMsg = SanBootView.res.getString("EditProfileDialog.error.getMp");
            drivepath = null;
            return drivepath;
        }

        Enumeration list  = winSrcList.elements();
        while( list.hasMoreElements() ){
            binder = (BindOfFSAndDevNo)list.nextElement();
            src = binder.mp + "\\";
            // mtpp agent需要如下的格式，虽然这个格式中的target是错误的。
            realSrc = binder.real_mp +"\\";
SanBootView.log.debug(getClass().getName(), " =====>: " + src);

            if( host.isRealBootHost() ){
                lv = getRealLVOnClntIDAndMP( volMapList,src );
                if( lv == null ){
                    // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + src );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ src;
                    drivepath = null;
                    break;
                }else{
                    tid = lv.getVolTargetID();
                }
            }else{
                md = getRealLVOnClntIDAndMP( diskInfoList, src );
                if( md == null ){
                    // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
SanBootView.log.error( getClass().getName(), "\nMirrorDisk is null in MDB: " + src );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ src;
                    drivepath = null;
                    break;
                }else{
                    //tid = md.
                    tid = 32908; // 随便赋个值就行
                }
            }

            if( aIsFirst ){
                if( !withLabel ){
                    drivepath = ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                            ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":" + tid;
                }else{
                    drivepath = realSrc+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                        ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+ tid ;
                }
                aIsFirst = false;
            }else{
                if( !withLabel ){
                    drivepath+="-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                        ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":" + tid;
                }else{
                    drivepath+="-?"+realSrc+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                        ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+ tid ;
                }
            }
        }

        return drivepath;
    }

    private boolean verifySyncStatus( String ip,int port,Vector rstMapList ){
        int i,size,cnt = 0;
        boolean isSync;

        while ( cnt < 5 ){
            isSync = true;
            size = rstMapList.size();
            for( i=0; i<size; i++ ){
                BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( i );
                boolean isOk = view.initor.mdb.getCurrentSyncState1( ip,port,binder.srcUUID,binder.getRealSrc() );
                if( isOk ){
                    if( !view.initor.mdb.currentStateIsSync() ){
                        isSync = false;
                        break;
                    }
                }else{
                    isSync = false;
                    break;
                }
            }
            
            if( isSync ){
                return true;
            }else{
                try{
SanBootView.log.info( getClass().getName(), "sleep 5 sec again,then re-get-mirror-state ....." );
                    Thread.sleep( 5*1000 ); // sleep for 5 sec
                }catch( Exception ex ){
                    ex.printStackTrace();
                }
                cnt++;
            }
        }

SanBootView.log.info( getClass().getName(), "all failed( not-sync or not-get-mirror-state ) for 5 times when re-get-mirror-state" );
        errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.verifyIsSync");
        return false;  // 超出5次，报告失败
    }
    
    private boolean isRstOS( Vector rstMapList ){
        int size = rstMapList.size();
        for( int i=0; i<size; i++ ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( i );
            String srcdrive = binder.src.substring( 0,1 );
            if( srcdrive.toUpperCase().equals("C") ){
                return true;
            }
        }
        return false;
    }

    // 从带有uuid的 volinfo list 中查找对应的 SystemPartitionForWin
    private SystemPartitionForWin getSystemPartitionInfo( String letter ){
        int size = this.sysPartList.size();
        for( int i=0;i<size; i++ ){
            SystemPartitionForWin part = (SystemPartitionForWin)sysPartList.get(i);
            if( part.disklabel == null || part.disklabel.equals("") ) continue;
            if( part.isSamePartition( letter ) ) {
                return part;
            }
        }
        return null;
    }

    private SystemPartitionForWin getSystemPartitionInfoByUUID( String uuid ){
        int size = this.sysPartList.size();
        for( int i=0;i<size; i++ ){
            SystemPartitionForWin part = (SystemPartitionForWin)sysPartList.get(i);
            if( part.uuid.equals( uuid ) ) {
                return part;
            }
        }
        return null;
    }

    // 从带有uuid的vol list中为rstMapList中的“源”和“目的”找到对应的uuid
    private boolean assignUUID( Vector rstMapList ){
        String srcdrive,destdrive;
        SystemPartitionForWin part;

        String ip = host.getDst_agent_ip();
        int port  = host.getDst_agent_port();

        int size = rstMapList.size();
        for( int i=0; i<size; i++ ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( i );
            srcdrive = binder.getRealSrc().substring( 0,1 );
            destdrive = binder.dest.substring( 0,1 );

            part = getSystemPartitionInfo( srcdrive );
            if( part == null ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getDiskInfo") + "  " +srcdrive;
SanBootView.log.error( getClass().getName(),"not find disk info on [ "+ ip +" / " + port+" ] " +" for "+ srcdrive );
                return false;
            }
            binder.srcUUID = part.uuid;
            
            part = getSystemPartitionInfo( destdrive );
            if( part == null ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getDiskInfo") + "  " +destdrive;
SanBootView.log.error( getClass().getName(),"not find disk info on [ "+ ip +" / " + port+" ] " +" for "+ destdrive );
                return false;
            }
            binder.destUUID = part.uuid;
        }

        return true;
    }
    
    // 从当前网启的c盘找出它对应的快照，然后再创建一个新的view.
    // 该方法无法将当前c盘上的增量恢复回去。2011.4.11
    private Snapshot getOSSnapshot(){
        boolean isOk;
        int i,size;

        if( host.getHostType() == DestAgent.TYPE_ORI_HOST  ){
            VolumeMap osVolMap = view.initor.mdb.getVolMapFromVecOnClntandLabel( host.getSrc_Agnt_id(), "C" );
            int os_boot_Tid = osVolMap.getVol_view_targetid();

            isOk = view.initor.mdb.queryVSnapDB(
                "select * from " + ResourceCenter.VSnap_DB +" where "+
                BasicVDisk.BVDisk_Snap_Root_ID + "=" + osVolMap.getVol_rootid() +";"
            );
            if( isOk ){
                ArrayList<BasicVDisk> list = view.initor.mdb.getAllQueryResult();
                size = list.size();
                for( i=0; i<size; i++ ){
                    BasicVDisk vdisk = list.get(i);
                    if( vdisk.isView( ) ){
                        if( vdisk.getTargetID() == os_boot_Tid ){
                            Snapshot os_snap = view.initor.mdb.getCommonSnapshotFromQuerySql( vdisk.getSnap_parent() );
                            return os_snap;
                        }
                    }
                }
                return null;
            }else{
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getSnap");
                return null;
            }
        }else{
            SnapUsage su  = view.initor.mdb.getSnapUsageOnSomething( host.getDst_agent_id(), "C" );
            int os_boot_view_local_snapid = su.getSnap_view_local_id();

            isOk = view.initor.mdb.queryVSnapDB(
                "select * from " + ResourceCenter.VSnap_DB +" where "+
                BasicVDisk.BVDisk_Snap_Root_ID + "=" + su.getSnap_rootid() +";"
            );
            if( isOk ){
                ArrayList<BasicVDisk> list = view.initor.mdb.getAllQueryResult();
                size = list.size();
                for( i=0; i<size; i++ ){
                    BasicVDisk vdisk = list.get(i);
                    if( vdisk.isView( ) ){
                        if( vdisk.getSnap_local_snapid() == os_boot_view_local_snapid ){
                            Snapshot os_snap = view.initor.mdb.getCommonSnapshotFromQuerySql( vdisk.getSnap_parent() );
                            return os_snap;
                        }
                    }
                }
                return null;
            }else{
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getSnap");
                return null;
            }
        }
    }

    // 对当前网启的C盘创建快照，然后再导出一个快照副本。用这个副本来源盘恢复。
    // 这样可以把开始恢复之前的C盘上的变化数据恢复回去。 2011.4.12
    private Snapshot getOSSnapshot1(){
        boolean isOk;
        int i,size;

        if( host.getHostType() == DestAgent.TYPE_ORI_HOST  ){
            VolumeMap osVolMap = view.initor.mdb.getVolMapFromVecOnClntandLabel( host.getSrc_Agnt_id(), "C" );
            int os_boot_Tid = osVolMap.getVol_view_targetid(); // 当前C盘的网启版本（view）

            isOk = view.initor.mdb.queryVSnapDB(
                "select * from " + ResourceCenter.VSnap_DB +" where "+
                BasicVDisk.BVDisk_Snap_Root_ID + "=" + osVolMap.getVol_rootid() +";"
            );
            if( isOk ){
                ArrayList<BasicVDisk> list = view.initor.mdb.getAllQueryResult();
                size = list.size();
                for( i=0; i<size; i++ ){
                    BasicVDisk vdisk = list.get(i);
                    if( vdisk.isView( ) ){
                        if( vdisk.getTargetID() == os_boot_Tid ){
                            isOk = view.initor.mdb.addSnapshot1( vdisk.getSnap_root_id(), vdisk.getSnap_local_snapid(),-1,"os_delegate" );
                            if( isOk ){
                                Snapshot retSnap = new Snapshot();
                                retSnap.setSnap_root_id( vdisk.getSnap_root_id() );
                                retSnap.setSnap_local_snapid( vdisk.getSnap_local_snapid() );
                                return retSnap;
                            }
                        }
                    }
                }
                return null;
            }else{
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getSnap");
                return null;
            }

        }else{ // destagent
            SnapUsage su  = view.initor.mdb.getSnapUsageOnSomething( host.getDst_agent_id(), "C" );
            isOk = view.initor.mdb.addSnapshot1( su.getSnap_rootid(), su.getSnap_view_local_id(),-1,"os_delegate" );
            if( isOk ){
                Snapshot retSnap = new Snapshot();
                retSnap.setSnap_root_id( su.getSnap_rootid() );
                retSnap.setSnap_local_snapid( su.getSnap_view_local_id() );
                return retSnap;
            }
            return null;
        }
    }

    String os_delegate_letter = "";
    Snapshot os_delegate_snap = null;
    View os_delegate_view = null;
    private boolean loginOsViewByMicrosoftInitiator(){
        // os_delegate_snap = this.getOSSnapshot();
        os_delegate_snap = this.getOSSnapshot1();
        if( os_delegate_snap == null ) return false;

        String ip = host.getDst_agent_ip();
        int port  = host.getDst_agent_port();

        boolean isOk = view.initor.mdb.addView("os_view", os_delegate_snap.getSnap_root_id(),os_delegate_snap.getSnap_local_snapid() );
        if( !isOk ){
            errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.crtView");
            return false;
        }

        os_delegate_view = view.initor.mdb.getCrtView();
        isOk = view.initor.mdb.addLunMap( os_delegate_view.getTargetID(),ip, "255.255.255.255", "rw", "", "", "", "" );
        if( !isOk ){
            errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.addLun");
            return false;
        }
        String iscsiVar = ResourceCenter.ISCSI_PREFIX+targetSrvName + ":" + os_delegate_view.getTargetID();

        isOk = view.initor.mdb.getIdleDriveLetter( ip, port, ResourceCenter.CMD_TYPE_CMDP );
        if( !isOk ){
            errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getIdleDriverLetter");
            return false;
        }
        ArrayList idle_letter_list = view.initor.mdb.getIdleDrvLetterList();
        
        //os_delegate_letter = view.initor.mdb.getIdleDrvLetter();
        int cnt=0;
        while( cnt < 3 ){
            isOk = view.initor.mdb.assignDriver( ip,port,
                view.initor.getTxIP(ip), ResourceCenter.ISCSI_LOGIN_PORT+"", iscsiVar,
                //os_delegate_letter,ResourceCenter.CMD_TYPE_CMDP
                (String)idle_letter_list.get( cnt ),ResourceCenter.CMD_TYPE_CMDP
            );
            if( isOk ){
                os_delegate_letter = (String)idle_letter_list.get( cnt );
                break;
            }else{
                cnt+=1;
                try{
                    Thread.sleep( 10*1000 ); // sleep 10 sec.
                }catch(Exception ex){
                }
            }
        }
        
        if( !isOk ){
            errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.assignLetter");
            return false;
        }
        
        return true;
    }

    private void del_delegate_os_snap_and_view(){
        boolean del_view_isOk = false;
        if( this.os_delegate_view != null ){
            boolean isOk  = view.initor.mdb.delLunMap( os_delegate_view.getTargetID(),host.getIP(),"255.255.255.255","rw" ) ;
            if( isOk ){
                del_view_isOk = view.initor.mdb.delView( os_delegate_view );
            }
        }

        if( this.os_delegate_snap != null ){
            if( del_view_isOk ){
                view.initor.mdb.delSnapshot( os_delegate_snap.getSnap_root_id(), os_delegate_snap.getSnap_local_snapid() );
            }
        }
    }

    private boolean buildRestoreMirror( Vector rstMapList ){
        String srcdrive,destdrive;
        SystemPartitionForWin part;
        boolean isOk;

        String ip = host.getDst_agent_ip();
        int port  = host.getDst_agent_port();

        int size = rstMapList.size();
        for( int i=0; i<size; i++ ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( i );
            srcdrive  = binder.src.substring( 0,1 );
//          if( srcdrive.toUpperCase().equals("C") && host.isEmBoot() ){  //解除只针对"64位emboot"的限定
            if( srcdrive.toUpperCase().equals("C") ){
                // 对于emboot的网启方式，对C盘的恢复，要采用代理盘的策略进行(用户手动指定代理盘)，
                // 而不能直接从C盘恢复，这样速度很慢。 2011.4.12 jjz
                binder.os_delegate_letter = this.selectRestDiskPane.getRealOsRestSourceDiskLetter();
                srcdrive = binder.os_delegate_letter;
            }
            destdrive = binder.dest.substring( 0,1 );

            part = getSystemPartitionInfo( destdrive );
            if( part == null ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getDiskInfo") + "  " +destdrive;
SanBootView.log.error( getClass().getName(),"not find disk info on [ "+ ip +" / " + port+" ] " +" for "+ destdrive );
                return false; 
            }

            isOk = view.initor.mdb.delMirrorOnClnt( ip, port, srcdrive );
            if( !isOk ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.buildRstMirror") +"  " + srcdrive + " ---> " + destdrive;
SanBootView.log.error( getClass().getName(),"delete mirror failed on [ "+ ip +" / " + port+" ] " +" for "+ srcdrive );
                return false;
            }

            isOk = view.initor.mdb.delMirrorOnClnt( ip, port, destdrive );
            if( !isOk ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.buildRstMirror") +"  " + srcdrive + " ---> " + destdrive;
SanBootView.log.error( getClass().getName(),"delete mirror failed on [ "+ ip +" / " + port+" ] " +" for "+ destdrive );
                return false;
            }

            isOk = view.initor.mdb.buildRestoreMirror( ip, port, srcdrive, destdrive, part.size );
            if( !isOk ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.buildRstMirror") +"  " + srcdrive + " ---> " + destdrive;
SanBootView.log.error( getClass().getName(),"build restore-mirror failed on [ "+ ip +" / " + port+" ] " +" for "+ srcdrive + " ---> " + destdrive );
                return false;
            }
        }

        return true;
    }

    private boolean stopOrStartServiceOnVg( Vector rstMapList,boolean isStart ){
        String srcDrive;
        int retryCnt1;
        boolean isOk;
        String[] serv_list = null;
        PPProfile ppprof;

        String ip = host.getDst_agent_ip();
        int port  = host.getDst_agent_port();

        int size = rstMapList.size();
        if( size > 0 ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( 0 );
            srcDrive  = binder.src.substring( 0,1 );
            if( host.isOriginalBootHost() || host.isDstAgntUnderBootHost() ){
                // 只有这两种情况下，才能通过分析PPProfile找到对应的service
                if( host.isCluster() ){
                    ppprof = view.initor.mdb.getBelongedDg1( host.getClusterID(), srcDrive +":\\" );
                }else{
                    ppprof = view.initor.mdb.getBelongedDg( host.getSrc_Agnt_id(), srcDrive+":\\" );
                }
                if( ppprof != null ){
                    serv_list = ppprof.getMainDiskItem().getVolMap().getServices();
                }
            }else{ // 在界面上选择了srcagent下的“网络启动主机”
                serv_list = this.getServicesList( srcDrive );
            }

            if( serv_list!=null && serv_list.length > 0 ){
                for( int i=0; i<serv_list.length; i++ ){
                    if( serv_list[i].equals("") ) continue;

                    retryCnt1 = 0;
                    while( retryCnt1 < 3 ){
                        if( isStart ){
                            isOk = view.initor.mdb.doStartService( ip,port,"start",serv_list[i],ResourceCenter.CMD_TYPE_CMDP );
                        }else{
                            isOk = view.initor.mdb.doStartService( ip,port,"stop",serv_list[i],ResourceCenter.CMD_TYPE_CMDP );
                        }
                        if( isOk ){
                            break;
                        }else{
                            retryCnt1++;
                        }
                    }

                    if( retryCnt1 == 3 ) {
                        errMsg = isStart?SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.startService") + "  " +serv_list[i]:
                                 SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.stopService") + "  " +serv_list[i];
                        return false;
                    }
                }

                return true;
            }else{
                return true;
            }
        }else{
            return true;
        }
    }
    
    private String[] getServicesList( String letter ){
        if( this.service_list != null ){
            int size = this.service_list.size();
            for( int i=0; i<size; i++ ){
                ServicesOnVolume sv = this.service_list.get(i);
                if( sv.isBelongedThisDg( letter ) ){
                    return sv.getServiceList();
                }
            }
        }
        return new String[]{};
    }

    private void flushDisk( Vector rstMapList ){
        String srcDrive,destDrive;
        
        String ip = host.getDst_agent_ip();
        int port  = host.getDst_agent_port();
        
        int size = rstMapList.size();
        for( int i=0; i<size; i++ ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( i );
            srcDrive  = binder.getRealSrc().substring( 0,1 );
            destDrive = binder.dest.substring( 0,1 );

            // 不管结果
            view.initor.mdb.flushDisk( ip,port,srcDrive );
            view.initor.mdb.flushDisk( ip,port,destDrive );
        }
    }
    
    private boolean checkDisk( Vector rstMapList ){
        int i,j,size,size1;
        String destdrive;
        SystemPartitionForWin part;
        boolean isOk,founded;

        String ip = host.getDst_agent_ip();
        int port  = host.getDst_agent_port();

        size = rstMapList.size();
        for( i=0; i<size; i++ ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( i );
            destdrive = binder.dest.substring( 0,1 );

            // 根据之前记录的destUUID(由assignUUID完成)来找出目标盘对应的part（从带有uuid的volInfo list中）
            part = getSystemPartitionInfoByUUID( binder.destUUID );
            if( part == null ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getDiskInfo") + "  " +destdrive;
SanBootView.log.error( getClass().getName(),"not find disk info on [ "+ ip +" / " + port+" ] " +" for "+ destdrive );
                return false;
            }

            isOk = view.initor.mdb.assignDriver( ip,port,"NULL","NULL",part.getVolInfo(),destdrive,ResourceCenter.CMD_TYPE_CMDP );
            if( !isOk ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.assignDriveLetter") +"  "+ destdrive;
SanBootView.log.error( getClass().getName(),"check disk failed on [ "+ ip +" / " + port+" ] " +" for "+ destdrive );
                return false;
            }

            try{
                // sleep for 2 second,then do checkdisk
                Thread.sleep( 2*1000 );
            }catch( Exception ex ){
            }

            isOk = view.initor.mdb.checkDiskOnWin( ip, port, "1200", destdrive + ":", "0" );
            // 不检查checkdisk的结果
            /*
            if( !isOk ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.checkDisk") +"  "+ destdrive;
SanBootView.log.error( getClass().getName(),"check disk failed on [ "+ ip +" / " + port+" ] " +" for "+ destdrive );
                return false;
            }
            */

            // 先umount,再mount一下本地目标盘
/*
            // umount destdrive
            isOk = view.initor.mdb.assignDriver( ip,port,"NULL","NULL",part.getVolInfo(),"0",ResourceCenter.CMD_TYPE_CMDP );
            try{
                Thread.sleep( 10000 );
            }catch(Exception ex){
            }
            // mount destdrive
            isOk = view.initor.mdb.assignDriver( ip,port,"NULL","NULL",part.getVolInfo(),destdrive,ResourceCenter.CMD_TYPE_CMDP );
            try{
                Thread.sleep( 10000 );
            }catch(Exception ex){
            }
*/
            // 再次检查恢复目的是否正常
            if( view.initor.mdb.getSystemPart( ip,port, "ib_get_partition_info.exe",ResourceCenter.CMD_TYPE_CMDP ) ){
                Vector newSysPartList = view.initor.mdb.getSysPart();
                size1 = newSysPartList.size();
                founded = false;
                for( j=0; j<size1; j++ ){
                    SystemPartitionForWin newPart = (SystemPartitionForWin)newSysPartList.elementAt( j );
                    if( newPart.getDiskLabel().substring(0,1).toUpperCase().equals( destdrive.substring(0,1).toUpperCase() ) ){
                        founded = true;
                        if( !SystemPartitionForWin.isValidFS( newPart.fsType ) ){
                            errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.checkDisk") +"  "+ destdrive;
SanBootView.log.error( getClass().getName(),"check disk failed on [ "+ ip +" / " + port+" ] " +" for "+ destdrive +" [ bad fstype ] ");
                            return false;
                        }
                    }
                }
                if( !founded ){
                    errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.checkDisk") +"  "+ destdrive;
SanBootView.log.error( getClass().getName(),"check disk failed on [ "+ ip +" / " + port+" ] " +" for "+ destdrive +" [ can not list this fs ] ");
                    return false;
                }
            }else{
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.getPartInfo")+" "+
                          SanBootView.res.getString("common.failed");
                return false;
            }
        }

        return true;
    }

    private boolean modifyMDBAftRecover( Vector rstMapList  ){
        String srcdrive,destdrive;
        boolean isOk;

        String ip = host.getDst_agent_ip();
        int port = host.getDst_agent_port();

        int size = rstMapList.size();
        for( int i=0; i<size; i++ ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( i );
            srcdrive = binder.src.substring( 0,1 );
            destdrive = binder.dest.substring( 0,1 );

            isOk = view.initor.mdb.modDBAftRestoreOriDisk( ip,port,srcdrive,binder.destUUID );
            if( !isOk ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.modDBAftRestOriDisk") +"  " + srcdrive + " ---> " + destdrive;
SanBootView.log.error( getClass().getName(),"failed to modify mdb after restore ori-disk on [ "+ ip +" / " + port+" ] " +" for "+ srcdrive +", dest-disk'uuid: "+binder.destUUID );
                return false;
            }
        }

        return true;
    }
    
    private boolean deleteRestoreMirror( Vector rstMapList ){
        String realSrcDrive="",srcdrive,destdrive,osDest="";
        boolean isOk,hasOS=false;

        String ip = host.getDst_agent_ip();
        int port = host.getDst_agent_port();
        
        int size = rstMapList.size();
        for( int i=0; i<size; i++ ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( i );
            srcdrive  = binder.src.substring( 0,1 );
            destdrive = binder.dest.substring( 0,1 );

            if( srcdrive.toUpperCase().equals("C") ){
                hasOS = true;
                osDest = destdrive;
                realSrcDrive = binder.getRealSrc();
                continue;
            }

            isOk = view.initor.mdb.delMirrorOnClnt( ip, port, srcdrive );
            if( !isOk ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.buildRstMirror") +"  " + srcdrive + " ---> " + destdrive;
SanBootView.log.error( getClass().getName(),"delete mirror failed on [ "+ ip +" / " + port+" ] " +" for "+ srcdrive );
                return false;
            }
        }

        if( hasOS ){
            isOk = view.initor.mdb.delMirrorOnClnt( ip, port, realSrcDrive.substring(0,1).toUpperCase() );
            if( !isOk ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.buildRstMirror") +"  C" + " ---> " + osDest;
SanBootView.log.error( getClass().getName(),"delete mirror failed on [ "+ ip +" / " + port+" ] " +" for C" );
                return false;
            }
        }

        return true;
    }

    public String autoMountVol(){
        String ip = host.getIP();
        int port = host.getPort();
        view.initor.mdb.adjustDriver( ip,port,"",ResourceCenter.CMD_TYPE_CMDP ); // 不管结果
        return "";
    }
    
    public RetValObj sizeIsMatched( String src,String dest ){
        int i,size;
        long destTotal,srcTotal;
        RetValObj ret = new RetValObj();
        SystemPartitionForWin part,srcPart=null,destPart=null;
        
SanBootView.log.info(getClass().getName(), "compare size: src==> "+ src+ " dest==> "+dest );
        size = this.sysPartList.size();
        for( i=0; i<size; i++ ){
            part = (SystemPartitionForWin)this.sysPartList.elementAt(i);
            if( part.disklabel == null || part.disklabel.equals("") ) continue;
SanBootView.log.info(getClass().getName(), " partition: "+part.getDiskLabel() );
            if( part.isSamePartition( src.substring( 0,1 ) ) ){
                srcPart = part;
            }else if( part.isSamePartition( dest.substring( 0,1 ) ) ){
                destPart = part;
            }
        }
        
        if( srcPart!=null && destPart!=null ){
            srcTotal = srcPart.getLongSizeInBytes();
SanBootView.log.info(getClass().getName(), "src disk occupied: "+ srcTotal );
            if( srcTotal <0 ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.badTotalSize");
                ret.isOk = false;
                return ret;
            }
            
            destTotal = destPart.getLongSizeInBytes();
SanBootView.log.info(getClass().getName(), "dest disk free: "+ destTotal );
            if( destTotal <=0 ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.badTotalSize");
                ret.isOk = false;
                return ret;
            }
            
            if( destTotal < srcTotal ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.tooSmall") + " [ " + destTotal + " < " + srcTotal + " ]";
                ret.isOk = false;
                return ret;
            }
            
            return ret;
        }else{
            if( srcPart == null ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.notFoundSrc");
            }else{
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.notFoundDest");
            }
            ret.isOk = false;
            
            return ret;
        }
    }
    
    private boolean saveInfo( String confile,String contents,int row ){        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_DISKINFO );
        if( tmpFile == null ){
            errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
            runPane.setLogOnTabpane( errMsg,row);
            writeLogBuf( errMsg );
            return false; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            errMsg = SanBootView.res.getString("common.errmsg.sendFileFailed");
            runPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg );
            tmpFile.delete();
            return false;
        }    
           
        tmpFile.delete();
            
        // 将tmpFile move to profile dir
        boolean isOk = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile.getName(), confile      
        );
        
        return isOk;   
    }

    private SystemPartitionForWin getSysPart( Vector sysPartList,String letter ){
        int size = sysPartList.size();
        for( int i=0; i<size; i++ ){
            SystemPartitionForWin part = (SystemPartitionForWin)sysPartList.elementAt( i );
            if( part.isSamePartition( letter ) ) {
                return part;
            }
        }
        return null;
    }
    
    private String statisticRestoreDataSize( Vector sysPartList ){
        String srcdrive;
        int num,row,i,size;
        boolean aIsFirst = true;

        StringBuffer statis_buf = new StringBuffer();

        num = runPane.getTableRow();
        for( row=0; row<num; row++ ){
            InitTask task = runPane.getTask( row );  // 肯定有这个任务�
            if( row == num-1 ){ // 保存其他信息( the last task )
                continue;
            }else{
                size = task.parm.size();
                for( i=0; i<size; i++ ){
                    BindOfSrcAndDest binder = (BindOfSrcAndDest)task.parm.elementAt( i );
                    srcdrive  = binder.src.substring( 0,1 );

                    SystemPartitionForWin part = this.getSysPart( sysPartList,srcdrive );
                    if( part != null ){
                        if( aIsFirst ){
                            statis_buf.append( srcdrive+"-?"+part.getOccupiedInMega() );
                            aIsFirst = false;
                        }else{
                            statis_buf.append( "-?" + srcdrive+"-?"+part.getOccupiedInMega() );
                        }
                    }
                }
            }
        }
        return statis_buf.toString();
    }
    
    private void recordUWSRpt( boolean initOk,Vector sysPartList ){
        String msg;

        Audit audit = view.audit.registerAuditRecord( 0, MenuAndBtnCenterForMainUi.FUNC_WIN_PHY_RESTORE_DISK );
        if( initOk ){
            audit.setEventDesc( "Restore original disk for host : [ " + host.getIP() + " ] successfully." );
        }else{
            audit.setEventDesc( "Failed to restore original disk for host : [ " + host.getIP() + " ]" );
        }
        view.audit.addAuditRecord( audit );

        UWSReport rpt = new UWSReport();

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime( date );
        
        int year  = today.get( Calendar.YEAR );
        String stime = year + "";
        int month = today.get( Calendar.MONTH ) + 1;
        if( month<10 ){
            stime+= "0" + month;
        }else{
            stime+=month;
        }
        int day   = today.get( Calendar.DAY_OF_MONTH );
        if( day <10 ){
            stime+= "0" + day;
        }else{
            stime+=day;
        }
        int hour  = today.get(Calendar.HOUR_OF_DAY);
        if( hour <10 ){
            stime+= "0" + hour;
        }else{
            stime+=hour;
        }
        int min   = today.get(Calendar.MINUTE);
        if( min <10 ){
            stime +="0"+min;
        }else{
            stime+=min;
        }
        int sec   = today.get(Calendar.SECOND);
        if( sec <10 ){
            stime+="0"+sec;
        }else{
            stime+=sec;
        }
        
        rpt.setSTime( stime ); 
        rpt.setClntName( host.getIP() );

        rpt.setTaskClntId( ( host.getDst_agent_id() > 0 ) ? host.getDst_agent_id() : host.getSrc_Agnt_id()  );
        rpt.setTask_clnt_type( ( host.getDst_agent_id() > 0 ) ? DestAgent.TYPE_DST_AGNT : DestAgent.TYPE_ORI_HOST );
        rpt.setTask_parent_clnt_id( this.getTaskParentClntID( host ) );
        rpt.setTask_parent_clnt_type( this.getTaskParentClntType( host ) );
        rpt.setTask_clnt_mac( host.getDst_agent_mac() );

        if( this.isSwitchDisk ){
            rpt.setTType( UWSReport.TASK_TYPE_SWITCH_RECOVER_LOCALDISK );
        }else{
            rpt.setTType( UWSReport.TASK_TYPE_RECOVER_LOCALDISK );
        }
        rpt.setTResult( initOk? UWSReport.TASK_RESULT_END:UWSReport.TASK_RESULT_FAIL );
        
        msg = logBuf.toString();
        if( msg.getBytes().length > 1014 ){
            byte[] arr = msg.getBytes();
            String newmsg = new String(arr,0,1014 );
            //rpt.setTaskMsg( initOk? SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") : newmsg );
            rpt.setTaskMsg( initOk?this.statisticRestoreDataSize( sysPartList ):newmsg );
        }else{
            //rpt.setTaskMsg( initOk? SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") : msg );
            rpt.setTaskMsg( initOk?this.statisticRestoreDataSize( sysPartList ):msg );
        }
        
        String fname = generateUWSRptTmpFile( rpt.prtMe() );
        if( fname != null ){
            if( !view.initor.mdb.addReport( fname ) ){
                // save in local host 
                saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_RESTL_RPT +stime );
            }
        }else{
            // save in local host
            saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_RESTL_RPT + stime );
        }
    }
    
    private String generateUWSRptTmpFile( String contents ){
        String fname;
        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_USWTMP );
        if( tmpFile == null ){
            return null; 
        }
        
        // 发送profile的内容�
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            tmpFile.delete();
            return null;
        }    
        
        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }
    
    private void saveUWSRpt( String contents,String fname ){
        try{
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File( path );
            
            f1.createNewFile();
            
            PrintWriter out = new PrintWriter( new FileWriter(f1),true );
            out.print( contents );
            out.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    int tabRow=0;
}
class MountOldDrive extends Thread {
    JDialog diag;
    PhyRestoreOriginalDiskWizardDialog pdiag;
    
    Runnable close = new Runnable(){
        public void run(){
            diag.dispose();
        }
    };
    
    public MountOldDrive( JDialog diag,PhyRestoreOriginalDiskWizardDialog pdiag ){
        this.diag = diag;
        this.pdiag = pdiag;
    }
    
    @Override public void run(){
        pdiag.autoMountVol();  // 不报告错误,由后面的校验来确保mount的分区没有问题
        try{
            SwingUtilities.invokeAndWait( close );
        } catch( Exception e){
            e.printStackTrace();
        }
    }
}

class PrepareWork extends Thread {
    JDialog diag;
    PhyRestoreOriginalDiskWizardDialog pdiag;
    SanBootView view;
    DestAgent host;
    Vector partList=null;
    Vector volList = new Vector();
    HashMap rstMapperList;
    
    Runnable close = new Runnable(){
        public void run(){
            diag.dispose();
        }
    };
    
    public PrepareWork( JDialog diag,PhyRestoreOriginalDiskWizardDialog pdiag,SanBootView view,DestAgent host ){
        this.diag = diag;
        this.pdiag = pdiag;
        this.view = view;
        this.host = host;
    }
    
    @Override public void run(){
        int i,size;
        
        while( true ){
            boolean isOk = view.initor.mdb.getSystemPart( host.getIP(), host.getPort(), "ib_get_partition_info.exe",ResourceCenter.CMD_TYPE_CMDP );
            if( isOk ){   
                partList = view.initor.mdb.getSysPart();
            }else{
                break;
            }
            
            isOk = view.initor.mdb.getRstMapper(  host.getRstMapFileName() );
            if( isOk ){
                rstMapperList = view.initor.mdb.getRstMapperList();
            }else{
SanBootView.log.warning( getClass().getName(),"Can't get restore mapper from "+ host.getRstMapFileName() );                
                rstMapperList = new HashMap();
            }

            HashMap<String,VolumeMap> map = new HashMap<String,VolumeMap>();
            // 找出当前系统中有哪些盘是 iscsi target volume。只有这些盘才能恢复到本地盘
            if( host.isRealBootHost() ){
                Vector volMapList;
                if( host.isCluster() ){
                    volMapList = view.initor.mdb.getVolFromCluster1( host.getClusterID() );
                }else{
                    volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
                }
                
                size = volMapList.size();
                for( i=0; i<size; i++ ){
                    VolumeMap volMap = (VolumeMap)volMapList.elementAt(i);
SanBootView.log.debug( getClass().getName(),"host volume(RestoreOriginalDiskWizardDialog::PrepareWork): "+ volMap.getVolDiskLabel().substring( 0,1 ) );                    
                    isOk = view.initor.mdb.isStartupfromSAN( host.getIP(), host.getPort(), volMap.getVolDiskLabel().substring( 0,1 ),ResourceCenter.CMD_TYPE_CMDP );
                    if( isOk ){
                        if( view.initor.mdb.isStartupFromSAN() ){
                            // 集群会出现多个具有相同盘符的volMap,所以用hashmap进行过滤（2011.8.4）
                            map.put( volMap.getVolDiskLabel(), volMap );
                        }else{
SanBootView.log.debug( getClass().getName(),"(RestoreOriginalDiskWizardDialog::PrepareWork): "+ volMap.getVolDiskLabel().substring( 0,1 ) +" isn't iscsi disk" );                                                
                        }
                    }
                }
            }else{
                // 1个盘可能存在多个snap usage，所以用hashmap进行过滤.(2010.4.6)
                ArrayList list = view.initor.mdb.getMSUFromCacheOnDstAgntID( host.getDst_agent_id() );
                size = list.size();
                for( i=0; i<size; i++ ){
                    SnapUsage su = (SnapUsage)list.get(i);
                    MirrorDiskInfo mdi = view.initor.mdb.getMDIFromCacheOnRootID( su.getSnap_rootid() );
                    if( mdi == null ) continue;
                    isOk = view.initor.mdb.isStartupfromSAN( host.getIP(), host.getPort(), su.getExport_mp().substring( 0,1 ),ResourceCenter.CMD_TYPE_CMDP );
                    if( isOk ){
                        if( view.initor.mdb.isStartupFromSAN() ){
                            VolumeMap volMap = new VolumeMap( su.getExport_mp(),mdi.getSrc_vol_protect_type() );
                            map.put( su.getExport_mp(), volMap );
                        }
                    }
                }
            }
            
            Iterator<String> iterator = map.keySet().iterator();
            while( iterator.hasNext() ){
                VolumeMap volMap = map.get( iterator.next() );
                volList.addElement( volMap ) ;
            }
            break;
        }
        
        try{
            SwingUtilities.invokeAndWait( close );
        } catch( Exception e){
            e.printStackTrace();
        }
    }
    
    public Vector getVolList(){
        if( volList.size() > 1 ){
            Object[] arr = volList.toArray();
            Arrays.sort( arr );
            volList.clear();
            for( int i=0; i<arr.length; i++ ){
                volList.add( arr[i] );
            }
        }
        return volList;
    }
    
    public HashMap getRstMap(){
        return rstMapperList;
    }
    
    public Vector getPartList(){
        return partList;
    }
}