/*
 * RunningTaskPaneForCMDP.java
 *
 * Created on 2010/06/25,��AM 10:31
 */

package guisanboot.cmdp.ui;

import guisanboot.ui.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import mylib.UI.*;
import guisanboot.data.*;
import java.util.regex.Pattern;

/**
 *
 * @author  Administrator
 */
public class RunningTaskPaneForCMDP extends javax.swing.JPanel implements RunningTask{ 
    
    /** Creates new form RunningTaskPane */
    public RunningTaskPaneForCMDP() {
        initComponents();
    }
    
    public RunningTaskPaneForCMDP( SanBootView view,int mode  ) {
        this();
        myInit( view,mode );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel13 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField1 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 30));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 1, 3, 1));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.GridBagLayout());

        jCheckBox1.setText("DHCP Binding");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel12.add(jCheckBox1, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setText("jTextField1");
        jTextField1.setBorder(null);
        jTextField1.setOpaque(false);
        jTextField1.setPreferredSize(new java.awt.Dimension(255, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel12.add(jTextField1, gridBagConstraints);

        jPanel13.add(jPanel12, java.awt.BorderLayout.WEST);

        jPanel6.add(jPanel13, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(5, 105));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.BorderLayout());

        jTextArea2.setEditable(false);
        jTextArea2.setDisabledTextColor(java.awt.Color.black);
        jScrollPane3.setViewportView(jTextArea2);

        jPanel8.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Crt Vol", jPanel8);

        jPanel9.setLayout(new java.awt.BorderLayout());

        jTextArea4.setEditable(false);
        jTextArea4.setDisabledTextColor(java.awt.Color.black);
        jScrollPane5.setViewportView(jTextArea4);

        jPanel9.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Get Info", jPanel9);

        jPanel10.setLayout(new java.awt.BorderLayout());

        jTextArea5.setEditable(false);
        jTextArea5.setDisabledTextColor(java.awt.Color.black);
        jScrollPane6.setViewportView(jTextArea5);

        jPanel10.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Save Info", jPanel10);

        jPanel7.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel7, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
    Vector taskList = new Vector();
    GeneralEditableTable table = new GeneralEditableTable();
    SanBootView view;
    int mode; // 0: 不需要target binding 1: 需要target binding
    
    public static int CRT_VOL_ROW = 0;
    public static int GET_INFO_ROW = 1;
    public static int SAVE_INFO_ROW = 2;
    
    private void myInit( SanBootView _view,int _mode ){
        view = _view;
        mode = _mode;
        setupLanguage();
        
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
        
        jTextArea1.setText(
            SanBootView.res.getString("InitBootHostWizardDialog.tip7")
        );
        
        jTextField1.setDocument( new NotEditableTextDocument( jTextField1 ) ); 
        
        jScrollPane3.setVerticalScrollBarPolicy( JScrollPane.VERTICAL_SCROLLBAR_ALWAYS );
        jScrollPane5.setVerticalScrollBarPolicy( JScrollPane.VERTICAL_SCROLLBAR_ALWAYS );
        jScrollPane6.setVerticalScrollBarPolicy( JScrollPane.VERTICAL_SCROLLBAR_ALWAYS );
        
        assembleTask();
        setupTable();
    }
    
    private void setupLanguage(){
        jCheckBox1.setText( SanBootView.res.getString("RunningTaskPane.checkBox.dhcpBind"));
        
        int index = jTabbedPane1.indexOfComponent(jPanel8);
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("RunningTaskPane.label.crtProtect")
        );
        index = jTabbedPane1.indexOfComponent(jPanel9);
        jTabbedPane1.setTitleAt( index,
            SanBootView.res.getString("RunningTaskPane.label.getInfo")
        );
        index = jTabbedPane1.indexOfComponent(jPanel10);
        jTabbedPane1.setTitleAt( index,
            SanBootView.res.getString("RunningTaskPane.label.saveInfo")
        );
    }
    
    public void assembleTask(){
        InitTask task;
        
        taskList.removeAllElements();
        int cnt = 0;    
        
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.crtProtect");
        task.status = InitTask.INIT_TASK_STA_READY;
        taskList.addElement( task );
        RunningTaskPaneForCMDP.CRT_VOL_ROW = (cnt-1);
                
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.getInfo");
        task.status = InitTask.INIT_TASK_STA_READY;
        taskList.addElement( task );
        RunningTaskPaneForCMDP.GET_INFO_ROW = (cnt-1);
        
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.saveInfo");
        task.status = InitTask.INIT_TASK_STA_READY;
        taskList.addElement( task );
        RunningTaskPaneForCMDP.SAVE_INFO_ROW = (cnt-1);
    }
    
    public void setupManualTask(){
        jCheckBox1.setSelected( true );
    }
    
    public void ctrDhcpCb( boolean val,String mac ){
        if( val ){
            displayTip( mac );
        }else{
            jPanel12.remove( jCheckBox1 );
            jPanel12.remove( jTextField1 );
        }
    }
    
    public void clearDhcptip(){
        jPanel12.remove( jCheckBox1 );
        jPanel12.remove( jTextField1 );
    }
    
    private void displayTip( String mac ){
        int len = jTextField1.getDocument().getLength();
        try{
            ((NotEditableTextDocument)jTextField1.getDocument()).forceRemove( 0, len );
            ((NotEditableTextDocument)jTextField1.getDocument()).forceInserting( 
                0,
                SanBootView.res.getString("RunningTaskPane.checkBox.dhcpBind1")+" "+ mac + " ）",
                null 
            );
        }catch(Exception ex){}
    }
    
    public void setupTable(){
        int i;
        Object[][] data;
        
        int num = taskList.size();

        data = new Object[2+num][3]; //seq,task,status
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 3;      // col num

        data[1][0] = SanBootView.res.getString("TaskConfigPane.table.task.seq");
        data[1][1] = SanBootView.res.getString("TaskConfigPane.table.task.task");
        data[1][2] = SanBootView.res.getString("TaskConfigPane.table.task.status");
        
        for( i=0; i<num; i++ ){
            InitTask task = (InitTask)taskList.elementAt(i);
            
            data[2+i][0] = task.seq+"";
            data[2+i][1] = task.task;
            data[2+i][2] = InitTask.getTaskStatusStr( task.status );
        }
        
        table.setTableModel( data );
        table.setDefaultLook();

        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 50 );
        tableColumnModel.getColumn(1).setWidth( 300 );
        tableColumnModel.getColumn(2).setWidth( 100 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
    }
    
    public void setTaskStatus( String val,int row,int col ){
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        model.setValueAt( val, row, col );
    }
    
    public void setCurTabPane( int which ){        
        switch( which ){
            case 0: // create vol
                jTabbedPane1.setSelectedComponent( jPanel8 );
                break;
            case 1: // get info
                jTabbedPane1.setSelectedComponent( jPanel9 );
                break;
            case 2: // save info
                jTabbedPane1.setSelectedComponent( jPanel10 );
                break;
            default:
                break;
        }
        // reset vertical_base to 50
        setVerticalBase( 50 );
    }

    int vertical_base = 50;
    private void setVerticalBase( int val ){
        vertical_base=val;
    }
    public void printString( JTextArea ta,JScrollPane sp,String text ){
        String[] lines= Pattern.compile("\\n").split( text, -1 );

        for( int i=0; i<lines.length; i++ ){
            if( lines[i].equals("") ) continue;

            ta.append( lines[i] );
            ta.append( "\n" );
            ta.setPreferredSize( new Dimension( 0,vertical_base+=15 ) );
            ta.getCaret().setDot( ta.getText().length() );
            sp.scrollRectToVisible( ta.getVisibleRect() );
        }
    }
    
    public String getCopyLogOnTabpane( int row ){
        return "";
    }
    
    public void freshCopyLogOnTabpane( String prefix,String log,int row,boolean isAutoScroll ){
    }

    public void setLogOnTabpane( String log,int which ){
        switch( which ){
            case 0: // create vol
                jTabbedPane1.setSelectedComponent( jPanel8 );
                printString( jTextArea2, jScrollPane3, log );
                break;
            case 1: // get info
                jTabbedPane1.setSelectedComponent( jPanel9 );
                printString( jTextArea4, jScrollPane5, log );
                break;
            case 2: // save info
                jTabbedPane1.setSelectedComponent( jPanel10 );
                printString( jTextArea5, jScrollPane6, log );
                break;
            default:
                break;
        }
    }
    
    public boolean isDoneDHCP(){
        return jCheckBox1.isSelected();
    }
    
    public String getTabStr( int which ){
        String ret;
        switch( which ){
            case 0:
                ret = SanBootView.res.getString("RunningTaskPane.label.crtVol")+": ";
                break;
            case 1:
                ret =  SanBootView.res.getString("RunningTaskPane.label.getInfo")+": ";
                break;
            case 2:
                ret =  SanBootView.res.getString("RunningTaskPane.label.saveInfo")+": ";
                break;
            default: 
                ret = "Unknown";
                break;
        }
        return  ret;
    }
}
