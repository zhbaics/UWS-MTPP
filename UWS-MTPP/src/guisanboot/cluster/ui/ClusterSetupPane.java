/*
 * ClusterSetupPane.java
 *
 * Created on 2011/07/06,��PM 3:19
 */

package guisanboot.cluster.ui;

import guisanboot.cluster.entity.Cluster;
import guisanboot.cluster.entity.SubCluster;
import guisanboot.ui.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import mylib.tool.*;
import guisanboot.data.*;
import guisanboot.res.ResourceCenter;
import java.util.ArrayList;


/**
 *
 * @author  Administrator
 */
public class ClusterSetupPane extends javax.swing.JPanel {
    
    /** Creates new form ClusterSetupPane */
    public ClusterSetupPane() {
        initComponents();
    }
    
    public ClusterSetupPane( SanBootView view,int osType,Cluster selCluster ){
        this();
        myInit( view,osType,selCluster );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 35));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Server Pair"));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Private IP（HeartBeat） :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel5.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Public IP（VIP） :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel2, gridBagConstraints);

        jTextField2.setText("211.153.15.111");
        jTextField2.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel5.add(jTextField2, gridBagConstraints);

        jLabel3.setText("Virtual IP :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel3, gridBagConstraints);

        jTextField3.setText("211.153.15.212");
        jTextField3.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        jPanel5.add(jTextField3, gridBagConstraints);

        jTextField4.setText("20.20.30.111");
        jTextField4.setPreferredSize(new java.awt.Dimension(83, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel5.add(jTextField4, gridBagConstraints);

        jTextField5.setText("211.153.15.112");
        jTextField5.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        jPanel5.add(jTextField5, gridBagConstraints);

        jTextField6.setText("20.20.30.112");
        jTextField6.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        jPanel5.add(jTextField6, gridBagConstraints);

        jTextField7.setText("211.153.15.211");
        jTextField7.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel5.add(jTextField7, gridBagConstraints);

        jLabel6.setText("CMDP Port :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel6, gridBagConstraints);

        jLabel7.setText("MTPP Port :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel7, gridBagConstraints);

        jTextField8.setPreferredSize(new java.awt.Dimension(6, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel5.add(jTextField8, gridBagConstraints);

        jTextField9.setPreferredSize(new java.awt.Dimension(6, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        jPanel5.add(jTextField9, gridBagConstraints);

        jTextField10.setPreferredSize(new java.awt.Dimension(6, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel5.add(jTextField10, gridBagConstraints);

        jTextField11.setPreferredSize(new java.awt.Dimension(6, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 15, 0, 0);
        jPanel5.add(jTextField11, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("宋体", 1, 20));
        jLabel8.setText("Node1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel5.add(jLabel8, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("宋体", 1, 20));
        jLabel9.setText("Node2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel5.add(jLabel9, gridBagConstraints);

        jPanel7.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("General"));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Cluster Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel8.add(jLabel4, gridBagConstraints);

        jTextField1.setPreferredSize(new java.awt.Dimension(160, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel8.add(jTextField1, gridBagConstraints);

        jLabel5.setText("Cluster Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel8.add(jLabel5, gridBagConstraints);

        jComboBox2.setPreferredSize(new java.awt.Dimension(130, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel8.add(jComboBox2, gridBagConstraints);

        jPanel7.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel7, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
    
    WizardDialogSample wizardDiag;
    SanBootView view;
    int osType;  // 0: logical-windows  1: logical-non-windows  2: physical-windows
    
    private void myInit( SanBootView _view,int _osType,Cluster selCluster ){
        view = _view;
        osType = _osType;

        setupClusterTypeComboBox();
        setupUI( selCluster );
        setupLanguage();
        jTextArea1.setText(
            SanBootView.res.getString("InitBootHostWizardDialog.tip9")
        );

        if( osType != 2 ) {
            jPanel5.remove( this.jLabel6 );
            jPanel5.remove( this.jTextField8 );
            jPanel5.remove( this.jTextField9 );
        }
        
        regKeyboardAction();
    }
    
    private void setupClusterType( int type ){
        if( type == ResourceCenter.TYPE_CLUS_RAC_INT ){
            jComboBox2.setSelectedItem( ResourceCenter.TYPE_CLUSTER_RAC );
        }else if( type == ResourceCenter.TYPE_CLUS_NOT_RAC_INT ){
            jComboBox2.setSelectedItem( ResourceCenter.TYPE_CLUSTER_NOT_RAC );
        }else{
        }
    }

    private void setupUI( Cluster selCluster ){
        if( selCluster != null ){
            this.jTextField1.setText( selCluster.getCluster_name() );
            setupClusterType( selCluster.getCluster_type() );
            ArrayList<SubCluster> realHosts = selCluster.getRealSubCluster();
            if( realHosts.size() > 0 ){
                this.jTextField4.setText( realHosts.get(0).getHost().getClnt_pri_ip());
                this.jTextField2.setText( realHosts.get(0).getHost().getIP());
                this.jTextField7.setText( realHosts.get(0).getHost().getClnt_vip() );
                this.jTextField8.setText( realHosts.get(0).getHost().getCmdpPort()+"" );
                this.jTextField10.setText( realHosts.get(0).getHost().getMtppPort()+"" );
            }
            if( realHosts.size() > 1 ){
                this.jTextField6.setText( realHosts.get(1).getHost().getClnt_pri_ip());
                this.jTextField5.setText( realHosts.get(1).getHost().getIP());
                this.jTextField3.setText( realHosts.get(1).getHost().getClnt_vip() );
                this.jTextField9.setText( realHosts.get(1).getHost().getCmdpPort()+"" );
                this.jTextField11.setText( realHosts.get(1).getHost().getMtppPort()+"" );
            }
        }else{
            this.jTextField8.setText( ResourceCenter.CMDP_AGENT_PORT+"" );
            this.jTextField9.setText( ResourceCenter.CMDP_AGENT_PORT+"" );
            this.jTextField10.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
            this.jTextField11.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
        }
    }

    private void setupLanguage(){
        ((TitledBorder)jPanel5.getBorder()).setTitle(
            SanBootView.res.getString("ClusterSetupPane.borderTitle.serverPair")
        );
        ((TitledBorder)jPanel8.getBorder()).setTitle(
            SanBootView.res.getString("ClusterSetupPane.borderTitle.general")
        );
        jLabel1.setText(SanBootView.res.getString("ClusterSetupPane.label.priip"));
        jLabel2.setText(SanBootView.res.getString("ClusterSetupPane.label.pubip"));
        jLabel3.setText(SanBootView.res.getString("ClusterSetupPane.label.vip"));
        jLabel4.setText(SanBootView.res.getString("ClusterSetupPane.label.clusterName"));
        jLabel5.setText(SanBootView.res.getString("ClusterSetupPane.label.clusterType"));
        jLabel6.setText( SanBootView.res.getString("SelectProtectedSysVolPane.combox.pp") +
                SanBootView.res.getString("SelectBootHostPane.label.port"));
        jLabel7.setText( SanBootView.res.getString("SelectProtectedSysVolPane.combox.lp") +
                SanBootView.res.getString("SelectBootHostPane.label.port"));
        jLabel8.setText( SanBootView.res.getString("ClusterSetupPane.label.node")+"1" );
        jLabel9.setText( SanBootView.res.getString("ClusterSetupPane.label.node")+"2" );
    }
    
    private void setupClusterTypeComboBox(){
        DefaultComboBoxModel model = (DefaultComboBoxModel)this.jComboBox2.getModel();
        model.addElement( ResourceCenter.TYPE_CLUSTER_NOT_RAC );
        model.addElement( ResourceCenter.TYPE_CLUSTER_RAC );
    }

    private void regKeyboardAction(){
        this.jTextField1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jComboBox2.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jComboBox2.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField4.requestFocus();            
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jTextField4.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField6.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jTextField6.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField2.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jTextField2.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField5.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jTextField5.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField7.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jTextField7.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField3.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jTextField3.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField8.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
        
        jTextField8.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField9.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jTextField9.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField10.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jTextField10.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField11.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        jTextField11.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    wizardDiag.nextButtonProcess();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
    }
    
    public void setWizardDialogSample( WizardDialogSample wdiag ){
        wizardDiag = wdiag;
    }

    String pri_ip1,pri_ip2,pub_ip1,pub_ip2,vip1,vip2;
    int port1,port2;
    int mtpp_port1,mtpp_port2;
    String uuid="";
    public boolean checkClntInfoValidity(){        
        String clusterName = this.jTextField1.getText().trim();
        if( clusterName.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("PhyInitWinClusterWizardDialog.error.clusterNameNone")
            );
            return false;
        }

        if( clusterName.getBytes().length > 60 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("PhyInitWinClusterWizardDialog.error.clusterNameTooLong")
            );
            return false;
        }

        pri_ip1 = this.jTextField4.getText().trim();
        if( pri_ip1.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.noneIP")
            );
            return false;
        }
        if( !Check.ipCheck( pri_ip1 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidIP") + " : " + pri_ip1
            );
            return false;
        }

        pri_ip2 = this.jTextField6.getText().trim();
        if( pri_ip2.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.noneIP")
            );
            return false;
        }
        if( !Check.ipCheck( pri_ip2 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidIP") + " : " + pri_ip2
            );
            return false;
        }

        pub_ip1 = this.jTextField2.getText().trim();
        if( pub_ip1.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.noneIP")
            );
            return false;
        }
        if( !Check.ipCheck( pub_ip1 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidIP") + " : " + pub_ip1
            );
            return false;
        }

        pub_ip2 = this.jTextField5.getText().trim();
        if( pub_ip2.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.noneIP")
            );
            return false;
        }
        if( !Check.ipCheck( pub_ip2 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidIP") + " : " + pub_ip2
            );
            return false;
        }

        vip1 = this.jTextField7.getText().trim();
        if( vip1.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.noneIP")
            );
            return false;
        }
        if( !Check.ipCheck( vip1 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidIP") + " : " + vip1
            );
            return false;
        }

        vip2 = this.jTextField3.getText().trim();
        if( vip2.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.noneIP")
            );
            return false;
        }
        if( !Check.ipCheck( vip2 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidIP") + " : " + vip2
            );
            return false;
        }

        if( osType == 2 ){ // check cmdp port validity
            String _port1 = jTextField8.getText().trim();
            if( _port1.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.nonePort")
                );
                return false;
            }

            if( !Check.digitCheck( _port1 ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.invalidPort")
                );
                return false;
            }

            port1 = -1;
            try{
                port1 = Integer.parseInt( _port1 );
            }catch(Exception ex){}

            if( port1 < 1 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.badPort")
                );
                return false;
            }

            if( port1 > 65535 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.badPort")
                );
                return false;
            }

            String _port2 = jTextField9.getText().trim();
            if( _port2.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.nonePort")
                );
                return false;
            }

            if( !Check.digitCheck( _port2 ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.invalidPort")
                );
                return false;
            }

            port2 = -1;
            try{
                port2 = Integer.parseInt( _port2 );
            }catch(Exception ex){}

            if( port2 < 1 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.badPort")
                );
                return false;
            }

            if( port2 > 65535 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.badPort")
                );
                return false;
            }
        }
        
        String _m_port1 = jTextField10.getText().trim();
        if( _m_port1.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.nonePort")
            );
            return false;
        }

        if( !Check.digitCheck( _m_port1 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidPort")
            );
            return false;
        }

        mtpp_port1 = -1;
        try{
            mtpp_port1 = Integer.parseInt( _m_port1 );
        }catch(Exception ex){}

        if( mtpp_port1 < 1 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.badPort")
            );
            return false;
        }

        if( mtpp_port1 > 65535 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.badPort")
            );
            return false;
        }

        String _m_port2 = jTextField11.getText().trim();
        if( _m_port2.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.nonePort")
            );
            return false;
        }

        if( !Check.digitCheck( _m_port2 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidPort")
            );
            return false;
        }

        mtpp_port2 = -1;
        try{
            mtpp_port2 = Integer.parseInt( _m_port2 );
        }catch(Exception ex){}

        if( mtpp_port2 < 1 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.badPort")
            );
            return false;
        }

        if( mtpp_port2 > 65535 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.badPort")
            );
            return false;
        }
          
        return true;
    }
    
    public void setFocusOnTextField1(){
        this.jTextField1.requestFocus();
    }
    
    // 为了每次jComboBox1都获取焦点，必须overwrite paintComponent方法
    @Override public void paintComponent( Graphics g ){
        super.paintComponent( g );
        setFocusOnTextField1();
    }

    public boolean isOracleRAC(){
        String type = (String)this.jComboBox2.getSelectedItem();
        return type.equals( ResourceCenter.TYPE_CLUSTER_RAC );
    }

    public boolean isNotOracleRAC(){
        return !this.isOracleRAC();
    }

    public String[] getIPList(){
        return this.getPubIpList();
    }
    public String getCombinedIP(){
        return this.pub_ip1+"/"+this.pub_ip2;
    }
    public String[] getPriIpList(){
        return new String[]{ this.pri_ip1,this.pri_ip2 };
    }
    public String[] getPubIpList(){
        return new String[]{ this.pub_ip1,this.pub_ip2 };
    }
    public String[] getVipList(){
        return new String[]{ this.vip1,this.vip2 };
    }
    public int[] getPortList(){
        if( this.osType == 2 ){
            return new int[]{ port1,port2 };
        }else{
            return new int[]{mtpp_port1,mtpp_port2};
        }
    }
    public int[] getMtppPortList(){
        return new int[]{ mtpp_port1,mtpp_port2 };
    }
    public String getUUID(){  
        return uuid;
    }
     
    public String getClusterName(){
        return this.jTextField1.getText().trim();
    }
    
    public int getClusterType(){
        String type = (String)jComboBox2.getSelectedItem();
        if( type.equals( ResourceCenter.TYPE_CLUSTER_RAC ) ){
            return ResourceCenter.TYPE_CLUS_RAC_INT;
        }else if( type.equals( ResourceCenter.TYPE_CLUSTER_NOT_RAC ) ){
            return ResourceCenter.TYPE_CLUS_NOT_RAC_INT;
        }else{
            return ResourceCenter.TYPE_CLUS_NOT_RAC_INT;
        }
    }
    
    public Object[] getHost( String ip ){
        String host1_ip = this.jTextField2.getText().trim();
        String host2_ip = this.jTextField5.getText().trim();
        String host1_vip = this.jTextField7.getText().trim();
        String host2_vip = this.jTextField3.getText().trim();
        String ctype = (String)this.jComboBox2.getSelectedItem();
        
        Object[] ret = null;
        if( host1_ip.equals( ip ) ){
            ret = new Object[7];
            ret[0] = new String( ip );  // pub ip
            ret[1] = new Integer( this.jTextField8.getText().trim() ); // port
            ret[2] = new Integer( this.jTextField10.getText().trim()); // mtpp port
            ret[3] = new String( this.jTextField7.getText().trim() ); // vip ip
            ret[4] = new String ( this.jTextField4.getText().trim() ); // pri ip

            ret[5] = new String( ip );
            ret[6] = new Integer( this.jTextField8.getText().trim() );
        }else if( host2_ip.equals( ip ) ){
            ret = new Object[7];
            ret[0] = new String( ip );  // pub ip
            ret[1] = new Integer( this.jTextField9.getText().trim() ); // port
            ret[2] = new Integer( this.jTextField11.getText().trim()); // mtpp port
            ret[3] = new String( this.jTextField3.getText().trim() ); // vip ip
            ret[4] = new String ( this.jTextField6.getText().trim() ); // pri ip

            ret[5] = new String( ip );
            ret[6] = new Integer( this.jTextField9.getText().trim() );
        }else if( host1_vip.equals( ip ) ){
            if( ctype.equals( ResourceCenter.TYPE_CLUSTER_RAC ) ){
                ret = new Object[6];
                ret[0] = new String( ip ); // pub ip(实际上是vip)
                ret[1] = new Integer( this.jTextField8.getText().trim() ); // port
                ret[2] = new Integer( this.jTextField10.getText().trim()); // mtpp port
                ret[3] = new String( host2_vip ); // vip( 另外一个vip)

                ret[4] = new String( host1_ip );
                ret[5] = new Integer( this.jTextField8.getText().trim() );
            }else{
                ret = new Object[5];
                ret[0] = new String( ip ); // pub ip(实际上是vip)
                ret[1] = new Integer( this.jTextField8.getText().trim() ); // port
                ret[2] = new Integer( this.jTextField10.getText().trim()); // mtpp port

                ret[3] = new String( host1_ip );
                ret[4] = new Integer( this.jTextField8.getText().trim() );
            }
        }else { // host2_vip.equals( ip )
            if( ctype.equals( ResourceCenter.TYPE_CLUSTER_RAC ) ){
                ret = new Object[6];
                ret[0] = new String( ip ); // pub ip(实际上是vip)
                ret[1] = new Integer( this.jTextField9.getText().trim() ); // port
                ret[2] = new Integer( this.jTextField11.getText().trim()); // mtpp port
                ret[3] = new String( host1_vip ); // vip( 另外一个vip )

                ret[4] = new String( host2_ip );
                ret[5] = new Integer( this.jTextField9.getText().trim() );
            }else{
                ret = new Object[5];
                ret[0] = new String( ip ); // pub ip(实际上是vip)
                ret[1] = new Integer( this.jTextField9.getText().trim() ); // port
                ret[2] = new Integer( this.jTextField11.getText().trim()); // mtpp port

                ret[3] = new String( host2_ip );
                ret[4] = new Integer( this.jTextField9.getText().trim() );
            }
        }
        
        return ret;
    }
}

class HostRenderer extends DefaultListCellRenderer{ 
    @Override public Component getListCellRendererComponent(
        JList list,
        Object value,
        int index,
        boolean isSelected,
        boolean cellHasFocus
    ){
        super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
        if( value != null ) {
            if( value instanceof HostWrapper){
                HostWrapper wrap =(HostWrapper)value;
                setText( wrap.toString() );
            }else{
                setText( (String)value );
            }
        }
        return this;
    }
}
