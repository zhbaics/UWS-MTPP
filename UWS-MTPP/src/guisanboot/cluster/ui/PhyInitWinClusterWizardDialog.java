/*
 * PhyInitWinClusterWizardDialog.java
 *
 * Created on 2011/07/06,PM 1:45
 */

package guisanboot.cluster.ui;

import guisanboot.cmdp.ui.*;
import guisanboot.MenuAndBtnCenterForMainUi;
import guisanboot.audit.data.Audit;
import guisanboot.cluster.entity.AccessPath;
import guisanboot.cluster.entity.ChiefMemberNode;
import guisanboot.cluster.entity.Cluster;
import guisanboot.cluster.entity.SubCluster;
import javax.swing.*;
import javax.swing.tree.*;
import java.util.*;
import java.io.*;
import guisanboot.ui.*;
import guisanboot.data.*;
import guisanboot.res.*;
import guisanboot.datadup.ui.DuplicationStrategyPane;
import guisanboot.op.init.SelectNetBootModePane;
import guisanboot.unlimitedIncMj.entity.ChiefCloneDiskList;
import guisanboot.unlimitedIncMj.entity.ChiefLocalUnLimitedIncMirrorVolList;
import mylib.UI.*;
import guisanboot.cmdp.entity.PPProfile;
import guisanboot.cmdp.entity.PPProfileItem;
import guisanboot.cmdp.entity.ChiefPPProfile;
import guisanboot.cmdp.service.GetFreePhyVol1;
import guisanboot.datadup.cmd.RunBackup;
import guisanboot.datadup.data.BackupClient;
import guisanboot.datadup.data.UniProBackup;
import guisanboot.datadup.data.UniProDrive;
import guisanboot.datadup.data.UniProHeader;
import guisanboot.datadup.data.UniProIBoot;
import guisanboot.datadup.data.UniProIdentity;
import guisanboot.datadup.data.UniProfile;
import guisanboot.datadup.ui.EditProfileDialog;
import guisanboot.datadup.ui.viewobj.ChiefProfile;
import guisanboot.unlimitedIncMj.model.table.CloneDisk;
import java.util.regex.Pattern;

/**
 *
 * @author  Administrator
 */
public class PhyInitWinClusterWizardDialog extends WizardDialogSample implements RecordUWSRptable,InitHostable,PhyInitInterface {
    ClusterSetupPane          selectHostPane;
    SelectProtectedSysVolPane selectSysVolPane;
    SelectHeartbeatDiskPane   selectHbDskPane;
    SelectServicePane         selectServPane;
    SelectNetBootModePane     selectNetBootModePane;
    SelectNetCardPane         selectNetCardPane;
    SetDhcpPane               setDhcpPane;
    DuplicationStrategyPane   dupStrgyPane;
    RunningTaskPaneForCMDP    runningTaskPaneForCMDP;
    
    private Hashtable cardOnClnt = new Hashtable();
    private Hashtable bmodOnClnt = new Hashtable();
    private Hashtable hbDskOnClnt = new Hashtable();
    private Hashtable dhcpOnClnt = new Hashtable();
    private Hashtable ncCache    = new Hashtable();
    
    SanBootView view;
    private Hashtable<String,String> partitionContent;
    private Vector osService;
    private Hashtable<String,String> diskDetailInfo;
    GetPartitionOnClnt getPart;
            
    /** Creates new form PhyInitWinClusterWizardDialog */
    public PhyInitWinClusterWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public PhyInitWinClusterWizardDialog( SanBootView view,Cluster selCluster ){
        super( view );
        myInit( view,selCluster );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhyInitWinClusterWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private void myInit( SanBootView _view,Cluster selCluster ){
        view = _view;
        
        setupLanguage1();
        enableBackButton( false );
        
        setWizardTipText( 
            SanBootView.res.getString( "WizardDialogSample.wizardText"),
            SanBootView.res.getString( "InitBootHostWizardDialog.c-wizardText2" )
        );
        
        setTipTextOnTopPane( SanBootView.res.getString("PhyInitWinClusterWizardDialog.title") );
        
        selectHostPane = new ClusterSetupPane( view,2,selCluster );
        selectHostPane.setWizardDialogSample( this );
        selectSysVolPane = new SelectProtectedSysVolPane( view,ResourceCenter.CMD_TYPE_CMDP );
        selectSysVolPane.setWizardDialogSample( this );
        selectSysVolPane.setIsClusterFlag( true );
        selectHbDskPane = new SelectHeartbeatDiskPane( view );
        selectServPane = new SelectServicePane( view );
        selectNetBootModePane = new SelectNetBootModePane( view );
        selectNetCardPane = new SelectNetCardPane( view );
        selectNetCardPane.setWizardDialogSample( this );
        selectNetCardPane.setIsClusterFlag( true );
        setDhcpPane = new SetDhcpPane( view,"windows" );
        dupStrgyPane = new DuplicationStrategyPane( view,ResourceCenter.CMD_TYPE_CMDP );
        dupStrgyPane.setupTextTipInfo( SanBootView.res.getString("InitBootHostWizardDialog.p-tip4") );
        dupStrgyPane.setWizardDialogSample( this );
        dupStrgyPane.setIsClusterFlag( true );
        dupStrgyPane.setSelectProtectedFS( selectSysVolPane );
        runningTaskPaneForCMDP = new RunningTaskPaneForCMDP( view,1 );
        
        view.removeAllFromBindedTab();
        view.removeAllFromUnSelTab();
    }
    
    private void setupLanguage1(){
        setTitle( SanBootView.res.getString("PhyInitWinClusterWizardDialog.title") );
    }
    
    @Override public void backButtonProcess(){
        ArrayList netCardInfo,profInfo;
        String ip;
        Object[] bootModeInfo;
        
        if( getTipTitle().compareTo(SanBootView.res.getString("PhyInitWinClusterWizardDialog.title1").trim() ) == 0 ){
            enableBackButton( false );
            removeCenterPane();
            addImagePaneOntoCenterPane();
            addWizardTipTextPane();
            setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString("InitBootHostWizardDialog.c-wizardText2")
            );
            setTipTextOnTopPane( SanBootView.res.getString("PhyInitWinClusterWizardDialog.title") );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selDisk").trim() ) == 0 ){
            selectSysVolPane.fireEditingStopMsg();
            
            setTipTextOnTopPane( SanBootView.res.getString("PhyInitWinClusterWizardDialog.title1") );
            removePaneFromContentPane( selectSysVolPane );
            addPaneOntoContentPane( selectHostPane );
            refreshCenterPane();
            return;
        }

        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selHBDsk").trim() ) == 0 ){
            selectSysVolPane.fireEditingStopMsg();

            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selDisk") );
            removePaneFromContentPane( this.selectHbDskPane );
            addPaneOntoContentPane( selectSysVolPane );
            refreshCenterPane();
            return;
        }


        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode").trim() ) == 0 ){
            bootModeInfo = selectNetBootModePane.getBootModeInfo();
            ip = selectHostPane.getCombinedIP();
            bmodOnClnt.remove( new String( ip ) );
            bmodOnClnt.put( new String( ip ), bootModeInfo );
            
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selHBDsk") );
            removePaneFromContentPane( selectNetBootModePane );
            addPaneOntoContentPane( this.selectHbDskPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title4").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            netCardInfo = selectNetCardPane.getNetCardInfo();
            ip = selectHostPane.getCombinedIP();
            cardOnClnt.remove( new String(ip) );
            cardOnClnt.put( new String(ip),netCardInfo );
            
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode") );
            selectNetCardPane.removeListener();
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane( selectNetBootModePane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title5").trim() ) == 0 ){
            ip = selectHostPane.getCombinedIP();
            InfoFromDhcpSetupPane dhcpSetPane = new InfoFromDhcpSetupPane(); 
            dhcpSetPane.isUseOdyDhcp = setDhcpPane.isAutoSetup();
            dhcpSetPane.dhcpClntInfo = setDhcpPane.getDhcpSetInfo();
            dhcpOnClnt.remove( new String(ip) );
            dhcpOnClnt.put( new String(ip), dhcpSetPane );
            
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.title4") );
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane( selectNetCardPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title6").trim() ) == 0 ){
            dupStrgyPane.fireEditingStopMsg();

            profInfo = dupStrgyPane.getProfileInfoFromTab();
            ip = selectHostPane.getCombinedIP();
            ppprofOnClnt.remove( new String( ip ) );
            ppprofOnClnt.put( new String(ip),profInfo );

            if( !selectNetBootModePane.isSelectIScsiHBAMode() ){
                setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.title5") );
                addPaneOntoContentPane( setDhcpPane );
            }else{
                setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode") );             
                addPaneOntoContentPane( selectNetBootModePane );            
            }
            removePaneFromContentPane( dupStrgyPane );
            refreshCenterPane();
            return;
        }
    }
    
    private boolean modifyHost(){
        GetAgentInfo aGetAgentInfo;
        BootHost member;
        BackupClient selClnt;
        
        // 只修改real host node，其他的节点(虚节点)信息要根据select volume中的“卷访问路径”来定
        ArrayList<SubCluster> subcList = cluster.getRealSubCluster();
        int size = subcList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = subcList.get(i);
            member = subc.getHost();
            aGetAgentInfo = this.getGetAgentInfoCmdObj( member.getUUID() );
            if( aGetAgentInfo == null ) continue;
            
            BootHost newHost = new BootHost();
            newHost.setID( member.getID() );
            newHost.setName( aGetAgentInfo.getHostName() );
            newHost.setIP( aGetAgentInfo.getIP() );
            newHost.setMachine( aGetAgentInfo.getMachine() );
            newHost.setPort( aGetAgentInfo.getPort() );
            newHost.setPort1( aGetAgentInfo.getMtppPort() );
            newHost.setOS( aGetAgentInfo.getOSName() );
            newHost.setClnt_pri_ip( aGetAgentInfo.getPri_ip() );
            newHost.setClnt_vip( aGetAgentInfo.getVip() );
            
            boolean isOK = view.initor.mdb.modOneBootHost4( newHost );
            if( isOK ){
                selClnt = view.initor.mdb.getClientFromVector( member.getClnt_d2d_cid() );
                // 修改d2d client
                if( !changeD2DClient( selClnt,member ) ){
SanBootView.log.error( getClass().getName()," Modify d2d client failed: "+member.getIP() +"/" + member.getPort1() );
                    JOptionPane.showMessageDialog( view,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_MOD_BOOT_HOST )+" : "+
                            view.initor.mdb.getErrorMessage()
                    );
                    return false;
                }

                // 用新值替换旧值.
                member.setName( newHost.getName() );
                member.setIP( newHost.getIP() );
                member.setMachine( newHost.getMachine() );
                member.setPort( newHost.getPort() );
                member.setMtppPort( newHost.getMtppPort() );
                member.setOS( newHost.getOS() );
                member.setClnt_pri_ip( newHost.getClnt_pri_ip() );
                member.setClnt_vip( newHost.getClnt_vip() );
            }else{
                JOptionPane.showMessageDialog(view,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_MOD_BOOT_HOST )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                return false;
            }
        }
        return true;
    }

    private boolean changeD2DClient( BackupClient selClnt,BootHost member ){
        if( selClnt != null ){
            BackupClient newClnt = new BackupClient();
            newClnt.setID( selClnt.getID() );
            newClnt.setHostName( member.getName() );
            newClnt.setIP( member.getIP() );
            newClnt.setMachineType( member.getMachine() );
            newClnt.setPort( member.getPort1() );
            newClnt.setOsType( member.getOS() );
            
            boolean isOK = view.initor.mdb.ModOneClient1( newClnt );
            if( isOK ){
                // 用新值替换旧值.
                selClnt.setHostName( newClnt.getHostName() );
                selClnt.setIP( newClnt.getIP() );
                selClnt.setMachineType( newClnt.getMachineType() );
                selClnt.setPort( newClnt.getPort() );
                selClnt.setOsType( newClnt.getOsType() );
            }
            return isOK;
        }{
            // 只有在需要的地方才增加对应的bk client
        }

        return true;
    }
    
    private Cluster getSelectCluster( String member_uuid ){
        if( !member_uuid.equals("") ){
            return view.initor.mdb.getOneCluster( member_uuid );
        }else{
            return null;
        }
    }

    // diskList包含了所有的disk,不仅仅是空闲disk(2010.3.16)
    private boolean isValidRootId( int rootid,ArrayList diskList ){
        Volume vol;
        int i,size;
        size = diskList.size();
        for( i=0; i<size; i++ ){
            vol = (Volume)diskList.get(i);
            if( vol.getSnap_root_id() == rootid ){
                return true;
            }
        }
        return false;
    }
    
    private boolean modifyLunMap( int cluster_id ){
        BindofVolAndSnap bind;
        Object volObj;
        VolumeMap volMap;
        BootHost host;
        ArrayList snapList;
        int i,j,size,size1,tid;
        boolean isOK;
        String[] ip;
        
        ProgressDialog pdiag = new ProgressDialog( 
            view,
            SanBootView.res.getString("View.pdiagTitle.modifyHost1"),
            SanBootView.res.getString("View.pdiagTip.modifyHost1")
        );

        GetRstVersion getRstVer = new GetRstVersion( pdiag,view,0,cluster_id,true,true,false );
        getRstVer.start();
        pdiag.mySetSize();
        pdiag.setLocation( view.getCenterPoint( pdiag.getDefWidth(),pdiag.getDefHeight() ) );
        pdiag.setVisible( true );
        
        Vector bindList = getRstVer.getBindList();
        size = bindList.size();
        for( i=0; i<size; i++ ){
            bind = (BindofVolAndSnap)bindList.elementAt(i);
            snapList = bind.getSnapList();
            volObj = bind.getVolObj();
            if( !(volObj instanceof VolumeMap) ) continue;
            volMap = (VolumeMap)volObj;
            
            if( volMap.isClusterSharedDisk() ){
                ip = cluster.getIPFromRealHost();
            }else{
                host = view.initor.mdb.getBootHostFromVector( volMap.getVolClntID() );
                ip = new String[1];
                ip[0] = host.getIP();
            }
            
            size1 = snapList.size();
            for( j=0; j<size1; j++ ){
                Object obj = snapList.get(j);
                if( obj instanceof ViewWrapper ){
                    ViewWrapper vw = (ViewWrapper)obj;
                    tid = vw.view.getSnap_target_id();
                }else if( obj instanceof VolumeMapWrapper ){
                    VolumeMapWrapper vm =(VolumeMapWrapper)obj;
                    tid = vm.volMap.getVolTargetID();
                }else if( obj instanceof MirrorDiskInfoWrapper ){
                    tid = -1;
                }else{ // SnapWrapper
                    tid = -1;
                }
                if( tid == -1 ) continue;

                for( int l=0; l<ip.length; l++ ){
                    isOK = view.initor.mdb.addLunMap( tid, ip[l], "255.255.255.255", "rw", "", "", "", "" );
                    if( !isOK ){
                        JOptionPane.showMessageDialog(view,
                           SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip[l] + " 255.255.255.255 rw ]" + " " +
                                  SanBootView.res.getString("common.failed")
                        );
                        return false;
                    }
                }
            }
        }
        
        return true;
    }
    
    private PPProfile getBelongedDG( String diskLabel,String host_uuid,String host_ip,ArrayList<PPProfile> list ){
        int size = list.size();
        for( int i=0; i<size; i++ ){
            PPProfile prof = list.get(i);
            if( prof.getItem( diskLabel,host_uuid,host_ip ) != null ){
                return prof;
            }
        }
        return null;
    }

    private Hashtable lpprofOnClnt = new Hashtable();
    private ArrayList<UniProfile> crtPseudoLPProfile( String combinedIP, Cluster cluster ){
        ArrayList<UniProfile> profOfHost;
        
        // 获取GUI上一次设置的保护策略；如果是第一次，就从系统中找出对应的策略,没有则为空
        boolean contained = lpprofOnClnt.containsKey( new String( combinedIP ) );
        if( !contained ){
            if( cluster != null ){
                profOfHost = view.initor.mdb.getAllProfileForCluster( cluster.getCluster_id() );
            }else{
                profOfHost = new ArrayList<UniProfile>();
            }
            lpprofOnClnt.put( new String( combinedIP ), profOfHost );
        }else{
            profOfHost = (ArrayList)lpprofOnClnt.get( new String( combinedIP ) );
        }

        return profOfHost;
    }

    private Hashtable ppprofOnClnt = new Hashtable();
    private ArrayList<PPProfile> crtPseudoPPProfile( Cluster cluster ){
        int max_snap,snap_in_license;
        VolumeMap volMap;
        MirrorGrp mg;
        PPProfile prof;
        
        ArrayList<PPProfile> profOfHost = view.initor.mdb.clonePPProfileForCluster( cluster.getCluster_id() );
        
        // 根据selectSysVolPane中所选的vol重新调整profOfHost列表
        snap_in_license =  view.initor.mdb.getSnapInLicOfCMDP();
        Vector selVol = this.selectSysVolPane.getVolInfo();
        int size = selVol.size();
        for( int i=0; i<size; i++ ){
            BindOfPartandVol binder = (BindOfPartandVol)selVol.elementAt( i );
            if( binder.ap.isLocal ){
                prof = this.getBelongedDG( binder.part.getDiskLabel(), binder.part.getHost_uuid(),binder.ap.ip,profOfHost );
            }else{
                // 共享卷对应的host的uuid为空
                prof = this.getBelongedDG( binder.part.getDiskLabel(), "",binder.ap.ip, profOfHost );
            }

            if( !binder.isProtected || binder.isProtectedByMTPP() ){
                if( prof != null ){
                    if( prof.isMasterDisk( binder.part.getDiskLabel() ) ){
                        prof.setMasterDiskRootid( -1 );
                    }
                    prof.removeItem( binder.part.getDiskLabel() );
                    if( prof.getDiskSize() == 0 ){
                        profOfHost.remove( prof );
                    }
                }
            }else{
                if( prof == null ){
                    try{
                        max_snap = Integer.parseInt( binder.maxSnap );
                    }catch(Exception ex){
                        max_snap = 0; // 不可能到此
                    }
                    if( snap_in_license < max_snap ){
                        max_snap = snap_in_license;
                    }

                    volMap = new VolumeMap( binder.volName,binder.part.getDiskLabel(),binder.ap.isLocal );
                    mg = new MirrorGrp(
                        MirrorGrp.MG_TYPE_RADISK,
                        "",
                        -1,
                        binder.part.uuid,
                        -1,
                        MirrorGrp.MG_DEFAULT_INTERVAL_TIME,
                        MirrorGrp.MG_DEFAULT_MIN_INCREMENT_SIZE,
                        max_snap,
                        MirrorGrp.MG_DEFAULT_BEF_CMD,
                        MirrorGrp.MG_DEFAULT_AFT_CMD
                    );

                    PPProfileItem profItem = new PPProfileItem( mg,volMap );

                    PPProfile newProf = new PPProfile();
                    newProf.setTemp_max_snap( max_snap );
                    newProf.setTemp_min_size( MirrorGrp.MG_DEFAULT_MIN_INCREMENT_SIZE );
                    newProf.setTemp_interval_time( MirrorGrp.MG_DEFAULT_INTERVAL_TIME );
                    newProf.setTemp_db_type( 0 );
                    newProf.setTemp_services("");
                    newProf.setTemp_db_instance("");
                    newProf.setTemp_mg_schedule_type( MirrorGrp.MG_SCH_TYPE_ROTATE  );
                    newProf.setTemp_mg_schedule_minute( "0" );
                    newProf.setTemp_mg_schedule_hour( "0" );
                    newProf.setTemp_mg_schedule_day( "*" );
                    newProf.setTemp_mg_schedule_month( "*" );
                    newProf.setTemp_mg_schedule_week( "*" );
                    newProf.setTemp_mg_schedule_hour1( "0" );
                    newProf.setTemp_mg_schedule_clock_zone( "" );
                    newProf.addItem( profItem );

                    newProf.setHost_id( -1 );
                    if( binder.ap.isLocal ){
                        newProf.setHost_uuid( binder.part.getHost_uuid() );
                    }else{
                        newProf.setHost_uuid( "" );
                    }
                    newProf.setHost_ip( binder.ap.ip );
                    newProf.setHost_port( binder.part.getHost_port() );
                    prof = newProf;
                    profOfHost.add( newProf );
                }else{
                    // 只以master disk为准，修改整个profile的max snap
                    if( prof.getMainDiskLabel().toUpperCase().equals( binder.part.getDiskLabel().toUpperCase() ) ){
                        try{
                            int maxsnap = Integer.parseInt( binder.maxSnap );
                            prof.setTemp_max_snap( maxsnap );
                        }catch(Exception ex){
                        }
                    }
                }
            }
        }

        return profOfHost;
    }

    private String getIpPortPair( String[] ip,int[] port ){
        boolean aIsFirst = true;
        StringBuffer buf = new StringBuffer();
        for( int i=0; i<ip.length; i++ ){
            if( aIsFirst ){
                buf.append( ip[i] + "/" + port[i] );
                aIsFirst = false;
            }else{
                buf.append(";");
                buf.append( ip[i] + "/" + port[i] );
            }
        }
        return buf.toString();
    }

    private String getCombinedIP( String[] ip ){
        boolean aIsFirst = true;
        StringBuffer buf = new StringBuffer();
        for( int i=0; i<ip.length; i++ ){
            if( aIsFirst ){
                buf.append( ip[i] );
                aIsFirst = false;
            }else{
                buf.append("/");
                buf.append( ip[i] );
            }
        }
        return buf.toString();
    }

    private boolean checkPlatForm(){
        ArrayList<SubCluster> subList = this.cluster.getRealSubCluster();
        int size = subList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = (SubCluster)subList.get(i);
            if( subc.getHost() != null ){
                GetAgentInfo aGetAgentInfo = getGetAgentInfoCmdObj( subc.getHost().getUUID() );
                if( aGetAgentInfo != null ){
System.out.println(" winplat: "+ subc.getHost().getWinPlatForm() +" osre: "+aGetAgentInfo.getOSRelease() );
                    if( !subc.getHost().getWinPlatForm().equals( aGetAgentInfo.getOSRelease() ) ){
                        JOptionPane.showMessageDialog(view,
                            SanBootView.res.getString("MenuAndBtnCenter.error.mismatchedOS")
                        );
                        return false;
                    }
                }
            }
        }
        return true;
    }
    
    private GetAgentInfo getGetAgentInfoCmdObj( String uuid ){
        for( int i=0; i<getAgentInfo.length; i++ ){
            if( uuid.equals( getAgentInfo[i].getUUID() ) ){
                return getAgentInfo[i];
            }
        }
        return null;
    }

    private boolean isHostInfoChged(){
        BootHost aHost;
        GetAgentInfo aGetAgtInfo;
        SubCluster subc;
        
        ArrayList<SubCluster> subList = cluster.getRealSubCluster();
        int size = subList.size();
        for( int i=0; i<size; i++ ){
            subc = subList.get(i);
            aHost = subc.getHost();
            if( aHost != null  ){
                aGetAgtInfo =  getGetAgentInfoCmdObj( aHost.getUUID() );
                if( aGetAgtInfo != null ){
                    if( !BootHost.isSameHost2( aGetAgtInfo.getHostName(), aHost.getName(), aGetAgtInfo.getOSName(), aHost.getOS(),
                        aGetAgtInfo.getMachine(), aHost.getMachine(), aGetAgtInfo.getIP(), aHost.getIP(), 
                        aGetAgtInfo.getPri_ip(),aHost.getClnt_pri_ip(),aGetAgtInfo.getVip(),aHost.getClnt_vip(),
                        aGetAgtInfo.getPort(), aHost.getPort(),aGetAgtInfo.getMtppPort(),aHost.getClntPort1() )
                    ){
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private Vector assembleVolumeForTable( Cluster cluster, Vector[] partList ){
        int i,j,size;
        SystemPartitionForWin part;
        BindOfPartandVol binder;
        VolumeMap volMap;
        
        Vector volList = new Vector();
        for( i=0; i<partList.length; i++ ){
            size = partList[i].size();

            for( j=0; j<size; j++ ){
                part = (SystemPartitionForWin)partList[i].elementAt(j);
                binder = new BindOfPartandVol();
                binder.part = part;

                // 找出该cluster上已经创建好了的目标卷
                if( cluster != null ){
                    volMap = cluster.getVolMapFromClusterOnUUIDandLabel1( part.getHost_uuid(), part.getDiskLabel() );
                    if( volMap != null ){
                        binder.vol = view.getVolumeFromBindedTab( volMap.getVolTargetID() );
                        if( binder.vol != null ){
                            binder.ptype = volMap.getVol_protect_type();
                            binder.isProtected = true;
                            binder.action = 1;
                            binder.isRealVol = true;
SanBootView.log.debug( getClass().getName(), "===========: "+volMap.getVolTargetID());

SanBootView.log.debug( getClass().getName(),"===========: "+binder.vol.getCapStr1() );
                            binder.volSize = binder.vol.getCapStr1();
                            if( cluster.isMTPPProtect() ){
                                binder.maxSnap = volMap.getMaxSnapNum()+"";
                            }else{
                                PPProfile prof = view.initor.mdb.getBelongedDg( volMap.getVolClntID(),volMap.getVolDiskLabel() );
                                if( prof != null ){
                                    PPProfileItem master_disk = prof.getMainDiskItem();
                                    binder.maxSnap = master_disk.getMg().getMg_max_snapshot()+"";
                                }else{
                                    if( volMap.getVol_mgid() > 0 ){
                                        MirrorGrp mg = view.initor.mdb.getMGFromVectorOnID( volMap.getVol_mgid() );
                                        if( mg != null ){
                                            binder.maxSnap = mg.getMg_max_snapshot()+"";
                                        }else{
                                            binder.maxSnap = ResourceCenter.MAX_SNAP_CMDP_NUM+"";
                                        }
                                    }else{
                                        binder.maxSnap = volMap.getMaxSnapNum()+"";
                                    }
                                }
                            }
                            binder.desc = volMap.getVolDesc();
                        }else{
                            binder.volName=getDefaultVolName( part.getDiskLabel(), getAgentInfo[i].getIP() );
                        }
                    }else{
                        binder.volName =getDefaultVolName( part.getDiskLabel(), getAgentInfo[i].getIP() );
                    }
                }else{
                    binder.volName=getDefaultVolName( part.getDiskLabel(), getAgentInfo[i].getIP() );
                }

                if( binder.action == 0 ){
                    binder.isFormatted = true;
                }

                volList.addElement( binder );
            }
        }
        
        return volList;
    }

    private ArrayList getIPInfoFromCluster( String[] ip,int[] port ){
        boolean isOk;
        ArrayList netCardList,ret;
        int i,j,size;

        ret = new ArrayList();
        for( i=0; i<ip.length; i++ ){
            isOk = view.initor.mdb.getIPInfoFromClnt( ip[i],port[i],"00-00-00-00-00-00",ResourceCenter.CMD_TYPE_CMDP );
            if( !isOk ){
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                return null;
            }else{
                netCardList = view.initor.mdb.getAllNetCardinfo();
                size = netCardList.size();
                for( j=0; j<size; j++ ){
                    NetCard nc = (NetCard)netCardList.get(j);
                    nc.host_ip = ip[i];
                    ret.add( netCardList.get( j ) );
                }
            }
        }
        return ret;
    }
    
    private GetAgentInfo getHostOtherInfo( String ip,int port ){
        for( int i=0; i<this.getAgentInfo.length; i++ ){
            if( getAgentInfo[i].getIP().equals( ip ) && getAgentInfo[i].getPort() == port){
                return getAgentInfo[i];
            }
        }
        return null;
    }
    
    private void refreshCluster(){
        String aIP = null;
        int aPort = 0;
        Object[] ret;

        cluster.setCluster_name( this.selectHostPane.getClusterName() );
        cluster.removeAllSubCluster();

        ArrayList<SubCluster> diskList = selectSysVolPane.generateVolsForSubCluster();
        int size = diskList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = diskList.get(i);
            String key = subc.getHost().getIP();

            ret = this.selectHostPane.getHost( key );
            if( ret.length == 7 ) {
                subc.getHost().setIP( (String)ret[0] );
                subc.getHost().setPort( ((Integer)ret[1]).intValue() );
                subc.getHost().setMtppPort( ((Integer)ret[2]).intValue() );
                subc.getHost().setClnt_vip( (String)ret[3] );
                subc.getHost().setClnt_pri_ip( (String)ret[4] );

                aIP = (String)ret[5];
                aPort = ((Integer)ret[6]).intValue();
            }else if( ret.length == 6 ){
                subc.getHost().setIP( (String)ret[0] );
                subc.getHost().setPort( ((Integer)ret[1]).intValue() );
                subc.getHost().setMtppPort( ((Integer)ret[2]).intValue() );
                subc.getHost().setClnt_vip( (String)ret[3] );

                aIP = (String)ret[4];
                aPort = ((Integer)ret[5]).intValue();
            }else if( ret.length == 5 ) {
                subc.getHost().setIP( (String)ret[0] );
                subc.getHost().setPort( ((Integer)ret[1]).intValue() );
                subc.getHost().setMtppPort( ((Integer)ret[2]).intValue() );

                aIP = (String)ret[3];
                aPort = ((Integer)ret[4]).intValue();
            }
            subc.getD2d_host().setIP( (String)ret[0] );
            subc.getD2d_host().setPort( ((Integer)ret[2]).intValue() );

            GetAgentInfo getInfo = getHostOtherInfo( aIP,aPort );
            if( getInfo != null ){
                subc.getHost().setName( getInfo.getHostName() );
                subc.getHost().setMachine( getInfo.getMachine() );
                subc.getHost().setOS( getInfo.getOSName() );
                subc.getHost().setProtectType( BootHost.PROTECT_TYPE_CMDP );
                subc.getHost().setClusterBit();

                subc.getD2d_host().setHostName( getInfo.getHostName() );
                subc.getD2d_host().setMachineType( getInfo.getMachine() );
                subc.getD2d_host().setOsType( getInfo.getOSName() );
            }

            cluster.addSubCluster( subc );
        }
    }

    private Cluster pesudoCrtCluster(){
        String aIP = null;
        int aPort = 0;
        Object[] ret;

        Cluster aCluster = new Cluster();
        aCluster.setUseOdyDhcp();
        aCluster.setCluster_name( this.selectHostPane.getClusterName() );

        ArrayList<SubCluster> subcList = selectSysVolPane.generateVolsForSubCluster();
        int size = subcList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = subcList.get(i);
            String key = subc.getHost().getIP();
            
            ret = this.selectHostPane.getHost( key );
            if( ret.length == 7 ) {
                subc.getHost().setIP( (String)ret[0] );
                subc.getHost().setPort( ((Integer)ret[1]).intValue() );
                subc.getHost().setMtppPort( ((Integer)ret[2]).intValue() );
                subc.getHost().setClnt_vip( (String)ret[3] );
                subc.getHost().setClnt_pri_ip( (String)ret[4] );

                aIP = (String)ret[5];
                aPort = ((Integer)ret[6]).intValue();
            }else if( ret.length == 6 ){
                subc.getHost().setIP( (String)ret[0] );
                subc.getHost().setPort( ((Integer)ret[1]).intValue() );
                subc.getHost().setMtppPort( ((Integer)ret[2]).intValue() );
                subc.getHost().setClnt_vip( (String)ret[3] );

                aIP = (String)ret[4];
                aPort = ((Integer)ret[5]).intValue();
            }else if( ret.length == 5 ) {
                subc.getHost().setIP( (String)ret[0] );
                subc.getHost().setPort( ((Integer)ret[1]).intValue() );
                subc.getHost().setMtppPort( ((Integer)ret[2]).intValue() );

                aIP = (String)ret[3];
                aPort = ((Integer)ret[4]).intValue();
            }
            subc.getD2d_host().setIP( (String)ret[0] );
            subc.getD2d_host().setPort( ((Integer)ret[2]).intValue() );

            GetAgentInfo getInfo = getHostOtherInfo( aIP,aPort );
            if( getInfo != null ){
                if( subc.isLocalVolume() ){
                    subc.getHost().setUUID( getInfo.getUUID() );
                }else{
                    subc.getHost().setUUID("");
                }
                subc.getHost().setName( getInfo.getHostName() );
                subc.getHost().setMachine( getInfo.getMachine() );
                subc.getHost().setOS( getInfo.getOSName() );
                subc.getHost().setProtectType( BootHost.PROTECT_TYPE_CMDP );
                subc.getHost().setClusterBit();

                subc.getD2d_host().setHostName( getInfo.getHostName() );
                subc.getD2d_host().setMachineType( getInfo.getMachine() );
                subc.getD2d_host().setOsType( getInfo.getOSName() );
                if( subc.isLocalVolume() ){
                    subc.getD2d_host().setUUID( getInfo.getUUID() );
                }else{
                    subc.getD2d_host().setUUID("");
                }
            }
            
            aCluster.addSubCluster( subc );
        }

        return aCluster;
    }

    private NetCard getOneNc( String host_ip,ArrayList netCardList ){
        int size = netCardList.size();
        for( int i=0; i<size; i++ ){
            NetCard nc = (NetCard)netCardList.get(i);
            if( nc.isBelongedThisNc( host_ip ) ){
                return nc;
            }
        }
        return null;
    }
    
    private String[] getBootedMacForCluster( ArrayList netCardList ){
        boolean isOk;
        ArrayList<SubCluster> subcList = this.cluster.getRealSubCluster();
        int size = subcList.size();
        String[] ret = new String[size];
        for( int i=0; i<size; i++ ){
            SubCluster subc  = subcList.get(i);
            isOk = view.initor.mdb.getNetInfoFromMDB( ResourceCenter.CLT_IP_CONF+"/"+subc.getHost().getID() + ResourceCenter.CONF_IP );
            if( isOk ){
                ret[i] = view.initor.mdb.getBootMac();
            }else{
                ret[i] = "";
            }
            if( ret[i].equals("") ){
                NetCard nc = getOneNc( subc.getHost().getIP(),netCardList );
                if( nc != null ){
                    ret[i] = nc.mac;
                }
            }
        }
        return ret;
    }
    
    @Override public void cancelButtonProcess(){
        view.initor.mdb.assembleCluster(); // 防止初始化向导中途对mdb中的cluster对象进行了某些修改
        this.dispose();
    }
    
    @Override public void formWinClosing(){
        cancelButtonProcess();
    }
    
    private void assertCluster(){
        if( this.cluster != null && SanBootView.log.isDebugLevel() ){
            assert this.cluster.checkUnique();
        }
    }
    
    GetAgentInfo[] getAgentInfo;
    String uuid;   // 将集群中所有节点的uuid合并成一个字符串
    Cluster cluster = null; // 待创建的cluster对象
    @Override public void nextButtonProcess(){
        boolean startNet,isOk,contained;
        Vector volList,subnetList,ibootSrvList;
        Vector[] partList;
        ArrayList netCardList,profList,lpprofList;
        int i,j,size,indx;
        int[] mtpp_port,port;
        String[] ip,pri_ip,vip;
        String combinedIP;
        VolumeMap volMap;
        Volume vol;
        DhcpClientInfo dhcpClntInfo;
        InfoFromDhcpSetupPane dhcpSetPane; 
        String ip_3rd="",nextsrv_3rd="",ip_hba="";
        String[] oldmac;
        GetInitInfoForPhyThread getInitInfo;
        Object[] bootModeInfo;
        
        if( getTipTitle().compareTo(SanBootView.res.getString("PhyInitWinClusterWizardDialog.title1").trim() ) == 0 ){
            if( !selectHostPane.checkClntInfoValidity() ){
                selectHostPane.setFocusOnTextField1();
                return;
            }

            combinedIP = selectHostPane.getCombinedIP();
            ip   = selectHostPane.getIPList();
            pri_ip = selectHostPane.getPriIpList();
            vip = selectHostPane.getVipList();
            port = selectHostPane.getPortList();
            mtpp_port = selectHostPane.getMtppPortList();
            
            // Collect host information of cluster before initing it
            ProgressDialog initDiag = new ProgressDialog( 
                view,
                SanBootView.res.getString("View.pdiagTitle.getInitInfo"),
                SanBootView.res.getString("View.pdiagTip.getInitInfo")
            );
            getInitInfo = new GetInitInfoForPhyThread(
                initDiag, ip, pri_ip, vip, port, mtpp_port,true, view, this.getFirstFlag()
            );
            getInitInfo.start();
            initDiag.mySetSize();
            initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
            initDiag.setVisible( true );
            
            if( !getInitInfo.getAgtInfoIsOK() ){ return; }
            if( !getInitInfo.getOSServiceIsOK() ){ return; }
            if( !getInitInfo.getSystemPartIsOK() ){ return; }
            if( !getInitInfo.getDiskPartForWinIsOK() ){ return; }
            if( !getInitInfo.isStartupFromSAN() ){ return; }
            osService = getInitInfo.getOSServicelist();
            getAgentInfo = getInitInfo.getAgentInfoCmdObj();
            uuid = getInitInfo.getMemberUUID(); //gui上第一个成员节点的uuid
            
            // 重新整理一下cluster内部的逻辑关系，之前的操作有可能会破换逻辑关系
            view.initor.mdb.assembleCluster();
            
            // 必须采用uuid来唯一识别Cluster（2011.7.12）
            cluster = getSelectCluster( uuid );
            
            // 检查集群的host信息是否有不一致的地方, 如有不一致就修改
            if( cluster != null ){
                // MDB中已经存在该cluster
SanBootView.log.debug( getClass().getName()," ######### re-init exist cluster: "+ getIpPortPair( ip,port ) );
                
                if( cluster.isMTPPProtect() ){
                    JOptionPane.showMessageDialog( view,
                        SanBootView.res.getString("MenuAndBtnCenter.error.isProtectedByLP1")
                    );
                    return;
                }
                
                if( !cluster.isWinHost() ){
SanBootView.log.error( getClass().getName()," ##### cluster is not windows. uuid: "+ getInitInfo.getCombinedUUID() +" ip: "+ this.getCombinedIP( ip ) );
                    JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("MenuAndBtnCenter.error.badConsistance")
                    );
                    return;
                }
                
                // 检查平台是否冲突
                if( !getInitInfo.isWin() ){
                    JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("MenuAndBtnCenter.error.mismatchedOS")
                    );
                    return;
                }else{
                    // check platform confilict
                    if( !this.checkPlatForm() ){
                        return;
                    }
                }
                
                if( this.isHostInfoChged() ){
SanBootView.log.warning( getClass().getName(),"host info of cluster mismatched: " + this.getIpPortPair( ip, port ) );
                    // 将 host of cluster 的信息修改为最新获取的
                    if( !this.modifyHost() ){
                        return;
                    }else{
                        // 收集该机器上所有相关的vol,snap,view等,以便修改lunmap
                        if( !modifyLunMap( cluster.getCluster_id() ) ){
                            return;
                        }
                    }
                }else{
SanBootView.log.debug( getClass().getName(),"re-inited cluster isn't changed anything: "+ this.getCombinedIP( ip ) );
                }
            }else{
SanBootView.log.debug( getClass().getName()," ######### init a new cluster: "+ this.getIpPortPair( ip, port ) +". Maybe there is a conflict on UUID.");
            }
            
            if( this.getFirstFlag() ){ // 第一次先获取所有的卷(不管孤立还是不孤立)
                if( !getInitInfo.getOrphanVolIsOK() ){
                    return;
                }else{
                    ArrayList alist = getInitInfo.getOrphanVolList();
                    size = alist.size();
SanBootView.log.debug( getClass().getName(), "disk num: " + size );
                    for( i=0; i<size; i++ ){
                        vol = (Volume)alist.get(i);
                        view.addVolumeToUnSelTabForTID( vol.getTargetID(), vol );
                    }
                    
                    Vector list = view.initor.mdb.getAllVolMaps();
                    size = list.size();
SanBootView.log.debug( getClass().getName(), "VolMap num: " + size );
                    for( j=0; j<size; j++ ){
                        volMap = (VolumeMap)list.elementAt(j);
                        
                        // 检查volmap是否合法（判断rootid是否有效）
                        if( !isValidRootId( volMap.getVol_rootid(),alist ) ) continue;
                        
                        int tid = volMap.getVolTargetID();
                        if( view.hasThisVolInUnSelTab( tid ) ){ // 说明volMap不是windows的volmap，就是unix的tgt volmap
SanBootView.log.debug( getClass().getName(),"  volmap object is in unsel hash table: "+ tid +" pick it into selected hash table." );
                            vol = view.getVolumeFromUnSelTab( tid );
                            view.addVolumeToBindedTabForTID( tid,vol );  // add to binded hashtable
                            view.removeVolumeFromUnSelTabForTID( tid );   // remove from unselected hashtable
                        }else{ //volMap只能是unix的vg或lv volmap
                            if( volMap.getVolDesc().equals("VG") ){
                                indx = volMap.getVolName().indexOf("_", 3);
                                try{
                                    tid = Integer.parseInt( volMap.getVolName().substring(indx+1) );
                                }catch(Exception ex){
                                    tid = -1;
                                }
                            }else{
                                indx= volMap.getVolDesc().indexOf("_", 3);
                                try{
                                    tid = Integer.parseInt( volMap.getVolDesc().substring(indx+1));
                                }catch(Exception ex){
                                    tid = -1;
                                }
                            }
                            
                            if( view.hasThisVolInUnSelTab( tid ) ){ 
SanBootView.log.debug( getClass().getName()," volmap object(vg or lv) is in unsel hash table: "+ tid +"  pick it into selected hash table." );
                                vol = view.getVolumeFromUnSelTab( tid );
                                view.addVolumeToBindedTabForTID( tid,vol );  // add to binded hashtable
                                view.removeVolumeFromUnSelTabForTID( tid ); //  remove from unselected hashtable
                            }
                        }
                    }
                    
                    ArrayList mdiList = view.initor.mdb.getAllMDI();
                    size = mdiList.size();
SanBootView.log.debug( getClass().getName(), "mdi num: " + size );
                    for( j=0; j<size; j++ ){
                        MirrorDiskInfo mdi = (MirrorDiskInfo)mdiList.get(j);
                        
                        // 检查mdi是否与主机关联
                        if( mdi.getTargetID() <= 0 ) continue;
                        
                        int tid = mdi.getTargetID();
                        if( view.hasThisVolInUnSelTab( tid ) ){ // 说明该mdi正在关联着
SanBootView.log.debug( getClass().getName(),"  volmap object is in unsel hash table: "+ tid +" pick it into selected hash table." );
                            vol = view.getVolumeFromUnSelTab( tid );
                            view.addVolumeToBindedTabForTID( tid,vol );  // add to binded hashtable
                            view.removeVolumeFromUnSelTabForTID( tid ); //  remove from unselected hashtable
                        }
                    }
                    
                    view.printBindedTabContents();
                }
                setFirstFlag( false );
            }
            
            selectSysVolPane.setupVipList( this.selectHostPane.getVipList() );
            selectSysVolPane.setupPubIPList( this.selectHostPane.getPubIpList() );
            selectSysVolPane.setClusterType( this.selectHostPane.getClusterType() );
            
            partitionContent = getInitInfo.getSystemPartContents();
            diskDetailInfo = getInitInfo.getDiskDetailInfo();
            startNet = getInitInfo.isStartFromNet(); // 只要集群中有一个成员是网启的，我们就认为整个集群是网启的。
            if( startNet ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("InitBootHostWizardDialog.error.bootFromNet")
                );
                return;
            }
            partList = getInitInfo.getSysPartList();
            
            volList = this.assembleVolumeForTable( cluster,partList );
            selectSysVolPane.setupTable( volList );
            selectSysVolPane.setCurVolUsage( volList );
assertCluster();
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selDisk") );
            removePaneFromContentPane( selectHostPane );
            addPaneOntoContentPane( selectSysVolPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selDisk").trim() ) == 0 ){
            selectSysVolPane.fireEditingStopMsg();

            if( !selectSysVolPane.hasProtectOSDiskForCluster() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitBootHostWizardDialog.error.mustProtectOS")
                );
                return ;
            }

            if( !selectSysVolPane.hasSharedDiskToProtect() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("PhyInitWinClusterWizardDialog.error.notProtectSharedDisk")
                );
                return ;
            }

            if( !selectSysVolPane.hasLocalDiskToProtect() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("PhyInitWinClusterWizardDialog.error.notProtectLocalDisk")
                );
                return ;
            }

            // 检查共享盘和本地盘是否存在冲突。比如：共享盘E，同时还有本地盘E
            if( !selectSysVolPane.checkConflictOnSharedDisk() ) {
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("PhyInitWinClusterWizardDialog.error.conflictOnSharedLocalDisk")
                );
                return ;
            }

            // 检查共享盘之间是否存在冲突。比如：A节点的共享盘E被保护了，而B节点的共享盘E不被保护
            if( !selectSysVolPane.checkConflictOnSharedDisk1() ) {
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("PhyInitWinClusterWizardDialog.error.conflictOnSharedDisks")
                );
                return ;
            }

            if( ( this.selectHostPane.getClusterType() == ResourceCenter.TYPE_CLUS_NOT_RAC_INT ) && !selectSysVolPane.checkConflictOnSharedDisk2() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("PhyInitWinClusterWizardDialog.error.conflictOnSharedDisks1")
                );
                return ;
            }
            
            if( !selectSysVolPane.checkVolInfoValidity() ){ return; }
            
            if( cluster == null ){
                // 构造一个虚的cluster结构
                cluster = this.pesudoCrtCluster();
            }else{
                this.refreshCluster();
            }
            
            selectHbDskPane.setupComboBox( selectSysVolPane.getAvaiableHeartbeatDiskForCMDP() );
            combinedIP = selectHostPane.getCombinedIP();
            contained = this.hbDskOnClnt.containsKey( new String( combinedIP ) );
            if( !contained ){
                // get heartbeat disk info
                isOk = view.initor.mdb.getHeartbeatDiskInfo( ResourceCenter.CLT_IP_CONF + "/cluster-" + cluster.getCluster_id() + ResourceCenter.CONF_HeartBeat_Disk );
                String hbdsk="";
                if( isOk ){
                    hbdsk = view.initor.mdb.getHeartBeatDisk();
                }
                hbDskOnClnt.put( new String( combinedIP ), hbdsk );
                selectHbDskPane.setSelectedHbDsk( hbdsk );
            }else{
                String hbdsk = (String)hbDskOnClnt.get( new String( combinedIP ) );
                selectHbDskPane.setSelectedHbDsk( hbdsk );
            }
assertCluster();
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selHBDsk") );
            removePaneFromContentPane( selectSysVolPane );
            addPaneOntoContentPane( selectHbDskPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selHBDsk").trim() ) == 0 ){
            if( !this.selectHbDskPane.checkValidity() ){ return; }

            combinedIP = selectHostPane.getCombinedIP();
            ip = selectHostPane.getIPList();
            port = selectHostPane.getPortList();

            contained = bmodOnClnt.containsKey( new String( combinedIP ) );
            if( !contained ){
                if( cluster != null ){
                    if( cluster.isEmBoot() ){
                        bmodOnClnt.put( new String( combinedIP ), new Object[]{ new Integer(BootHost.BOOT_MODE_EM ) } );
                        selectNetBootModePane.setEmBootMode( true );
                        selectNetBootModePane.clickJRadioBtn1();
                    }else if( cluster.isIBoot() ){
                        bmodOnClnt.put( new String( combinedIP ), new Object[]{ new Integer(BootHost.BOOT_MODE_IBOOT ) } );
                        selectNetBootModePane.setIBootMode( true );
                        selectNetBootModePane.clickJRadioBtn2();
                    }else{
                        // get the 3rd dhcp info
                        isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF + "/cluster-" + cluster.getCluster_id() + ResourceCenter.CONF_3RD_DHCP );
                        if( isOk ){
                            ip_hba = view.initor.mdb.getIpFrom3rdDhcpInfo();
                        }
                        bmodOnClnt.put( new String( combinedIP ), new Object[]{ new Integer(BootHost.BOOT_MODE_ISCSI_HBA ) } );
                        selectNetBootModePane.setIScsiHBAMode( true );
                        selectNetBootModePane.clickJRadioBtn3();
                        selectNetBootModePane.setBootIPForIscsiHBA( ip_hba );
                    }
                }else{
                    bmodOnClnt.put( new String( combinedIP ), new Object[]{ new Integer(BootHost.BOOT_MODE_EM ) } );
                    selectNetBootModePane.setEmBootMode( true );
                }
            }else{
                Object val = bmodOnClnt.get( new String( combinedIP ) );
                bootModeInfo = ( Object[] )val;
                if( bootModeInfo.length == 1 ){
                    int mode = ((Integer)bootModeInfo[0]).intValue();
                    if( mode == BootHost.BOOT_MODE_EM ){
                        selectNetBootModePane.setEmBootMode( true );
                    }else{
                        selectNetBootModePane.setIBootMode( true );
                    }
                    selectNetBootModePane.clickJRadioBtn1();
                }else{
                    selectNetBootModePane.setIScsiHBAMode( true );
                    selectNetBootModePane.clickJRadioBtn3();
                    selectNetBootModePane.setBootIPForIscsiHBA( bootModeInfo[1].toString() );
                }
            }
assertCluster();
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode") );
            removePaneFromContentPane( this.selectHbDskPane );
            addPaneOntoContentPane( selectNetBootModePane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode").trim() ) == 0 ){
            if( selectNetBootModePane.isSelectIScsiHBAMode() ){
                if( !selectNetBootModePane.checkInput() ){ 
                    return;
                }
                
                ip   = selectHostPane.getIPList();
                port = selectHostPane.getPortList();
                mtpp_port = selectHostPane.getMtppPortList();
                
                ArrayList ncList = getNetCardList( ip,port );
                if( ncList == null ){
                    return;
                }
                
                if( isIPConfilict( ncList,selectNetBootModePane.getBootIPForIscsiHBA() ) ){
                    return;
                }
                
                profList = this.crtPseudoPPProfile( cluster );
                dupStrgyPane.setupTableForCMDP( profList,1 );
                dupStrgyPane.setOldProfList( profList );

                lpprofList = this.crtPseudoLPProfile( selectHostPane.getCombinedIP(),cluster );
                dupStrgyPane.setupTableForMTPP( lpprofList );
                dupStrgyPane.getBackupedHostList( cluster.getSubClusterList() );

                dupStrgyPane.setCluster( cluster );
assertCluster();
                setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.title6") );      
                removePaneFromContentPane( selectNetBootModePane );
                addPaneOntoContentPane( dupStrgyPane );
                refreshCenterPane();
                return;
            }else{  // select soft boot mode
                combinedIP = selectHostPane.getCombinedIP();
                ip = selectHostPane.getIPList();
                port = selectHostPane.getPortList();
                
                contained = cardOnClnt.containsKey( new String( combinedIP ) );
                if( !contained ){
                    netCardList = this.getIPInfoFromCluster( ip, port );
                    if( netCardList == null ){
                        return;
                    }
                    
                    cardOnClnt.put( new String( combinedIP ), netCardList );
                    oldmac = this.getBootedMacForCluster( netCardList );
                    
                    selectNetCardPane.setupNetCardTable( netCardList );
                    selectNetCardPane.setupGigaNetCard1( oldmac );
                }else{
                    Object val = cardOnClnt.get( new String( combinedIP ) );
                    netCardList = (ArrayList)val;
                    selectNetCardPane.setupNetCardTable( netCardList );
                }

                selectNetCardPane.addListener();
assertCluster();
                setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.title4") );                 
                removePaneFromContentPane( selectNetBootModePane );
                addPaneOntoContentPane( selectNetCardPane );
                refreshCenterPane();
                return;
            }
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title4").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            if( !selectNetCardPane.hasSelectedNetCard() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitBootHostWizardDialog.error.notSelCard")
                );
                return;
            }
            combinedIP = selectHostPane.getCombinedIP();
            ip = selectHostPane.getIPList();
            port = selectHostPane.getPortList();
            
            contained = dhcpOnClnt.containsKey( new String( combinedIP ) );
            if( !contained ){
                boolean isUseOdyDhcp = true;
                dhcpClntInfo = null;
                
                // 首先判断该主机是否使用了uws服务器上的dhcp服务
                // 如果主机不存在,则认为它使用了UWS服务器上的dhcp服务
                if( cluster != null ){
                    isUseOdyDhcp = cluster.isUseOdyDhcp();
                    
                    // get the 3rd dhcp info
                    isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/cluster-"+cluster.getCluster_id()+ ResourceCenter.CONF_3RD_DHCP );
                    if( isOk ){
                        ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                        nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                    }
                    if( ip_3rd.equals(""))
                        ip_3rd = ip[0];
                    if( nextsrv_3rd.equals("") )
                        nextsrv_3rd= view.initor.getTxIP(ip[0]);
                }else{
                    ip_3rd = ip[0];
                    nextsrv_3rd= view.initor.getTxIP(ip[0]);
                }
                
                if( view.initor.dhcpdb.isLoginOK() ){
                    // 获取UWS服务器上的subnet列表
                    subnetList = view.initor.dhcpdb.getSubnetListFromDhcp();
                    ibootSrvList = view.initor.dhcpdb.getIbootSrvListFromDhcp();
                }else{
                    // dhcp server不可用( 无法登陆它,可能没有关于它的配置信息,或者配置信息有误 )
                    subnetList = new Vector();
                    ibootSrvList = new Vector();
                }
                
                setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.title5") );  
                NetCard card = (NetCard)selectNetCardPane.getSelectNetCard(); 
                setDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,card.mac,isUseOdyDhcp,dhcpClntInfo,ip[0],ip_3rd,nextsrv_3rd );
            }else{
                setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.title5") ); 
                Object val = dhcpOnClnt.get( new String( combinedIP ) );
                dhcpSetPane = (InfoFromDhcpSetupPane)val;
                NetCard card = (NetCard)selectNetCardPane.getSelectNetCard(); 
                setDhcpPane.setDhcpSetInfo( dhcpSetPane.isUseOdyDhcp,dhcpSetPane.dhcpClntInfo,card.mac ); 
            }
assertCluster();
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane( setDhcpPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title5").trim() ) == 0 ){ 
            if( !setDhcpPane.checkDhcpInfoValidity() ){
                return;
            }
            
            ip   = selectHostPane.getIPList();
            port = selectHostPane.getPortList();
            mtpp_port = selectHostPane.getMtppPortList();
            
            profList = this.crtPseudoPPProfile( cluster );
            dupStrgyPane.setupTableForCMDP( profList,1 );
            dupStrgyPane.setOldProfList( profList );
            
            lpprofList = this.crtPseudoLPProfile( selectHostPane.getCombinedIP(),cluster );
            dupStrgyPane.setupTableForMTPP(  lpprofList );
            dupStrgyPane.getBackupedHostList( cluster.getSubClusterList() );
            
            dupStrgyPane.setCluster( cluster );
assertCluster();
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.title6") );      
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane( dupStrgyPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title6").trim() ) == 0 ){ 
            dupStrgyPane.fireEditingStopMsg();
            
            if( !dupStrgyPane.checkProfile() ){
                return;
            }
            
            int ret = JOptionPane.showConfirmDialog(
                view,
                SanBootView.res.getString("InitBootHostWizardDialog.confirm4"),
                SanBootView.res.getString("common.confirm"),  //"Confirm",
                JOptionPane.OK_CANCEL_OPTION
            );
            if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                return;
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.title7") );
            removePaneFromContentPane( dupStrgyPane );
            setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton( false );
            enableBackButton( false );
            enableCancelButton( false );
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
            if( !selectNetBootModePane.isSelectIScsiHBAMode() ){                
                runningTaskPaneForCMDP.ctrDhcpCb( setDhcpPane.isManualSetup(),((NetCard)selectNetCardPane.getSelectNetCard()).mac );
            }else{
                runningTaskPaneForCMDP.clearDhcptip();
            }
            addPaneOntoContentPane( runningTaskPaneForCMDP );
            refreshCenterPane();
assertCluster(); 
            beginInitClient();
            
            return;
        }
         
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title7").trim() ) == 0 ){ 
            if( allFinished ){
                if( !selectNetBootModePane.isSelectIScsiHBAMode() ){
                    if( setDhcpPane.isManualSetup() ){
                        if( runningTaskPaneForCMDP.isDoneDHCP() ){
                            JOptionPane.showMessageDialog( this,
                                SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK")
                            );
                            updateGUI();
                            dispose();
                        }else{
                            JOptionPane.showMessageDialog( this,
                                SanBootView.res.getString("InitNWinHostWizardDialog.error.notDoneManualJob")
                            );
                            return;
                        }
                    }else{
                        JOptionPane.showMessageDialog( this,
                            SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK")
                        );
                        updateGUI();    
                        dispose();
                    }
                }else{
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK")
                    );
                    updateGUI();    
                    dispose();
                }
            }else{
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitBootHostWizardDialog.error.needReInit")
                );
                updateGUI();
                dispose();
            }
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("PhyInitWinClusterWizardDialog.title").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("PhyInitWinClusterWizardDialog.title1") );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( selectHostPane );
            selectHostPane.setFocusOnTextField1();
            refreshCenterPane();
            return;
        }else{
            return;
        }
    }
    
    private void beginInitClient(){
        Thread initThread = new Thread( new InitializingBootHost( this ) );
        initThread.start();
    }
    
    public void updateGUI(){
        if( !hasAddBootHost ){ //没有增加cluster
            updateOldClusterOnTree();
        }else{      
            if( isAddHostOk ){ //增加cluster成功
                initNewClusterOnTree();       
            }else{ //失败
                // do nothing
            }
        }
    }
    
    private void updateOldClusterOnTree(){
        int i,size;
        VolumeMap vol;
        BrowserTreeNode volMapNode;
        
        BrowserTreeNode chiefHostNode = view.getChiefNodeOnRoot( ResourceCenter.TYPE_CHIEF_HOST_INDEX );
        if( chiefHostNode == null ) return;
        
        BrowserTreeNode clusterNode = view.getClusterNodeOnChiefHostNode( chiefHostNode, cluster.getCluster_id() );
        if( clusterNode == null ) return;
        clusterNode.setUserObject( cluster ); // cluster的属性也许变化了
        
        BrowserTreeNode chiefHostVolNode = view.getChiefHostVolNodeOnHostNode( clusterNode );
        if( chiefHostVolNode == null ) return;
        
        // 先删除
        chiefHostVolNode.removeAllChildren();
        
        // 最新的volmap belonged to this cluster
        Vector volMapList = view.initor.mdb.getVolFromCluster1( cluster.getCluster_id() );
        size = volMapList.size();
        for( i=0; i<size; i++ ){
            vol = (VolumeMap)volMapList.elementAt(i);
            
            volMapNode = new BrowserTreeNode( vol,false );
            vol.setTreeNode( volMapNode );
            vol.setFatherNode( chiefHostVolNode );
                
            // 准备lunmap list node
            ChiefLunMap chiefLm = new ChiefLunMap();
            BrowserTreeNode chiefLmNode = new BrowserTreeNode( chiefLm, true );
            chiefLm.setTreeNode( chiefLmNode );
            chiefLm.setFatherNode( volMapNode );
            volMapNode.add( chiefLmNode );

            if( vol.isCMDPProtect() ){
                // 准备snapshot list node
                ChiefSnapshotForCMDP chiefSnapForCMDP = new ChiefSnapshotForCMDP( vol.isOsVolMap() );
                BrowserTreeNode chiefSnapNode = new BrowserTreeNode( chiefSnapForCMDP,false );
                chiefSnapForCMDP.setTreeNode( chiefSnapNode );
                chiefSnapForCMDP.setFatherNode( volMapNode );
                volMapNode.add( chiefSnapNode );
            }else{
                ChiefSnapshot chiefSnap = new ChiefSnapshot();
                BrowserTreeNode chiefSnapNode = new BrowserTreeNode( chiefSnap,false );
                chiefSnap.setTreeNode( chiefSnapNode );
                chiefSnap.setFatherNode( volMapNode );
                volMapNode.add( chiefSnapNode );
            }
            
            // 准备mj list node
            ChiefMirrorJobList chiefMjList = new ChiefMirrorJobList();
            BrowserTreeNode chiefMjNode = new BrowserTreeNode( chiefMjList,false );
            chiefMjList.setTreeNode( chiefMjNode );
            chiefMjList.setFatherNode( volMapNode );
            volMapNode.add( chiefMjNode );

            // unlimited incremental mirror vol list
            ChiefLocalUnLimitedIncMirrorVolList chiefUIMVolList = new ChiefLocalUnLimitedIncMirrorVolList();
            BrowserTreeNode chiefUIMVolNode = new BrowserTreeNode( chiefUIMVolList,false );
            chiefUIMVolList.setTreeNode( chiefUIMVolNode );
            chiefUIMVolList.setFatherNode( volMapNode );
            volMapNode.add( chiefUIMVolNode );

            // clone disk list
            ChiefCloneDiskList chiefCloneDiskList = new ChiefCloneDiskList();
            BrowserTreeNode chiefCloneDiskNode = new BrowserTreeNode( chiefCloneDiskList,false );
            chiefCloneDiskList.setTreeNode( chiefCloneDiskNode );
            chiefCloneDiskList.setFatherNode( volMapNode );
            volMapNode.add( chiefCloneDiskNode );
            
            chiefHostVolNode.add( volMapNode ); 
        }  
         
        view.reloadTreeNode( chiefHostVolNode );
        
        view.setCurNode( chiefHostNode );
        view.setCurBrowserEventType( Browser.TREE_SELECTED_EVENT );
        ProcessEventOnChiefHost peOnChiefHost = new ProcessEventOnChiefHost( view );
        TreePath path = new TreePath( chiefHostNode.getPath() );
        peOnChiefHost.processTreeSelection( path );
        peOnChiefHost.controlMenuAndBtnForTreeEvent();
    }
    
    private void initNewClusterOnTree(){
        int i,size;
        VolumeMap vol;
        
        BrowserTreeNode chiefHostNode = view.getChiefNodeOnRoot( ResourceCenter.TYPE_CHIEF_HOST_INDEX );
        
        BrowserTreeNode clusterNode = new BrowserTreeNode( cluster,false );
        cluster.setTreeNode( clusterNode );
        cluster.setFatherNode( chiefHostNode );
        chiefHostNode.add( clusterNode );

        ChiefMemberNode chiefMembers = new ChiefMemberNode();
        BrowserTreeNode chiefMembersNode = new BrowserTreeNode( chiefMembers,false );
        chiefMembers.setTreeNode( chiefMembersNode );
        chiefMembers.setFatherNode( clusterNode );

        ChiefHostVolume chiefHostVol = new ChiefHostVolume();
        BrowserTreeNode chiefHVolNode = new BrowserTreeNode( chiefHostVol,false );
        chiefHostVol.setTreeNode( chiefHVolNode );
        chiefHostVol.setFatherNode( clusterNode );

        ChiefPPProfile chiefPPProf = new ChiefPPProfile();
        BrowserTreeNode chiefPProfNode = new BrowserTreeNode( chiefPPProf,true );
        chiefPPProf.setTreeNode( chiefPProfNode );
        chiefPPProf.setFatherNode( clusterNode );

        ChiefProfile chiefProf = new ChiefProfile();
        BrowserTreeNode chiefLProfNode = new BrowserTreeNode( chiefProf,false );
        chiefProf.setTreeNode( chiefLProfNode );
        chiefProf.setFatherNode( clusterNode );

        ChiefNetBootHost chiefNBootHost = new ChiefNetBootHost();
        BrowserTreeNode chiefNBHNode = new BrowserTreeNode( chiefNBootHost,false );
        chiefNBootHost.setTreeNode( chiefNBHNode );
        chiefNBootHost.setFatherNode( clusterNode );

        clusterNode.add( chiefMembersNode );
        clusterNode.add( chiefHVolNode );
        clusterNode.add( chiefPProfNode );
        clusterNode.add( chiefLProfNode );
        clusterNode.add( chiefNBHNode );
               
        Vector volMapList = view.initor.mdb.getVolFromCluster1( cluster.getCluster_id() );
        size = volMapList.size();
        for( i=0; i<size; i++ ){ 
            vol = (VolumeMap)volMapList.elementAt(i);
             
            BrowserTreeNode volNode = new BrowserTreeNode( vol, false );
            vol.setTreeNode( volNode );
            vol.setFatherNode( chiefHVolNode );
            
            // 准备lunmap list node
            ChiefLunMap chiefLm = new ChiefLunMap();
            BrowserTreeNode chiefLmNode = new BrowserTreeNode( chiefLm, true );
            chiefLm.setTreeNode( chiefLmNode );
            chiefLm.setFatherNode( volNode );
            volNode.add( chiefLmNode );

            if( vol.isCMDPProtect() ){
                // 准备snapshot list node
                ChiefSnapshotForCMDP chiefSnapForCMDP = new ChiefSnapshotForCMDP( vol.isOsVolMap() );
                BrowserTreeNode chiefSnapNode = new BrowserTreeNode( chiefSnapForCMDP,false );
                chiefSnapForCMDP.setTreeNode( chiefSnapNode );
                chiefSnapForCMDP.setFatherNode( volNode );
                volNode.add( chiefSnapNode );
            }else{
                ChiefSnapshot chiefSnap = new ChiefSnapshot();
                BrowserTreeNode chiefSnapNode = new BrowserTreeNode( chiefSnap,false );
                chiefSnap.setTreeNode( chiefSnapNode );
                chiefSnap.setFatherNode( volNode );
                volNode.add( chiefSnapNode );
            }

            // 准备mj list node
            ChiefMirrorJobList chiefMjList = new ChiefMirrorJobList();
            BrowserTreeNode chiefMjNode = new BrowserTreeNode( chiefMjList,false );
            chiefMjList.setTreeNode( chiefMjNode );
            chiefMjList.setFatherNode( volNode );
            volNode.add( chiefMjNode );

            // unlimited incremental mirror vol list
            ChiefLocalUnLimitedIncMirrorVolList chiefUIMVolList = new ChiefLocalUnLimitedIncMirrorVolList();
            BrowserTreeNode chiefUIMVolNode = new BrowserTreeNode( chiefUIMVolList,false );
            chiefUIMVolList.setTreeNode( chiefUIMVolNode );
            chiefUIMVolList.setFatherNode( volNode );
            volNode.add( chiefUIMVolNode );

            // clone disk list
            ChiefCloneDiskList chiefCloneDiskList = new ChiefCloneDiskList();
            BrowserTreeNode chiefCloneDiskNode = new BrowserTreeNode( chiefCloneDiskList,false );
            chiefCloneDiskList.setTreeNode( chiefCloneDiskNode );
            chiefCloneDiskList.setFatherNode( volNode );
            volNode.add( chiefCloneDiskNode );

            chiefHVolNode.add( volNode ); 
        }
        
        view.reloadTreeNode( chiefHostNode );
        
        view.setCurNode( chiefHostNode );
        view.setCurBrowserEventType( Browser.TREE_SELECTED_EVENT );
        ProcessEventOnChiefHost peOnChiefHost = new ProcessEventOnChiefHost( view );
        TreePath path = new TreePath( chiefHostNode.getPath() );
        peOnChiefHost.processTreeSelection( path );
        peOnChiefHost.controlMenuAndBtnForTreeEvent();
    }
    
    private boolean isFindedThisService( String ser_name ){
        int size = this.osService.size();
        for( int i=0; i<size; i++ ){
            Service service = (Service)osService.get(i);
            if( service.getServName().equals( ser_name ) ){
                return true;
            }
        }
        return false;
    }

    public void addNewService( Vector newOsServiceList ){
        int size = newOsServiceList.size();
        for( int i=0; i<size; i++ ){
            Service new_service = (Service)newOsServiceList.get(i);
            if( !this.isFindedThisService( new_service.getServName() ) ){
                this.osService.add( new_service );
            }
        }
    }
    
    private String getOsServiceContents(){
        boolean isFirst = true;

        StringBuffer buf = new StringBuffer();
        int size = this.osService.size();
        for( int i=0; i<size; i++ ){
            Service service = (Service)this.osService.get(i);
            if( isFirst ){
                buf.append("*isEnd=1 *return=0");
                buf.append("\n" + service.prtMeByCMDP() );
                isFirst = false;
            }else{
                buf.append("\n"+service.prtMeByCMDP() );
            }
        }

        String str = buf.toString();
        if( str.equals("") ){
            buf.append("NoneService");
            return buf.toString();
        }else{
            return str;
        }
    }

    public void setInitLog( ){}
    public void setProcess(){}
    
    // 如果下面两个中有一个为false，则不能进行数据复制
    boolean buildMirrorOK = true;
    boolean crtVolStepOK = true;
    boolean formatVolStepOK = true;
    
    // 下面这些记录了os volume创建和格式化的状态，保留这些状态，也许将来有用
    boolean hasCrtOSDisk=false;  // 表明os vol是创建产生的
    boolean isCrtOSDiskOk=false;  // 表明os vol创建成功
    boolean hasLoginOSDisk=false; // 表明要login os vol
    boolean isLoginOSDiskOk=false; // 表明 os vol login成功
    boolean isFormatOSDiskOk=false; // 表明os vol格式化成功
    
    boolean addPortal=false,listTargets=false;
    BindOfPartandVol OSBinder = null;
    String iscsiVarForOSDisk="";
    String targetSrvName="";
    boolean allFinished = false;    // 表明所有task都成功完成了
    boolean hasAddBootHost = false; //是否增加了新cluster
    boolean isAddHostOk = true;     // 增加cluster是否成功
    
    String errMsg;
    @Override public void writeLogBuf( String errMsg,int which ){
        if( isWrFirst ){
            logBuf.append( runningTaskPaneForCMDP.getTabStr( which ) + replaceLine( errMsg ) );
            isWrFirst = false;
        }else{
            logBuf.append( ResourceCenter.NEWLINE_STRING + runningTaskPaneForCMDP.getTabStr( which ) + replaceLine( errMsg ) );
        }
    }
    
    public void putIntoLogBuf( String errMsg,int which ){
        writeLogBuf( errMsg,which );
    }

    private int getMaxSnapSetOnGUI( String drive_letter ){
        ArrayList<PPProfile> curNewPPPList = this.dupStrgyPane.getCMDPProfileInfoFromTab1();
        int size = curNewPPPList.size();
        for( int i=0; i<size; i++ ){
            PPProfile prof = (PPProfile)curNewPPPList.get(i);
            if( prof.getItem( drive_letter ) != null ){
                return prof.getTemp_max_snap();
            }
        }
        return 0;
    }
    
    private Object[] getRealIPAndPort( AccessPath ap ){
        Object[] ret;
        ArrayList<SubCluster> subcList = this.cluster.getSubClusterList();
        int size = subcList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = subcList.get(i);
            BootHost aHost = subc.getHost();
            if( aHost.getIP().equals( ap.ip ) || aHost.isContainedInVip( ap.ip ) ){
                ret = new Object[4];
                ret[0] = aHost.getIP();
                ret[1] = new Integer( aHost.getPort() );
                ret[2] = new Integer( aHost.getMtppPort() );
                ret[3] = aHost;
                return ret;
            }
        }
        return null;
    }

    private String getIPConfigForCluster( Hashtable ipConf ){
        boolean isFirst = true;
        StringBuffer buf = new StringBuffer();
        Enumeration list = ipConf.elements();
        while( list.hasMoreElements() ){
            if( isFirst ){
                buf.append( list.nextElement() );
                isFirst = false;
            }else{
                buf.append("\n"+list.nextElement() );
            }
        }
        return buf.toString();
    }
    
    private boolean addLunMapForSharedDisk( int tid ){
        ArrayList<SubCluster> subcList = this.cluster.getRealSubCluster();
        int size = subcList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = subcList.get(i);
            if( !view.initor.mdb.addLunMap( tid, subc.getHost().getIP(), "255.255.255.255", "rw", "", "", "", "") ){
                return false;
            }
        }
        return true;
    }
    
    private void hasLunMapForSharedDisk( int tid ){
        ArrayList<SubCluster> subcList = this.cluster.getRealSubCluster();
        int size = subcList.size();
        String[] ip_list = new String[size];
        for( int i=0; i<size; i++ ){
            SubCluster subc = subcList.get(i);
            ip_list[i] = subc.getHost().getIP();
        }
        addLunMapForSelectedVolOnIP( tid,ip_list );
    }
    
    private void addLunMapForSelectedVolOnIP( int tid,String[] ip_list ){
        boolean founded;
        Vector<LunMap> lmList;
        int i,size,j;
        LunMap lm;
        
        // 首先删除老的、没用的lunmap,不管是否成功删除
        boolean isOk = view.initor.mdb.getLunMapForTID( tid );
        if( isOk ){
            lmList = view.initor.mdb.getAllLunMapForTid();
            size = lmList.size();
            for( i=0; i<size; i++ ){
                lm = (LunMap)lmList.elementAt( i);
                founded = false;
                for( j=0; j<ip_list.length; j++ ){
                    if( lm.getIP().equals( ip_list[j] ) ){
                        founded = true;
                        break;
                    }
                }
                if( !founded ){
                    view.initor.mdb.delLunMap( tid, lm.getIP(),lm.getMask(), lm.getAccessMode() );
                }
            }

            for( i=0; i<ip_list.length; i++ ){
                founded = false;
                for( j=0; j<size; j++ ){
                    lm = (LunMap)lmList.elementAt( j );
                    if( ip_list[i].equals( lm.getIP() ) ){
                        founded = true;
                        break;
                    }
                }

                if( !founded ){
                    isOk = view.initor.mdb.addLunMap( tid, ip_list[i], "255.255.255.255", "rw", "", "", "", "" );
                    if( isOk ){
                        runningTaskPaneForCMDP.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid +" "+ ip_list[i] + " 255.255.255.255 rw ]" + " " +
                                SanBootView.res.getString("common.ok") ,
                            RunningTaskPaneForCMDP.CRT_VOL_ROW
                        );
                    }else{
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid +" "+ ip_list[i] + " 255.255.255.255 rw ]" + " " +
                                   SanBootView.res.getString("common.failed");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        crtVolStepOK = false;
                    }
                }
            }
        }else{
            for( i=0; i<ip_list.length; i++ ){
                isOk = view.initor.mdb.addLunMap( tid, ip_list[i], "255.255.255.255", "rw", "", "", "", "" );
                if( isOk ){
                    runningTaskPaneForCMDP.setLogOnTabpane(
                        SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid +" "+ ip_list[i] + " 255.255.255.255 rw ]" + " " +
                            SanBootView.res.getString("common.ok") ,
                        RunningTaskPaneForCMDP.CRT_VOL_ROW
                    );
                }else{
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid +" "+ ip_list[i] + " 255.255.255.255 rw ]" + " " +
                               SanBootView.res.getString("common.failed");
                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                    crtVolStepOK = false;
                }
            }
        }
    }
    
    public void initBootHost(){
        Vector volInfo;
        BindOfPartandVol binder;
        int i,j,crtSize,formatSize,selSize,size,max_snap,bksize,bkNum,tid,targetID,port,mtpp_port;
        long volSize;
        boolean isOk,isOk1,mayLogout;
        String driver,volName,iscsiVar,args,ip,dskUUID;
        NetCard netCard;
        Volume osVol;
        boolean getInfoStepOK,saveInfoStepOK;
        Object[] ip_port;

SanBootView.log.info( getClass().getName()," @@#################  Init Windows Cluster By physical mode Begin ###################@@ ");
        
        // 1. build mirror and mtpp protection
        buildMirrorOK = true;
        runningTaskPaneForCMDP.setCurTabPane( RunningTaskPaneForCMDP.CRT_VOL_ROW );
        runningTaskPaneForCMDP.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
        );
SanBootView.log.info( getClass().getName()," @@#################  Build Mirror Begin ###################@@ ");
        
        boolean autoDRReover = false;
        boolean autoReboot   = false;
        boolean stopBaseServ = selectServPane.isStopAllService();

        if( !selectNetBootModePane.isSelectIScsiHBAMode() ){
            netCard = (NetCard)selectNetCardPane.getSelectNetCard(); // 肯定有
        }else{
            netCard = new NetCard( "00-00-00-00-00-00" );
        }
        
        if( this.cluster.getCluster_id() > 0 ){ // MDB中已经存在该cluster
            hasAddBootHost = false;
            isAddHostOk = true;  // 为了与下面的"增加cluster分支"相匹配
        }else{ // cluster and its host 不在 MDB中
            hasAddBootHost = true;
            isAddHostOk = true;  // 增加host是否成功
            
            // 首先增加cluster
            cluster.setCluster_inited_flag( 0 );
            cluster.setCluster_auto_dr_flag( autoDRReover?1:0 );
            cluster.setCluster_auto_reboot_flag( autoReboot?1:0 );
            cluster.setCluster_stop_base_service( stopBaseServ?1:0 );
            cluster.setCluster_mac_address( netCard.mac );
            cluster.setCluster_boot_mode( selectNetBootModePane.getBootMode() );
            cluster.setCluster_protect_type( BootHost.PROTECT_TYPE_CMDP );
            cluster.setCluster_type( this.selectHostPane.getClusterType() );
            
            isOk = view.initor.mdb.addOneCluster( cluster );
            if( !isOk ){
                isAddHostOk = false;
                runningTaskPaneForCMDP.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
                );
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addHost1");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
            }else{
                cluster.setCluster_id( view.initor.mdb.getNewId() );
                view.initor.mdb.addClusterToCache( cluster );
            }
        }
        
        boolean real_add_boot_host = false;
        if( isAddHostOk ){ // create Cluster object successfully
            // add member host(including d2d_clnt) into mdb
            ArrayList<SubCluster> subcList = cluster.getSubClusterList();
            size = subcList.size();
            for( i=0; i<size; i++ ){
                SubCluster subc = subcList.get(i);

                BackupClient d2d_clnt = subc.getD2d_host();
                if( d2d_clnt.getID() <= 0 ){
                    isOk = view.initor.mdb.addOneClient( d2d_clnt );
                    if( isOk ){
                        d2d_clnt.setID( view.initor.mdb.getNewId() );
                        view.initor.mdb.addBakClntIntoCache( d2d_clnt );
                    }else{
                        isAddHostOk = false;
                        runningTaskPaneForCMDP.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
                        );
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addHost1");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        break;
                    }
                }else{
                    isOk = view.initor.mdb.ModOneClient( d2d_clnt );
                    if( !isOk ){
                        isAddHostOk = false;
                        runningTaskPaneForCMDP.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
                        );
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addHost1");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        break;
                    }
                }
                
                BootHost aHost = subc.getHost();
                aHost.setBootMode( selectNetBootModePane.getBootMode() );
                aHost.setProtectType( BootHost.PROTECT_TYPE_CMDP );
                aHost.setClnt_cluster_id( cluster.getCluster_id() );
                aHost.setClnt_d2d_cid( (int)d2d_clnt.getID() );

                if( aHost.getID() <= 0 ){
                    real_add_boot_host = true;
                    isOk = view.initor.mdb.addOneBootHost( aHost );
                    if( isOk ){
                        aHost.setID( view.initor.mdb.getNewId() );
                        view.initor.mdb.addBootHostToVector( aHost );
                    }else{
                        isAddHostOk = false;
                        runningTaskPaneForCMDP.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
                        );
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addHost1");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        break;
                    }
                }else{
                    isOk = view.initor.mdb.modOneBootHost( aHost );
                    if( !isOk ){
                        isAddHostOk = false;
                        runningTaskPaneForCMDP.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
                        );
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addHost1");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        break;
                    }
                }
            }
        }
        
        if( !isAddHostOk ){
            // 增加主机对象失败,退出
            allFinished = false;
            recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@################# build mirror End ###################@@ ");
            return;
        }

        // 创建集群配置信息
        boolean hasSharedVolToProtectedByCmdp = this.selectSysVolPane.hasSharedVolumeToProtectByCmdp();
        if( real_add_boot_host && hasSharedVolToProtectedByCmdp ){
            // mirror_cluster_create只能执行一次，否则可能会破坏集群共享盘数据的一致性(2011.8.9 11:50)
            SystemPartitionForWin hbDsk = this.selectHbDskPane.getSelectedHbDsk();
            BootHost h = cluster.getOneRealHost();
            BootHost h1 = cluster.getOtherRealHost();
            
            // 先清除之前的配置,不管结果(实际上只需要删除一台机器上的配置，一台删成功后另外一台肯定出错) (2011.8.16)
            //isOk = view.initor.mdb.delMirrorCluster( h.getIP(),h.getPort() );
            //isOk1 = view.initor.mdb.delMirrorCluster( h1.getIP(), h1.getPort() );
            isOk = true; isOk1 = true;   // 不清楚配置，否则集群配置中的isMaster可能都为0（2011.8.31）
            if( isOk || isOk1 ){
                isOk = view.initor.mdb.createMirrorCluster( h.getIP(),h.getPort(), h.getClnt_pri_ip(),h1.getClnt_pri_ip(), hbDsk.getDiskUUID(), ResourceCenter.PORT_CLUSTER_CMDP );
                isOk1 = view.initor.mdb.createMirrorCluster( h1.getIP(),h1.getPort(), h1.getClnt_pri_ip(),h.getClnt_pri_ip(), hbDsk.getDiskUUID(), ResourceCenter.PORT_CLUSTER_CMDP );
                if( !isOk || !isOk1 ){
                    runningTaskPaneForCMDP.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
                    );
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.crtMirCluster");
                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );

                    // 创建集群信息失败
                    allFinished = false;
                    recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@################# build mirror End ###################@@ ");
                    return;
                }
            }else{
                runningTaskPaneForCMDP.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
                );
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.crtMirCluster");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );

                // 创建集群信息失败
                allFinished = false;
                recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@################# build mirror End ###################@@ ");
                return;
            }
        }
        
        volInfo = selectSysVolPane.getVolInfo();
        Vector crtList = new Vector();
        Vector selList = new Vector();
        Vector formatList = new Vector();

        size = volInfo.size();
        for( i=0; i<size ;i++ ){
            binder = (BindOfPartandVol)volInfo.elementAt( i );
            if( !binder.isProtected ) continue;
            
            if( binder.action == 0 ){
                crtList.addElement( binder );
            }
            if( binder.action == 1 ){
                selList.addElement( binder );
            }
            if( binder.isProtectedByMTPP() && binder.isFormatted ){
                formatList.addElement( binder ); // mtpp的新创建卷，要格式化一下
            }
        }
        
        int snap_in_lic =  view.initor.mdb.getSnapInLicOfCMDP();
        crtSize = crtList.size();
        formatSize = formatList.size();
        selSize = selList.size();

        if( ( crtSize > 0 ) || ( formatSize > 0 ) || ( selSize > 0 ) ){
            for( i=0; i<crtSize; i++ ){
                binder = (BindOfPartandVol)crtList.elementAt(i);
                ip_port = this.getRealIPAndPort( binder.ap );
                ip = (String)ip_port[0];
                port = ((Integer)ip_port[1]).intValue();
                
                driver = binder.part.getSingleDiskLetter();
                dskUUID = binder.part.getDskUUID();
                
                if( driver.equals("C") ){
                    // 表明OS volume 是创建出来的������
                    hasCrtOSDisk = true;
                }
                
                if( binder.isProtectedByCMDP() ){ // 该卷采用cmdp方式保护
                    Pool pool = view.initor.mdb.getPool( binder.poolid );
                    max_snap = getMaxSnapSetOnGUI( binder.part.getDiskLabel() );
                    if( max_snap == 0 ){
                        if( driver.equals("C") ){
                            max_snap = MirrorGrp.MAX_SNAP_SYSTEM_DISK;
                        }else{
                            max_snap = MirrorGrp.MAX_SNAP_DATA_DISK;
                        }
                    }
                    if( snap_in_lic < max_snap ){
                        max_snap = snap_in_lic;
                    }

                    // 事先清除client上可能存在的mirror
                    if( !driver.equals("") ){
                        if( !view.initor.mdb.delMirrorOnClnt( ip,port,driver ) ){
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.delMirOnClnt")+" [ " + driver+ " ] on " + ip + "/"+port;
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg ,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                            writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                            buildMirrorOK = false;
                            continue;
                        }
                    }else{
                        if( !view.initor.mdb.delMirrorOnClnt1( ip,port,dskUUID ) ){
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.delMirOnClnt")+" [ " + dskUUID+ " ] on " + ip + "/"+port;
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg ,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                            writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                            buildMirrorOK = false;
                            continue;
                        }
                    }

                    // 由于build mirror的时间不确定,故而一律将超时时间设置为10 hours
                    // buildMirroring会自动添加 persistent,lunmap,volmap和mg
                    view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT );
                    if( binder.desc.equals("") ){
                        if( !driver.equals("") ){
                            binder.desc = "mg-"+driver;
                        }else{
                            binder.desc = "mg-"+dskUUID;
                        }
                    }
                    String[] pub_ip = this.selectHostPane.getPubIpList();
                    if( !driver.equals("") ){
                        isOk = view.initor.mdb.buildMirroring( ip,port,driver,
                            "3600","65536",binder.blkSize,max_snap,binder.desc,pool.getPool_name(),2,pub_ip[0],pub_ip[1],""
                        );
                    }else{
                        isOk = view.initor.mdb.buildMirroring( ip,port,dskUUID,
                            "3600","65536",binder.blkSize,max_snap,binder.desc,pool.getPool_name(),2,pub_ip[0],pub_ip[1],"uuid"
                        );
                    }
                    view.initor.mdb.restoreOldTimeOut();

                    if( isOk ){
                        runningTaskPaneForCMDP.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.crtVol1") + " [ " + ( driver.equals("")?dskUUID:driver ) + " ] on " +ip+"/" +port+ " " +
                                SanBootView.res.getString("common.ok"),
                            RunningTaskPaneForCMDP.CRT_VOL_ROW
                        );

                        // 更新对应的volmap和mg
                        binder.volName = view.initor.mdb.getVolName();
                        isOk = view.initor.mdb.updateOneVolumeMap( binder.volName ); // 根据volName，从服务器的db中获取volMap的信息
                        if( isOk ){
                            VolumeMap newVolMap = view.initor.mdb.getOneVolMap( binder.volName );
                            if( newVolMap != null ){
                                newVolMap.setVol_cluster_id( cluster.getCluster_id() );
                                if( binder.ap.isLocal ){
                                    newVolMap.clearSharedDiskBit();
                                }else{
                                    newVolMap.setSharedDiskBit();
                                }
                                isOk = view.initor.mdb.modOneVolumeMap7( newVolMap.getVolName(),newVolMap.getVol_opt(),cluster.getCluster_id() );
                                if( isOk ){
                                    // add newVolMap into volmap cache
                                    view.initor.mdb.insertOneVolMapIntoVec( newVolMap );

                                    binder.targetID = newVolMap.getVolTargetID();
                                    binder.rootID = newVolMap.getVol_rootid();

                                    isOk = view.initor.mdb.updateOneMg( newVolMap.getVol_mgid() );
                                    if( isOk ){
                                        MirrorGrp mg = view.initor.mdb.getOneMgFromCache();
                                        if( mg != null ){
                                            // add mg into mg cache
                                            view.initor.mdb.addMGToVector( mg );
                                        }else{
                                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFindMg")+" [ " + ( driver.equals("")?dskUUID:driver )+ " ] on " +ip+"/" +port;
                                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg ,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                            writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                            buildMirrorOK = false;
                                            continue;
                                        }
                                    }else{
                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFindMg")+" [ " + ( driver.equals("")?dskUUID:driver )+ " ] on " +ip+"/" +port;
                                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg ,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                        buildMirrorOK = false;
                                        continue;
                                    }
                                }else{
                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modVolMap")+" [ " + ( driver.equals("")?dskUUID:driver )+ " ] on " +ip+"/" +port +" "+
                                            SanBootView.res.getString("common.failed");
                                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg ,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                    buildMirrorOK = false;
                                    continue;
                                }
                            }else{
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFindVol")+" [ " + ( driver.equals("")?dskUUID:driver )+ " ] on " +ip+"/"+port;
                                runningTaskPaneForCMDP.setLogOnTabpane( errMsg ,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                buildMirrorOK = false;
                                continue;
                            }
                        }else{
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFindVol")+" [ " + ( driver.equals("")?dskUUID:driver )+ " ] on " +ip+"/"+port;
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg ,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                            writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                            buildMirrorOK = false;
                            continue;
                        }

                        if( driver.equals("C") ){
                            // 表明OS disk创建成功了
                            isCrtOSDiskOk = true;
                            OSBinder = binder;
                        }
                    }else{
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.crtVol1") + " [ " + ( driver.equals("")?dskUUID:driver ) + " ] " +
                                  SanBootView.res.getString("common.failed") +" ret="+view.initor.mdb.getRetVal();
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        buildMirrorOK = false;
                    }
                }else{ // mtpp protection
                    volSize = binder.part.getSizeInGiga(); // 格式化为g为单位的整型数
                    bksize = ( 1<< binder.blkSize );
                    bkNum =(int)( ( volSize*1024*1024*1024 + bksize-1 )/bksize );
                    binder.volName = ((BootHost)ip_port[3]).getID() + "_" + this.getDefaultVolName( driver, ip ) + "_mtpp";

                    isOk = view.initor.mdb.addOrphVol( binder.volName, binder.blkSize,bkNum,binder.poolid );
                    if( isOk ){
                        runningTaskPaneForCMDP.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.crtVol") + " [ " + binder.volName + " ] on " +ip+"/"+port +
                                SanBootView.res.getString("common.ok"),
                            RunningTaskPaneForCMDP.CRT_VOL_ROW
                        );
                        binder.targetID = view.initor.mdb.getNewId();
                        binder.rootID = view.initor.mdb.getRootID();

                        if( driver.equals("C") ){
                            // 表明OS disk创建成功了
                            isCrtOSDiskOk = true;
                            OSBinder = binder;
                        }

                        tid = binder.targetID;
                        if( binder.ap.isLocal() ){
                            isOk = view.initor.mdb.addLunMap( tid, ip, "255.255.255.255", "rw", "", "", "", "");
                        }else{
                            isOk = addLunMapForSharedDisk( tid );
                        }
                        if( isOk ){
                            if( binder.ap.isLocal() ){
                                runningTaskPaneForCMDP.setLogOnTabpane(
                                    SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " " +
                                        SanBootView.res.getString("common.ok") ,
                                    RunningTaskPaneForCMDP.CRT_VOL_ROW
                                );
                            }else{
                                runningTaskPaneForCMDP.setLogOnTabpane(
                                    SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + this.selectHostPane.getCombinedIP() + " 255.255.255.255 rw ]" + " " +
                                        SanBootView.res.getString("common.ok") ,
                                    RunningTaskPaneForCMDP.CRT_VOL_ROW
                                );
                            }
                        }else{
                            if( binder.ap.isLocal ){
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " " +
                                      SanBootView.res.getString("common.failed") ;
                            }else{
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + selectHostPane.getCombinedIP() + " 255.255.255.255 rw ]" + " " +
                                      SanBootView.res.getString("common.failed") ;
                            }
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                            writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                            crtVolStepOK = false;
                        }
                    }else{
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.crtVol") + " [ " + binder.volName + " ]" + " " +
                                  SanBootView.res.getString("common.failed");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        crtVolStepOK = false;
                    }
                }
            } // end of for
            
            // 1.5 add lun-map for all selected existed volume
SanBootView.log.info( getClass().getName(),"seled vol num: "+selSize );
            for( i=0; i<selSize; i++ ){
                binder = (BindOfPartandVol)selList.elementAt(i);
                ip_port = this.getRealIPAndPort( binder.ap );
                ip = (String)ip_port[0];
                port = ((Integer)ip_port[1]).intValue();
                tid = binder.vol.getTargetID();
SanBootView.log.info( getClass().getName(),"begin to add lunmap for seled vol tid: " + tid );
                
                if( binder.ap.isLocal() ){
                    addLunMapForSelectedVolOnIP( tid,new String[]{ ip } );
                }else{
                    this.hasLunMapForSharedDisk( tid );
                }
            }
            
            // 1.2  format volume for mtpp protection
            formatVolStepOK = true;
SanBootView.log.info( getClass().getName()," @@#################  Format Volume Begin ###################@@ ");
            
            targetSrvName = view.initor.mdb.getHostName();
            if( targetSrvName.equals("") ){
SanBootView.log.error(getClass().getName(), " target server name is null.");
                formatVolStepOK = false;
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.getHostNameFailed");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
            }else{
                // 真正开始 format target vol
                for( i=0; i<formatSize; i++ ){
                    binder = (BindOfPartandVol)formatList.elementAt(i);
                    
                    ip_port = this.getRealIPAndPort( binder.ap );
                    ip = (String)ip_port[0];
                    port = ((Integer)ip_port[1]).intValue();
                    mtpp_port = ((Integer)ip_port[2]).intValue();
                    
                    int index = ip.lastIndexOf(".");
                    String lastItemOfIP = ip.substring( index + 1 );

                    // add portal
                    addPortal = view.initor.mdb.addPortal( ip, mtpp_port, view.initor.getTxIP(ip),ResourceCenter.ISCSI_LOGIN_PORT );
                    if( !addPortal ){
                        formatVolStepOK = false;
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addPortal") + " [ "+ view.initor.getTxIP(ip) +","+ResourceCenter.ISCSI_LOGIN_PORT +" ] "+
                                   SanBootView.res.getString("common.failed");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                    }else{
                        // 刷新 target disk; 如果失败，则clnt无法看见target vol,也就无法进行格式化了
                        listTargets = view.initor.mdb.listTargetDisk( ip,mtpp_port );
                        if( !listTargets ){
                            formatVolStepOK = false;
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.refreshTargets") +" on "+ip+"/"+mtpp_port+" "+
                                       SanBootView.res.getString("common.failed");
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                            writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                        }else{
                            if( binder.isRealVol ){ // GUI上选中了"孤立卷"
                                volName  = binder.vol.getSnap_name();
                                targetID = binder.vol.getTargetID();
                                iscsiVar = ResourceCenter.ISCSI_PREFIX+targetSrvName + ":" + targetID;
SanBootView.log.info( getClass().getName(), "targetid: "+ targetID + "  original dev size: "+binder.part.size+"  iscsi vol size: "+binder.volSize );

                                // 记录C盘所在的volume是否要login
                                osVol = selectSysVolPane.getSelectOSDiskVol();
                                if( osVol!=null ){
                                    if( osVol.getTargetID() == targetID ){
                                        hasLoginOSDisk = true;
                                    }
                                }

                                if( view.initor.mdb.hasThisTargetDisk( iscsiVar ) ){
                                    // login this target volume
                                    if( view.initor.mdb.loginTarget(
                                        ip,
                                        mtpp_port,
                                        iscsiVar
                                    )){
                                        runningTaskPaneForCMDP.setLogOnTabpane(
                                            SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") +" [ "+ iscsiVar + " ] on " + ip +" " +
                                                SanBootView.res.getString("common.ok") ,
                                            RunningTaskPaneForCMDP.CRT_VOL_ROW
                                        );

                                        // 记录C盘所在的volume是否成功login
                                        osVol = selectSysVolPane.getSelectOSDiskVol();
                                        if( osVol!=null ){
                                            if( osVol.getTargetID() == targetID ){
                                                isLoginOSDiskOk = true;
                                                iscsiVarForOSDisk = iscsiVar;
                                            }
                                        }

                                        // 由于iscsi卷的大小不能确定，所以format的时间不好确定，
                                        // 故而一律将超时时间设置为10 hours
                                        view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT );
                                        isOk = view.initor.mdb.formatVol(
                                            ip,
                                            mtpp_port,
                                            iscsiVar,
                                            binder.part.fsType,
                                            ResourceCenter.VOL_LABEL_PREFIX+lastItemOfIP+"-"+binder.part.getDiskLabel().substring(0,1),
                                            binder.part.isActivePart()? "Active" : "InActive"
                                        );
                                        view.initor.mdb.restoreOldTimeOut();

                                        if( isOk ){
                                            runningTaskPaneForCMDP.setLogOnTabpane(
                                                SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ] on " + ip + " " +
                                                    SanBootView.res.getString("common.ok"),
                                                RunningTaskPaneForCMDP.CRT_VOL_ROW
                                            );

                                            // 记录C盘所在的volume是否成功format
                                            mayLogout = false;
                                            osVol = selectSysVolPane.getSelectOSDiskVol();
                                            if( osVol!=null ){
                                                if( osVol.getTargetID() == targetID ){
                                                    isFormatOSDiskOk = true;
                                                    mayLogout = true;
                                                }else{
                                                    mayLogout = true;
                                                }
                                            }else{
                                                mayLogout=true;
                                            }

                                            if( mayLogout ){
                                                driver = view.initor.mdb.getTargetDriver(
                                                    ip,
                                                    mtpp_port,
                                                    iscsiVar
                                                );

                                                if( driver.equals("") ){
                                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundDriver") + "[ " + iscsiVar + " ] on " + ip;
                                                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg ,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                    formatVolStepOK = false;
                                                }else{
                                                    // 注销失败不算严重错误，不置formatVolStepOK为false
                                                    isOk = view.initor.mdb.logoutTarget( ip,mtpp_port,iscsiVar,driver.substring( 0,2 ) );
                                                    if( isOk ){
                                                        runningTaskPaneForCMDP.setLogOnTabpane(
                                                            SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar + " ] on " + ip + " " +
                                                                SanBootView.res.getString("common.ok"),
                                                            RunningTaskPaneForCMDP.CRT_VOL_ROW
                                                        );
                                                    }else{
                                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar + " ] on " + ip + " " +
                                                                   SanBootView.res.getString("common.failed");
                                                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                    }
                                                }
                                            }
                                        }else{
                                            if( binder.part.fsType.toUpperCase().startsWith("FAT") ){
                                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ] on " + ip + " " +
                                                           SanBootView.res.getString("common.failed")+" [ "+SanBootView.res.getString("InitBootHostWizardDialog.log.tooLargeFsSize")+" ]";
                                                runningTaskPaneForCMDP.setLogOnTabpane( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                            }else{
                                                errMsg =  SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ] on " + ip + " " +
                                                           SanBootView.res.getString("common.failed");
                                                runningTaskPaneForCMDP.setLogOnTabpane( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                            }
                                            formatVolStepOK = false;
                                        }
                                    }else{
                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") +" [ "+ iscsiVar + " ] on " + ip +" " +
                                                  SanBootView.res.getString("common.failed");
                                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                        formatVolStepOK = false;
                                    }
                                }else{
SanBootView.log.error( getClass().getName(),  "Error: not found target from iSCSI Initiator: "+ iscsiVar );
                                    // 没有发现target disk
                                    errMsg =   SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundTDisk") +" [ "+ iscsiVar + " ] on " + ip;
                                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                    formatVolStepOK = false;
                                }
                            }else{ // format new created volume
                                volName  = binder.volName;
                                targetID = binder.targetID;
                                iscsiVar =  ResourceCenter.ISCSI_PREFIX+targetSrvName + ":" + targetID;
SanBootView.log.info( getClass().getName(),"targetid: "+ targetID + "  original dev size: "+binder.part.size+"  iscsi vol size: "+binder.volSize );

                                // 记录C盘所在的volume是否要login
                                if( OSBinder != null ){
                                    if( OSBinder.targetID == targetID ){
                                        hasLoginOSDisk = true;
                                    }
                                }

                                if( view.initor.mdb.hasThisTargetDisk( iscsiVar ) ){
                                    // login this target volume
                                    if( view.initor.mdb.loginTarget(
                                        ip,
                                        mtpp_port,
                                        iscsiVar
                                    )){
                                        runningTaskPaneForCMDP.setLogOnTabpane(
                                            SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") +" [ "+ iscsiVar + " ] on " + ip +" " +
                                                SanBootView.res.getString("common.ok") ,
                                            RunningTaskPaneForCMDP.CRT_VOL_ROW
                                        );

                                        // 记录C盘所在的volume是否成功login
                                        if( OSBinder!=null ){
                                            if( OSBinder.targetID == targetID ){
                                                isLoginOSDiskOk = true;
                                                iscsiVarForOSDisk = iscsiVar;
                                            }
                                        }

                                        view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT );
                                        isOk = view.initor.mdb.formatVol(
                                            ip,
                                            mtpp_port,
                                            iscsiVar,
                                            binder.part.fsType,
                                            ResourceCenter.VOL_LABEL_PREFIX+lastItemOfIP+"-"+binder.part.getDiskLabel().substring(0,1),
                                            binder.part.isActivePart()? "Active" : "InActive"
                                        );
                                        view.initor.mdb.restoreOldTimeOut();

                                        if( isOk ){
                                            runningTaskPaneForCMDP.setLogOnTabpane(
                                                SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ] on " + ip + " " +
                                                    SanBootView.res.getString("common.ok"),
                                                RunningTaskPaneForCMDP.CRT_VOL_ROW
                                            );

                                            // 记录C盘所在的volume是否成功format
                                            mayLogout = false;
                                            if( OSBinder!=null ){
                                                if( OSBinder.targetID == targetID ){
                                                    isFormatOSDiskOk = true;
                                                    mayLogout = true;
                                                }else{
                                                    mayLogout = true;
                                                }
                                            }else{
                                                mayLogout = true;
                                            }

                                            if( mayLogout ){
                                                driver = view.initor.mdb.getTargetDriver(
                                                    ip,
                                                    mtpp_port,
                                                    iscsiVar
                                                );

                                                if( driver.equals("") ){
                                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundDriver") + "[ " + iscsiVar + " ] on " + ip;
                                                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                    formatVolStepOK = false;
                                                }else{
                                                    // 注销失败不算严重错误，不置formatVolStepOK为false
                                                    isOk = view.initor.mdb.logoutTarget( ip,mtpp_port,iscsiVar,driver.substring( 0,2 ) );
                                                    if( isOk ){
                                                        runningTaskPaneForCMDP.setLogOnTabpane(
                                                            SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar + " ] on " + ip + " " +
                                                                SanBootView.res.getString("common.ok"),
                                                            RunningTaskPaneForCMDP.CRT_VOL_ROW
                                                        );
                                                    }else{
                                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar + " ] on " + ip + " " +
                                                                  SanBootView.res.getString("common.failed");
                                                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                    }
                                                }
                                            }
                                        }else{
                                            if( binder.part.fsType.toUpperCase().startsWith("FAT") ){
                                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ] on " + ip + " " +
                                                           SanBootView.res.getString("common.failed")+" [ "+SanBootView.res.getString("InitBootHostWizardDialog.log.tooLargeFsSize")+" ]";
                                                runningTaskPaneForCMDP.setLogOnTabpane(errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW);
                                                writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                            }else{
                                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ] on " + ip + " " +
                                                           SanBootView.res.getString("common.failed") ;
                                                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                                writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                            }

                                            formatVolStepOK = false;
                                        }
                                    }else{
                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") +" [ "+ iscsiVar + " ] on "+ ip +" "+
                                                   SanBootView.res.getString("common.failed");
                                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                        formatVolStepOK = false;
                                    }
                                }else{
SanBootView.log.error( getClass().getName(),  "Error: not found target from iSCSI Initiator: "+ iscsiVar );
                                    // 没有发现target disk
                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundTDisk") +" [ "+ iscsiVar + " ] on " + ip;
                                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.CRT_VOL_ROW );
                                    formatVolStepOK = false;
                                }
                            }
                        }
                    }
                }
            }

SanBootView.log.info( getClass().getName()," @@#################  Format Volume End ###################@@ ");

            if( buildMirrorOK && crtVolStepOK && formatVolStepOK ){
                runningTaskPaneForCMDP.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
                );
            }else{
                runningTaskPaneForCMDP.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
                );
            }
        }else{
            runningTaskPaneForCMDP.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskPaneForCMDP.CRT_VOL_ROW, 2
            );
            runningTaskPaneForCMDP.setLogOnTabpane(
                SanBootView.res.getString("InitBootHostWizardDialog.log.crtNothing1"),
                RunningTaskPaneForCMDP.CRT_VOL_ROW
            );
        }
SanBootView.log.info( getClass().getName()," @@#################  build mirror and lp End ###################@@ ");
        
        // 2. get other info.
        getInfoStepOK = true;
        runningTaskPaneForCMDP.setCurTabPane( RunningTaskPaneForCMDP.GET_INFO_ROW );
        runningTaskPaneForCMDP.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskPaneForCMDP.GET_INFO_ROW, 2
        );
SanBootView.log.info( getClass().getName()," @@#################  Get other info Begin ###################@@ ");

        // ip配置信息只需要集群中真实机器的信息
        ArrayList<SubCluster> realSubcList = cluster.getRealSubCluster();
        size = realSubcList.size();
        Hashtable<String,String> ipConfHash = new Hashtable<String,String>();
        for( i=0; i<size; i++ ){
            SubCluster subc = realSubcList.get( i );
            ip = subc.getHost().getIP();
            port = subc.getHost().getPort();
            isOk = view.initor.mdb.getIPInfoFromClnt( ip,port, netCard.mac,ResourceCenter.CMD_TYPE_CMDP );
            if( !isOk ){
                getInfoStepOK = false;
                runningTaskPaneForCMDP.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPaneForCMDP.GET_INFO_ROW, 2
                );
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.getIpInfo")+" "+
                           SanBootView.res.getString("common.failed") + " : " + ip ;
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.GET_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPaneForCMDP.GET_INFO_ROW );
                break;
            }else{
                ipConfHash.put( ip, view.initor.mdb.getIpContents() );
            }
        }
        if( i == size ){
            runningTaskPaneForCMDP.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskPaneForCMDP.GET_INFO_ROW, 2
            );
            runningTaskPaneForCMDP.setLogOnTabpane(
                SanBootView.res.getString("InitBootHostWizardDialog.log.getIpInfo")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPaneForCMDP.GET_INFO_ROW
            );
            runningTaskPaneForCMDP.setLogOnTabpane(
                getIPConfigForCluster( ipConfHash ),
                RunningTaskPaneForCMDP.GET_INFO_ROW
            );
        }

SanBootView.log.info( getClass().getName()," @@#################  Get other info END ###################@@ ");
        
        // 3. re-create protect strategy ( maybe include drive group ) and save info
        boolean useOdyDhcp   = ( !selectNetBootModePane.isSelectIScsiHBAMode() ) && setDhcpPane.isAutoSetup();
        saveInfoStepOK = true;
        boolean isOkForReCrtPPP = true;
        boolean isOkForCrtVolMapFromCrtList = true;
        boolean isOkForCrtVolMapFromSelList = true;
        boolean isCopyOS = true;
        boolean isOkForSaveIp = true;
        boolean isOkForSavePartition = true;
        boolean isOkForSavePartition1 = true;
        boolean isOkForSaveServer = true;
        boolean isOkForSaveServer1 = true;
        boolean isOkForSaveDhcpInfo = false;
        boolean isOkForSaveIbootInfo = false;
        boolean isOkForSaveHeartbeatInfo = false;
        boolean isOkForSaveService = true;

        runningTaskPaneForCMDP.setCurTabPane( RunningTaskPaneForCMDP.SAVE_INFO_ROW );
        runningTaskPaneForCMDP.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskPaneForCMDP.SAVE_INFO_ROW , 2
        );
SanBootView.log.info( getClass().getName()," @@#################  Save info Begin ###################@@ ");
        // 3.1 re-create profile for cmdp protection
        Vector<VolumeMap> curVolMapList = view.initor.mdb.getVolMapOnClusterIDAndPType( cluster.getCluster_id(),BootHost.PROTECT_TYPE_CMDP );
        ArrayList<PPProfile> curNewPPPList = this.dupStrgyPane.getCMDPProfileInfoFromTab1();
        ArrayList<PPProfile> curPPPList = view.initor.mdb.getAllPPProfileForCluster( cluster.getCluster_id() );
        ReCrtPPProfileWhenInit reCrtPPPWheninit = new ReCrtPPProfileWhenInit( view,null,cluster,runningTaskPaneForCMDP,this,curVolMapList,volInfo,curNewPPPList,curPPPList );
        isOkForReCrtPPP = reCrtPPPWheninit.realRun();
        
        // 3.2 re-create profile for mtpp protection
        // create volMap from crtList and selList. copyOS function need these volMaps.
        Vector oldVolMapList = view.initor.mdb.getVolMapOnClusterIDAndPType( cluster.getCluster_id(),BootHost.PROTECT_TYPE_MTPP );
        isOkForCrtVolMapFromCrtList = createVolMapFromCrtList( crtList );
        isOkForCrtVolMapFromSelList = createVolMapFromSelList1( selList, oldVolMapList );
        
        if( isOkForCrtVolMapFromCrtList && isOkForCrtVolMapFromSelList ){
            isCopyOS = copyOS();
            if( !isCopyOS ){
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.commitTaskFail");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            }
        }else{
            isCopyOS = false;
        }

        // 3.3 保存dhcp config
        DhcpClientInfo  dhcpInfo = setDhcpPane.getDhcpSetInfo();
        if( useOdyDhcp ){
            // 先删除这个dhcp conf
            DhcpClientInfo  olddhcpInfo = setDhcpPane.getOldDhcpClntInfo();
            String simpleMac ="";
            if( olddhcpInfo != null ){
SanBootView.log.info( getClass().getName()," find old dhcp info: "+olddhcpInfo.mac );
                simpleMac = NetCard.getSimpleMac1( olddhcpInfo.mac );
            }else{
                simpleMac = NetCard.getSimpleMac( netCard.mac );
SanBootView.log.warning( getClass().getName()," old dhcp info is null, new mac: " + simpleMac );
            }
            isOk = view.initor.dhcpdb.dhcpOperation(
                ResourceCenter.BIN_DIR + "dhcp_set.sh delcli -p " + simpleMac
            );
            if( isOk ){
                targetSrvName = view.initor.mdb.getHostName();
                if( targetSrvName.equals("") ){
SanBootView.log.error( getClass().getName()," Error: target server name is null.");                
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostNameFailed");
                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                }else{
                    try{
                        Thread.sleep( 5000 ); // 睡5秒钟，否则连续执行delcli和addcli会造成dhcpd起不来
                    }catch(Exception ex){}

                    boolean hasdns = ( !dhcpInfo.dns.equals("") );
                    boolean hasgw = ( !dhcpInfo.defgw.equals("") );
                    String ibootSrv = dhcpInfo.nextServer;
                    args = "";
                    if( hasdns ){
                        args+=" -d " +dhcpInfo.dns;
                    }
                    if( hasgw ){
                        args+=" -g "+dhcpInfo.defgw;
                    }
                    args += " -i "+dhcpInfo.ip + " -p " + NetCard.getSimpleMac( netCard.mac ) +" -s "+dhcpInfo.subnet + " -x "+ibootSrv + " -ostype windows";

                    // 对于cmdp来说，在初始化时指定网启的target id是不正确的，因为C盘对应的镜像卷本身不能进行网启.
                    // 对于cmdp来说，“最新版本”是对c盘镜像卷做一个"一致性的快照"（2010.7.5）
                    // 对于cmdp来说，初始化时如果选择了“iboot”方式，那么dhcp记录是不对的(按照emboot的方式处理了)（2010.10.25）
                    isOk = view.initor.dhcpdb.dhcpOperation(
                        ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args
                    );
                    if( isOk ){
                        isOk = view.initor.dhcpdb.getClientFromDhcp();
                        if( isOk ){
                            if( view.initor.dhcpdb.getSelClntOnMac( NetCard.getUnixMac( netCard.mac ) ) !=null ){
                                isOkForSaveDhcpInfo = true;
                                runningTaskPaneForCMDP.setLogOnTabpane(
                                    SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                        SanBootView.res.getString("common.ok"),
                                    RunningTaskPaneForCMDP.SAVE_INFO_ROW
                                );
                            }else{
SanBootView.log.error( getClass().getName(),"Error: not found record in dhcp config about MAC: " + netCard.mac );                                
                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                          SanBootView.res.getString("common.failed");
                                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                                writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                            }
                        }else{
                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                      SanBootView.res.getString("common.failed");
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                            writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                        }
                    }else{
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                  SanBootView.res.getString("common.failed");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                        writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                    }
                }
            }else{
                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                          SanBootView.res.getString("common.failed");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            }
        }else{
            // save the 3rd dhcp setup info.
            String hostip_3rd  = "";
            String nextsrv_3rd = "";
            if( !selectNetBootModePane.isSelectIScsiHBAMode() ){
                hostip_3rd  = dhcpInfo.ip_3rd;
                nextsrv_3rd = dhcpInfo.nextServer_3rd;
            }else{
                hostip_3rd  = selectNetBootModePane.getBootIPForIscsiHBA();
                nextsrv_3rd = view.initor.txIp;
            }
            
            isOkForSaveDhcpInfo = saveInfo( ResourceCenter.CLT_IP_CONF + "/cluster-" + cluster.getCluster_id() + ResourceCenter.CONF_3RD_DHCP, "ip:"+hostip_3rd +"  nextsrv:"+ nextsrv_3rd );
            String tipStr = SanBootView.res.getString("InitBootHostWizardDialog.log.save3rdDhcpInfo");
            if( selectNetBootModePane.isSelectIScsiHBAMode() ){
                tipStr = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIscsiHBAInfo");
            }
            if( isOkForSaveDhcpInfo ){
                runningTaskPaneForCMDP.setLogOnTabpane( tipStr+" "+SanBootView.res.getString("common.ok"),
                    RunningTaskPaneForCMDP.SAVE_INFO_ROW
                );
            }else{
                errMsg = tipStr +" " + SanBootView.res.getString("common.failed");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            }
        }
        
        // 3.4 iboot option setup
        int tid1;
        boolean needAddIboot=true;
        if( hasCrtOSDisk ){
            if( !isCrtOSDiskOk ){
                needAddIboot = false;
            }
        }

        // 对于cmdp来说，在初始化时设定网启选项是不合适的。因为C盘对应的镜像卷本身不能进行网启.
        needAddIboot = false;
        if( needAddIboot && selectNetBootModePane.isSelectEmBootMode() ){
            if( hasCrtOSDisk ){ // os volume 是创建产生的
                tid1 = OSBinder.targetID;
            }else{ // os volume使用已经存在的volume
                Volume volume = selectSysVolPane.getSelectOSDiskVol();
                if( volume != null ){
                    tid1 = volume.getTargetID();
                }else{
                    tid1 = -1;
                }
            }

            if( tid1 != -1 ){
                DhcpClientInfo  olddhcpInfo = setDhcpPane.getOldDhcpClntInfo();
                String simpleMac ="";
                if( olddhcpInfo != null ){
SanBootView.log.info( getClass().getName(), " (iboot setup)find old dhcp info: "+olddhcpInfo.mac );
                    simpleMac = NetCard.getSimpleMac1( olddhcpInfo.mac );
                }else{
                    simpleMac = NetCard.getSimpleMac( netCard.mac );
SanBootView.log.warning( getClass().getName()," (iboot setup)old dhcp info is null, new mac: " + simpleMac );
                }

                // add lunmap on ip assigned by dhcp setup for os target(Don't care result.)
                String iboot_dhcp_ip ="";
                DhcpClientInfo curDhcpInfo = setDhcpPane.getDhcpSetInfo();
                if( setDhcpPane.isAutoSetup() ){
                    iboot_dhcp_ip = curDhcpInfo.ip;
                }else{
                    iboot_dhcp_ip = curDhcpInfo.ip_3rd;
                }
                isOk = view.initor.mdb.addLunMap( tid1, iboot_dhcp_ip, "255.255.255.255", "rw", "", "", "", "" );

                // find suitable initiator ip according to dhcp setup
                String iboot_next_server ="";
                if( setDhcpPane.isAutoSetup() ){
                    iboot_next_server = curDhcpInfo.nextServer;
                }else{
                    iboot_next_server = curDhcpInfo.nextServer_3rd;
                }

                isOk = view.initor.mdb.listIboot();
                if( isOk ){
                    if( view.initor.mdb.getFromVectorOnMac( NetCard.getSimpleMac( netCard.mac ) ) != null ){
                        //isOk = view.initor.mdb.modIboot( NetCard.getSimpleMac( netCard.mac ), IBootObj.IBOOT_PORTALIP, view.initor.getTxIP() );
                        isOk = view.initor.mdb.modIboot( NetCard.getSimpleMac( netCard.mac ), IBootObj.IBOOT_PORTALIP, iboot_next_server );
                        if( isOk ){
                            targetSrvName = view.initor.mdb.getHostName();
                            if( targetSrvName.equals("") ){
SanBootView.log.error(getClass().getName()," Error: target server name is null.");
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf")+" "+
                                          SanBootView.res.getString("common.failed");
                                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                                writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                            }else{
                                String tgtName = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + tid1;
                                isOk = view.initor.mdb.modIboot( NetCard.getSimpleMac( netCard.mac ), IBootObj.IBOOT_TGTNAME, tgtName );
                                if( isOk ){
                                    isOkForSaveIbootInfo = true;
                                    runningTaskPaneForCMDP.setLogOnTabpane(
                                        SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf")+" "+
                                            SanBootView.res.getString("common.ok"),
                                        RunningTaskPaneForCMDP.SAVE_INFO_ROW
                                    );
                                }else{
                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf")+" "+
                                              SanBootView.res.getString("common.failed");
                                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                                }
                            }
                        }else{
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf")+" "+
                                      SanBootView.res.getString("common.failed");
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                            writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                        }
                    }else{
                        isOk = view.initor.mdb.addIboot( NetCard.getSimpleMac( netCard.mac ), iboot_next_server, tid1 );
                        if( isOk ){
                            isOk = view.initor.mdb.listIboot();
                            if( isOk ){
                                if( view.initor.mdb.getFromVectorOnMac( NetCard.getSimpleMac( netCard.mac ) ) != null ){
                                    isOkForSaveIbootInfo = true;
                                    runningTaskPaneForCMDP.setLogOnTabpane(
                                        SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf")+" "+
                                            SanBootView.res.getString("common.ok"),
                                        RunningTaskPaneForCMDP.SAVE_INFO_ROW
                                    );
                                }else{
SanBootView.log.error( getClass().getName(),"Error: not found record abount MAC: " + netCard.mac );
                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf")+" "+
                                              SanBootView.res.getString("common.failed");
                                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                                }
                            }else{
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf")+" "+
                                          SanBootView.res.getString("common.failed");
                                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                                writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                            }
                        }else{
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf")+" "+
                                      SanBootView.res.getString("common.failed");
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                            writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                        }
                    }
                }else{
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf")+" "+
                              SanBootView.res.getString("common.failed");
                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                }
            }
        }else{
            isOkForSaveIbootInfo = true;
        }

        // 3.5 保存ip info
        if( getInfoStepOK ){
            size = realSubcList.size();
            for( i=0; i<size; i++ ){
                SubCluster subc = realSubcList.get(i);
                BootHost aHost = subc.getHost();
                String ipConfCont = ipConfHash.get( aHost.getIP() );
                
                isOkForSaveIp = saveInfo( ResourceCenter.CLT_IP_CONF + "/" + aHost.getID() + ResourceCenter.CONF_IP, ipConfCont );
                if( !isOkForSaveIp ){
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIPConf")+" "+
                             SanBootView.res.getString("common.failed");
                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                    writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
                    break;
                }
            }
            
            if( i == size ){
                runningTaskPaneForCMDP.setLogOnTabpane(
                    SanBootView.res.getString("InitBootHostWizardDialog.log.saveIPConf")+" "+
                        SanBootView.res.getString("common.ok"),
                    RunningTaskPaneForCMDP.SAVE_INFO_ROW
                );
            }
        }

        // 3.6 save partition info(这种信息必须跟主机关联)
        size = realSubcList.size();
        for( i=0; i<size; i++ ){
            SubCluster subc = realSubcList.get( i );
            String pcontent = partitionContent.get( subc.getHost().getIP() );
            if( pcontent == null ) continue;
            String dcontent = diskDetailInfo.get( subc.getHost().getIP());
            if( dcontent == null ) continue;

            isOkForSavePartition  = saveInfo( ResourceCenter.CLT_IP_CONF + "/" + subc.getHost().getID() + ResourceCenter.CONF_NORMAL_DISK, pcontent );
            isOkForSavePartition1 = saveInfo( ResourceCenter.CLT_IP_CONF + "/" + subc.getHost().getID() + ResourceCenter.CONF_OLDDISK, dcontent );
            if( !isOkForSavePartition1 || !isOkForSavePartition ){
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                          SanBootView.res.getString("common.failed");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                break;
            }
        }
        if( isOkForSavePartition1 && isOkForSavePartition ){
            runningTaskPaneForCMDP.setLogOnTabpane(
                SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.SAVE_INFO_ROW
            );
        }
        
        // 将主机上的所有服务都记录下来(以cluster的名义保存)
        isOkForSaveService = saveInfo( ResourceCenter.CLT_IP_CONF+"/cluster-"+cluster.getCluster_id() + ResourceCenter.CONF_SERVICE,this.getOsServiceContents() );
        if( isOkForSaveService ){
            runningTaskPaneForCMDP.setLogOnTabpane(
                SanBootView.res.getString("InitBootHostWizardDialog.log.saveServiceInfo")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPaneForCMDP.SAVE_INFO_ROW
            );
        }else{
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveServiceInfo")+" "+
                      SanBootView.res.getString("common.failed");
            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
        }

        // 将heartbeat信息保存下来
        isOkForSaveHeartbeatInfo = saveInfo( ResourceCenter.CLT_IP_CONF+"/cluster-"+cluster.getCluster_id() + ResourceCenter.CONF_HeartBeat_Disk,this.selectHbDskPane.getSelectedHbDskString() );
        if( isOkForSaveHeartbeatInfo ){
            runningTaskPaneForCMDP.setLogOnTabpane(
                SanBootView.res.getString("InitBootHostWizardDialog.log.saveHbDsk")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPaneForCMDP.SAVE_INFO_ROW
            );
        }else{
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveHbDsk")+" "+
                      SanBootView.res.getString("common.failed");
            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
        }

        // 3.7 修改 cluster
        saveInfoStepOK = ( isOkForSaveDhcpInfo && isOkForSaveIbootInfo && isOkForSaveIp &&
                isOkForSavePartition && isOkForSavePartition && isOkForSaveServer &&
                isOkForSaveServer1 && isOkForSaveService && isOkForSaveHeartbeatInfo && isOkForReCrtPPP );
        boolean initOK = ( buildMirrorOK && formatVolStepOK && getInfoStepOK && saveInfoStepOK );

        // 发送netbootinfo到所有相关的dest uws server上
        sendNetbootInfoToDestUWS();  //??????????????????????????? 还需仔细考虑(2011.7.20)
        
        if( stopBaseServ ){
            cluster.setStopAllBaseServ();
        }else{
            cluster.clearStopAllBaseServ();
        }

        if( useOdyDhcp ){
            cluster.setUseOdyDhcp();
        }else{
            cluster.clearUseOdyDhcp();
        }

        isOk = view.initor.mdb.modOneCluster1(
            cluster.getCluster_id(),
            initOK?1:0,   // 除了修改cluster信息后，所有的都成功了
            autoDRReover?1:0,
            autoReboot?1:0,
            cluster.getCluster_stop_base_service(),
            netCard.mac,
            selectNetBootModePane.getBootMode()
        );
        if( isOk ){
            // modify cluster in cache
            cluster.setCluster_inited_flag( initOK?1:0 );
            cluster.setCluster_auto_dr_flag( autoDRReover?1:0 );
            cluster.setCluster_auto_reboot_flag( autoReboot? 1:0 );
            cluster.setCluster_boot_mode( selectNetBootModePane.getBootMode() );

            view.initor.mdb.assembleCluster(); // 重新assemble Cluster
        }else{
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modCluster") +
                      SanBootView.res.getString("common.failed");
            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
        }

        if( isOk && saveInfoStepOK ){ // 只判断save_info步骤是否成功
            runningTaskPaneForCMDP.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskPaneForCMDP.SAVE_INFO_ROW , 2
            );
        }else{
            runningTaskPaneForCMDP.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskPaneForCMDP.SAVE_INFO_ROW , 2
            );
        }
        
        allFinished = initOK && isOk ;

        // 3.8 保存UWS report( 不考虑其是否成功,有可能写入server上的report库中，或者写到了GUI所在的主机上)
        recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Save info End ###################@@ ");

SanBootView.log.info( getClass().getName()," @@#################  Init Windows cluster End ###################@@ ");
    }

    private Hashtable winSrcList = new Hashtable();
    private void getMpListForWin( String bkSrc ){
        String src,driver;
        Object val;
        int ch,key;

        winSrcList.clear();
        String[] lines = Pattern.compile(";").split( bkSrc,-1 );

        for( int i=0; i<lines.length; i++ ){
            src = lines[i];
            if( src.equals("") ) continue;

            try{
                // 全部统一成大写的
                src = src.toUpperCase();
                ch = src.charAt( 0 );
                if( ch == '/' || ch =='\\' ){
                    src = src.substring( 1 );
                }
                driver = src.substring( 0,1 );
                key =(int)driver.charAt( 0 );
            }catch(Exception ex){
                continue;
            }

            val = winSrcList.get( new Integer( key ) );
            if( val == null ){
                winSrcList.put( new Integer( key), driver );
            }
        }
    }

    public VolumeMap getRealLVOnClntIDAndMP( Vector list,String mp ){
        VolumeMap lv;

        int size = list.size();
        for( int i=0; i<size; i++ ){
            lv = (VolumeMap)list.elementAt(i);
//SanBootView.log.debug(getClass().getName(),"lv label; " + lv.getVolDiskLabel() );
            if( lv.getVolDiskLabel().toUpperCase().equals( mp ) ){
                return lv;
            }
        }

        return null;
    }

    private String getDestDevPathForWin( BootHost aHost,boolean withLabel ){
        VolumeMap lv;
        String src,drivepath="";
        boolean isFirst = true;

        errMsg = "";

        // 获取srcClnt上的卷信息
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( aHost.getID() );
SanBootView.log.debug( getClass().getName()," mp size:" + winSrcList.size() );

        if( winSrcList.size() <= 0 ){
            errMsg = SanBootView.res.getString("EditProfileDialog.error.getMp");
            drivepath = null;
            return drivepath;
        }

        Enumeration list  = winSrcList.elements();
        while( list.hasMoreElements() ){
            src = (String) list.nextElement();
            src += ":\\";
SanBootView.log.debug(getClass().getName(), " =====>: " + src );

            lv = getRealLVOnClntIDAndMP( volMapList,src );
            if( lv == null ){
                // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + src );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ src;
                drivepath = null;
                break;
            }else{
                if( isFirst ){
                    if( !withLabel ){
                        drivepath = ResourceCenter.TARGET_TYPE + view.initor.getTxIP(aHost.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                                ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+lv.getVolTargetID();
                    }else{
                        drivepath = src+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(aHost.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                            ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+lv.getVolTargetID();
                    }
                    isFirst = false;
                }else{
                    if( !withLabel ){
                        drivepath+="-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(aHost.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                            ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+lv.getVolTargetID();
                    }else{
                        drivepath+="-?"+src+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(aHost.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                            ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+lv.getVolTargetID();
                    }
                }
            }
        }

        return drivepath;
    }

    private int getOsTidForWin( BootHost aHost ){
        int tid = -1;
        VolumeMap volMap;

        errMsg ="";
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( aHost.getID() );
        int size = volMapList.size();
        for( int i=0; i<size; i++ ){
            volMap = (VolumeMap)volMapList.elementAt(i);
            if( volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                tid = volMap.getVolTargetID();
                break;
            }
        }

        if( tid == -1 ){
SanBootView.log.error(getClass().getName(), "\nVG or Target is null,exit." );
            errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : C:\\";
        }
        return tid;
    }
    
    private String getMgInfoForWin( BootHost aHost ){
        VolumeMap lv;
        MirrorGrp mg;
        int mgid;
        String mgInfo ="";

        errMsg = "";

        // 获取srcClnt上的卷信息
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( aHost.getID() );
SanBootView.log.debug( getClass().getName()," mp size:" + winSrcList.size() );

        Enumeration list  = winSrcList.elements();
        while( list.hasMoreElements() ){
            String src =(String) list.nextElement();
SanBootView.log.debug(getClass().getName(), " =====>: " + src + ":\\" );

            lv = getRealLVOnClntIDAndMP( volMapList,src+":\\" );
            if( lv == null ){
                // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + src +":\\" );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ src+":\\";
                mgInfo = null;
                break;
            }else{
                mg = view.initor.mdb.getMGFromVectorOnRootID( lv.getVol_rootid() );
                if( mg == null ){
                    mgid = -1;
                }else{
                    mgid = mg.getMg_id();
                }

                mgInfo += lv.getVolTargetID()+"-?"+lv.getMaxSnapNum()+"-?"+mgid+";";
            }
        }

        return mgInfo;
    }

    // 复制 C 盘时要检查是否为active的（由文剑完成）
    private boolean copyOS(){
        boolean isOk;
        int i,j,size,cnt=0,size1,d2d_clnt_id;
        UniProIdentity identity;
        UniProfile prof;
        UniProBackup backup;
        UniProHeader header;
        UniProIBoot iboot;
        UniProDrive drive1;
        File tmpFile;
        String bkSrc,profName,bootMac;
        BackupClient d2d_clnt;
        BootHost aHost;

        // 首先获取 iscsi target server的名字
        targetSrvName = view.initor.mdb.getHostName();
        if( targetSrvName.equals("") ){
SanBootView.log.error( getClass().getName()," Error: target server name is null.");
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostNameFailed");
            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
            return false;
        }
        
        ArrayList profList = dupStrgyPane.getMTPPProfileInfoFromTab();
        size = profList.size();
        for( i=0; i<size; i++ ){
            prof   = (UniProfile)profList.get( i );
            identity = prof.getUniProIdentity();
            backup = prof.getUniProBackup();
            header = prof.getUniProHeader();
            drive1 = prof.getUniProDrive1();
            iboot  = prof.getUniProIBoot();
            bkSrc  = backup.getSrc();
            profName = prof.toString();
            
            d2d_clnt_id = 0;
            try{
                d2d_clnt_id = Integer.parseInt( identity.getClntID() );
            }catch(Exception ex){}
            d2d_clnt = view.initor.mdb.getClientFromVector( d2d_clnt_id );
            aHost = view.initor.mdb.getHostFromVectOnD2DClntID( d2d_clnt_id );
            
            if( !selectNetBootModePane.isSelectIScsiHBAMode() ){
                if( aHost.isRealHostInCluster() ){
                    NetCard netCard = (NetCard)selectNetCardPane.getSelectNetCard( aHost.getIP() ); // 肯定有
                    bootMac = netCard.mac;
                }else{
                    bootMac = "";
                }
            }else{
                bootMac = "";
            }

            String aWindir = view.initor.mdb.getWinDir( d2d_clnt.getIP(),d2d_clnt.getPort() );
            if( aWindir.equals("") ){
SanBootView.log.error( getClass().getName()," Error: Not found window directory." );
                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.notFoundWindir")+" on "+d2d_clnt.getIP();
                errMsg += " : "+profName;
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                return false;
            }
            
            if( !prof.isSel ){ cnt++; }

            // 生成src-dest-mapper
            getMpListForWin( bkSrc );
            String src_dest_map = getDestDevPathForWin( aHost,true );
            if( src_dest_map == null ){
SanBootView.log.error( getClass().getName()," Error: getting src_dest_mapper for profile failed.");
                errMsg += " : "+profName;
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                return false;
            }else{
                header.setSource_dest_reference( src_dest_map );
            }

            // 生成 drive-1部分
            String path = getDestDevPathForWin( aHost, false );
            if( path == null ){
SanBootView.log.error( getClass().getName()," Error: getting dest_path for profile failed.");
                errMsg += " : "+profName;
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                return false;
            }else{
                drive1.setPath( path );
            }

            // update iboot user info
            iboot.setUws_username( view.initor.user );
            iboot.setUws_passwd( view.initor.passwd );
            iboot.setUws_port( view.initor.port+"" );
            iboot.setUws_ip( view.initor.txIp );

            // 生成iboot_aft_cmd
            iboot.cleanIboot_bf_cmd();
            iboot.cleanIboot_af_cmd();
            String windir = "/C:/" + aWindir;
            if( EditProfileDialog.isOsDupForWin( backup.getSrc(), backup.getExcludeFromBak(),windir ) ){
                int tid = getOsTidForWin( aHost );
                if( tid <= 0  ){
SanBootView.log.error( getClass().getName()," Error: Can't get os volume's target id.");
                    errMsg += " : "+profName;
                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                    writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                    return false;
                }

                iboot.setOsTid( tid );

                Object[] val = InitBootHostWizardDialog.generateIboot_cmd(
                    selectNetBootModePane.getBootMode(),
                    aHost,
                    tid,
                    bootMac,
                    view.initor.getTxIP(aHost.getIP())
                );
                ArrayList bef = (ArrayList)val[0];
                ArrayList aft = (ArrayList)val[1];
                size1 = bef.size();
                for(  j=0;j<size1;j++ ){
                    iboot.addIboot_bf_cmd( (String)bef.get(j) );
                }
                size1 = aft.size();
                for( j=0;j<size1;j++ ){
System.out.println("================> iboot_aft_cmd : "+ aft.get(j) );
                    iboot.addIboot_af_cmd( (String)aft.get(j) );
                }

                if( aHost.isWin2000() ){
SanBootView.log.info( getClass().getName(), " after data-duplication process for win2000. " );
                    String[] ret = InitBootHostWizardDialog.w2k_process( bootMac, tid );
                    for( j=0; j<ret.length; j++ ){
                        iboot.addIboot_bf_cmd(  ret[j] );
                    }
                }
            }

            // 记录mgid/maxsnap/tid的对应关系
            String mgInfo = getMgInfoForWin( aHost );
            if( mgInfo == null ){
SanBootView.log.error( getClass().getName()," Error: getting <mgid/maxsnap/tid> relationship failed.");
                errMsg += " : "+profName;
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                return false;
            }else{
                iboot.setMgid_info( mgInfo );
            }

            tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_PROF );
            if( tmpFile == null ){
SanBootView.log.error( getClass().getName()," Error: can't generate local temp file.");
                errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                return false;
            }

            // 发送profile的内容
System.out.println("profile content: \n" + prof.prtMe() );

            if( !view.initor.mdb.sendFileToServer( tmpFile.getName(), prof.prtMe() ) ){
SanBootView.log.error( getClass().getName()," Error: send file from gui_console to server failed.");
                errMsg = SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                            view.initor.mdb.getErrorMessage();
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                tmpFile.delete();
                return false;
            }
            tmpFile.delete();

            // 将tmpFile move to profile dir
            isOk = view.initor.mdb.moveFile(
                ResourceCenter.TMP_DIR + tmpFile.getName(),
                prof.getProfileName()
            );
            if( !isOk ){
SanBootView.log.error( getClass().getName()," Error: mv profile file failed.");
                errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_PROFILE)+": "+
                                SanBootView.res.getString("common.failed");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                return false;
            }
        }

        if( cnt == size ){
            runningTaskPaneForCMDP.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.notNeedCopy"),
                RunningTaskPane.SAVE_INFO_ROW
            );
            return true;
        }

        if( !crtVolStepOK || !formatVolStepOK ){
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notCopy");
            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );

            return false;
        }

        // 开始复制
        return doCopyOS();
    }

    private boolean doCopyOS(){
        int i,size,d2d_clnt_id;
        UniProfile prof;
        UniProIdentity identity;
        RunBackup dup = null;
        String profName,simpleName;
        ArrayList goodProf;
        boolean hasCommitFail = false;
        BackupClient d2d_clnt;
        
        ArrayList profList = dupStrgyPane.getMTPPProfileInfoFromTab();
        size = profList.size();
        goodProf = new ArrayList( size );
        for( i=0; i<size; i++ ){
            prof   = (UniProfile)profList.get( i );
            if( !prof.isSel ) continue;
            
            identity = prof.getUniProIdentity();
            d2d_clnt_id = 0;
            try{
                d2d_clnt_id = Integer.parseInt( identity.getClntID() );
            }catch(Exception ex){}
            d2d_clnt = view.initor.mdb.getClientFromVector( d2d_clnt_id );
            
            profName = prof.getProfileName();
            simpleName = prof.toString();
SanBootView.log.info( getClass().getName(),"data-dup profile: \n"+prof.prtMe() );

            try{
                dup = new RunBackup(
                    ResourceCenter.getCmd( ResourceCenter.CMD_DATA_DUP )+
                    profName +
                    " -clnt=" +
                    d2d_clnt.getID(),
                    view.getSocket()
                );

SanBootView.log.info( getClass().getName(), " data-duplication cmd: " + dup.getCmdLine() );

                dup.run();
            }catch( Exception ex ){
                dup.setExceptionErrMsg( ex);
                dup.setExceptionRetCode( ex );
            }

SanBootView.log.info( getClass().getName(), " data-duplication cmd retcode: " + dup.getRetCode() );

            if( !dup.isOk() ){
SanBootView.log.error( getClass().getName(), " data-duplication cmd errmsg: " + dup.getErrMsg() );
                hasCommitFail = true;
                errMsg = simpleName + " : " + SanBootView.res.getString("InitNWinHostWizardDialog.log.dupCmdFail");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
            }else{
                goodProf.add( prof );
            }
        }// end of for

        return !hasCommitFail;

        // 为和cmdp统一，mttp也不在wizard里监控复制进度了，只是提交任务。
/*
        if( hasCommitFail ){
runningTaskPaneForCMDP.setLogOnTabpane( "===========================================",RunningTaskPane.SAVE_INFO_ROW );
        }

        // 开始监控
        String prefix = runningTaskPaneForCMDP.getCopyLogOnTabpane( RunningTaskPane.SAVE_INFO_ROW );
        GetDataDupProcess getProcessThread = new GetDataDupProcess(
            view,
            runningTaskPaneForCMDP,
            goodProf,
            hasCommitFail,
            prefix,
            RunningTaskPane.SAVE_INFO_ROW
        );
        getProcessThread.start();

        boolean isFinished = false;
        while( !isFinished ){
            isFinished = getProcessThread.isToEnd();

            try{
                Thread.sleep( 4*1000 );
            }catch(Exception ex){
            }
        }

        return getProcessThread.getLastResult();
 */
    }

    public static Object[] generateIboot_cmd( int mode, BootHost host,int tid,String bootMac,String srv_ip ){
        ArrayList bef = new ArrayList();
        ArrayList aft = new ArrayList();
        StringBuffer iboot_cmd_buf = new StringBuffer();

        if( !host.isWin2000() ){
            bef.add("");
        }

        if( ( mode == BootHost.BOOT_MODE_EM ) || (( mode == BootHost.BOOT_MODE_IBOOT ) && !host.isWin2003() ) ) { // emboot mode
            if( !host.isLargerThanVista() ){  // for wenjian's test on 2009-2-3
                iboot_cmd_buf.append( "<UWS_PLUGIN_PATH>/excutecmd.exe " );
                iboot_cmd_buf.append( "\"<UWS_PLUGIN_PATH>/startbootreg.exe\" 480 " );
                iboot_cmd_buf.append( "\"<TARGET_ROOT_PATH=" );
                iboot_cmd_buf.append( tid );
                iboot_cmd_buf.append( "><UWS_WINDOWS_PATH>" );
                iboot_cmd_buf.append( "\" iSCSI " );
                iboot_cmd_buf.append( bootMac );
            }else{  // for wenjian's test on 2009-2-3
                iboot_cmd_buf.append( "<UWS_PLUGIN_PATH>/ib_bcdedit_boot.exe " );
                iboot_cmd_buf.append( "<TARGET_ROOT_PATH=" );
                iboot_cmd_buf.append( tid );
                iboot_cmd_buf.append( ">" );
            }
        }else if( mode == BootHost.BOOT_MODE_IBOOT ){ // iboot mode
            iboot_cmd_buf.append( "<UWS_PLUGIN_PATH>/excutecmd.exe " );
            iboot_cmd_buf.append( "\"<UWS_PLUGIN_PATH>/setreg.bat\" 480 " );
            iboot_cmd_buf.append( "\"<TARGET_ROOT_PATH=" );
            iboot_cmd_buf.append( tid );
            iboot_cmd_buf.append( "><UWS_WINDOWS_PATH>" );
            iboot_cmd_buf.append( "\" iSCSI " );
            iboot_cmd_buf.append( bootMac );
        }else{  // iSCSI HBA
            iboot_cmd_buf.append( "<UWS_PLUGIN_PATH>/ib_hba_reg.exe " );
            iboot_cmd_buf.append( "<TARGET_ROOT_PATH=" );
            iboot_cmd_buf.append( tid );
            iboot_cmd_buf.append( ">" );
        }
        aft.add( iboot_cmd_buf.toString() );

        iboot_cmd_buf = new StringBuffer();
        iboot_cmd_buf.append( "<UWS_PLUGIN_PATH>/update_server_sch.exe -m <TARGET_ROOT_PATH="+tid + "> <UWS_PARAM> " );
        iboot_cmd_buf.append(" -uuid "+ host.getUUID() );
        aft.add( iboot_cmd_buf.toString() );

        Object[] ret = new Object[2];
        ret[0] = bef;
        ret[1] = aft;
        return ret;
    }

    public static String[] w2k_process( String mac,int tid ){
        /*
        String[] ret = new String[2];
        ret[0] = "<UWS_PLUGIN_PATH>/ib_del_ody_junction.exe";

        StringBuffer buf = new StringBuffer();
        buf.append( "<UWS_PLUGIN_PATH>/excutecmd.exe " );
        buf.append( "\"<UWS_PLUGIN_PATH>/startsyscopy.exe\" 72000 " );
        buf.append( mac );
        buf.append( " <TARGET_ROOT_PATH=" );
        buf.append( tid );
        buf.append( ">" );
        ret[1] = buf.toString();
        */

        // for wenjian's test on 2009-2-3
        String[] ret = new String[0];
        return ret;
    }

    private boolean modCloneDiskOnVolMap( int rootid,int clntID,int mode ){
        CloneDisk cd;
        boolean aIsOk;

        if( mode == 0 ){
            aIsOk = view.initor.mdb.getCloneDiskList( -1,CloneDisk.IS_FREEVOL,rootid );
        }else{
            aIsOk = view.initor.mdb.getCloneDiskList( clntID,CloneDisk.IS_BOOTHOST,rootid );
        }
        if( aIsOk ){
            ArrayList list = view.initor.mdb.getCloneDiskList();
            int size = list.size();
            for( int i=0; i<size; i++ ){
                cd = (CloneDisk)list.get(i);

                if( mode == 0 ){
                    // 修改clonedisk的属性，使之归于boothost的范畴
                    if( !view.initor.mdb.modCloneDisk( "",0,0,"",cd.getId(),clntID,CloneDisk.IS_BOOTHOST ) ){
                        errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_MOD_CLONE_DISK ) +" : " + view.initor.mdb.getErrorMessage();
                        return false;
                    }
                }else{
                    // 修改clonedisk的属性，使之归于空闲卷的范畴
                    if( !view.initor.mdb.modCloneDisk( "",0,0,"",cd.getId(),-1,CloneDisk.IS_FREEVOL) ){
                        errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_MOD_CLONE_DISK ) +" : " + view.initor.mdb.getErrorMessage();
                        return false;
                    }
                }
            }
        }else{
            errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_GET_CLONE_DISK ) +" : " + view.initor.mdb.getErrorMessage();
        }

        return aIsOk;
    }

    private boolean modUIMVolOnVolMap( int cltID,int rootid,int mode ){
        ArrayList list;

        if( mode == 0 ){
            list = view.initor.mdb.getMDIFromCacheOnHostIDandRootID( -1,rootid );
        }else{
            list = view.initor.mdb.getMDIFromCacheOnHostIDandRootID( cltID,rootid );
        }
        int size = list.size();
        for( int i=0; i<size; i++ ){
            MirrorDiskInfo mdi = (MirrorDiskInfo)list.get( i );

            if( mode == 0 ){
                // 修改uim-vol的属性，使之归于boothost的范畴
                if( !view.initor.mdb.modMDI( "",0,0,"",mdi.getSnap_rootid(),cltID ) ){
                    errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_MOD_MIRROR_DISK ) +" : " + view.initor.mdb.getErrorMessage();
                    return false;
                }
            }else{
                // 修改uim-vol的属性，使之归于空闲卷的范畴
                if( !view.initor.mdb.modMDI( "",0,0,"",mdi.getSnap_rootid(),-1 ) ){
                    errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_MOD_MIRROR_DISK ) +" : " + view.initor.mdb.getErrorMessage();
                    return false;
                }
            }
        }

        return true;
    }
    
    private boolean createVolMapFromSelList1( Vector selList,Vector oldVolMapList ){
        BindOfPartandVol binder;
        VolumeMap volMap;
        LunMap lm;
        Vector lmList;
        BootHost aHost;
        String desc;
        int i,j,size1,maxSnap,cltID;
        boolean isOk,founded;

        boolean taskOk = true;

        int size = selList.size();
        if( size > 0 ){
            for( i=0; i<size; i++ ){
                binder = (BindOfPartandVol)selList.elementAt(i);
                aHost = this.findHostForVolume( binder.ap.ip );
                cltID = aHost.getID();

                try{
                    maxSnap = Integer.parseInt( binder.maxSnap );
                }catch(Exception ex){
                    maxSnap = 0;
                    // impossible
                }

                desc = binder.desc;

                size1 = oldVolMapList.size();
                founded = false;
                for( j=0; j<size1; j++ ){
                    volMap = (VolumeMap)oldVolMapList.elementAt( j );
                    if( binder.vol.getTargetID() == volMap.getVolTargetID()  ){
                        founded = true;

                        // 修改这个volMap
                        if( volMap.getMaxSnapNum() != maxSnap || !volMap.getVolDesc().equals( desc ) ||
                                volMap.getVol_protect_type() != BootHost.PROTECT_TYPE_MTPP ){
                            isOk = view.initor.mdb.modOneVolumeMap6( volMap.getVolName(),maxSnap,desc,BootHost.PROTECT_TYPE_MTPP );
                            if( isOk ){
                               // 修改 cache中的这个 volMap的 maxsnap值
                                volMap.setMaxSnapNum( maxSnap );
                                volMap.setVolDesc( desc );
                                volMap.setVol_protect_type( BootHost.PROTECT_TYPE_MTPP );

                                runningTaskPaneForCMDP.setLogOnTabpane(
                                    SanBootView.res.getString("InitBootHostWizardDialog.log.modVolMap")+" "+binder.vol.getSnap_name() +" "+
                                        SanBootView.res.getString("common.ok"),
                                    RunningTaskPane.SAVE_INFO_ROW
                                );
                            }else{
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modVolMap")+" "+binder.vol.getSnap_name() +" "+
                                        SanBootView.res.getString("common.failed");
                                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                                taskOk = false;
                            }
                        }

                        // 从删除oldVolMapList中删除这个volmap
                        oldVolMapList.removeElementAt(j);

                        break;
                    }
                }

                if( !founded ){
                    volMap = new VolumeMap(
                        binder.vol.getSnap_name(),
                        cltID,
                        binder.part.getDiskLabel(),
                        binder.vol.getTargetID(),
                        maxSnap,
                        binder.desc,
                        binder.vol.getSnap_root_id(),
                        BootHost.PROTECT_TYPE_MTPP 
                    );
                    volMap.setVol_cluster_id( cluster.getCluster_id() );
                    if( binder.ap.isLocal ){
                        volMap.clearSharedDiskBit();
                    }else{
                        volMap.setSharedDiskBit();
                    }

                    isOk = view.initor.mdb.AddOneVolumeMap( volMap );
                    if( isOk ){
                        view.initor.mdb.insertOneVolMapIntoVec( volMap );

                        //修改volmap对应的UIM-vol
                        if( !modUIMVolOnVolMap( cltID,binder.vol.getSnap_root_id(),0 ) ){
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modUIMVol")+" "+binder.vol.getSnap_name() +" "+
                                      SanBootView.res.getString("common.failed");
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                            taskOk = false;
                        }

                        //修改volmap对应的clonedisk
                        if( !modCloneDiskOnVolMap( binder.vol.getSnap_root_id(),cltID,0 ) ){
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modCloneDisk")+" "+binder.vol.getSnap_name() +" "+
                                      SanBootView.res.getString("common.failed");
                            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                            taskOk = false;
                        }

                        runningTaskPaneForCMDP.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.addVolMap")+" "+binder.vol.getSnap_name() +" "+
                                SanBootView.res.getString("common.ok"),
                            RunningTaskPane.SAVE_INFO_ROW
                        );
                    }else{
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addVolMap")+" "+binder.vol.getSnap_name() +" "+
                                  SanBootView.res.getString("common.failed");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                        taskOk = false;
                    }
                }
            }
        }
        
        // 删除所有的old volmap
        size = oldVolMapList.size();
        for( i=0; i<size; i++ ){
            volMap = (VolumeMap)oldVolMapList.elementAt(i);
            isOk = view.initor.mdb.delVolumeMap( volMap );
            if( isOk ){
                view.initor.mdb.removeVolMapFromVector( volMap );
                
                // 删除该volMap对应的host
                if( !isThisHostHaveOtherVolMap( volMap.getVolClntID() ) ){
                    isOk = view.initor.mdb.delBootHost( volMap.getVolClntID() );
                    if( isOk ){
                        view.initor.mdb.removeBootHostFromVector( volMap.getVolClntID() );
                    }
                }
                
                // 修改volmap对应的UIM-vol
                if( !modUIMVolOnVolMap( volMap.getVolClntID(),volMap.getVol_rootid(),1 ) ){
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modUIMVol")+" "+volMap.getVolName() +" "+
                              SanBootView.res.getString("common.failed");
                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                    writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                    taskOk = false;
                }

                //修改volmap对应的clonedisk
                if( !modCloneDiskOnVolMap(volMap.getVol_rootid(),volMap.getVolClntID(),1 ) ){
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modCloneDisk")+" "+volMap.getVolName() +" "+
                              SanBootView.res.getString("common.failed");
                    runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                    writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                    taskOk = false;
                }

                runningTaskPaneForCMDP.setLogOnTabpane(
                    SanBootView.res.getString("InitBootHostWizardDialog.log.delVolMap")+" "+volMap.getVolName() +" "+
                        SanBootView.res.getString("common.ok"),
                    RunningTaskPane.SAVE_INFO_ROW
                );
            }else{
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.delVolMap")+" "+volMap.getVolName() +" "+
                          SanBootView.res.getString("common.failed");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                taskOk = false;
            }

            // del lunmap
            isOk = view.initor.mdb.getLunMapForTID( volMap.getVolTargetID() );
            if( isOk ){
                lmList = view.initor.mdb.getAllLunMapForTid();
                size1 = lmList.size();
                for( j=0; j<size1; j++ ){
                    lm = (LunMap)lmList.elementAt(j);
                    isOk = view.initor.mdb.delLunMap( volMap.getVolTargetID(), lm.getIP(), lm.getMask(), lm.getAccessMode() );
                    if( isOk ){
                        runningTaskPaneForCMDP.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.delLunMap")+" "+volMap.getVolTargetID() +" "+lm.getIP() +" "+lm.getMask() +" "+lm.getAccessMode()+" "+
                                SanBootView.res.getString("common.ok"),
                            RunningTaskPane.SAVE_INFO_ROW
                        );
                    }else{
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.delLunMap")+" "+volMap.getVolTargetID() +" "+lm.getIP() +" "+lm.getMask() +" "+lm.getAccessMode() +" "+
                                  SanBootView.res.getString("common.failed");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                        taskOk = false;
                    }
                }
            }else{
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.getLunMap")+" "+volMap.getVolName() +" "+
                          SanBootView.res.getString("common.failed");
                runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                taskOk = false;
            }
        }

        return taskOk;
    }

    private boolean isThisHostHaveOtherVolMap( int hid ){
        ArrayList<VolumeMap> volList = view.initor.mdb.getVolMapOnClntID1( hid );
        if( volList.size() >= 1 ){
            return true;
        }else{
            return false;
        }
    }

    private BootHost findHostForVolume( String ip ){
        ArrayList<SubCluster> subcList = cluster.getSubClusterList();
        int size = subcList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc  = subcList.get(i);
            BootHost aHost = subc.getHost();
            if( aHost.getIP().equals( ip ) ){
                return aHost;
            }
        }
        return null;
    }
    
    private boolean createVolMapFromCrtList( Vector crtList ){
        BindOfPartandVol binder;
        VolumeMap volMap;
        BootHost aHost;
        int maxSnap;
        boolean isOk;

        boolean taskOk = true;

        int size = crtList.size();
        if( size > 0 ){
            for( int i=0; i<size; i++ ){
                binder = (BindOfPartandVol)crtList.elementAt(i);
                if( binder.isProtectedByCMDP() ) continue;
                aHost = this.findHostForVolume( binder.ap.ip );

                if( binder.targetID > 0 ){ // 刚刚创建成功
                    try{
                        maxSnap = Integer.parseInt( binder.maxSnap );
                    }catch(Exception ex){
                        maxSnap = 0;
                        // impossible
                    }

                    volMap = new VolumeMap(
                        binder.volName,
                        aHost.getID(),
                        binder.part.getDiskLabel(),
                        binder.targetID,
                        maxSnap,
                        binder.desc,
                        binder.rootID,
                        BootHost.PROTECT_TYPE_MTPP
                    );
                    if( binder.ap.isLocal ){
                        volMap.clearSharedDiskBit();
                    }else{
                        volMap.setSharedDiskBit();
                    }
                    volMap.setVol_cluster_id( cluster.getCluster_id() );

                    isOk = view.initor.mdb.AddOneVolumeMap( volMap );
                    if( isOk ){
                        view.initor.mdb.insertOneVolMapIntoVec( volMap );

                        runningTaskPaneForCMDP.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.addVolMap")+" "+binder.volName +" "+
                                SanBootView.res.getString("common.ok"),
                            RunningTaskPane.SAVE_INFO_ROW
                        );
                    }else{
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addVolMap")+" "+binder.volName +" "+
                                   SanBootView.res.getString("common.failed");
                        runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                        taskOk = false;
                    }
                }
            } // end for
        }

        return taskOk;
    }

    private String getDefaultVolName( String disklabel,String ip ){
        try{
            int indx = ip.lastIndexOf(".");
            String lastElement = ip.substring( indx+1 );
            byte ch = (byte)disklabel.charAt(0);
            String drv = new String( new byte[]{ch } );
            return drv + lastElement;
        }catch(Exception ex){
            return "";
        }
    }
    
    private void sendNetbootInfoToDestUWS(){
        int rootid;
        boolean needSend = true;
        if( hasCrtOSDisk ){
            if( !isCrtOSDiskOk ){
                needSend = false;
            }
        }

        if( needSend ){
            if( hasCrtOSDisk ){ // os volume 是创建产生的
                rootid = OSBinder.rootID;
            }else{ // os volume使用已经存在的volume
                Volume volume = selectSysVolPane.getSelectOSDiskVol();
                if( volume != null ){
                    rootid = volume.getSnap_root_id();
                }else{
                    rootid = -1;
                }
            }

            if( rootid != -1 ){
                //view.initor.mdb.sendNetbootInfoToDestUWS( rootid, host );
            }
        }
    }
    
    private ArrayList getNetCardList( String[] ip,int[] port ){
        boolean isOk;
        ArrayList netCardList;
        Object val;

        for( int i=0; i<ip.length; i++ ){
            val = ncCache.get( ip[i] );
            if( val == null ){
                isOk = view.initor.mdb.getIPInfoFromClnt( ip[i],port[i],"00-00-00-00-00-00",ResourceCenter.CMD_TYPE_CMDP );
                if( !isOk ){
                    JOptionPane.showMessageDialog(
                        this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                        view.initor.mdb.getErrorMessage()
                    );
                    return null;
                }else{
                    netCardList = view.initor.mdb.getAllNetCardinfo();
                    ncCache.put( new String( ip[i] ), netCardList );
                }
            }
        }

        ArrayList ret = new ArrayList();
        Enumeration list = ncCache.elements();
        while( list.hasMoreElements() ){
            ret.add( list.nextElement() );
        }
        return ret;
    }
    
    private boolean isIPConfilict( ArrayList ncList,String ip ){
        NetCard nc;
        BindIPAndMask ipPeer;
        Vector ipList;
        ArrayList list;
        int i,j,l,size,size1,size2;
        
        size = ncList.size();
        for( i=0; i<size; i++ ){
            list = (ArrayList)ncList.get(i);
            size1 = list.size();
            for( j=0; j<size1; j++ ){
                nc = (NetCard)list.get( j );
                ipList = nc.getIPList();
                size2 = ipList.size();
                for( l=0; l<size2; l++ ){
                    ipPeer = (BindIPAndMask)ipList.elementAt( l );
                    if( ipPeer.ip.equals( ip ) ){
                        JOptionPane.showMessageDialog( this,SanBootView.res.getString("InitBootHostWizardDialog.error.conflictIP") );
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
    
    private boolean saveInfo( String confile,String contents ){        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_IPINFO );
        if( tmpFile == null ){
            errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            return false; 
        }
        
        if( contents.equals("") ){
SanBootView.log.warning(getClass().getName(),"Content to send is null.");            
            // if contents is null, must assign a string with some white spaces to it, or sendFileToServer will fail. 
            contents = "                        ";
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            errMsg =  SanBootView.res.getString("common.errmsg.sendFileFailed");
            runningTaskPaneForCMDP.setLogOnTabpane( errMsg,RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPaneForCMDP.SAVE_INFO_ROW );
            tmpFile.delete();
            return false;
        }    
           
        tmpFile.delete();
            
        // ��tmpFile move to profile dir
        boolean isOk = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile.getName(), confile      
        );
        
        return isOk;   
    }
    
    private void recordUWSRpt( boolean initOk ){
        String msg;

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime( date );
        
        int year  = today.get( Calendar.YEAR );
        String stime = year + "";
        int month = today.get( Calendar.MONTH ) + 1;
        if( month<10 ){
            stime+= "0" + month;
        }else{
            stime+=month;
        }
        int day   = today.get( Calendar.DAY_OF_MONTH );
        if( day <10 ){
            stime+= "0" + day;
        }else{
            stime+=day;
        }
        int hour  = today.get(Calendar.HOUR_OF_DAY);
        if( hour <10 ){
            stime+= "0" + hour;
        }else{
            stime+=hour;
        }
        int min   = today.get(Calendar.MINUTE);
        if( min <10 ){
            stime +="0"+min;
        }else{
            stime+=min;
        }
        int sec   = today.get(Calendar.SECOND);
        if( sec <10 ){
            stime+="0"+sec;
        }else{
            stime+=sec;
        }

        ArrayList<SubCluster> subcList = cluster.getSubClusterList();
        int size = subcList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = subcList.get(i);
            BootHost aHost = subc.getHost();
            Audit audit = view.audit.registerAuditRecord( aHost.getID(), MenuAndBtnCenterForMainUi.FUNC_CLUSTER_PHY_WIN_INIT );
            if( initOk ){
                audit.setEventDesc( "Initialize member host in cluster: " + aHost.getName()+ " successfully." );
            }else{
                audit.setEventDesc( "Failed to Initialize member host in cluster: " + aHost.getName() );
            }
            view.audit.addAuditRecord( audit );

            UWSReport rpt = new UWSReport();
            rpt.setSTime( stime );
            rpt.setClntName( aHost.getName() );

            rpt.setTaskClntId( aHost.getID() );
            rpt.setTask_clnt_type( DestAgent.TYPE_ORI_HOST );

            rpt.setTType( UWSReport.TASK_TYPE_INIT );
            rpt.setTResult( initOk? UWSReport.TASK_RESULT_END:UWSReport.TASK_RESULT_FAIL );

            msg = logBuf.toString();
            if( msg.getBytes().length > 1014 ){
                byte[] arr = msg.getBytes();
                String newmsg = new String(arr,0,1014 );
                rpt.setTaskMsg( initOk? SanBootView.res.getString("InitBootHostWizardDialog.error.initOK") : newmsg );
            }else{
                rpt.setTaskMsg( initOk? SanBootView.res.getString("InitBootHostWizardDialog.error.initOK") : msg );
            }

            String fname = generateUWSRptTmpFile( rpt.prtMe() );
            if( fname != null ){
                if( !view.initor.mdb.addReport( fname ) ){
                    // save in local host
                    saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_INIT_RPT +stime );
                }
            }else{
                // save in local host
                saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_INIT_RPT + stime );
            }
        }
    }
    
    private String generateUWSRptTmpFile( String contents ){
        String fname;
        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_USWTMP );
        if( tmpFile == null ){
            return null; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            tmpFile.delete();
            return null;
        }    
        
        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }
    
    private void saveUWSRpt( String contents,String fname ){
        try{
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File( path );
            
            f1.createNewFile();
            
            PrintWriter out = new PrintWriter( new FileWriter(f1),true );
            out.print( contents );
            out.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }   
}
class GetInitInfoForPhyThread extends Thread{
    ProgressDialog pdiag;
    String[] ip;
    String[] pri_ip;
    String[] vip;
    int[] port;
    int[] mtpp_port;
    boolean isGetAgtInfo;
    boolean isOK = true;
    SanBootView view;
    boolean isFirst;
    
    private boolean getAgtInfo = false;
    private boolean getOrphanVol = false;
    private boolean getSystemPart = false;
    private boolean getDiskPartForWin = false;
    private boolean isStartupfromSAN = false;
    private boolean getOsService = false;
    
    private GetFreePhyVol getOrVol;
    private ArrayList<String> partitionContent = new ArrayList<String>();
    private ArrayList<Vector> osService = new ArrayList<Vector>();
    private ArrayList<Vector> sysPartList = new ArrayList<Vector>();
    private ArrayList<String> diskDetailInfo = new ArrayList<String>();
    private ArrayList<GetAgentInfo> getAgentInfoList = new ArrayList<GetAgentInfo>();
    private boolean[] startNet = new boolean[]{false,false};
    
    Runnable close = new Runnable(){
        public void run(){
            pdiag.dispose();
        }
    };
    
    public GetInitInfoForPhyThread(  ProgressDialog pdiag, String[] ip, String[] pri_ip,String[] vip,
            int[] port,int[] mtpp_port,boolean isGetAgtInfo,SanBootView view,boolean isFirst
    ){
        this.pdiag = pdiag;
        this.ip = ip;
        this.pri_ip = pri_ip;
        this.vip = vip;
        this.port = port;
        this.mtpp_port = mtpp_port;
        this.isGetAgtInfo = isGetAgtInfo;
        this.view = view;
        this.isFirst = isFirst;
    }

    private void getAgentInfo( String ip,String pri_ip, String vip, int port,int mtpp_port ){
        GetAgentInfo getAgentInfo;
        
        boolean isOk;
        try{
            getAgentInfo = new GetAgentInfo(
                ResourceCenter.getCmdpS2A_CmdPath1( ip, port ) + "getsysinfo 2>/dev/null",
                view.getSocket()
            );
            getAgentInfo.setIP( ip );
            getAgentInfo.setPri_ip( pri_ip );
            getAgentInfo.setVip( vip );
            getAgentInfo.setPort( port );
            getAgentInfo.setMtppPort( mtpp_port );
            getAgentInfo.setCmdType( ResourceCenter.CMD_TYPE_CMDP );
            isOk =  getAgentInfo.getAgentInfo();         
            if( isOk ){
                if( !getAgentInfo.getOSName().toUpperCase().startsWith("WIN") ){
                    JOptionPane.showMessageDialog( pdiag,
                        SanBootView.res.getString("InitBootHostWizardDialog.error.notWinHost") +" : " + ip
                    );
                    isOK = false;
                }else{
                    view.initor.mdb.getHostUUID( ip,port,true,ResourceCenter.CMD_TYPE_CMDP );
                    if( view.initor.mdb.getUUID().equals("") ){
SanBootView.log.error( getClass().getName(),"errmsg of getuuid:  " + view.initor.mdb.getErrorMessage() );
                        if( view.initor.mdb.getErrorMessage().trim().toUpperCase().equals("CAN NOT GET AGENT INSTALL PATH")||
                            view.initor.mdb.getErrorMessage().trim().toUpperCase().equals("CAN NOT OPEN SOFTWARE\\ODYSYS\\AGENT")
                        ){
SanBootView.log.error( getClass().getName(),"need to recreate new client's UUID : " + ip  );
                            if( !view.initor.mdb.reCrtUUID( ip, port, ResourceCenter.CMD_TYPE_CMDP,true ) ){
SanBootView.log.error( getClass().getName(),"failed to recreate uuid for client: " + ip );
                                JOptionPane.showMessageDialog( pdiag,
                                    SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostInfo")+
                                        SanBootView.res.getString("common.failed")+" : " + ip
                                );
                                isOK = false;
                            }else{
                                view.initor.mdb.getHostUUID( ip,port,true,ResourceCenter.CMD_TYPE_CMDP );
                                if( view.initor.mdb.getUUID().equals("") ){
SanBootView.log.error( getClass().getName(),"Client's UUID is none: " + ip );
                                    JOptionPane.showMessageDialog( pdiag,
                                        SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostInfo")+
                                            SanBootView.res.getString("common.failed")+" : " + ip
                                    );
                                    isOK = false;
                                }
                            }
                        }else{
SanBootView.log.error( getClass().getName(),"Client's UUID is none: " + ip );
                            JOptionPane.showMessageDialog( pdiag,
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostInfo")+
                                    SanBootView.res.getString("common.failed") +" : " + ip
                            );
                            isOK = false;
                        }
                    }else{
                        getAgentInfo.setUUID( view.initor.mdb.getUUID() );
                        
                        // 判断是否存在相同的uuid（当网络启动在另外一台机器上后，源盘恢复后该机器的uuid就和源机器一样了）
                        // 下面的判断方法不对,还需要更多的依据（2008/10/31）
                        //if( view.initor.mdb.getHostFromCacheOnUUID( uuid ) != null ){
                        if( false ){
                            JOptionPane.showMessageDialog(view,
                                SanBootView.res.getString("MenuAndBtnCenter.error.sameUUID")
                            );
                            isOK = false;
                        }else{
                            this.getAgentInfoList.add( getAgentInfo );
                            isOK = true;
                            getAgtInfo = true;
                        }
                    }
                }
            }else{
                JOptionPane.showMessageDialog( pdiag,
                    SanBootView.res.getString("InitBootHostWizardDialog.log.getHostInfo")+
                        SanBootView.res.getString("common.failed") +" : " + ip
                );
                isOK = false;
            }
        }catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog( pdiag,
                SanBootView.res.getString("InitBootHostWizardDialog.log.getHostInfo")+
                    SanBootView.res.getString("common.failed") +" : " + ip
            );
            isOK = false;
        }
    }

    private void getVolInfoForCMDP( String ip,int port,int which ){
        String aPartitionContent;
        Vector aSysPartList;

        boolean isOk = view.initor.mdb.getVolInfoForCMDP( ip,port );
        if( !isOk ){
            JOptionPane.showMessageDialog(pdiag,
                ResourceCenter.getCmdString( ResourceCenter.CMD_GET_PARTITION )+" : "+
                    view.initor.mdb.getErrorMessage() +" : " + ip
            );
            isOK = false;
        }else{
            aPartitionContent = view.initor.mdb.getVolInfoContentsForCMDP();
            aSysPartList = new Vector();
            Object[] partList = view.initor.mdb.getLocakDiskFromVolInfoForCMDP();
            for( int i=0; i<partList.length; i++ ){
                SystemPartitionForWin part = (SystemPartitionForWin)partList[i];
                part.setDisplayMode( 1 );
                part.setHostName( this.getAgentInfoList.get(which).getHostName() );
                part.setHost_uuid( this.getAgentInfoList.get(which).getUUID() );
                part.setHost_ip( ip );
                part.setHost_port( port );
                aSysPartList.add( partList[i] );
            }

            if( aPartitionContent.equals("") ){
SanBootView.log.error( this.getClass().getName(),"There is no valid local volume( no file system )");
                JOptionPane.showMessageDialog( pdiag,
                    SanBootView.res.getString("InitBootHostWizardDialog.error.volInfoIsNull") +" : " +ip
                );
                getSystemPart = false;
            }else{
                this.partitionContent.add( aPartitionContent );
                this.sysPartList.add( aSysPartList );
                getSystemPart = true;
            }
        }
    }

    private void getOSService( String ip, int port ){
        Vector aOsService;

        boolean isOk = view.initor.mdb.getOSService( ip,port,"",ResourceCenter.CMD_TYPE_CMDP );
        if( isOk ){
            aOsService = view.initor.mdb.getOSService();
            this.osService.add( aOsService );
            getOsService = true;
        }else{
            JOptionPane.showMessageDialog(pdiag,
                ResourceCenter.getCmdString( ResourceCenter.CMD_GET_OS_SERVICE )+" : "+
                SanBootView.res.getString("common.failed") +" : " + ip
            );
            isOK = false;
        }
    }

    private void getDiskPartForWin( String ip, int port ){
        String aDiskDetailInfo;
        boolean isOk = view.initor.mdb.getDiskPartForWin( ip,port,"ib_save_partition.exe -list_local",ResourceCenter.CMD_TYPE_CMDP );
        if( !isOk ){
            JOptionPane.showMessageDialog(pdiag,
                ResourceCenter.getCmdString( ResourceCenter.CMD_GET_PARTITION )+" : "+
                    view.initor.mdb.getErrorMessage() +" : " + ip
            );
            isOK = false;
        }else{
            aDiskDetailInfo = view.initor.mdb.getDiskPartForWin();
            if( aDiskDetailInfo.equals("") ){
SanBootView.log.error( getClass().getName(),"Can't get disk partition info,so will not auto-restore-partition later. But we will tolerate this error.");
                aDiskDetailInfo = "Can't get disk partition when initiating the client.";
            }
            this.diskDetailInfo.add( aDiskDetailInfo );
            getDiskPartForWin = true;
        }
    }

    private void isStartupfromSAN( String ip, int port, int which ){
        boolean isOk = view.initor.mdb.isStartupfromSAN( ip,port,"C",ResourceCenter.CMD_TYPE_CMDP );
        if( isOk ){
            startNet[which] = view.initor.mdb.isStartupFromSAN();
            isStartupfromSAN = true;
        }else{
            JOptionPane.showMessageDialog(pdiag,
                ResourceCenter.getCmdString( ResourceCenter.CMD_IS_STARTUP_FROM_NET )+" : "+
                    view.initor.mdb.getErrorMessage() +" : " + ip
            );
            isOK = false;
        }
    }

    @Override public void run(){
        boolean isOk;
        
        if( isGetAgtInfo ){
            this.getAgentInfo( ip[0], pri_ip[0], vip[0], port[0], mtpp_port[0] );
            if( this.getAgtInfo ){
                this.getAgentInfo( ip[1], pri_ip[1], vip[1], port[1], mtpp_port[1] );
            }
        }else{
            getAgtInfo = true;
        }
        
        if( isFirst ){
            if( isOK ){
                try{
                    getOrVol = new GetFreePhyVol1(
                        ResourceCenter.getCmd(
                            ResourceCenter.CMD_GET_VOL
                        ),
                        view.getSocket(),
                        view
                    );
                    getOrVol.setAddCacheFlag( true );
                    // 获取所有的disk,不仅是free disk
                    getOrVol.setFilterFlag( false );
                    
                    isOk = getOrVol.realDo();                    
                    if( !isOk ){
                        JOptionPane.showMessageDialog( pdiag,
                            SanBootView.res.getString("InitBootHostWizardDialog.error.getOrphanVol")
                        );
                        isOK = false;
                    }else{
                        getOrphanVol = true;
                    }
                }catch( Exception exp ){
                    JOptionPane.showMessageDialog( pdiag,
                        SanBootView.res.getString("InitBootHostWizardDialog.error.getOrphanVol")
                    );
                    isOK = false;
                }
            }
        }
        
        if( isOK ){
            this.getVolInfoForCMDP( ip[0], port[0],0 );
            if( this.getSystemPart ){
                this.getVolInfoForCMDP( ip[1], port[1],1 );
            }
        }

        if( isOK ){
            this.getOSService( ip[0], port[0] );
            if( this.getOsService ){
                this.getOSService( ip[1], port[1] );
            }
        }
        
        if( isOK ){
            this.getDiskPartForWin( ip[0], port[0] );
            if( this.getDiskPartForWin ){
                this.getDiskPartForWin( ip[1], port[1] );
            }
        }
        
        if( isOK ){
           this.isStartupfromSAN( ip[0], port[0], 0 );
           if( this.isStartupfromSAN ){
               this.isStartupfromSAN( ip[1], port[1], 1 );
           }
        }
        
        try{
            SwingUtilities.invokeAndWait( close );
        }catch( Exception ex ){
            ex.printStackTrace();
        }
    }
    
    public boolean isOK(){
        return isOK;
    }
    
    public boolean getAgtInfoIsOK(){
        return getAgtInfo;
    }
    
    public GetAgentInfo[] getAgentInfoCmdObj(){
        int size = this.getAgentInfoList.size();
        GetAgentInfo[] ret = new GetAgentInfo[size];
        for( int i=0; i<size; i++ ){
            ret[i] = this.getAgentInfoList.get(i);
        }
        return ret;
    }
    public boolean isWin(){
        GetAgentInfo getAgentInfo;
        boolean ret = false;
        boolean aIsFirst = true;
        int size = this.getAgentInfoList.size();
        for( int i=0; i<size; i++ ){
            getAgentInfo = getAgentInfoList.get(i);
            if( aIsFirst ){
                ret = getAgentInfo.isWin();
                aIsFirst = false;
            }else{
                ret = ret & getAgentInfo.isWin();
            }
        }
        return ret;
    }

    public String getMemberUUID(){
        GetAgentInfo getAgentInfo = this.getAgentInfoList.get( 0 );
        return getAgentInfo.getUUID();
    }
    
    public String getCombinedUUID(){
        boolean aIsFirst=true;
        GetAgentInfo getAgentInfo;

        StringBuffer buf = new StringBuffer();
        int size = this.getAgentInfoList.size();
        for( int i=0; i<size; i++ ){
            getAgentInfo = getAgentInfoList.get( i );
            if( aIsFirst ){
                buf.append( getAgentInfo.getUUID() );
                aIsFirst = false;
            }else{
                buf.append(";");
                buf.append( getAgentInfo.getUUID() );
            }
        }
        return buf.toString();
    }
    
    public boolean getOrphanVolIsOK(){
        return getOrphanVol;
    }
    
    public boolean getSystemPartIsOK(){
        return getSystemPart;
    }

    public boolean getDiskPartForWinIsOK(){
        return getDiskPartForWin;
    }

    public boolean getOSServiceIsOK(){
        return this.getOsService;
    }
    
    public boolean isStartupFromSAN(){
        return isStartupfromSAN;
    }
    
    public ArrayList getOrphanVolList(){
        if( getOrVol != null ){
            return getOrVol.getAllVolAndFreeDiskFromCache();
        }else{
            return new ArrayList();
        }
    }
    
    public Hashtable<String,String> getSystemPartContents(){
        Hashtable<String,String> ret = new Hashtable<String,String>();
        int size = this.partitionContent.size();
        for( int i=0; i<size; i++ ){
            ret.put( ip[i], this.partitionContent.get(i) );
        }
        return ret;
    }

    public Vector getOSServicelist(){
        Hashtable hash = new Hashtable();
        int size = this.osService.size();
        for( int i=0; i<size; i++ ){
            Vector vec = osService.get(i);
            int size1 = vec.size();
            for( int j=0; j<size1; j++ ){
                Service service = (Service)vec.elementAt(j);
                if( hash.get( service.getServName() ) == null ){
                    hash.put( service.getServName(), service );
                }
            }
        }
        
        Vector ret = new Vector();
        Enumeration list = hash.elements();
        while( list.hasMoreElements() ){
            ret.add( list.nextElement() );
        }
        
        return ret;
    }
    
    public Vector[] getSysPartList(){
        int size = this.sysPartList.size();
        Vector[] ret = new Vector[size];
        for( int i=0; i<size; i++ ){
            ret[i] = sysPartList.get(i);
        }
        return ret;
    }
    
    public Hashtable<String,String> getDiskDetailInfo(){
        int size = this.diskDetailInfo.size();
        Hashtable<String,String> ret = new Hashtable<String,String>();
        for( int i=0; i<size; i++ ){
            ret.put( ip[i], this.diskDetailInfo.get(i) );
        }
        return ret;
    }
    
    public boolean isStartFromNet(){
        for( int i=0; i<this.startNet.length; i++ ){
            if( startNet[i] ){
                return true;
            }
        }
        return false;
    }
}
