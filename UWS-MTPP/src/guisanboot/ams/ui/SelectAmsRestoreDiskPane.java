package guisanboot.ams.ui;

import guisanboot.ui.*;
import guisanboot.cmdp.entity.PPProfile;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import java.util.regex.*;
import guisanboot.data.*;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.multiRenderTable.*;
import java.lang.String;

public class SelectAmsRestoreDiskPane extends javax.swing.JPanel {
    
    /** Creates new form SelectRestoreDiskPane */
    public SelectAmsRestoreDiskPane() {
        initComponents();
    }

    public SelectAmsRestoreDiskPane( SanBootView view,DestAgent host,RestoreOriginalDiskInterface diag ) {
        this();
        myInit( view,host,diag,ResourceCenter.CMD_TYPE_MTPP );
    }

    public SelectAmsRestoreDiskPane( SanBootView view,DestAgent host,RestoreOriginalDiskInterface diag,int mode ) {
        this();
        myInit( view,host,diag,mode );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 70));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 55));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 5));

        jLabel1.setText("Real OS Restoring Source :");
        jPanel7.add(jLabel1);

        jTextField1.setPreferredSize(new java.awt.Dimension(40, 22));
        jPanel7.add(jTextField1);

        jPanel6.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jCheckBox1.setText("input before and after command for snapshot");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel8.add(jCheckBox1, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel5.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
    JTableY table;
    SanBootView view;
    DestAgent host;
    RestoreOriginalDiskInterface diag;
    int mode;
    Object[] header;
    Object[] label;
    RowEditorModel rm2 = new RowEditorModel();
    RowEditorModel rm0 = new RowEditorModel();
    RowEditorModel rm4 = new RowEditorModel();
    Hashtable seqArray = new Hashtable();
     
    private void myInit( SanBootView _view,DestAgent _host,RestoreOriginalDiskInterface _diag,int mode ){
        view = _view;
        host = _host;
        diag = _diag;
        this.mode = mode;
        
        jTextArea1.setText(
            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.tip1")
        );
        jCheckBox1.setText( SanBootView.res.getString("SelectRestoreDiskPane.checkBox.inputcmd"));
        jLabel1.setText( SanBootView.res.getString("SelectRestoreDiskPane.label.realRestOsLetter") );

        if( mode == ResourceCenter.CMD_TYPE_CMDP ){
            this.jPanel8.remove( this.jCheckBox1 );
        }

        if( !host.isEmBoot() || !host.is64BitOS() ){
            jPanel7.remove( this.jLabel1 );
            jPanel7.remove( this.jTextField1 );
        }
    }
    
    private void assignSeq( Object[] list ){
        int seqVal=0;

        for( int i=0; i<list.length; i++ ){
            VolumeMap volMap = (VolumeMap)list[i];
            if( volMap.isMtppProtect() ) continue;
            
            PPProfile prof = view.initor.mdb.getBelongedDg( host.getSrc_Agnt_id(), volMap.getVolDiskLabel() );
            if( prof == null ) continue;  // impossible to happen

            RestoreSeq seq = seqMap.get( prof );
            if( seq == null ){
                seqVal += 1;
                seqMap.put( prof, new RestoreSeq( seqVal ) );
            }
        }
    }
    
    HashMap<PPProfile,RestoreSeq> seqMap = new HashMap<PPProfile,RestoreSeq>();
    public void setupTable( Vector list  ){
        VolumeMap volMap;
        VolumeMapWrapper wrapper;
        JComboBox cb; 
        DefaultCellEditor ed;
        CheckBoxEditor ced;
        int i;
        Object[][] data;
        
        Object[] _list = list.toArray();
        Arrays.sort( _list );    //按diskLabel排序
        
        int num = _list.length;
        
        // 生成恢复顺序列表
        Vector seqList = new Vector();
        for( i=0; i<num; i++ ){
            seqList.addElement( new Integer( i+1 ) );
        }

        // 事先确定seq的分配
        if( mode == ResourceCenter.CMD_TYPE_CMDP && ( host.isOriginalBootHost() || host.isDstAgntUnderBootHost() ) ){
            seqMap.clear();
            this.assignSeq( _list );
        }
        
        data = new Object[num][5];
        header = new Object[5]; // select?, volMap,seq#, dest disk,restore?
        label = new Object[num];
        header[0] = SanBootView.res.getString("SelectRestoreDiskPane.table.select");
        header[1] = SanBootView.res.getString("SelectRestoreDiskPane.table.volMap");
        header[2] = SanBootView.res.getString("SelectRestoreDiskPane.table.seq");
        header[3] = SanBootView.res.getString("SelectRestoreDiskPane.table.dest");
        header[4] = SanBootView.res.getString("SelectRestoreDiskPane.table.restore");
        
        for( i=0; i<num; i++ ){
            volMap = (VolumeMap)_list[i];
            wrapper = new VolumeMapWrapper( 0 );
            wrapper.volMap = volMap;
            
            data[i][0] = Boolean.FALSE; //Boolean.TRUE;
            data[i][1] = wrapper;
            if( mode == ResourceCenter.CMD_TYPE_MTPP ){
                data[i][2] = new Integer( i+1 );
            }else{
                if( host.isRealBootHost() && volMap.isCMDPProtect() ){
                    PPProfile prof = view.initor.mdb.getBelongedDg( host.getSrc_Agnt_id(), volMap.getVolDiskLabel() );
                    if( prof == null ){
                        data[i][2] = new Integer( i+1 );
                    }else{
                        data[i][2] = new Integer( seqMap.get( prof ).seqVal );
                    }
                }else{
                    data[i][2] = new Integer( i+1 );
                }
            }
            data[i][3] = "";
            data[i][4] = Boolean.FALSE;
            
            cb = new JComboBox( seqList );
            ed = new DefaultCellEditor( cb );
            rm2.addEditorForRow( i, ed );
            
            label[i]= volMap.getVolDiskLabel();
        }
        
        MyDefaultTableModelForTabY model = new MyDefaultTableModelForTabY( data,header,label );
        model.setIsEditableOnCol3( true );
        
        table = new JTableY( model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );
        
        ced = new CheckBoxEditor();
        rm0.addEditorForRow( 0, ced );
            
        ced = new CheckBoxEditor();
        rm4.addEditorForRow( 4,ced );
        
        table.setCol2EditorModel( rm2 );
        table.setCol0EditorModel( rm0 );
        table.setCol4EditorModel( rm4 );
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 92 );
        tableColumnModel.getColumn(1).setWidth( 92 );
        tableColumnModel.getColumn(2).setWidth( 92 );
        tableColumnModel.getColumn(3).setWidth( 92 );
        tableColumnModel.getColumn(4).setWidth( 92 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
        
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }
    
    public boolean isInputSnapCmd(){
        if( getRestoreNum() >0 ){
            return jCheckBox1.isSelected();
        }else{
            return false;
        }
    }
    
    public void setInputSnapCmdFlag( boolean val ){
        jCheckBox1.setSelected( val );
    }
    
    public void updateDest( HashMap list ){
        Object val;
        RestoreMapper mapper;
        VolumeMapWrapper wrapper;
        
        if( list.size()<=0 ) return;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel = (Boolean)model.getValueAt(row, 0 );
            if( isSel.booleanValue() ){
                wrapper =(VolumeMapWrapper)model.getValueAt( row,1 );
                val = list.get( wrapper.volMap.getVolDiskLabel().toUpperCase().substring(0,1) );
                if( val != null ){
                    mapper = (RestoreMapper)val;
                    model.setValueAt( mapper.getDest(),row, 3 );
                }
            }
        }
    }
    
    public boolean hasRestoredDisk(){
        int cnt = 0;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel = (Boolean)model.getValueAt(row, 0 );
            if( isSel.booleanValue() ){
                cnt++;
            }
        }
        
        return ( cnt > 0 );
    }
    
    public boolean isOSDiskSelected(){
        VolumeMapWrapper wraper;
        boolean isSel;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            wraper = (VolumeMapWrapper)model.getValueAt( row,1 );
            if( wraper.volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
                return isSel;
            }
        }
        
        return false;
    }

    public boolean isOSProtectedbyCMDP(){
        VolumeMapWrapper wraper;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            wraper = (VolumeMapWrapper)model.getValueAt( row,1 );
            if( wraper.volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                return wraper.volMap.isCMDPProtect();
            }
        }

        return false;
    }

    public String getOSDest(){
        VolumeMapWrapper wraper;
        Object val;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            wraper = (VolumeMapWrapper)model.getValueAt( row,1 );
            if( wraper.volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                val = model.getValueAt( row, 3 );
                if( val instanceof String ){
                    return (String)val;
                }else{
                    return ((DestDevice)val).getMp();
                }   
            }
        }
        
        return null; // impossible happen
    }

    // 检查恢复顺序是否合法（属于同一disk group的seq必须一样）
    public PPProfile checkSeqValid(){
        boolean isSel,isRst;
        RestoreSeq seqer;
        Integer seqVal;
        VolumeMapWrapper wraper;
        PPProfile prof;

        this.seqMap.clear(); 

        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            wraper = (VolumeMapWrapper)model.getValueAt( row,1 );
            prof = view.initor.mdb.getBelongedDg( host.getSrc_Agnt_id(), wraper.volMap.getVolDiskLabel() );
            if( prof == null ) continue;

            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            isRst = ((Boolean)model.getValueAt( row,4 )).booleanValue();
            seqVal = (Integer)model.getValueAt( row, 2 );
            
            seqer = seqMap.get( prof );
            if( seqer == null ){
                seqMap.put( prof, new RestoreSeq( seqVal.intValue(),isRst,isSel ) );
            }else{
                if( ( seqer.seqVal != seqVal.intValue() ) || ( seqer.isRst != isRst ) || ( seqer.isSel != isSel ) ){
                    return prof;
                }
            }
        }
        
        return null;
    }

    public String getRealOsRestSourceDiskLetter(){
        String realSrc = this.jTextField1.getText().trim();
        if( realSrc.equals("") ){
            return "C";
        }else{
            return realSrc.toUpperCase();
        }
    }
    
    // 下面的检查确保恢复目的都是本地盘
    public boolean checkVolInfoValidity(){
        boolean isSel,isOk,toRest;
        String destStr,ip;
        RetValObj retVal;
        DestDevice dest;
        int port;
        Matcher matcher;
        VolumeMapWrapper wraper;
        Object val;
        
        ip = host.getIP();
        port = host.getPort();
        
        diag.reGetSysPart(); // 重新获取系统分区信息
        diag.reGetVolInfo(); // 重新获取带有uuid的vol信息

        Pattern pattern = Pattern.compile("^[a-zA-Z]$");
         
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( !isSel ) continue;

            wraper = (VolumeMapWrapper)model.getValueAt( row, 1 );

            val = model.getValueAt( row, 3 );
            if( val instanceof DestDevice ){
                dest = (DestDevice)val;
                destStr = dest.getMp();
            }else{
                destStr = (String)val;
            }
            matcher = pattern.matcher( destStr );
            if( !matcher.find() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectRestoreDiskPane.error.invalidVal") + " ["+row+",3]"
                );
                return false;
            }

            // 检查是否恢复到自己身上
            if( !badDestDriver( destStr ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectRestoreDiskPane.error.rstOntoSelf") + " ["+row+",3]"
                );
                return false;
            }

            // 判断dest是否为本地盘；如果为iSCSI则报错
            if( mode ==  ResourceCenter.CMD_TYPE_CMDP ){
                isOk = view.initor.mdb.isStartupfromSAN( ip,port,destStr,ResourceCenter.CMD_TYPE_CMDP );
            }else{
                isOk = view.initor.mdb.isStartupfromSAN( ip,port,destStr );
            }
            if( isOk ){
                if( view.initor.mdb.isStartupFromSAN() ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectRestoreDiskPane.error.notLocalDisk") + " ["+row+",3]"
                    );
                    return false;
                }
            }else{
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectRestoreDiskPane.error.getStartupInfo") + " ["+row+",3]"
                );
                return false;
            }

            // check whether os disk is active
            if( wraper.volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                if( !checkIsActive( ip,port, destStr + ":" ) ){
                    JOptionPane.showMessageDialog(this,
                        this.errMsg
                    );
                    return false;
                }
            }

            toRest = ((Boolean)model.getValueAt( row, 4 )).booleanValue();
            if( toRest ){
                if( mode ==  ResourceCenter.CMD_TYPE_CMDP ){
                    // 比较"源的总大小"和"目的总大小"是否匹配
                    retVal = diag.sizeIsMatched( wraper.volMap.getVolDiskLabel(), destStr+":\\" );
                    /*
                    JOptionPane.showMessageDialog( this,retVal.errMsg +" [" + row + ",3]" );
                    return false;
                     */
                    if( !retVal.isOk ){
                        int ret = JOptionPane.showConfirmDialog(
                            view,
                            SanBootView.res.getString("MenuAndBtnCenter.confirm30"),
                            SanBootView.res.getString("common.confirm"),  //"Confirm",
                            JOptionPane.OK_CANCEL_OPTION
                        );
                        if(  ( ret == JOptionPane.CANCEL_OPTION ) || (  ret == JOptionPane.CLOSED_OPTION) ){
                            return false;
                        }
                    }
                }
            }
        }
        
        if( host.isEmBoot() ){
            String realOsRestSrc = jTextField1.getText().trim();
            if( !realOsRestSrc.equals("") ){
                matcher = pattern.matcher( realOsRestSrc );
                if( !matcher.find() ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectRestoreDiskPane.error.invalidRestSrc")
                    );
                    return false;
                }
            }else{
                /*
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectRestoreDiskPane.error.emptyRestSrc")
                );
                return false;
                */
                if( host.is64BitOS() ){
                    int ret = JOptionPane.showConfirmDialog(
                        view,
                        SanBootView.res.getString("SelectRestoreDiskPane.confirm1"),
                        SanBootView.res.getString("common.confirm"),  //"Confirm",
                        JOptionPane.OK_CANCEL_OPTION
                    );
                    if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                        return false;
                    }
                }
            }
        }
        
        return true;
    }
    
    private boolean badDestDriver( String dest ){
        VolumeMapWrapper wraper;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            wraper =(VolumeMapWrapper) model.getValueAt( row, 1 );
            if( wraper.volMap.getVolDiskLabel().toUpperCase().substring(0,1).equals( dest.toUpperCase() ) ){
                return false;
            }
        }
        return true;
    }
    
    String errMsg="";
    private boolean checkIsActive( String cltIP,int cltPort,String drv ){
        boolean isOk;

        // 检查恢复盘是否为active的
        if( mode == ResourceCenter.CMD_TYPE_CMDP ){
            isOk = view.initor.mdb.setPartitionActive( cltIP,cltPort,drv,"Active",ResourceCenter.CMD_TYPE_CMDP );
        }else{
            isOk = view.initor.mdb.setPartitionActive( cltIP,cltPort,drv,"Active" );
        }
        if( isOk ){
            // 分析返回值
            if( view.initor.mdb.isRight() ){ // 目的分区是Active的
                return true;
            }else{ // 目的分区不是Active的，提示用户手工修改成active
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.needSetActive") +" [ " + drv+" ]"; 
                return false;
            }
        }else{
            errMsg =  SanBootView.res.getString("InitBootHostWizardDialog.log.setactive") +" " + drv +" "+
                       SanBootView.res.getString("common.failed");
            return false;
        }
    }
    
    public Vector getRstSrcDestList(){
        String destStr,src;
        Object val;
        VolumeMapWrapper wraper;
        RestoreMapper rstMap;
        
        Vector ret = new Vector();
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            wraper =(VolumeMapWrapper) model.getValueAt( row, 1 );
            src = wraper.volMap.getVolDiskLabel().toUpperCase().substring(0,1);
            val = model.getValueAt( row, 3 );
            if( val instanceof String ){
                destStr =(String)val;
            }else{
                destStr =((DestDevice)val).getMp();
            }
            rstMap = new RestoreMapper( src,destStr );
            ret.addElement( rstMap );
        }
        
        return ret;
    }
    
    public Vector getRstDestList(){
        boolean isSel;
        String destStr;
        Object val;
        
        Vector ret = new Vector();
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel ){
                val = model.getValueAt( row, 3 );
                if( val instanceof String ){
                    destStr =(String)val;
                }else{
                    destStr =((DestDevice)val).getMp();
                }
                ret.addElement( destStr );
            }
        }
        
        return ret;
    }
        
    public String getRstMappingTable(){
        VolumeMapWrapper wraper;
        String volInfo,destStr;
        DestDevice dest;
        Object val;
        boolean isSel,isFirst=true;
        
        StringBuffer buf = new StringBuffer();
         
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel ){
                wraper = (VolumeMapWrapper)model.getValueAt( row,1 );
                val = model.getValueAt( row, 3 );
                
                // volInfo全部从最新获取的partition list(ib_get_partition_info.exe)中获取
                if( val instanceof String ){
                    destStr =((String)val).toUpperCase();
                    volInfo = getVolName( destStr );
                }else{
                    dest = (DestDevice)val;
                    destStr = dest.getMp();
                    volInfo = getVolName( destStr );
                }
                
                if( isFirst ){
                    buf.append( wraper.volMap.getVolDiskLabel().toUpperCase().substring(0,1) + ";" + destStr+";"+volInfo );
                    isFirst = false;
                }else{
                    buf.append("\n" + wraper.volMap.getVolDiskLabel().toUpperCase().substring(0,1) + ";" + destStr+";"+volInfo);
                }
            }
        }
        
        return buf.toString();
    }

    public java.util.List getListRstMappingTable(){
        VolumeMapWrapper wraper;
        String destStr;
        DestDevice dest;
        Object val;
        boolean isSel;

        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        java.util.List<Map<String,String>> list = new java.util.ArrayList<Map<String,String>>();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Map<String,String> map = new HashMap<String,String>();
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel ){
                wraper = (VolumeMapWrapper)model.getValueAt( row,1 );
                val = model.getValueAt( row, 3 );

                // volInfo全部从最新获取的partition list(ib_get_partition_info.exe)中获取
                if( val instanceof String ){
                    destStr =(String)val;
                }else{
                    dest = (DestDevice)val;
                    destStr = dest.getMp();
                }

                boolean restore = ((Boolean)model.getValueAt( row, 4 )).booleanValue();
                map.put( "src", wraper.volMap.getVolDiskLabel() );
                map.put( "dest", destStr );
                map.put( "restore", String.valueOf(restore));

                list.add( map );
            }
        }
        return list;
    }
    
    private String getVolName( String letter ){
        SystemPartitionForWin part = view.initor.mdb.getSysPartStatistic( letter.toUpperCase()+":\\" );
        if( part != null ){
            return part.volInfo;
        }else{
            return "";
        }
    }
    
    private int getRestoreNum(){
        boolean isSel,isRst;
        
        int cnt=0;
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel ){
                 isRst = ((Boolean)model.getValueAt( row, 4 )).booleanValue();
                 if( isRst ){
                     cnt++;
                 }
            }
        }
        
        return cnt;
    }

    public Hashtable getSelectedVolume1(){
        VolumeMapWrapper wraper;
        BindOfVolMapandDest binder;
        boolean isSel,contained,isRst;
        int seq,max=0;
        Object val;
        String dest;
        Vector list;
        Hashtable mtpp_seqArray = new Hashtable();

        seqArray.clear();

        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( !isSel ) continue;

            isRst = ((Boolean)model.getValueAt( row, 4 )).booleanValue();
            if( !isRst ) continue;

            wraper = (VolumeMapWrapper)model.getValueAt( row,1 );
            seq = ((Integer)model.getValueAt( row, 2 )).intValue();
            if( wraper.volMap.isCMDPProtect() ){
                val = seqArray.get( new Integer( seq ) );
            }else{
                val = mtpp_seqArray.get( new Integer( seq ) );
            }
            if( val != null ){
                list = (Vector)val;
                contained = true;
            }else{
                list = new Vector();
                contained = false;
            }

            val = model.getValueAt( row, 3 );
            if( val instanceof String ){
                dest = (String)val;
            }else{
                dest = ((DestDevice)val).getMp();
            }
            binder = new BindOfVolMapandDest();
            binder.volMap = wraper.volMap;
            binder.destDrv = dest.toUpperCase();

            list.addElement( binder );

            if( !contained ){
                if( wraper.volMap.isCMDPProtect() ){
                    if( max < seq ){
                        max = seq;
                    }
                    seqArray.put( new Integer( seq ), list );
                }else{
                    mtpp_seqArray.put( new Integer( seq ), list );
                }
            }
        }
        
        // 将mtpp_seq合并到seqArray中去
        int mtpp_size = mtpp_seqArray.size();
        if( mtpp_size > 0 ){
            max += 1;
            
            java.util.List seqList = new ArrayList( mtpp_size );
            Enumeration keyList = mtpp_seqArray.keys();
            while( keyList.hasMoreElements() ){
                seqList.add( (Integer)keyList.nextElement() );
            }

            ListIterator iterator = seqList.listIterator();
            while( iterator.hasNext() ){
                Integer key = (Integer)iterator.next();
                Vector  volList = (Vector)mtpp_seqArray.get( key );
                seqArray.put( new Integer( max ), volList );
                max += 1;
            }
        }

        return seqArray;
    }

    // 只选择“确定要恢复的”盘
    public Hashtable getSelectedVolume(){
        VolumeMapWrapper wraper;
        BindOfVolMapandDest binder;
        boolean isSel,contained,isRst;
        int seq;
        Object val;
        String dest;
        Vector list;
        
        seqArray.clear();
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( !isSel ) continue;
            
            isRst = ((Boolean)model.getValueAt( row, 4 )).booleanValue();
            if( !isRst ) continue;

            seq = ((Integer)model.getValueAt( row, 2 )).intValue();
            val = seqArray.get( new Integer( seq ) );
            if( val != null ){
                list = (Vector)val;
                contained = true;
            }else{
                list = new Vector();
                contained = false;
            }

            wraper = (VolumeMapWrapper)model.getValueAt( row,1 );
            val = model.getValueAt( row, 3 );
            if( val instanceof String ){
                dest = (String)val;
            }else{
                dest = ((DestDevice)val).getMp();
            }
            binder = new BindOfVolMapandDest();
            binder.volMap = wraper.volMap;
            binder.destDrv = dest.toUpperCase();

            list.addElement( binder );

            if( !contained ){
                seqArray.put( new Integer( seq ), list );
            }
        }
        
        return seqArray;
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            for( int j=0;j<5;j++ ){ // 专门停止0,2,3,4列
                if( j == 1 ) continue;
                
                dce = table.getCellEditor( i,j );
                if( dce!=null ){
                    try{
                        while(!dce.stopCellEditing()){}
                    }catch(Exception ex){}
                }
            }
        }
    }
}
class  RestoreSeq{
    int seqVal = 0;
    boolean isRst = true;
    boolean isSel = false;
    
    RestoreSeq( int seqVal,boolean isRst,boolean isSel ){
        this.seqVal = seqVal;
        this.isRst = isRst;
        this.isSel = isSel;
    }

    RestoreSeq( int seqVal ){
        this.seqVal = seqVal;
    }
}