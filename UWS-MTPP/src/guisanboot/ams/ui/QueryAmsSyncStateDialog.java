package guisanboot.ams.ui;

import guisanboot.ams.entity.InitAmsProgressRecord;
import guisanboot.data.BootHost;
import guisanboot.data.VolumeMap;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.SanBootView;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;

public class QueryAmsSyncStateDialog extends javax.swing.JDialog {

    /** Creates new form QuerySyncStateDialog */
    public QueryAmsSyncStateDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public QueryAmsSyncStateDialog( SanBootView view,VolumeMap volMap,BootHost host ) {
        this( view,true );
        myInit( view,volMap,host );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("说明"));
        jPanel4.setPreferredSize(new java.awt.Dimension(400, 100));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(null);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setPreferredSize(new java.awt.Dimension(400, 266));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("支持双机"));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 15));
        jLabel3.setText("jLabel3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel8.add(jLabel3, gridBagConstraints);

        jButton4.setText("Support");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel8.add(jButton4, gridBagConstraints);

        jButton7.setText("Refresh");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel8.add(jButton7, gridBagConstraints);

        jPanel6.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("设置磁盘保护的工作状态"));
        jPanel9.setPreferredSize(new java.awt.Dimension(400, 90));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 15));
        jLabel2.setText("jLabel2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel9.add(jLabel2, gridBagConstraints);

        jButton3.setText("Sync");
        jButton3.setMaximumSize(new java.awt.Dimension(75, 23));
        jButton3.setMinimumSize(new java.awt.Dimension(75, 23));
        jButton3.setPreferredSize(new java.awt.Dimension(75, 23));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel9.add(jButton3, gridBagConstraints);

        jButton6.setText("Refresh");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel9.add(jButton6, gridBagConstraints);

        jPanel6.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel5.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("磁盘保护的当前状态"));
        jPanel7.setPreferredSize(new java.awt.Dimension(400, 90));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 15));
        jLabel1.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel7.add(jLabel1, gridBagConstraints);

        jButton2.setText("Sync");
        jButton2.setMaximumSize(new java.awt.Dimension(75, 23));
        jButton2.setMinimumSize(new java.awt.Dimension(75, 23));
        jButton2.setPreferredSize(new java.awt.Dimension(75, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel7.add(jButton2, gridBagConstraints);

        jButton5.setText("Refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel7.add(jButton5, gridBagConstraints);

        jPanel5.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 1, 2, 1));
        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jSeparator1, java.awt.BorderLayout.NORTH);

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        close_btnProcess();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        chgCurrentStateBtn_process();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        setupSyncModeBtn_process();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        supportCluster_process();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        refreshCurStateBtn_process();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        refreshWorkStateBtn_process();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        refreshHaBtn_process();
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QueryAmsSyncStateDialog dialog = new QueryAmsSyncStateDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    SanBootView view;
    VolumeMap volMap;
    BootHost host;

    private void myInit( SanBootView view,VolumeMap volMap,BootHost host ){
        this.view = view;
        this.volMap = volMap;
        this.host = host;
        
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override public void windowClosing(java.awt.event.WindowEvent e) {
                close_btnProcess();
            }
        });
        setupLanguage();
        initUI();
    }

    private void setupLanguage(){
        this.setTitle( SanBootView.res.getString("QuerySyncStateDialog.title") +" [ " + volMap.getVolDiskLabel() +" ]");
        TitledBorder border = (TitledBorder)this.jPanel7.getBorder();
        border.setTitle( SanBootView.res.getString("QuerySyncStateDialog.border.curState") );
        border = (TitledBorder)this.jPanel9.getBorder();
        border.setTitle( SanBootView.res.getString("QuerySyncStateDialog.border.syncMode") );
        border = (TitledBorder)this.jPanel8.getBorder();
        border.setTitle( SanBootView.res.getString("QuerySyncStateDialog.border.cluster") );
        this.jButton1.setText( SanBootView.res.getString("common.button.close"));
        this.jButton5.setText( SanBootView.res.getString("common.button.refresh"));
        this.jButton6.setText( SanBootView.res.getString("common.button.refresh"));
        this.jButton7.setText( SanBootView.res.getString("common.button.refresh"));
        this.jButton2.setText( "N/A" );
        this.jButton4.setText( "N/A" );
        this.jTextArea1.setText( SanBootView.res.getString("QuerySyncStateDialog.desc").trim() );
    }

    private void updateCurrentState(){
        view.initor.mdb.setNewTimeOut( ResourceCenter.LIMITE_OF_RESPOND );
//        boolean isOk = view.initor.mdb.getCurrentSyncState( host.getIP(), host.getPort(), volMap.getVolName() );
//        if( isOk ){
            if( !view.initor.mdb.getCurrentAmsSyncState( this.host.getIP(), this.host.getPort(), this.volMap.getVolDiskLabel())  ){
                jLabel1.setText( SanBootView.res.getString("common.conError") );
                this.jButton2.setEnabled( false );
            }else{
                this.jButton2.setEnabled( true );
                if( view.initor.mdb.workAmsStateIsSync( this.host.getIP(), this.host.getPort(), this.volMap.getVolDiskLabel()) ){
                    jLabel1.setText( SanBootView.res.getString("common.sync") );
                    this.jButton2.setText( SanBootView.res.getString("common.nsync"));
                }else{
                    String current_state = view.initor.mdb.getCurrentAmsState( this.host.getIP(), this.host.getPort(), this.volMap.getVolDiskLabel() );
//                    if( view.initor.mdb.currentStateIsUnknown() ){
//                        jLabel1.setText( SanBootView.res.getString("common.NotConsistent") );
//                    }else{
                        jLabel1.setText( InitAmsProgressRecord.getStateString( current_state ) );
//                    }
//                    if( current_state.equals( InitAmsProgressRecord.STATE_init ) ){
//                        this.jButton2.setText( SanBootView.res.getString("common.wait"));
//                    }
                    if( current_state.equals( InitAmsProgressRecord.STATE_false ) ){
                        this.jButton2.setText( SanBootView.res.getString("common.rebuild"));
                    }else{
                        this.jButton2.setText( SanBootView.res.getString("common.sync"));
                    }
                }
            }
//        }else{
//            if( view.initor.mdb.mirrorStateIsConnectError() ){
//                jLabel1.setText( SanBootView.res.getString("common.conError") );
//                this.jButton2.setEnabled( false );
//            }else if( view.initor.mdb.getErrorCode() == ResourceCenter.ERRCODE_TIMEOUT ){
//                jLabel1.setText( SanBootView.res.getString("common.timeout") );
//                this.jButton2.setEnabled( false );
//            }else{
//                JOptionPane.showMessageDialog(
//                    view,
//                    SanBootView.res.getString("QuerySyncStateDialog.error.getSyncState")+" : "+view.initor.mdb.getErrorMessage()
//                );
//                jLabel1.setText( "N/A" );
//                this.jButton2.setEnabled( false );
//            }
//        }
        view.initor.mdb.setNewTimeOut( ResourceCenter.DEFAULT_TIMEOUT );
    }

    private void updateWorkState1(){
        boolean isOk = view.initor.mdb.updateOneVolumeMap( volMap.getVolName() );
        if( isOk ){
            VolumeMap newVolMap = view.initor.mdb.getOneVolMap( volMap.getVolName() );
            if( newVolMap == null ){
                JOptionPane.showMessageDialog( view,SanBootView.res.getString("common.cmd.getVolMap") + SanBootView.res.getString("common.failed") );
            }else{
                // 用新newVolMap的值来替换mdb中对应的volmap中的值
                view.initor.mdb.replaceVolMap( volMap.getVolName(),newVolMap.getVol_info() );
                this.updateWorkState();
            }
        }else{
            JOptionPane.showMessageDialog( view, ResourceCenter.getCmdString( ResourceCenter.CMD_GET_VOLMAP ) +" : " +view.initor.mdb.getErrorMessage() );
        }
    }

    private void updateWorkState(){
//        boolean isOk = view.initor.mdb.getWorkStateOfSync( volMap.getVol_info() );
//        if( isOk ){
            if( view.initor.mdb.workAmsStateIsASync( this.host.getIP(), this.host.getPort(), this.volMap.getVolDiskLabel()) ){
                jLabel2.setText( SanBootView.res.getString("common.nsync") );
                this.jButton3.setText( SanBootView.res.getString("common.sync"));
            }else{
                jLabel2.setText( SanBootView.res.getString("common.sync") );
                this.jButton3.setText( SanBootView.res.getString("common.nsync"));
            }
//        }else{
//            JOptionPane.showMessageDialog( view, SanBootView.res.getString("QuerySyncStateDialog.error.getWorkState") );
//            jLabel2.setText( "N/A" );
//            this.jButton3.setEnabled( false );
//        }
        view.initor.mdb.setNewTimeOut( ResourceCenter.DEFAULT_TIMEOUT );
    }

    private void updateHASupport(){
        view.initor.mdb.setNewTimeOut( ResourceCenter.LIMITE_OF_RESPOND );
        boolean isOk = view.initor.mdb.getHAInfo( host.getIP(), host.getPort(), volMap.getLetter() );
        if( isOk ){
            if( view.initor.mdb.isSupportHA() ){
                jLabel3.setText( SanBootView.res.getString("QuerySyncStateDialog.label.supportHA") );
                this.jButton4.setText( SanBootView.res.getString("QuerySyncStateDialog.label.nsupportHA"));
            }else{
                jLabel3.setText( SanBootView.res.getString("QuerySyncStateDialog.label.nsupportHA") );
                this.jButton4.setText( SanBootView.res.getString("QuerySyncStateDialog.label.supportHA") );
            }
        }else{
            if( view.initor.mdb.isConnectErrorWhenGetHaInfo() ){
                jLabel3.setText( SanBootView.res.getString("common.conError") );
                this.jButton4.setEnabled( false );
            }else if( view.initor.mdb.getErrorCode() == ResourceCenter.ERRCODE_TIMEOUT ){
                jLabel3.setText( SanBootView.res.getString("common.timeout") );
                this.jButton4.setEnabled( false );
            }else{
                JOptionPane.showMessageDialog( view, SanBootView.res.getString("QuerySyncStateDialog.error.getHAInfo") );
                jLabel3.setText( "N/A" );
                this.jButton4.setEnabled( false );
            }
        }
        view.initor.mdb.setNewTimeOut( ResourceCenter.DEFAULT_TIMEOUT );
    }

    private void initUI(){
        this.updateCurrentState();
        this.updateWorkState();
        this.updateHASupport();
    }
    
    private void updateVolInfo(){
        // 重新更新一下vol_info,如果获取失败就算了
        if( view.initor.mdb.updateOneVolumeMap( volMap.getVolName() ) ){
            VolumeMap newVolMap = view.initor.mdb.getOneVolMap( volMap.getVolName() );
            if( newVolMap != null ){
                view.initor.mdb.replaceVolMap( volMap.getVolName(), newVolMap.getVol_info() );
            }
        }
    }

    private void close_btnProcess(){
        // 更新一下volMap，因为这个窗口里的操作有可能改变volMap中的vol_info的取值
        updateVolInfo();
        
        this.dispose();
    }

    private void refreshCurStateBtn_process(){
        this.updateCurrentState();
    }

    private void refreshWorkStateBtn_process(){
        this.updateWorkState1();
    }

    private void refreshHaBtn_process(){
        this.updateHASupport();
    }

    private void chgCurrentStateBtn_process(){
        String btnText = this.jButton2.getText();
        String stateType;
        if( btnText.equals( SanBootView.res.getString("common.sync")) ){
            stateType ="syn";
        }else if( btnText.equals( SanBootView.res.getString("common.nsync"))){
            stateType = "asyn";
        }else if( btnText.equals( SanBootView.res.getString("common.wait")) ){
            stateType = "9999";
        }else if( btnText.equals( SanBootView.res.getString("common.rebuild") ) ){
            stateType = "rebuild";
        }else{
            stateType = "9999";
        }
        if( stateType.equals("9999") ) return;

//        if( stateType.equals("8888") ){
//            view.initor.mdb.recoverInvalidMirror( host.getIP(), host.getPort(), volMap.getVol_uuid(), volMap.getVolTargetID(), volMap.getVol_info() );
//            this.updateCurrentState();
//        }else{
            //view.initor.mdb.setCurrentStateOfSync( host.getIP(), host.getPort(),volMap.getLetter(),stateType );
            view.initor.mdb.setAmsWorkState( host.getIP(), host.getPort(), this.volMap.getVolDiskLabel() + " " +  stateType );
            this.updateCurrentState();
//        }
    }

    /**
     * 设置磁盘保护的工作状态
     */
    private void setupSyncModeBtn_process(){
        String btnText = this.jButton3.getText();
        String stateType;
        if( btnText.equals( SanBootView.res.getString("common.sync")) ){
            stateType = "syn";
        }else{
            stateType = "asyn";
        }
        //view.initor.mdb.setWorkStateOfSync( volMap.getVolName(),volMap.getVol_info(), stateType );
        view.initor.mdb.setAmsWorkState( host.getIP(), host.getPort(), this.volMap.getVolDiskLabel() + " " +  stateType );
        this.updateWorkState1();
    }

    private void supportCluster_process(){
        String btnText = this.jButton4.getText();
        String haType;
        if( btnText.equals( SanBootView.res.getString("QuerySyncStateDialog.label.supportHA")) ){
            haType = "1";
        }else{
            haType = "0";
        }
        view.initor.mdb.setHAInfo( host.getIP(),host.getPort(),volMap.getLetter(),haType );
        this.updateHASupport();
    }
}
