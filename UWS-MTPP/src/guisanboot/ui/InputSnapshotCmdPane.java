/*
 * SelectBootHostPane.java
 *
 * Created on 2006/12/29, AM 9:52
 */

package guisanboot.ui;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;

import mylib.UI.*;
import guisanboot.data.*;


/**
 *
 * @author  Administrator
 */
public class InputSnapshotCmdPane extends javax.swing.JPanel {
    
    /** Creates new form SelectBootHostPane */
    public InputSnapshotCmdPane() {
        initComponents();
    }
    
    public InputSnapshotCmdPane( SanBootView view ) {
        this();
        myInit( view );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 70));
        jScrollPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 1, 3, 1)));
        jPanel6.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(5, 20));
        jPanel3.add(jPanel7, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    ////GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    ////GEN-END:variables
    
    Vector taskList = new Vector();
    GeneralEditableTable table = new GeneralEditableTable();
    SanBootView view;
    
    private void myInit( SanBootView _view ){
        view = _view;
        
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
        
        jTextArea1.setText(
            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.tip2")
        );
    }
    
    public void updateGUI( Hashtable rstList ){
        InitTask task;
        BindOfVolMapandDest binder;
        int i,size;
        boolean isFirst;
        String src,dest,tmp,src1,dest1;
        Vector volList,parm; 
        JPanel pane;
        JScrollPane scroPane;
        JTextArea textArea;
        Object key;
        BindOfSrcAndDest srcDest;
        
        taskList.removeAllElements();
        
        // 对恢复组进行排序,以便按序恢复
        size = rstList.size();
        java.util.List seqList = new ArrayList( size );
        Enumeration keyList = rstList.keys();
        while( keyList.hasMoreElements() ){
            seqList.add( (Integer)keyList.nextElement() );
        }
        java.util.Collections.sort( seqList );
System.out.println( "rst seq: " + seqList );

        int cnt = 0;
        ListIterator iterator = seqList.listIterator();
        while( iterator.hasNext() ){
            key = (Integer)iterator.next();
            volList = (Vector)rstList.get( key ); // volList中存放了要恢复的一组目标卷和目的盘
            
            parm = new Vector();
            
            isFirst = true;
            src1="";
            dest1="";
            size = volList.size();
            for( i=0; i<size; i++ ){
                binder = (BindOfVolMapandDest)volList.elementAt( i );
                if( isFirst ){
                    src = binder.volMap.getVolDiskLabel().substring( 0,2 );
                    dest = binder.destDrv + ":";
                    srcDest = new BindOfSrcAndDest( src,dest );
                    parm.addElement( srcDest );
                    
                    src1 = src;
                    dest1= dest;
                    isFirst = false;
                }else{
                    src = binder.volMap.getVolDiskLabel().substring( 0,2 );
                    dest = binder.destDrv + ":";
                    srcDest = new BindOfSrcAndDest( src,dest );
                    parm.addElement( srcDest );
                    
                    src1+=" , "+src;
                    dest1+=" , "+dest;
                }
            }
            
            task = new InitTask();
            cnt++;
            task.seq = cnt;
            tmp = ( size > 1? SanBootView.res.getString("common.restoreLocalDisk.to") :
                SanBootView.res.getString("common.restoreLocalDisk.to1") );
            task.task = SanBootView.res.getString("common.restoreLocalDisk.restore") + " " + src1 +" "+ tmp
                     + " " + dest1;
            task.parm = parm;
            task.status = InitTask.INIT_TASK_STA_READY;
            taskList.addElement( task );
        }
        
        setupTable();
    }
    
    public void setupTable(){
        int i;
        Object[][] data;
        
        int num = taskList.size();

        data = new Object[2+num][4]; //seq,task,pre snap cmd,post snap cmd
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 4;      // col num
        
        data[1][0] = SanBootView.res.getString("InputSnapshotCmdPane.table.seq");
        data[1][1] = SanBootView.res.getString("InputSnapshotCmdPane.table.task");
        data[1][2] = SanBootView.res.getString("InputSnapshotCmdPane.table.precmd");
        data[1][3] = SanBootView.res.getString("InputSnapshotCmdPane.table.postcmd");
        
        for( i=0; i<num; i++ ){
            InitTask task = (InitTask)taskList.elementAt(i);
            
            data[2+i][0] = task.seq+"";
            data[2+i][1] = task;
            data[2+i][2] = "";
            data[2+i][3] = "";
        }
        
        table.setTableModel( data );
        table.setDefaultLook();
        table.setRowHeight( 20 );

        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 65 );
        tableColumnModel.getColumn(1).setWidth( 150 );
        tableColumnModel.getColumn(2).setWidth( 150 );
        tableColumnModel.getColumn(3).setWidth( 150 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
    }
    
    public Vector getTasks(){
        InitTask task;
        String precmd,postcmd;
        Vector ret = new Vector();
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            task = ( InitTask )model.getValueAt( row,1 );
            precmd = (String)model.getValueAt( row, 2 );
            postcmd = (String)model.getValueAt( row,3 );
            task.preSnapCmd = precmd;
            task.postSnapCmd = postcmd;
            
            ret.addElement( task );
        }
        
        return ret;
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            for( int j=0;j<4;j++ ){ // 专门停止 2,3 列
                if( j == 0 || j == 1 ) continue;
                
                dce = table.getCellEditor( i,j );
                if( dce!=null ){
                    try{
                        while(!dce.stopCellEditing()){};
                    }catch(Exception ex){}
                }
            }
        }
    }
}