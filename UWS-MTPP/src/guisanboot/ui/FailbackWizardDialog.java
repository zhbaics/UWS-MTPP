/*
 * FailbackWizardDialog.java
 *
 * Created on 2006/12/29, �AM 9:51
 */

package guisanboot.ui;

import javax.swing.*;
import java.util.*;
import java.io.*;
import guisanboot.data.*;
import guisanboot.res.*;
/**
 *
 * @author  Administrator
 */
public class FailbackWizardDialog extends WizardDialogSample implements FailbackInterface {
    SelectServicePane selectServPane;
    SelectLocaldiskPane selectLocaldiskPane;
    TaskConfigForFailbackPane taskConfPane;
    RunningTaskForFailbackPane runPane;
    
    SanBootView view;
    DestAgent host;
    BootVerList bootVer;
    
    Vector servList = null;
    Vector rstMapperList = null; // save restore mapping
    boolean isSwitchDisk;
    
    /** Creates new form FailbackWizardDialog */
    public FailbackWizardDialog( java.awt.Frame parent, boolean modal ) {
        super(parent, modal);
        initComponents();
    }
    
    public FailbackWizardDialog( SanBootView view,DestAgent host,BootVerList bootVer,boolean isSwitchDisk ){
        super( view );
        myInit( view,host,bootVer,isSwitchDisk );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitBootHostWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    ////GEN-BEGIN:variables
    ////GEN-END:variables
    
    private void myInit( SanBootView _view,DestAgent _host,BootVerList _bootVer,boolean isSwitchDisk ){
        view = _view;
        host = _host;
        bootVer = _bootVer;
        this.isSwitchDisk = isSwitchDisk;
        
        setupLanguage1();
        enableBackButton( false );

        if( this.isSwitchDisk ){
            setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString( "FailbackWizardDialog.wizardText2" )
            );
        }else{
            setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString( "FailbackWizardDialog.wizardText1" )
            );
        }

        if( this.isSwitchDisk ){
            setTipTextOnTopPane( SanBootView.res.getString("FailbackWizardDialog.tit") );
        }else{
            setTipTextOnTopPane( SanBootView.res.getString("FailbackWizardDialog.title") );
        }
        selectServPane = new SelectServicePane( view );
        selectLocaldiskPane = new SelectLocaldiskPane( view,host ); 
        taskConfPane =  new TaskConfigForFailbackPane( view,this.isSwitchDisk );
        runPane = new RunningTaskForFailbackPane( view );
    }
    
    private void setupLanguage1(){
        if( this.isSwitchDisk ){
            setTitle( SanBootView.res.getString("FailbackWizardDialog.tit") );
        }else{
            setTitle( SanBootView.res.getString("FailbackWizardDialog.title") );
        }
    }
    
    @Override public void backButtonProcess(){             
        if( getTipTitle().compareTo(SanBootView.res.getString("FailbackWizardDialog.title1").trim() ) == 0 ){
            this.enableBackButton( false );
            this.removeCenterPane();
            this.addImagePaneOntoCenterPane();
            this.addWizardTipTextPane();
            this.setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString("FailbackWizardDialog.wizardText1")
            );
            setTipTextOnTopPane( SanBootView.res.getString("FailbackWizardDialog.title") );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailbackWizardDialog.title2").trim() ) == 0 ){     
            setTipTextOnTopPane( SanBootView.res.getString("FailbackWizardDialog.title1") );
            removePaneFromContentPane( selectLocaldiskPane );
            addPaneOntoContentPane( selectServPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailbackWizardDialog.title3").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("FailbackWizardDialog.title2") );
            removePaneFromContentPane( taskConfPane );
            addPaneOntoContentPane(  selectLocaldiskPane );
            refreshCenterPane();
            return;
        }
    }

    private boolean setupServiceTable(){
        int i,j,size,size1,cnt;
        boolean stopAllService,founded;
        Vector osSrvList,srvMapList;
        ServiceMap servMap;
        Service service;

        if( servList == null ){
            boolean isOk = view.initor.mdb.getOSService( host.getIP(),host.getPort(),"services_process.exe list" );
            stopAllService = false;
            if( !isOk ){
                // 一定要获取所有的服务,否则用户无法选择要关注的服务。
                // 虽然用户可能在初始化时选择了一些服务，但是这些服务可能
                // 不太准确，用户可能要重新选择服务
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.getServiceList")
                );
                return false;

            }else{
                // GUI上显示出来的service应该是系统当前的server(osSrvList)和之前保存下来的server(srvMapList)的总和
                osSrvList = view.initor.mdb.getOSService();
                if( host.isRealBootHost() )
                    srvMapList = view.initor.mdb.getAllServMapOnClntID( host.getID() );
                else{
                    srvMapList = new Vector();
                }
                servList = new Vector();
                size = osSrvList.size();
                for( i=0; i<size; i++ ){
                    servList.addElement( osSrvList.elementAt(i) );
                }
                cnt = size;

                size1 = srvMapList.size();
                for( j=0; j<size1; j++ ){
                    servMap =(ServiceMap)srvMapList.elementAt(j);

                    founded = false;
                    for( i=0; i<size; i++ ){
                        service = (Service)osSrvList.elementAt(i);
                        if( service.getServName().equals( servMap.getServName() ) &&
                                service.getServDesc().equals( servMap.getServDesc() )
                        ){
                            founded = true;
                            break;
                        }
                    }

                    if( !founded ){
SanBootView.log.debug(getClass().getName(), " add servermap onto GUI: "+servMap.getServName() +"  "+ servMap.getServDesc() );
                        servList.addElement( new Service( cnt, servMap.getServName(), servMap.getServDesc() ) );
                        cnt++;
                    }
                }


                if( !host.isStopAllServ() ){
                    stopAllService = false;

                    if( host.isRealBootHost() ){
                        size = servList.size();
                        for( i=0; i<size; i++ ){
                            service = (Service)servList.elementAt(i);
                            // 找出该client上已经登记了的服务
                            servMap = view.initor.mdb.getServiceMap( host.getID(),service.getServName(),service.getServDesc() );
                            if( servMap !=null ){
                                service.setSeled( true );
                            }
                        }
                    }
                }else{
                    stopAllService = true;
                }
            }

            if( stopAllService ){
                selectServPane.setStopAllService( true );
                selectServPane.clickJRadioBtn1();
            }else{
                selectServPane.setStopPartialService( true );
                selectServPane.clickJRadioBtn2();
            }

            selectServPane.setupServiceTable( servList );
            return true;
        }else{
            return true;
        }
    }

    @Override public void nextButtonProcess(){
        boolean isOk,found;
        Vector volMapList;
              
        if( getTipTitle().compareTo( SanBootView.res.getString("FailbackWizardDialog.title1").trim() ) == 0 ){
            if( rstMapperList == null ){
                found = false;
                isOk = view.initor.mdb.getRstMapper(  host.getRstMapFileName() );
                if( isOk ){
                    rstMapperList = view.initor.mdb.getRstMapperList1();
                    if( rstMapperList.size()>0 ){
                        found = true;
                        selectLocaldiskPane.setupTableFromMappingTable( rstMapperList ); 
                        
                        // 将记在rstmap中的本地盘mount起来
                        MountLocalDiskThread mntVol = new MountLocalDiskThread(
                            view, rstMapperList, host.getIP(),host.getPort(),ResourceCenter.CMD_TYPE_MTPP
                        );
                        view.startupProcessDiag( 
                            SanBootView.res.getString("View.pdiagTitle.mntLocalVol"),
                            SanBootView.res.getString("View.pdiagTip.mntLocalVol"), 
                            mntVol
                        );
                    }
                }
                
                if( !found ){
SanBootView.log.warning( getClass().getName()," Restore relation-ship is missing. User must provide on GUI.");                    
                    // 丢失了"恢复映射关系"，只有将volmap 列表信息显示出来,让用户来填写映射关系
                    if( host.isRealBootHost() ){
                        if( this.isSwitchDisk ){
                            volMapList = view.initor.mdb.getVolMapWithoutOSDiskOnClntID( host.getID() );
                        }else{
                            volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
                        }
                    }else{
                        volMapList = view.initor.mdb.getMSUVolMapFromCacheOnDstAgntID( host.getDst_agent_id() );
                    }
                    selectLocaldiskPane.setupTableNotFromMappingTable( volMapList );
                }
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailbackWizardDialog.title2") );    
            removePaneFromContentPane( selectServPane );
            addPaneOntoContentPane( selectLocaldiskPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailbackWizardDialog.title2").trim() ) == 0 ){
            selectLocaldiskPane.fireEditingStopMsg();

            if( !this.isSwitchDisk ){
                if( !selectLocaldiskPane.toRecoverOSDisk() ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("FailoverWizardDialog.error.notRecoverCDisk")
                    );
                    return;
                }
            }
            
            // 该检查确保恢复目的都是本地盘
            if( !selectLocaldiskPane.checkInfoValidity() ){
                return;
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailbackWizardDialog.title3") );
            removePaneFromContentPane( selectLocaldiskPane );
            addPaneOntoContentPane( taskConfPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailbackWizardDialog.title3").trim() ) == 0 ){
            if( !this.isSwitchDisk ){
                if( !taskConfPane.isFinishJob( TaskConfigForFailbackPane.CONF_CHGE_BIOS_ROW ) ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("FailbackWizardDialog.error.notFinishChgBIOS")
                    );
                    return;
                }
            }
            
            if( taskConfPane.isAllFinished() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.allFinished")
                );
                return;
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailbackWizardDialog.title4") );
            removePaneFromContentPane( taskConfPane );
            setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton( false );
            enableBackButton( false );
            enableCancelButton( false );
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
            addPaneOntoContentPane( runPane );
            refreshCenterPane();
            
            beginFailback();
            
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailbackWizardDialog.title4").trim() ) == 0 ){
            if( allFinished ){
                if( this.isSwitchDisk ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("FailbackWizardDialog.error.drRecoverOK1")
                    );
                }else{
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("FailbackWizardDialog.error.drRecoverOK")
                    );
                }
            }else{
                if( this.isSwitchDisk ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("FailbackWizardDialog.error.needReDrRecover1")
                    );
                }else{
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("FailbackWizardDialog.error.needReDrRecover")
                    );
                }
            }
            dispose();
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("FailbackWizardDialog.title").trim() ) == 0 ||
            getTipTitle().compareTo( SanBootView.res.getString("FailbackWizardDialog.tit").trim() ) == 0
        ){
            if( !this.setupServiceTable() ) return;
            
            setTipTextOnTopPane( SanBootView.res.getString("FailbackWizardDialog.title1") );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( selectServPane );
            refreshCenterPane();
            return;
        }else{
            return;
        }
    }
    
    public void setProcess(){    
    }
     
    private void beginFailback(){
        Thread initThread = new Thread( new DoFailbacking( this ) );
        initThread.start();
    }
      
    boolean allFinished = false; // 表明所有task都成功完成了
    Vector iscsiVolList = new Vector();
    String errMsg;
    @Override public void writeLogBuf( String errMsg,int which ){
        if( isWrFirst ){
            logBuf.append( runPane.getTabStr( which ) + replaceLine( errMsg ) );
            isWrFirst = false;
        }else{
            logBuf.append( ResourceCenter.NEWLINE_STRING + runPane.getTabStr( which ) + replaceLine( errMsg ) );
        }
    }
    
    public void realFailback(){
        String ip,disk,servName,volInfo;
        int i,j,k,size,size1,size2,port,tid,tid1,retryCnt1,retryCnt2;
        boolean isOk,excepErr,isStopAllBaseServ,doAssignDriver,found;
        GetAgentInfo getAgentInfo = null;
        Service service;
        RestoreMapper mapper;
        SystemPartitionForWin part;
        DestDevice dest;
        Vector stopServList = new Vector();
        Vector tmpVect = new Vector();
        Vector aServList,partList = null;
        Object item;
        boolean stopServStepOK;
        boolean assignDriverStepOK;
        boolean startServStepOK;
        boolean removePersistentTgtStepOK;
        
SanBootView.log.info( getClass().getName()," @@#################  Migration System from iSCSI to local disk Begin ###################@@ ");        
        ip = host.getIP();
        port = host.getPort();
        
        // 1. connect client 
        runPane.setCurTabPane( RunningTaskForFailbackPane.CONNECT_AGENT_ROW );
        runPane.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForFailbackPane.CONNECT_AGENT_ROW , 2
        );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent Begin ###################@@ "); 
        
        isOk = false;
        excepErr = false;
        
        Thread connectThread = new Thread( process );
        connectThread.start();
        
        while ( !isOk ){
            try{
                try{
                    Thread.sleep( 4*1000 ); // sleep 4 sec.
                }catch( InterruptedException e ){}
                
                // 获取主机信息,
                getAgentInfo = new GetAgentInfo( 
                    ResourceCenter.getCmd( ResourceCenter.CMD_GET_HOST_INFO1 ) + ip + " " + port+" ib_get_osinfo.exe",
                    view.getSocket()
                );
                isOk = getAgentInfo.getAgentInfo();
            }catch( Exception ex ){
                ex.printStackTrace();
                setOver( true );  
                isOk = true;
                excepErr = true;
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForFailbackPane.CONNECT_AGENT_ROW , 2
                );
                errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_GET_HOST_INFO ) + " : " + getAgentInfo.getErrMsg();
                runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.CONNECT_AGENT_ROW );
                writeLogBuf( errMsg, RunningTaskForFailbackPane.CONNECT_AGENT_ROW  );
            }
        }
        
        // 发生网络方面的异常,退出
        if( excepErr ){
            allFinished = false;
            recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");            
            return ;
        }else{
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.connectHostOK"), 
                RunningTaskForFailbackPane.CONNECT_AGENT_ROW
            );
        }
        
        // 2. check whether C(OS) startup from local disk
        isOk = view.initor.mdb.isStartupfromSAN( ip,port,"C" );
        if( isOk ){
            if( !view.initor.mdb.isStartupFromSAN() ){
                setOver( true );
                
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForFailbackPane.CONNECT_AGENT_ROW , 2
                );
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailbackWizardDialog.log.startupFromLocalDisk"), 
                    RunningTaskForFailbackPane.CONNECT_AGENT_ROW
                );
            }else{
SanBootView.log.error( getClass().getName()," Startup from localdisk.");                
                setOver( true );
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForFailbackPane.CONNECT_AGENT_ROW , 2
                );
                errMsg = SanBootView.res.getString("FailbackWizardDialog.log.notStartupFromLocalDisk");
                runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.CONNECT_AGENT_ROW );
                writeLogBuf( errMsg, RunningTaskForFailbackPane.CONNECT_AGENT_ROW  );
                
                // 从iSCSI启动,退出
                allFinished = false;
                recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                
                return;
            }
        }else{
            setOver( true );
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForFailbackPane.CONNECT_AGENT_ROW , 2
            );
            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.getStartupInfo") +
                      SanBootView.res.getString("common.failed"); 
            runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.CONNECT_AGENT_ROW );
            writeLogBuf( errMsg, RunningTaskForFailbackPane.CONNECT_AGENT_ROW  );
            
            // 无法得到系统启动的方式( local disk or network ),退出
            allFinished = false;
            recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");             
            return;
        }
        
        // 3. stop services
SanBootView.log.info( getClass().getName()," @@#################  Stop service Begin ###################@@ ");        
        stopServStepOK = true; 
        runPane.setCurTabPane( RunningTaskForFailbackPane.STOP_SERV_ROW );
        if( taskConfPane.isFinishJob( TaskConfigForFailbackPane.CONF_STOP_SERV_ROW ) ){
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForFailbackPane.STOP_SERV_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForFailbackPane.STOP_SERV_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForFailbackPane.STOP_SERV_ROW , 2
            );
            
            // 由于启停服务的时间不好确定，故而一律将超时时间设置为10 hours
            view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT ); 
            
            isStopAllBaseServ = selectServPane.isStopAllService(); 
            boolean todo = false;
            aServList = selectServPane.getServiceInfo();
            size = aServList.size();
            for( i=0; i<size; i++ ){
                service = (Service)aServList.elementAt( i );

                todo = false;
                if( isStopAllBaseServ ){
                    todo = true;
                }else{
                    if( service.iSeled() ){
                        todo = true;
                    }
                }

                if( todo ){
                    stopServList.addElement( service ); // 记录停止了哪些服务
                    
                    retryCnt1 = 0;
                    while( retryCnt1 < 3 ){
                        isOk = view.initor.mdb.doStartService( ip,port,"stop",service.getServName() );
                        if( isOk ){
                            break;
                        }else{
                            retryCnt1++;
                        }
                    }
                    
                    if( isOk){
                        runPane.setLogOnTabpane(
                            SanBootView.res.getString("FailoverWizardDialog.log.stopService") +" [ "+service.getServName()+" ] "+
                                SanBootView.res.getString("common.ok"), 
                            RunningTaskForFailbackPane.STOP_SERV_ROW
                        );
                    }else{
                        errMsg =  SanBootView.res.getString("FailoverWizardDialog.log.stopService") +" [ "+service.getServName()+" ] "+
                                   SanBootView.res.getString("common.failed");
                        runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.STOP_SERV_ROW );
                        writeLogBuf( errMsg, RunningTaskForFailbackPane.STOP_SERV_ROW  );
                        stopServStepOK = false;
                    }
                }
            }
            
            view.initor.mdb.restoreOldTimeOut();
                        
            if( stopServStepOK ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForFailbackPane.STOP_SERV_ROW , 2
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForFailbackPane.STOP_SERV_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Stop service End ###################@@ ");
        
        // 4. assigne drivers
        assignDriverStepOK = true;
        runPane.setCurTabPane( RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
SanBootView.log.info( getClass().getName()," @@#################  Assign drives Begin ###################@@ "); 
        
        if( taskConfPane.isFinishJob( TaskConfigForFailbackPane.CONF_ASSIGN_DRIVER_ROW ) ){
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW , 2
            );
            
            // 首先获取最新的分区表
            isOk = view.initor.mdb.getSystemPart( host.getIP(), host.getPort(), "ib_get_partition_info.exe" );
            if( !isOk ){
                errMsg = SanBootView.res.getString("FailbackWizardDialog.log.getCurPartition") +
                          SanBootView.res.getString("common.failed") + "  " + view.initor.mdb.getErrorMessage();
                runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                writeLogBuf( errMsg, RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                
                // 获取最新分区表失败，获取旧(保存的)的分区表
                isOk = view.initor.mdb.getSystemPartFromMDB( host.getNetbootDiskInfo(),ResourceCenter.CMD_TYPE_MTPP );
                if( isOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailbackWizardDialog.log.getSavedPartition") +
                            SanBootView.res.getString("common.ok"), 
                        RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW
                    );
                    
                    partList = view.initor.mdb.getSysPartByCatConf();
SanBootView.log.debug( getClass().getName(),"start to assign drive,saved partition list(got when RestoreOriginalDisk): \n=====================\n"+
            view.initor.mdb.getSysPartStrContents()+"\n======================="
                    );                    
                }else{
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW , 2
                    );
                    errMsg = SanBootView.res.getString("FailbackWizardDialog.log.getSavedPartition") +
                               SanBootView.res.getString("common.failed") + "  "+ view.initor.mdb.getErrorMessage();
                    runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                    writeLogBuf( errMsg, RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                     
                    // 既无法获取最新的分区信息，又无法得到老的分区信息,退出
                    allFinished = false;
                    recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Assign drives End ###################@@ ");                     
                    return;
                }    
            }else{ // getting current partitions is ok 
                partList = view.initor.mdb.getSysPart();
SanBootView.log.debug( getClass().getName(),"start to assign drive,current partition list: \n=====================\n"+
            view.initor.mdb.getSysPartStrContents()+"\n======================="
                    );
            }
            
            // 获取要恢复的本地盘列表(用户在表中指定)
            Vector localDiskList = selectLocaldiskPane.getSelectedLocaldisk();
            
            // 为所有的本地盘分配盘符( 除了OS所在的本地盘 )
            size = localDiskList.size();
            for( i=0; i<size; i++ ){
                mapper = (RestoreMapper)localDiskList.elementAt( i );
                dest = mapper.getDest();
SanBootView.log.debug( getClass().getName()," ##### change drive letter: "+ mapper.getDest() +" ===> "+ mapper.getSrc() );                
                
                // 从分区信息(partList)中将mapper.dest去掉( 包括OS所在的本地盘 )
                volInfo = "";
                tid = -1;
                size1 = partList.size();
                tmpVect.removeAllElements();
                for( j=0; j<size1; j++ ){
                    part = (SystemPartitionForWin)partList.elementAt( j );
                    if( dest.getMp().toUpperCase().equals( part.getDiskLabel().toUpperCase().substring( 0,1 ) ) ){
                        volInfo = part.volInfo;
                        tid = part.getTargetID();
                        tmpVect.addElement( new Integer(j) );
SanBootView.log.debug( getClass().getName(),"#### Found a local disk to assign right drive letter: "+ dest.getMp() );                        
                        iscsiVolList.addElement( mapper ); // 将该mapper保存，为下面删除永久目标卷做准备���׼��
                        break;
                    }
                }
                // 真正从partList中去掉这些
                size2 = tmpVect.size();
                for( k=size2-1; k>=0; k-- ){
                    partList.removeElementAt( ( (Integer)tmpVect.elementAt( k ) ).intValue() );
                }
                
                // 判断从partList中得到的part是否为iSCSI volume,若是,则与恢复目的必须是本地盘相矛盾
                if( tid != -1 ){
SanBootView.log.warning( getClass().getName(),"Restore desitation must be local disk." );                    
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailbackWizardDialog.log.mismatched") + " [ " + mapper.getDest()+" ]",
                        RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW
                    );
                    
                    continue;
                }
                
                // begin to assign new driver 
                if( mapper.getSrc().toUpperCase().equals("C") ){
                    // 当系统从本地盘起来后，OS的恢复目的盘符(比如 Z)已经不存在了;
                    // 当partList是当前的分区信息时，Z盘符不在其中;
                    // 当partList是保存的分区信息是，Z盘符在其中,但是前面的过滤程序已经将
                    // OS所在的本地盘(Z)从partList中移除了;
                    
                    continue; // OS 所在的C盘，不需要assign driver
                }
                
                // 判断volInfo是否为空，若为空则表明partList中没有这个dest的信息
                if( volInfo.equals("") ){
SanBootView.log.warning( getClass().getName()," Volume info in partList is null "+ dest.getMp() );                         
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailbackWizardDialog.log.notFoundVolInfo") + " [ " + mapper.getDest()+" ]",
                        RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW
                    );
                    
                    continue;
                }
                
                isOk = view.initor.mdb.assignDriver( host.getIP(), host.getPort(), "NULL", "NULL", volInfo, mapper.getSrc() );
                if( isOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ mapper.getDest() + "->" + mapper.getSrc() +" ] "+
                            SanBootView.res.getString("common.ok"), 
                        RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW
                    );
                }else{
                    errMsg =  SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ mapper.getDest() + "->" + mapper.getSrc() +" ] "+ 
                               SanBootView.res.getString("common.failed") + " "+ view.initor.mdb.getErrorMessage();
                    runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                    writeLogBuf( errMsg, RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                    assignDriverStepOK = false;
                }
            }
            
            // 为partList中所有剩下的、未恢复的本地盘分配盘符
            size = partList.size();
            for( i=0; i<size; i++ ){                
                part = (SystemPartitionForWin)partList.elementAt( i );
                tid1 = part.getTargetID();
 SanBootView.log.debug(getClass().getName(), " #### Not restore disk: "+ part.getDiskLabel() );
                try{
                    disk = part.getDiskLabel().substring( 0,1 );
                    if( disk == null || disk.equals("") ) continue;
                }catch( Exception ex ){
                    continue;
                }
                
                // C 盘不需要assign driver
                if( disk.equals("C") ) continue;
                
                doAssignDriver = false;
                
                if( tid1 == -1 ){ // local disk
                    isOk = view.initor.mdb.assignDriver( host.getIP(),host.getPort(), "NULL","NULL",part.volInfo,disk );
                    doAssignDriver = true;
                }else{ // iscsi target volume
                    // 判断该iscsi tgt volume 是否为应该删除的永久目标卷,如果是,则不要给它分配盘符
                    found = false;
                    size1 = iscsiVolList.size();
                    for( j=0; j<size1; j++ ){
                        mapper = (RestoreMapper)iscsiVolList.elementAt(j);
                        if( mapper.getSrc().toUpperCase().equals( disk.toUpperCase() ) ){
                            found = true;
                            break;
                        }
                    }
                    
                    if( !found ){
                        doAssignDriver = true;
                        isOk = view.initor.mdb.assignDriver( host.getIP(),host.getPort(), 
                            view.initor.getTxIP(host.getIP()), ResourceCenter.ISCSI_LOGIN_PORT+"", part.iscsiVar,disk
                        );
                    }
                }
                
                if( doAssignDriver ){
                    if( isOk ){
                        if( tid1 == -1 ){
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ disk +" ] "+
                                    SanBootView.res.getString("common.ok"), 
                                RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW
                            );
                        }else{
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ part.iscsiVar +" ] "+
                                    SanBootView.res.getString("common.ok"), 
                                RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW
                            );
                        }
                    }else{
                        if( tid1 == -1 ){
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ disk +" ] "+ 
                                      SanBootView.res.getString("common.failed") + " "+ view.initor.mdb.getErrorMessage();
                            runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                            writeLogBuf( errMsg, RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                        }else{
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ part.iscsiVar +" ] "+
                                      SanBootView.res.getString("common.failed") +" "+ view.initor.mdb.getErrorMessage(); 
                            runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                            writeLogBuf( errMsg, RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW );
                        }

                        assignDriverStepOK = false;
                    }
                }
            }
            
// 不删除f_2_d临时文件(2008/11/06)
            /*
            if( assignDriverStepOK ){
                // delete tmp file which is generated for adjusting driver when restring orginal disk
                size = localDiskList.size();
                for( i=0; i<size; i++ ){
                    mapper = (RestoreMapper)localDiskList.elementAt( i );
                    String ss = mapper.getSrc();
                    view.initor.mdb.delAdjustDriverTmpFile( host.getIP(),host.getPort(),mapper.getDest().getMp().toUpperCase() );
                    view.initor.mdb.delAdjustDriverTmpFile( host.getIP(),host.getPort(),ss.toUpperCase() );
                }
            }
            */
            
            if( assignDriverStepOK ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW , 2
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForFailbackPane.ASSIGN_DRIVER_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Assign drives End ###################@@ ");      
        
        // 5. start services
        startServStepOK = true;
        runPane.setCurTabPane( RunningTaskForFailbackPane.START_SERV_ROW );
SanBootView.log.info( getClass().getName()," @@#################  Start Service Begin ###################@@ "); 
        
        if( taskConfPane.isFinishJob( TaskConfigForFailbackPane.CONF_START_SERV_ROW ) ){
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForFailbackPane.START_SERV_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForFailbackPane.START_SERV_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForFailbackPane.START_SERV_ROW , 2
            );
            
             // 由于启停服务的时间不好确定，故而一律将超时时间设置为10 hours
            view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT );                           
            
            size = stopServList.size();
            for( i=0; i<size; i++ ){
                item = stopServList.elementAt( i );
                
                if( item instanceof Service ){
                    servName = ((Service)item).getServName();
                }else{
                    servName = ((ServiceMap)item).getServName();
                }
                
                retryCnt1 = 0;
                while( retryCnt1 < 3 ){
                    isOk = view.initor.mdb.doStartService( ip,port,"start",servName );
                    if( isOk ){
                        break;
                    }else{
                        retryCnt1++;
                    }
                }
                
                if( isOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailoverWizardDialog.log.startService") +" [ "+ servName +" ] "+
                            SanBootView.res.getString("common.ok"), 
                        RunningTaskForFailbackPane.START_SERV_ROW
                    );
                }else{
                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.startService") +" [ "+ servName +" ] "+
                              SanBootView.res.getString("common.failed");
                    runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.START_SERV_ROW );
                    writeLogBuf( errMsg, RunningTaskForFailbackPane.START_SERV_ROW );
                    startServStepOK = false;
                }
            }
            
            view.initor.mdb.restoreOldTimeOut();
            
            if( startServStepOK ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForFailbackPane.START_SERV_ROW , 2
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForFailbackPane.START_SERV_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Start Service End ###################@@ ");

        // 6. remove persistent target
        removePersistentTgtStepOK = true;
        runPane.setCurTabPane( RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
SanBootView.log.info( getClass().getName()," @@#################  Remove Persistent Target Begin ###################@@ ");
        
        if( taskConfPane.isFinishJob( TaskConfigForFailbackPane.CONF_DEL_PTGT_ROW ) ){
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW , 2
            );
            
            // 将iscsiVolList中存放的永久目标卷移除( OS所在的iscsi vol本身不是persistent target )
            size = iscsiVolList.size();        
            if( size <=0 ){
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailbackWizardDialog.log.noneedDelPersistentTgt"),
                    RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW
                );
            }else{
                ArrayList persistentTgtList = new ArrayList();
                isOk = view.initor.mdb.getPersistentTarget( host.getIP(), host.getPort() );
                if( isOk ){
                    persistentTgtList = view.initor.mdb.getPersistentTgtList();
                }else{
                    errMsg = SanBootView.res.getString("FailbackWizardDialog.log.listPersistentTarget") +
                              SanBootView.res.getString("common.failed");
                    runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                    writeLogBuf( errMsg, RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                    removePersistentTgtStepOK = false;
                }
                
                if( persistentTgtList.size() > 0 ){
                    for( i=0; i<size; i++ ){
                        mapper = (RestoreMapper)iscsiVolList.elementAt( i );
SanBootView.log.debug( getClass().getName(),"persisten vol(to be removed): "+ mapper.getSrc() );                  
                        if( mapper.getSrc().toUpperCase().equals("C") ) continue;

                        size1 = partList.size();
                        for( j=0; j<size1; j++ ){
                            part = (SystemPartitionForWin)partList.elementAt( j );
SanBootView.log.debug( getClass().getName(),"partition: "+ part.getDiskLabel() +" "+ part.volInfo );
                            if( mapper.getSrc().toUpperCase().equals( part.getDiskLabel().toUpperCase().substring( 0,1 ) ) ){
                                if( !hasThisPersistentTgt( persistentTgtList,part.iscsiVar ) ) break;

                                isOk = view.initor.mdb.delPersistentTarget( ip,port,part.iscsiVar );
                                if( isOk ){
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("FailbackWizardDialog.log.delPersistentTarget") +" [ "+part.iscsiVar+" ] "+
                                            SanBootView.res.getString("common.ok"), 
                                        RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW
                                    );
                                    
                                    // 移除成功的，防止下面按"启动版本"删除persistent target再次删除
                                    removePersistentTgt( persistentTgtList,part.iscsiVar );
                                    
                                    // 然后再logout出去(注销persistent tgt失败不算严重错误，不置removePersistentTgtStepOK为false)
                                    isOk = view.initor.mdb.logoutTargetWithoutUmount( ip,port, part.iscsiVar );
                                    if( isOk ){
                                        runPane.setLogOnTabpane(
                                            SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") +" [ "+part.iscsiVar+" ] "+
                                                SanBootView.res.getString("common.ok"), 
                                            RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW
                                        );  
                                    }else{
                                        // 不在界面上显示错误，否则不懂的人会问，引起不必要的解释
         /*
                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") +" [ "+part.iscsiVar+" ] "+
                                                  SanBootView.res.getString("common.failed");
                                        runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                                        writeLogBuf( errMsg, RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                                        //removePersistentTgtStepOK = false;
         */
                                    }
                                }else{
                                    errMsg = SanBootView.res.getString("FailbackWizardDialog.log.delPersistentTarget") +" [ "+part.iscsiVar+" ] "+
                                              SanBootView.res.getString("common.failed");
                                    runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                                    writeLogBuf( errMsg, RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                                    removePersistentTgtStepOK = false;
                                }

                                break;
                            }
                        }
                    }

                    if( !this.isSwitchDisk ){
                        String tgtSrvName = view.initor.mdb.getHostName();
                        if( (tgtSrvName == null) || tgtSrvName.equals("") ){
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.getHostNameFailed");
                            runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                            writeLogBuf( errMsg, RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                            removePersistentTgtStepOK = false;
                        }else{
                            // 按照数据库中的网络启动版本删除永久卷
                            ArrayList verList = bootVer.bootVerList;
                            size = verList.size();
                            for( i=0; i<size; i++ ){
                                BindOfDiskLabelAndTid binder = (BindOfDiskLabelAndTid)verList.get(i);
SanBootView.log.info( getClass().getName(),"#### netboot version(to remove its persistent target): "+binder.getTid() );
                                if( !hasThisPersistentTgt( persistentTgtList,binder.getTid() ) )continue;

                                String iscsiVar = ResourceCenter.ISCSI_PREFIX + tgtSrvName + ":" + binder.getTid();
                                isOk = view.initor.mdb.delPersistentTarget( ip,port,iscsiVar );
                                if( isOk ){
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("FailbackWizardDialog.log.delPersistentTarget") +" [ "+iscsiVar+" ] "+
                                            SanBootView.res.getString("common.ok"),
                                        RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW
                                    );

                                    // 然后再logout出去(注销persistent tgt失败不算严重错误，不置removePersistentTgtStepOK为false)
                                    isOk = view.initor.mdb.logoutTargetWithoutUmount( ip,port, iscsiVar );
                                    if( isOk ){
                                        runPane.setLogOnTabpane(
                                            SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") +" [ "+iscsiVar+" ] "+
                                                SanBootView.res.getString("common.ok"),
                                            RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW
                                        );
                                    }else{
                                        // 不在界面上显示错误，否则不懂的人会问，引起不必要的解释
    /*
                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") +" [ "+iscsiVar+" ] "+
                                                  SanBootView.res.getString("common.failed");
                                        runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                                        writeLogBuf( errMsg, RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                                        //removePersistentTgtStepOK = false;
     */
                                    }
                                }else{
                                    errMsg = SanBootView.res.getString("FailbackWizardDialog.log.delPersistentTarget") +" [ "+iscsiVar+" ] "+
                                              SanBootView.res.getString("common.failed");
                                    runPane.setLogOnTabpane( errMsg,RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                                    writeLogBuf( errMsg, RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW );
                                    removePersistentTgtStepOK = false;
                                }
                            }
                        }
                    }
                }
            }
            
            if ( removePersistentTgtStepOK ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW , 2
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForFailbackPane.REMOVE_PERSISTENT_TGT_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Remove Persistent Target End ###################@@ ");

        // 判断是否全部成功
        allFinished = ( stopServStepOK && assignDriverStepOK && startServStepOK && removePersistentTgtStepOK );
        
        // 7. 保存UWS report( 不考虑其是否成功,有可能写入server上的report库中，或者写到了GUI所在的主机上)
        recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Migration system from iSCSI to local disk End ###################@@ ");        
    }
    
    private void removePersistentTgt( ArrayList persistentTgtList,String iscsiVar ){
        int ttiidd = -1;
        try{
            int index = iscsiVar.indexOf(":");
            String tidStr = iscsiVar.substring( index+1 ).trim();
            ttiidd = Integer.parseInt( tidStr );
        }catch(Exception ex){}
        
        if( ttiidd == -1 ) return;
        
        int size = persistentTgtList.size();
        for( int i=0; i<size; i++ ){
            if( ((Integer)persistentTgtList.get(i)).intValue() == ttiidd ){
                persistentTgtList.remove(i);
                break;
            }
        }
    }
    
    private boolean hasThisPersistentTgt( ArrayList persistentTgtList,String iscsiVar ){
        int ttiidd = -1;
        try{
            int index = iscsiVar.indexOf(":");
            String tidStr = iscsiVar.substring( index+1 ).trim();
            ttiidd = Integer.parseInt( tidStr );
        }catch(Exception ex){}
        
        if( ttiidd == -1 ) return true; // 假设有这个persistent tgt,试图remove it.
        
        int size = persistentTgtList.size();
        for( int i=0; i<size; i++ ){
            if( ((Integer)persistentTgtList.get(i)).intValue() == ttiidd ){
                return true;
            }
        }
        return false;
    }
    
    private boolean hasThisPersistentTgt( ArrayList persistentTgtList,int tid ){        
        int size = persistentTgtList.size();
        for( int i=0; i<size; i++ ){
            if( ((Integer)persistentTgtList.get(i)).intValue() == tid ){
                return true;
            }
        }
        return false;
    }
    
    private void recordUWSRpt( boolean initOk ){
        String msg;
        
        UWSReport rpt = new UWSReport();

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime( date );
        
        int year  = today.get( Calendar.YEAR );
        String stime = year + "";
        int month = today.get( Calendar.MONTH ) + 1;
        if( month<10 ){
            stime+= "0" + month;
        }else{
            stime+=month;
        }
        int day   = today.get( Calendar.DAY_OF_MONTH );
        if( day <10 ){
            stime+= "0" + day;
        }else{
            stime+=day;
        }
        int hour  = today.get(Calendar.HOUR_OF_DAY);
        if( hour <10 ){
            stime+= "0" + hour;
        }else{
            stime+=hour;
        }
        int min   = today.get(Calendar.MINUTE);
        if( min <10 ){
            stime +="0"+min;
        }else{
            stime+=min;
        }
        int sec   = today.get(Calendar.SECOND);
        if( sec <10 ){
            stime+="0"+sec;
        }else{
            stime+=sec;
        }
        
        rpt.setSTime( stime ); 
        rpt.setClntName( host.getIP() );

        rpt.setTaskClntId( ( host.getDst_agent_id() > 0 ) ? host.getDst_agent_id() : host.getSrc_Agnt_id()  );
        rpt.setTask_clnt_type( ( host.getDst_agent_id() > 0 ) ? DestAgent.TYPE_DST_AGNT : DestAgent.TYPE_ORI_HOST );
        rpt.setTask_parent_clnt_id( this.getTaskParentClntID( host ) );
        rpt.setTask_parent_clnt_type( this.getTaskParentClntType( host ) );
        rpt.setTask_clnt_mac( host.getDst_agent_mac() );

        if( this.isSwitchDisk ){
            rpt.setTType( UWSReport.TASK_TYPE_SWITCH_I2L );
        }else{
            rpt.setTType( UWSReport.TASK_TYPE_I2L );
        }
        rpt.setTResult( initOk? UWSReport.TASK_RESULT_END:UWSReport.TASK_RESULT_FAIL );
        
        msg = logBuf.toString();
        if( msg.getBytes().length > 1014 ){
            byte[] arr = msg.getBytes();
            String newmsg = new String(arr,0,1014 );
            rpt.setTaskMsg( initOk? SanBootView.res.getString("FailbackWizardDialog.error.drRecoverOK") : newmsg );
        }else{
            rpt.setTaskMsg( initOk? SanBootView.res.getString("FailbackWizardDialog.error.drRecoverOK") : msg );
        }
        
        String fname = generateUWSRptTmpFile( rpt.prtMe() );
        if( fname != null ){
            if( !view.initor.mdb.addReport( fname ) ){
                // save in local host 
                saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_I2L_RPT + stime );
            }
        }else{
            // save in local host
            saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_I2L_RPT + stime );
        }
    }
    
    private String generateUWSRptTmpFile( String contents ){
        String fname;
        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_USWTMP );
        if( tmpFile == null ){
            return null; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            tmpFile.delete();
            return null;
        }    
        
        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }
    
    public void saveUWSRpt( String contents,String fname ){
        try{
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File( path );
            
            f1.createNewFile();
            
            PrintWriter out = new PrintWriter( new FileWriter(f1),true );
            out.print( contents );
            out.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    private boolean overed = false;
    synchronized boolean isOver(){
        return overed;
    }

    synchronized void setOver(boolean val){
        overed = val;
    }
     
    private int phrase = 0;
    public String getPhraseIcon(){
        String str = "";
        switch( phrase ){
            case 0:
                str = "|";
                break;
            case 1:
                str = "/";
                break;
            case 2:
                str = "--";
                break;
            case 3:
                str = "\\";
                break;
            default:
                str = "|";
                break;
        }

        phrase = (phrase+1)%4;
        return str;
    }

    Runnable setVal = new Runnable(){
        public void run(){
            runPane.setTaskStatus( getPhraseIcon() +"",RunningTaskForDRPane.CONNECT_AGENT_ROW ,2 );
        }
    };
    
    Runnable process = new Runnable(){
        public void run(){
            while( !isOver() ){
                try{
                    SwingUtilities.invokeAndWait( setVal );

                    Thread.sleep(200);
                } catch( Exception e){
                    e.printStackTrace();
                }
            }
        }
    };
}
