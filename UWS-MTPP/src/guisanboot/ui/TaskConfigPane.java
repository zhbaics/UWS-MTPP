/*
 * TaskConfigPane.java
 *
 * Created on 2006/12/29,AM 9:52
 */

package guisanboot.ui;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import mylib.UI.*;
import guisanboot.data.*;


/**
 *
 * @author  Administrator
 */
public class TaskConfigPane extends javax.swing.JPanel {
    
    /** Creates new form TaskConfigPane */
    public TaskConfigPane() {
        initComponents();
    }
    
    public TaskConfigPane( SanBootView view ) {
        this();
        myInit( view );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 70));
        jScrollPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 25));
        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    ////GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    ////GEN-END:variables
    
    GeneralEditableTable table = new GeneralEditableTable();
    SanBootView view;
    
    private void myInit( SanBootView _view ){
        view = _view;
        
        assembleTask();
        
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
        
        jTextArea1.setText(
            SanBootView.res.getString("InitBootHostWizardDialog.tip6")
        );
    }
    
    public Vector assembleTask(){        
        Vector taskList = new Vector();
        
        int cnt = 0;
        
        InitTask task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.dhcp");
        taskList.addElement( task );
        
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.crtVol");
        taskList.addElement( task );
        
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.formatVol");
        taskList.addElement( task );
        
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.getInfo");
        taskList.addElement( task );
        
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.saveInfo");
        taskList.addElement( task );
        
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.copyOs");
        taskList.addElement( task );
        
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("common.inittask.embootBind");
        taskList.addElement( task );
        
        return taskList;
    }
    
    public void setupTable( Vector taskList ){
        int i;
        Object[][] data;
        
        int num = taskList.size();

        data = new Object[2+num][3]; //isFinish?,seq,task
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 3;      // col num

        data[1][0] = SanBootView.res.getString("TaskConfigPane.table.task.isFinish");
        data[1][1] = SanBootView.res.getString("TaskConfigPane.table.task.seq");
        data[1][2] = SanBootView.res.getString("TaskConfigPane.table.task.task");
        
        for( i=0; i<num; i++ ){
            InitTask task = (InitTask)taskList.elementAt(i);
            if( task.status == InitTask.INIT_TASK_STA_END ){
                data[2+i][0] = new Boolean( true );
            }else{
                data[2+i][0] = new Boolean( false );
            }
            data[2+i][1] = new Integer( task.seq );
            data[2+i][2] = task.task;
        }

        table.setTableModel( data );
        table.setDefaultLook();

        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            if( i == 0  ) continue;//这一列要用系统缺省的渲染器，否则CheckBox的图形效果出不来
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 50 );
        tableColumnModel.getColumn(1).setWidth( 50 );
        tableColumnModel.getColumn(2).setWidth( 300 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
    }
    
    public boolean hasAnythingToDo(){
        int cnt = 0;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel= (Boolean)model.getValueAt(row, 0 );
            if( !isSel.booleanValue() ){
                cnt++;
            }
        }
        return ( cnt > 0 );
    }
    
    public Vector getTaskConfInfo(){
        InitTask task;
        boolean isFinished;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        Vector ret = new Vector( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            task = new InitTask();
            isFinished = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            task.status = ( isFinished? InitTask.INIT_TASK_STA_END : InitTask.INIT_TASK_STA_READY );
            task.seq  = ((Integer)model.getValueAt(row, 1)).intValue();
            task.task  = (String)model.getValueAt(row, 2);
            
            ret.addElement( task );
        }
        
        return ret;
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            dce = table.getCellEditor( i,0 );
            if( dce!=null ){
                try{
                    while(!dce.stopCellEditing()){}
                }catch(Exception ex){}
            }
        }
    }
}
