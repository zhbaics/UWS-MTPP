/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CreateUCSSnapDialog.java
 *
 * Created on 2012-8-22, 16:17:35
 */

package guisanboot.ui;

import guisanboot.data.BasicVDisk;
import guisanboot.data.Snapshot;
import guisanboot.data.View;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Administrator
 */
 public class CreateUCSSnapDialog extends javax.swing.JDialog {
    
    public static final int FOR_TIME = 0 ;
    public static final int FOR_IO   = 1 ;

    /** Creates new form CreateUCSSnapDialog */
    public CreateUCSSnapDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public CreateUCSSnapDialog( SanBootView view ,ArrayList snapList ,View selView){
        this( view , true );
        myInit( view ,snapList ,selView );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel(); 
        jRadioButton1 = new javax.swing.JRadioButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField(5);
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jSlider2 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField(5);
        jPanel3 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 250));

        jPanel1.setMinimumSize(new java.awt.Dimension(400, 50));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 50));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jLabel3.setText("jLabel3");
        jPanel1.add(jLabel3);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setMinimumSize(new java.awt.Dimension(400, 200));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel4.setMinimumSize(new java.awt.Dimension(400, 100));
        jPanel4.setPreferredSize(new java.awt.Dimension(400, 100));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jRadioButton1.setText("Time");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel4.add(jRadioButton1, gridBagConstraints);

        jSlider1.setMinimumSize(new java.awt.Dimension(380, 25));
        jSlider1.setPreferredSize(new java.awt.Dimension(380, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jPanel4.add(jSlider1, gridBagConstraints);

        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(100, 21));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 21));
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel4.add(jLabel1, gridBagConstraints);

        jTextField2.setText("jTextField2");
        jTextField2.setMinimumSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        jPanel4.add(jTextField2, gridBagConstraints);

        jLabel4.setText("jLabel4");
        jLabel4.setMaximumSize(new java.awt.Dimension(200, 23));
        jLabel4.setMinimumSize(new java.awt.Dimension(200, 23));
        jLabel4.setPreferredSize(new java.awt.Dimension(200, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel4.add(jLabel4, gridBagConstraints);

        jPanel2.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jRadioButton2.setText("jRadioButton2");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel5.add(jRadioButton2, gridBagConstraints);

        jSlider2.setMinimumSize(new java.awt.Dimension(380, 25));
        jSlider2.setPreferredSize(new java.awt.Dimension(380, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jPanel5.add(jSlider2, gridBagConstraints);

        jLabel2.setText("jLabel2");
        jLabel2.setMaximumSize(new java.awt.Dimension(100, 21));
        jLabel2.setMinimumSize(new java.awt.Dimension(100, 21));
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel5.add(jLabel2, gridBagConstraints);

        jTextField3.setText("jTextField3");
        jTextField3.setMinimumSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        jPanel5.add(jTextField3, gridBagConstraints);

        jPanel2.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel3.setMinimumSize(new java.awt.Dimension(400, 50));
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 50));
        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jSeparator1, java.awt.BorderLayout.PAGE_START);

        jPanel6.setMinimumSize(new java.awt.Dimension(400, 48));
        jPanel6.setPreferredSize(new java.awt.Dimension(400, 48));

        jButton1.setText("OK");
        jButton1.setMaximumSize(new java.awt.Dimension(70, 23));
        jButton1.setMinimumSize(new java.awt.Dimension(70, 23));
        jButton1.setPreferredSize(new java.awt.Dimension(70, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.setMaximumSize(new java.awt.Dimension(70, 23));
        jButton2.setMinimumSize(new java.awt.Dimension(70, 23));
        jButton2.setPreferredSize(new java.awt.Dimension(70, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton2);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>                        

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        radio1BtnProcess();
    }                                             

    public void radio1BtnProcess(){
        jSlider1.setEnabled(true);
        jLabel1.setEnabled(true);
        jTextField2.setEnabled(true);
        
        jSlider2.setEnabled(false);
        jLabel2.setEnabled(false);
        jTextField3.setEnabled(false);
    }
    
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        radio2BtnProcess();
    }                                             

    public void radio2BtnProcess(){
        jSlider1.setEnabled(false);
        jLabel1.setEnabled(false);
        jTextField2.setEnabled(false);
        
        jSlider2.setEnabled(true);
        jLabel2.setEnabled(true);
        jTextField3.setEnabled(true);
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        values = new Object[3];
        if(jRadioButton1.isSelected()){
            values[0] = FOR_TIME;
            values[1] = jSlider1.getValue() ;
            values[2] = getForwordTimePoint(jSlider1.getValue());
        } else {
            values[0] = FOR_IO;
            values[1] = jSlider2.getValue() ;
            values[2] = curView.getCreateTimeStr();
        }
        this.dispose();
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        values = null;
        this.dispose();
    }                                        

    public String getForwordTimePoint(int timestamp){
        String ret = "";
        int year = snapForCurView.getYear();
        int month = snapForCurView.getMonth();
        int day = snapForCurView.getDay();
        int hour = snapForCurView.getHour();
        int minute = snapForCurView.getMinute();
        int second = snapForCurView.getSecond();
        
        String smonth = month+"";
        String sday = day+"";
        String shour = hour+"";
        String sminute = minute+"";
        String ssecond = second+"";
        
        int tmp =0 ;
        int tmptime = 0 ;
        //计算秒
        tmp = (second + timestamp)/60;
        second = (second + timestamp)%60;
        tmptime =tmp;
        //计算分
        if( tmp != 0){
            tmp = (minute + tmptime)/60;
            minute = (minute + tmptime)%60;
            tmptime = tmp;
        }
        //计算小时
        if(tmp != 0){
            tmp = (hour + tmptime)/24;
            hour = (hour +tmptime)%24;
            tmptime = tmp;
        }
        //
        if(tmp != 0){
            day = day + tmp;
            if(day > 31){
                if(month ==1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){
                    month =month+ day/31;
                    day = day%31;
                } else if(month ==4|| month == 6 || month == 9 || month == 11){
                    month =month+ day/30;
                    day = day%30;
                } else if(month == 2 && isRunNian(year)){
                    month = month + day/29;
                    day = day%29;
                } else if(month == 2 && !isRunNian(year)){
                    month = month + day/28;
                    day = day%28;
                }
            } else if( day >30){
                if(month ==4|| month == 6 || month == 9 || month == 11){
                    month =month+ day/30;
                    day = day%30;
                } else if(month == 2 && isRunNian(year)){
                    month = month + day/29;
                    day = day%29;
                } else if( month == 2 && !isRunNian(year)){
                    month = month + day/28;
                    day = day%28;
                }
            } else if( day >29){
                if(month == 2 && !isRunNian(year)){
                    month = month +day/28;
                    day = day%28;
                }else if(month == 2 && isRunNian(year)){
                    month = month + day/29;
                    day = day%29;
                }
            } else if( day >28){
                if(month == 2 && !isRunNian(year)){
                    month = month +day/28;
                    day = day%28;
                }
            } 
        }
        if(month >12) {
            month = month%12;
            year =year + 1;
        }
        
        if(month<10){ smonth="0"+month; } else { smonth=month+""; }
        if(day<10){ sday="0"+day; } else { sday=day+""; }
        if(hour<10){ shour="0"+hour; } else { shour=hour+""; }
        if(minute<10){ sminute="0"+minute; } else { sminute=minute+""; }
        if(second<10){ ssecond="0"+second; } else { ssecond=second+""; }
        
        
        ret = year+smonth+sday+shour+sminute+ssecond;
        return ret;
    }
    
    public String getShowLabel(int timestamp){
        String ret = "";
        int year = snapForCurView.getYear();
        int month = snapForCurView.getMonth();
        int day = snapForCurView.getDay();
        int hour = snapForCurView.getHour();
        int minute = snapForCurView.getMinute();
        int second = snapForCurView.getSecond();
        String smonth = month+"";
        String sday = day+"";
        String shour = hour+"";
        String sminute = minute+"";
        String ssecond = second+"";
        
        int tmp =0 ;
        int tmptime = 0 ;
        //计算秒
        tmp = (second + timestamp)/60;
        second = (second + timestamp)%60;
        tmptime =tmp;
        //计算分
        if( tmp != 0){
            tmp = (minute + tmptime)/60;
            minute = (minute + tmptime)%60;
            tmptime = tmp;
        }
        //计算小时
        if(tmp != 0){
            tmp = (hour + tmptime)/24;
            hour = (hour +tmptime)%24;
            tmptime = tmp;
        }
        //
        if(tmp != 0){
            day = day + tmp;
            if(day > 31){
                if(month ==1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){
                    month =month+ day/31;
                    day = day%31;
                } else if(month ==4|| month == 6 || month == 9 || month == 11){
                    month =month+ day/30;
                    day = day%30;
                } else if(month == 2 && isRunNian(year)){
                    month = month + day/29;
                    day = day%29;
                } else if(month == 2 && !isRunNian(year)){
                    month = month + day/28;
                    day = day%28;
                }
            } else if( day >30){
                if(month ==4|| month == 6 || month == 9 || month == 11){
                    month =month+ day/30;
                    day = day%30;
                } else if(month == 2 && isRunNian(year)){
                    month = month + day/29;
                    day = day%29;
                } else if( month == 2 && !isRunNian(year)){
                    month = month + day/28;
                    day = day%28;
                }
            } else if( day >29){
                if(month == 2 && !isRunNian(year)){
                    month = month +day/28;
                    day = day%28;
                }else if(month == 2 && isRunNian(year)){
                    month = month + day/29;
                    day = day%29;
                }
            } else if( day >28){
                if(month == 2 && !isRunNian(year)){
                    month = month +day/28;
                    day = day%28;
                }
            } 
        }
        if(month >12) {
            month = month%12;
            year =year + 1;
        }
        
        if(month<10){ smonth="0"+month; } else { smonth=month+""; }
        if(day<10){ sday="0"+day; } else { sday=day+""; }
        if(hour<10){ shour="0"+hour; } else { shour=hour+""; }
        if(minute<10){ sminute="0"+minute; } else { sminute=minute+""; }
        if(second<10){ ssecond="0"+second; } else { ssecond=second+""; }
        ret = ""+year+"/"+smonth+"/"+sday+" "+shour+":"+sminute+":"+ssecond;
        return ret;
    }
    
    public boolean isRunNian(int year){
        boolean runnian = true;
        
        if( year%100 ==0){
            if(year%400 ==0){
                runnian = true;
            } else {
                runnian = false;
            }
        } else {
            if (year%4 == 0){
                runnian =true;
            } else {
                runnian = false;
            }
        }
        
        return runnian;
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration                   

    private Object[] values = null ;
    private SanBootView view ;
    private View curView;
    private Snapshot nextSnap;
    private Snapshot snapForCurView;
    List snapList = new ArrayList();
    ButtonGroup grp = new ButtonGroup();
    int maxTime = 0;
    int maxIO = 100000;
    
    ChangeListener listener1 = new ChangeListener(){
        public void stateChanged(ChangeEvent event){
            
            jTextField2.setText( ""+jSlider1.getValue() );
            jLabel4.setText(SanBootView.res.getString("CrtUcsSnap.label.forwordto") + getShowLabel(jSlider1.getValue()));
        }
    };
    ChangeListener listener2 = new ChangeListener(){
        public void stateChanged(ChangeEvent event){
            jTextField3.setText(""+jSlider2.getValue());
        }
    };
    
    KeyAdapter textFiled2KA = new KeyAdapter(){
        @Override 
            public void keyReleased(KeyEvent e) {    
                char[] text = jTextField2.getText().toCharArray(); 
                    for (char ch : text) { 
                        if (!Character.isDigit(ch)) {  
                            JOptionPane.showMessageDialog(jPanel4,  
                                    "Your input contains non-digit characters !",  
                                    "Warning", JOptionPane.WARNING_MESSAGE); 
                            jTextField2.setText(""); 
                            return; 
                        } 
                    }
                int tmp = Integer.parseInt(jTextField2.getText());
                if(tmp >maxTime) tmp =maxTime-1;
                jSlider1.setValue(tmp);
                jLabel4.setText(SanBootView.res.getString("CrtUcsSnap.label.forwordto") + getShowLabel(tmp));
                jTextField2.setText(String.valueOf(tmp));
                
            }
    };
    KeyAdapter textFiled3KA = new KeyAdapter(){
        @Override 
            public void keyReleased(KeyEvent e) {    
                char[] text = jTextField3.getText().toCharArray(); 
                    for (char ch : text) { 
                        if (!Character.isDigit(ch)) {  
                            JOptionPane.showMessageDialog(jPanel5,  
                                    "Your input contains non-digit characters !",  
                                    "Warning", JOptionPane.WARNING_MESSAGE); 
                            jTextField3.setText(""); 
                            return; 
                        } 
                    }
                int tmp = Integer.parseInt(jTextField3.getText());
                if(tmp >maxIO) tmp =maxIO;
                jSlider2.setValue(tmp);
                System.out.println("Test is OK !");
            }
    };
    
    //设置组件的初始值
    public void init(){
        //注册滑动条事件
        if(maxTime > 0){
//            jSlider1 = new JSlider(0,maxTime,0);
            jSlider1.setMaximum(maxTime-1);
            jSlider1.setValue(0);
        } else {
            jSlider1.setMaximum(0);
        }
        jSlider1.addChangeListener(listener1);
        
        jSlider2.setMaximum(maxIO);
        jSlider2.setValue(0);
        jSlider2.addChangeListener(listener2);
        
        //注册文本域事件
        jTextField2.addKeyListener(textFiled2KA);
        jTextField3.addKeyListener(textFiled3KA);
        
        //初始化单选项
        jRadioButton1.setSelected(true);
    }
    

    public void myInit( SanBootView _view , ArrayList list ,View selView) {
        setLanauge();
        this.view = _view ;
        this.curView = selView ;
        this.snapList = list ;
        grp.add(jRadioButton1);
        grp.add(jRadioButton2);
        //获取时间差
        maxTime = setNextSnap();
        //设置组件的初始值方法
        init();
        jLabel4.setText( SanBootView.res.getString("CrtUcsSnap.label.forwordto") + getShowLabel(0));
        //初始化可用性
        jSlider1.setEnabled(true);
        jTextField2.setEditable(true);
        jTextField2.setText("");

        jSlider2.setEnabled(false);
        jTextField3.setEnabled(false);
        jTextField3.setText("");

        
        
        
        
    }

    
    public void setLanauge(){
        jLabel3.setText(SanBootView.res.getString("CrtUcsSnap.label.Title"));
        jLabel2.setText(SanBootView.res.getString("CrtUcsSnap.label.IO"));
        jLabel1.setText(SanBootView.res.getString("CrtUcsSnap.label.Time"));
        jButton2.setText(SanBootView.res.getString("CrtUcsSnap.label.cancel"));
        jButton1.setText(SanBootView.res.getString("CrtUcsSnap.label.submit"));
        jRadioButton2.setText(SanBootView.res.getString("CrtUcsSnap.label.AsIO"));
        jRadioButton1.setText(SanBootView.res.getString("CrtUcsSnap.label.AsTime"));
        
    }

    public int setNextSnap(){
        int size = this.snapList.size();
//        List<Snapshot> tmplist = new ArrayList<Snapshot>();
        Snapshot tmpsnap;
        int tmpTime =-1;
        int beTime = -1;
        this.snapForCurView = view.initor.mdb.getSnapshotFromQuerySql(curView.getSnap_root_id(), curView.getSnap_parent());
        if (size > 0){
            for (int i = 0 ; i < size ; i++ ){
                tmpsnap = new Snapshot( (BasicVDisk)this.snapList.get( i ) );
                if (snapForCurView.getSnap_root_id() == tmpsnap.getSnap_root_id() && ( tmpsnap.isSnap() || tmpsnap.isMirroredSnap()) ){
                    tmpTime = getBetweenTime( tmpsnap,snapForCurView );
                    if(beTime == -1 && tmpTime >0){
                        beTime = tmpTime ;
                    }
                }
                if(beTime != -1 && tmpTime !=-1 && tmpTime <= beTime){
                    beTime = tmpTime;
                    this.nextSnap = tmpsnap;
                }
            }
        }
        return beTime;
    }
    
    //计算时间差
    public int compareDate(String date1 ,String date2){
        SimpleDateFormat df = new SimpleDateFormat("yyyyMMddhhmmss");
        int ret = -1 ;
        try{
            Date curDate = df.parse(date1);
            Date nextDate = df.parse(date2);
            long between = (nextDate.getTime() - curDate.getTime())/1000;
            if( between > 0){
                ret = (int)between ;
            }
        } catch(Exception e){
            ret = -1 ;
        }
        return ret ;
    }
    
    public int getBetweenTime(Snapshot cs ,Snapshot ns){
        return compareDate(ns.getSimpleCrtTimeStr(),cs.getSimpleCrtTimeStr());
    }
    
    public Object[] getValues(){
        return values;
    }
}

