/*
 * SelectUnixSnapshotPane.java
 *
 * Created on 2009/6/23, �PM�1:45
 */

package guisanboot.ui;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;

import guisanboot.data.*;
import guisanboot.ui.multiRenderTable.*;
import guisanboot.unlimitedIncMj.entity.CloneDiskWrapper;

/**
 *
 * @author  Administrator
 */
public class SelectUnixSnapshotPane extends javax.swing.JPanel {
    
    /** Creates new form SelectBootHostPane */
    public SelectUnixSnapshotPane() {
        initComponents();
    }
    
    public SelectUnixSnapshotPane( SanBootView view ) {
        this();
        myInit( view );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 70));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 25));
        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        jCheckBox1.setText("Using swap target when net-booting");
        jCheckBox1.setBorder(null);
        jPanel6.add(jCheckBox1);

        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    JTableY table;
    ArrayList oldVerList;
    Vector list;
    SanBootView view;
    Object[] header;
    Object[] label;
    RowEditorModel rm2 = new RowEditorModel();
    RowEditorModel rm0 = new RowEditorModel();
    Object osVol = null;
    
    private void myInit( SanBootView _view ){
        view = _view;
        
        jTextArea1.setText(
            SanBootView.res.getString("FailoverWizardDialog.tip3")
        );
        jCheckBox1.setText(  SanBootView.res.getString("SelectBootVerDialog.checkBox.useSwap") );
        jCheckBox1.setSelected( true );
    }
    
    public void setupTable( Vector _list,ArrayList _oldVerList  ){
        TargetWrapper tgtWrap;
        BindofTgtWrapAndSnap bind;
        ArrayList snapList;
        JComboBox cb; 
        DefaultCellEditor ed;
        CheckBoxEditor ced;
        int i;
        Object[][] data;
        Object selectSnapVer;
        Object defaultSnapVer;
         
        list = _list;
        oldVerList = _oldVerList;
        
        int num = list.size();
        data = new Object[num][3]; 
        
        header = new Object[3];
        label = new Object[num];
        
        header[0] = SanBootView.res.getString("SelectSnapshotPane.table.snap.recovered");
        header[1] = SanBootView.res.getString("SelectSnapshotPane.table.snap.fs");
        header[2] = SanBootView.res.getString("SelectSnapshotPane.table.snap.ver");
        
        for( i=0; i<num; i++ ){
            bind = (BindofTgtWrapAndSnap)list.elementAt(i);
            tgtWrap  = bind.getTarget();
            snapList = bind.getSnapList();
            
            data[i][0] = Boolean.TRUE;
            data[i][1] = tgtWrap;

            defaultSnapVer = getDefaultSnapVVer( snapList );
            selectSnapVer = getSelectSnapVer( tgtWrap.toString(), snapList,oldVerList );
            if( selectSnapVer == null&&defaultSnapVer == null ){
                data[i][2] = snapList.get( 0 );      // 就是 target volume 本身
            }else{
                if( selectSnapVer != null ){
                    data[i][2] = selectSnapVer; // 上次网络启动的版本
                }else{
                    data[i][2] = defaultSnapVer;
                }
                
            }
            
            // 保存 OS 所在的卷
            if( tgtWrap.toString().toUpperCase().equals("/") ) {
                osVol = tgtWrap;
            }
            
            cb = new JComboBox( snapList.toArray() );
            ed = new DefaultCellEditor(cb);
            rm2.addEditorForRow(i, ed );
            
            label[i]= tgtWrap.toString();
        }
        
        MyDefaultTableModelForTabY model = new MyDefaultTableModelForTabY( data,header,label );
        
        table = new JTableY( model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        ced = new CheckBoxEditor();
        rm0.addEditorForRow( 0, ced );
            
        table.setCol2EditorModel(rm2);
        table.setCol0EditorModel(rm0);
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 65 );
        tableColumnModel.getColumn(1).setWidth( 70 );
        tableColumnModel.getColumn(2).setWidth( 380 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
        
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }
    
    public void removeSwapOption(){
        jCheckBox1.setSelected( false );
        jPanel6.remove( this.jCheckBox1 );
    }
     
    public boolean isUsingSwapWhenNetbooting(){
        return jCheckBox1.isSelected();
    }
    
    public ArrayList getSelectedSnap1(){
        BindofTgtAndSnap binder;
        boolean isSel;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList ret = new ArrayList( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            binder = new BindofTgtAndSnap();
            binder.tgt = (TargetWrapper)model.getValueAt( row,1 );
            binder.snap = model.getValueAt( row,2 );
            binder.isSel = isSel;
            ret.add( binder );
        }
        
        return ret;
    }
    
    public TargetWrapper getTgtWrapper( String label ){
        TargetWrapper wraper;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            wraper = (TargetWrapper)model.getValueAt(row,1);
            if( wraper.toString().toUpperCase().equals( label.toUpperCase() ) ){
                return wraper;
            }
        }
        
        return null;
    }
    
    public boolean checkSnapNumber( String label,int rootid,int local_snap_id ){
        int size,i,cnt,max_snap,snapNum;
        ArrayList snapWrapperList;
        SnapWrapper one;
        
        // 先检查各个卷的快照数是否超出了max number;若超出了，则检查是否每个快照都有view
        TargetWrapper tgtWrapper = getTgtWrapper( label );
        if( tgtWrapper != null ){
            max_snap = tgtWrapper.tgt.getMaxSnapNum();
SanBootView.log.debug( getClass().getName()," max snap number: "+ max_snap +" vol: " + tgtWrapper.toString() ); 
            // 找出tgt的当前快照数
            snapNum = getSnapshotNum( tgtWrapper.toString() );
SanBootView.log.debug( getClass().getName()," snap number is : "+ snapNum +" vol: " + tgtWrapper.toString() );            
            if( snapNum >= max_snap ){
                snapWrapperList = getSnapshotList( tgtWrapper.toString(),rootid,local_snap_id );
                size = snapWrapperList.size();
                cnt = 0;
                for( i=0; i<size; i++ ){
                    one = (SnapWrapper)snapWrapperList.get(i);
                    int viewNum = this.getViewNum( tgtWrapper.toString(), one );
                    if( viewNum > 0 ){
                        cnt+=1;
                    }
                }
SanBootView.log.debug( getClass().getName()," view number is : "+ cnt +" vol: "+tgtWrapper.toString() );
                
                if( cnt == size ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectBootVerDialog.error.beyondMaxSnap")+" : "+tgtWrapper.toString()
                    );
                    return false;
                }else{
                    return true;
                }
            }else{
                return true;
            }
        }else{
SanBootView.log.error( getClass().getName(),"Not found object on table(it's impossible): "+ tgtWrapper.toString() );
            return false;
        }
    }
    
    public int getSnapshotNum( String label ){
        TargetWrapper tgtWrap;
        BindofTgtWrapAndSnap bind;
        ArrayList snapList;
        int cnt=0;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            bind = (BindofTgtWrapAndSnap)list.elementAt(i);
            tgtWrap  = bind.getTarget();
            snapList = bind.getSnapList();
            if( tgtWrap.diskLabel.toUpperCase().equals( label.toUpperCase() ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object item = snapList.get(j);
                    if( item instanceof SnapWrapper ){
                        cnt+=1;
                    }
                }
                break;
            }
        }
        
        return cnt;
    }
    
    public int getViewNum( String label,SnapWrapper snap ){
        TargetWrapper tgtWrap;
        BindofTgtWrapAndSnap bind;
        ArrayList snapList;
        boolean found = false;
        int cnt=0;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            bind = (BindofTgtWrapAndSnap)list.elementAt(i);
            tgtWrap  = bind.getTarget();
            snapList = bind.getSnapList();
            if( tgtWrap.diskLabel.toUpperCase().equals( label.toUpperCase() ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object item = snapList.get(j);
                    if( found ){
                        if( item instanceof ViewWrapper ){
                            cnt+=1;
                        }else{
                            break;
                        }
                    }else{
                        if( item instanceof SnapWrapper ){
                            SnapWrapper snapItem =(SnapWrapper)item;
                            if( ( snapItem.snap.getSnap_root_id() == snap.snap.getSnap_root_id() )&&
                                ( snapItem.snap.getSnap_local_snapid() == snap.snap.getSnap_local_snapid() ) 
                            ){
                                found = true;
                            }
                        }
                    }
                }
                break;
            }
        }
        
        return cnt;
    }
    
    public ArrayList getSnapshotList( String label,int rootid,int local_snap_id ){
        TargetWrapper tgtWrap;
        BindofTgtWrapAndSnap bind;
        ArrayList snapList;
        ArrayList ret = new ArrayList(0);
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            bind = (BindofTgtWrapAndSnap)list.elementAt(i);
            tgtWrap  = bind.getTarget();
            snapList = bind.getSnapList();
            if( tgtWrap.diskLabel.toUpperCase().equals( label.toUpperCase() ) ){
                int size1 = snapList.size();
                ret = new ArrayList( size1 );
                for( int j=0; j<size1; j++ ){
                    Object item = snapList.get(j);
                    if( item instanceof SnapWrapper ){
                        if( rootid <= 0 ){
                            ret.add( item );
                        }else{
                            SnapWrapper snapWrapper = (SnapWrapper)item;
                            if( (snapWrapper.snap.getSnap_root_id() != rootid ) ||
                                 ( snapWrapper.snap.getSnap_local_snapid() != local_snap_id )){
                                ret.add( item );
                            }
                        }
                    }
                }
                break;
            }
        }
        
        return ret;
    }
    
    public Object getSelectSnapVer( String diskLabel,ArrayList snapList,ArrayList oldVerList ){
        int tid;
        BindOfDiskLabelAndTid binder;
System.out.println(" ---->getSelectSnapVer: "+ diskLabel );

        int size = oldVerList.size();
        for( int i=0; i<size; i++ ){
            binder = (BindOfDiskLabelAndTid)oldVerList.get(i);
System.out.println(" ----> "+ binder.prtMe() );

            tid = binder.getTid();
            if( binder.getDiskLabel().equals( diskLabel ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object obj = snapList.get(j);
System.out.println("getSelectSnapVer: "+ obj.toString() );

                    if( obj instanceof ViewWrapper ){
System.out.println("(getSelectSnapVer) is a viewwrapper " );
                        ViewWrapper vw = (ViewWrapper)obj;
                        if( vw.view.getSnap_target_id() == tid ){
                            return obj;
                        }
                    }else if( obj instanceof VolumeMapWrapper ){
System.out.println("(getSelectSnapVer) is a volumemapwrapper " );
                        VolumeMapWrapper vm =(VolumeMapWrapper)obj;
                        if( vm.volMap.getVolTargetID() == tid ){
                            return obj;
                        }
                    }else if( obj instanceof CloneDiskWrapper ){
System.out.println("(getSelectSnapVer) is a clonediskwrapper " );
                        CloneDiskWrapper cd = (CloneDiskWrapper)obj;
                        if( cd.cloneDisk.getTarget_id() == tid ){
                            return obj;
                        }
                    }else{ // SnapWrapper

                    }
                }
                break;
            }
        }
        
        return null;
    }
    
    public Object getSnapshotVersion( String diskLabel,ArrayList snapList,ArrayList oldVerList,boolean isBootVer ){
        int tid;
        
        int size = oldVerList.size();
        for( int i=0; i<size; i++ ){
            BindOfDiskLabelAndTid binder = (BindOfDiskLabelAndTid)oldVerList.get(i);
            
            if(isBootVer){
                tid = binder.getTid();
            }else{
                tid = binder.getSelectedBootVer();
            }
         
            if( binder.getDiskLabel().equals( diskLabel ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object obj = snapList.get(j);
                    if( obj instanceof ViewWrapper ){
                        ViewWrapper vw = (ViewWrapper)obj;
                        if( vw.view.getSnap_target_id() == tid ){
                            return obj;
                        }
                    }else if( obj instanceof VolumeMapWrapper ){
                        VolumeMapWrapper vm =(VolumeMapWrapper)obj;
                        if( vm.volMap.getVolTargetID() == tid ){
                            return obj;
                        }
                    }else if( obj instanceof MirrorDiskInfoWrapper ){
                        
                    }else{ // SnapWrapper   
                    }
                }
                break;
            }
        }
        
        return null;
    }
     
    public boolean toRecoverOSDisk(){
        TargetWrapper wraper;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            wraper = (TargetWrapper)model.getValueAt(row,1);
            if( wraper.toString().toUpperCase().equals("/") ){
                return ((Boolean)model.getValueAt(row, 0 )).booleanValue();
            }
        }
        
        return false;
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            dce = table.getCellEditor( i,0 );
            if( dce!=null ){
                try{
                    while(!dce.stopCellEditing()){}
                }catch(Exception ex){}
            }
        }
    }

    private Object getDefaultSnapVVer(ArrayList snapList) {
        Object obj;
        Iterator iterator = snapList.iterator();
        while( iterator.hasNext() ){
            obj = iterator.next();
            if( obj instanceof SnapWrapper ){
                return obj;
            }
        }
        return null;
    }
}
