/*
 * MonitorMJDialog.java
 *
 * Created on 2008/6/19,  PM��2:10
 */

package guisanboot.ui;

import guisanboot.data.MirrorJob;
import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JDialog;
import javax.swing.border.TitledBorder;

/**
 *
 * @author  zjj
 */
public class MonitorMJDialog extends javax.swing.JDialog implements PropertyChangeListener{ 
    /** Creates new form MonitorMJDialog */
    public MonitorMJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public MonitorMJDialog( SanBootView view,MirrorJob mj ){
        this( view,true );
        myInit( view,mj );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(600, 100));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(new javax.swing.border.TitledBorder("Progress"));
        jPanel4.setPreferredSize(new java.awt.Dimension(600, 70));
        jLabel1.setText("Snap ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Progress :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 0, 0);
        jPanel4.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabel4, gridBagConstraints);

        jPanel1.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(new javax.swing.border.TitledBorder("Message"));
        jPanel5.setPreferredSize(new java.awt.Dimension(600, 100));
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 1, 5, 1)));
        jPanel2.add(jSeparator1, java.awt.BorderLayout.NORTH);

        jButton1.setText("Close");
        jButton1.setPreferredSize(new java.awt.Dimension(67, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton1);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if( receiver!=null ){
            receiver.removePropertyChangeListener( (PropertyChangeListener)this );
            // 通知listener们获取task info 失败
            receiver.setContinue( false );
        }
        
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MonitorMJDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    ////GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    ////GEN-END:variables
 
    SanBootView view;
    MonitorInfoReceiver receiver;
    MirrorJob mj;
    private void myInit( SanBootView view,MirrorJob mj ){
        this.view = view;
        this.mj = mj;

        setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );

        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm1();
            }
        });
        Font font = new Font("serif",Font.BOLD,12 );
        jLabel2.setFont( font );
        jLabel4.setFont( font );
        
        jButton1.setEnabled( false );
        setupLanguage();
    }
    
    private void setupLanguage(){
        if( mj.isCjType() ){
            setTitle( SanBootView.res.getString("MonitorMJDialog.dialog_title1")+"[ "+mj.getMj_job_name()+" ]" );
        }else{
            setTitle( SanBootView.res.getString("MonitorMJDialog.dialog_title")+"[ "+mj.getMj_job_name()+" ]" );
        }
        if( mj.isCjType() ){
            this.jLabel1.setText( SanBootView.res.getString("MonitorMJDialog.label.id1"));
        }else{
            this.jLabel1.setText( SanBootView.res.getString("MonitorMJDialog.label.id"));
        }
        this.jLabel3.setText( SanBootView.res.getString("MonitorMJDialog.label.process"));
        ((TitledBorder)jPanel4.getBorder()).setTitle(
            SanBootView.res.getString("MonitorMJDialog.borderTitle.status")
        );
        ((TitledBorder)jPanel5.getBorder()).setTitle(
            SanBootView.res.getString("MonitorMJDialog.borderTitle.msg")
        );
        jButton1.setText( SanBootView.res.getString("common.button.close"));
    }

    private void exitForm1(){
        // MjStatusGeter还没有调用enableButton，所以不能关闭窗口
        if( receiver == null ) return;

        if( receiver!=null ){
            receiver.removePropertyChangeListener( (PropertyChangeListener)this );
            // 通知listener们获取task info 失败
            receiver.setContinue( false );
        }

        this.dispose();
    }
    
    public void propertyChange(PropertyChangeEvent evt){
        String msg = evt.getPropertyName();
        if( msg.equals("MJINFO")){
            updateGUI( true,"");
        }else{
            updateGUI( false,msg );
        }
    }
    
    public void enableButton( boolean val ){
        jButton1.setEnabled( val );
        
        if( !val )
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
        else
            setDefaultCloseOperation( JDialog.DISPOSE_ON_CLOSE );
        
        // 在第一次获取了task list之后,才注册监听器
        // 这一点非常重要
        receiver = new MonitorInfoReceiver( view, mj );
        if( receiver != null ){
            receiver.addPropertyChangeListener( this );
            receiver.start();
        }
    }
    
    private void updateGUI( boolean normal,String errmsg ){
        if( normal ){
            MirrorJob newMJ = view.initor.mdb.getMonedMj( mj.getMj_id() );
            if( newMJ != null  ){
                this.setLocalSnapID( newMJ.getMj_current_snap_id() );
                this.setProgress( newMJ.getMj_current_process() );
                if( !newMJ.getMj_info().equals("end") && !newMJ.getMj_info().trim().equals("") ){
                    this.setMsg( newMJ.getMj_info() );
                }
            }else{
                this.setMsg( errmsg );
            }
        }
    }
    
    public void setLocalSnapID( int localId ){
        this.jLabel2.setText( localId+"" );
    }
    
    public void setProgress( int process ){
        this.jLabel4.setText( process+"%" );
    }
    
    public void setMsg( String text ){
        this.jTextArea1.append( text+"\n" );
    }
}
