/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guisanboot.ui.sdhm;

import javax.swing.*;

import mylib.UI.*;
import guisanboot.ui.InitApp;
import guisanboot.ui.SanBootView;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import java.lang.Integer;

/**
 * @author Administrator
 */
public class SDHMReportDialog extends javax.swing.JDialog {

    SanBootView view;
    BrowserTable table = new BrowserTable();
    int begin = 1;
    int end = 51;
    boolean isFirst = true;
    boolean beforeGet = true;
    boolean hasDel = false;
    private Object lock = new Object();

    /** Creates new customizer SDHMReportDialog */
    public SDHMReportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public SDHMReportDialog(SanBootView view) {
        this(view, true);
        myInit(view);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        fromLabel = new javax.swing.JLabel();
        fromYearTextField = new javax.swing.JTextField();
        fromMonthComboBox = new javax.swing.JComboBox();
        fromDayComboBox = new javax.swing.JComboBox();
        toLabel = new javax.swing.JLabel();
        toYearTextField = new javax.swing.JTextField();
        toMonthComboBox = new javax.swing.JComboBox();
        toDayComboBox = new javax.swing.JComboBox();
        generateReportButton = new javax.swing.JButton();
        yearLabel = new javax.swing.JLabel();
        monthLabel = new javax.swing.JLabel();
        dayLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        hostipLabel = new javax.swing.JLabel();
        hostListComboBox = new javax.swing.JComboBox();

        jPanel1.setLayout(new java.awt.GridBagLayout());

        fromLabel.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(fromLabel, gridBagConstraints);

        fromYearTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(fromYearTextField, gridBagConstraints);

        fromMonthComboBox.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(fromMonthComboBox, gridBagConstraints);

        fromDayComboBox.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(fromDayComboBox, gridBagConstraints);

        toLabel.setText("To :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(toLabel, gridBagConstraints);

        toYearTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(toYearTextField, gridBagConstraints);

        toMonthComboBox.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(toMonthComboBox, gridBagConstraints);

        toDayComboBox.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(toDayComboBox, gridBagConstraints);

        generateReportButton.setText("Generate Report");
        generateReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 0, 0);
        jPanel1.add(generateReportButton, gridBagConstraints);

        yearLabel.setText(" Year");
        yearLabel.setMaximumSize(new java.awt.Dimension(30, 25));
        yearLabel.setMinimumSize(new java.awt.Dimension(30, 25));
        yearLabel.setPreferredSize(new java.awt.Dimension(30, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(yearLabel, gridBagConstraints);

        monthLabel.setText("Month");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(monthLabel, gridBagConstraints);

        dayLabel.setText("Day");
        dayLabel.setMaximumSize(new java.awt.Dimension(15, 15));
        dayLabel.setMinimumSize(new java.awt.Dimension(15, 15));
        dayLabel.setPreferredSize(new java.awt.Dimension(25, 15));
        dayLabel.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(dayLabel, gridBagConstraints);

        jPanel2.setMinimumSize(new java.awt.Dimension(100, 20));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        jPanel1.add(jPanel2, gridBagConstraints);

        closeButton.setText("Close");
        closeButton.setMaximumSize(new java.awt.Dimension(75, 23));
        closeButton.setMinimumSize(new java.awt.Dimension(75, 23));
        closeButton.setPreferredSize(new java.awt.Dimension(75, 23));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        jPanel1.add(closeButton, gridBagConstraints);

        hostipLabel.setText("Host IP:");
        hostipLabel.setPreferredSize(new java.awt.Dimension(60, 15));
        hostipLabel.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(hostipLabel, gridBagConstraints);

        hostListComboBox.setPreferredSize(new java.awt.Dimension(188, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(hostListComboBox, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void generateReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportButtonActionPerformed
    try {
        int bMon = 0, eMon = 0, bDay = 0, eDay = 0, bYear, eYear;

        String _bYear = this.fromYearTextField.getText().trim();
        try {
            bYear = Integer.parseInt(_bYear);
            if (bYear < 2001 || bYear > 9999) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SDHMReportDialog.error.badBeginYear"));
                return;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMReportDialog.error.badBeginYear"));
            return;
        }

        String _eYear = this.toYearTextField.getText().trim();
        try {
            eYear = Integer.parseInt(_eYear);
            if (eYear < 2001 || eYear > 9999) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SDHMReportDialog.error.badEndYear"));
                return;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMReportDialog.error.badEndYear"));
            return;
        }

        String _bMon = (String) this.fromMonthComboBox.getSelectedItem();
        try {
            bMon = Integer.parseInt(_bMon);
        } catch (Exception ex) {
        }

        String _bDay = (String) this.fromDayComboBox.getSelectedItem();
        try {
            bDay = Integer.parseInt(_bDay);
        } catch (Exception ex) {
        }

        String _eMon = (String) this.toMonthComboBox.getSelectedItem();
        try {
            eMon = Integer.parseInt(_eMon);
        } catch (Exception ex) {
        }

        String _eDay = (String) this.toDayComboBox.getSelectedItem();
        try {
            eDay = Integer.parseInt(_eDay);
        } catch (Exception ex) {
        }

        // 检查日期是否有矛盾
        if (bYear > eYear) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMReportDialog.error.mismatched"));
            return;
        } else {
            if (bYear == eYear) {
                if (bMon > eMon) {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SDHMReportDialog.error.mismatched"));
                    return;
                } else {
                    if (bMon == eMon) {
                        if (bDay > eDay) {
                            JOptionPane.showMessageDialog(this,
                                    SanBootView.res.getString("SDHMReportDialog.error.mismatched"));
                            return;
                        }
                    }
                }
            }
        }

        if (_bMon.length() == 1) {
            _bMon = "0" + _bMon;
        }

        if (_eMon.length() == 1) {
            _eMon = "0" + _eMon;
        }

        if (_bDay.length() == 1) {
            _bDay = "0" + _bDay;
        }

        if (_eDay.length() == 1) {
            _eDay = "0" + _eDay;
        }


        Calendar c = Calendar.getInstance();
        SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss");
        String reportName = InitApp.getUserWorkDir() + File.separator + "report" + File.separator + "report_" + sdfDate.format(c.getTime()) + ".xls";
        File targetFile = new File(reportName);
        String hostip = hostListComboBox.getSelectedItem().toString();
        String starttime = _bYear + _bMon + _bDay + "000000";
        String endtime = _eYear + _eMon + _eDay + "125959";

        SDHMReportGetter geter = new SDHMReportGetter(
                view,
                this,
                hostip,
                starttime,
                endtime,
                targetFile);
        view.startupProcessDiag(
                SanBootView.res.getString("View.pdiagTitle.generateReport"),
                SanBootView.res.getString("View.pdiagTip.generateReport"),
                geter);

        if (!geter.getRetVal()) {
            if (targetFile.exists()) {
                targetFile.delete();
            }
            JOptionPane.showMessageDialog(view,
                    SanBootView.res.getString("SDHMReportDialog.error.generateReportError") + ": " +
                    geter.getErrorMsg());
            return;
        }
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMReportDialog.error.generateReportOK"));
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMReportDialog.error.generateReportError" + ex.getMessage()));
    }
}//GEN-LAST:event_generateReportButtonActionPerformed

private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
// TODO add your handling code here:
    this.dispose();
}//GEN-LAST:event_closeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JComboBox fromDayComboBox;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JComboBox fromMonthComboBox;
    private javax.swing.JTextField fromYearTextField;
    private javax.swing.JButton generateReportButton;
    private javax.swing.JComboBox hostListComboBox;
    private javax.swing.JLabel hostipLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JComboBox toDayComboBox;
    private javax.swing.JLabel toLabel;
    private javax.swing.JComboBox toMonthComboBox;
    private javax.swing.JTextField toYearTextField;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables

    private void myInit(SanBootView _view) {
        view = _view;

        SDHMReportHostListGetter geter = new SDHMReportHostListGetter(
                view,
                this);
        geter.start();
        while (!geter.isOver()) {
        }

        setupTime();
        setupDefalutTime();
        fromYearTextField.requestFocus();
//        setPermOnUser();
//        
//        jScrollPane1.getViewport().add( table,null );
//        jScrollPane1.getViewport().setBackground( Color.white );
//        table.addMouseListener( new java.awt.event.MouseAdapter() {
//            @Override public void mouseClicked(MouseEvent e) {
//                table_mouseClicked(e);
//            }
//            
//        });
//        
//        table.setSelectionMode( ListSelectionModel.MULTIPLE_INTERVAL_SELECTION );
//        
//        listener = new ListSelectionListener(){
//            public void valueChanged( ListSelectionEvent e ){
//                table_mouseClicked( null );
//            }
//        };
//        
//        jTextArea2.setFont( new Font( "MonoSpaced", 0,12 ) );
//        
//        enableButton( false );
//        clearGenandSumPane();
        setupLanguage();
//        setupTaskTable();
    }

//    private void  setPermOnUser(){
//        if( view.initor.mdb.isLoginUsrIsAdmin() ){ 
//            jButton1.setEnabled( false );
//            jButton5.setEnabled( false );
//        }
//    }
    private void setupLanguage() {
        setTitle(SanBootView.res.getString("SDHMReportDialog.borderTitle"));

        this.generateReportButton.setText(SanBootView.res.getString("SDHMReportDialog.btn.generateReport"));
        this.closeButton.setText(SanBootView.res.getString("SDHMReportDialog.btn.close"));

        this.hostipLabel.setText(SanBootView.res.getString("SDHMReportDialog.label.hostip"));
        this.yearLabel.setText(SanBootView.res.getString("SDHMReportDialog.label.year"));
        this.monthLabel.setText(SanBootView.res.getString("SDHMReportDialog.label.month"));
        this.dayLabel.setText(SanBootView.res.getString("SDHMReportDialog.label.day"));
        this.fromLabel.setText(SanBootView.res.getString("SDHMReportDialog.label.from"));
        this.toLabel.setText(SanBootView.res.getString("SDHMReportDialog.label.to"));

    }

    public void setEnable(boolean flag) {
        this.hostListComboBox.setEnabled(flag);
        this.fromYearTextField.setEnabled(flag);
        this.fromMonthComboBox.setEnabled(flag);
        this.fromDayComboBox.setEnabled(flag);
        this.toYearTextField.setEnabled(flag);
        this.toMonthComboBox.setEnabled(flag);
        this.toDayComboBox.setEnabled(flag);
        this.generateReportButton.setEnabled(flag);
        this.closeButton.setEnabled(flag);
    }

    private void setupTime() {
        String[] monthList = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"};
        String[] dayList = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"};
        Vector fromMonthList = new Vector(12);
        for (int i = 0; i < monthList.length; i++) {
            fromMonthList.addElement(monthList[i]);
        }
        fromMonthComboBox.setModel(new DefaultComboBoxModel(fromMonthList));

        Vector fromDayList = new Vector(31);
        for (int i = 0; i < dayList.length; i++) {
            fromDayList.addElement(dayList[i]);
        }
        fromDayComboBox.setModel(new DefaultComboBoxModel(fromDayList));

        Vector toMonthList = new Vector(12);
        for (int i = 0; i < monthList.length; i++) {
            toMonthList.addElement(monthList[i]);
        }
        toMonthComboBox.setModel(new DefaultComboBoxModel(toMonthList));

        Vector toDayList = new Vector(31);
        for (int i = 0; i < dayList.length; i++) {
            toDayList.addElement(dayList[i]);
        }
        toDayComboBox.setModel(new DefaultComboBoxModel(toDayList));
    }

    private void setupDefalutTime() {
        Calendar b = Calendar.getInstance();
        b.add(Calendar.MONTH, -1);
        Calendar c = Calendar.getInstance();
        SimpleDateFormat sdfYear = new SimpleDateFormat("yyyy");
        SimpleDateFormat sdfMonth = new SimpleDateFormat("MM");
        SimpleDateFormat sdfDay = new SimpleDateFormat("dd");

        fromYearTextField.setText(sdfYear.format(b.getTime()));
        fromMonthComboBox.setSelectedItem(sdfMonth.format(b.getTime()));
        fromDayComboBox.setSelectedItem(sdfDay.format(b.getTime()));

        toYearTextField.setText(sdfYear.format(c.getTime()));
        toMonthComboBox.setSelectedItem(sdfMonth.format(c.getTime()));
        toDayComboBox.setSelectedItem(sdfDay.format(c.getTime()));
    }

    public void setHostList(Vector _hostList) {
//        this.hostListComboBox.removeAll();
        hostListComboBox.setModel(new DefaultComboBoxModel(_hostList));
    }

    public void setBeforeGet(boolean val) {
        synchronized (lock) {
            beforeGet = val;
        }
    }

    public boolean getBeforeGet() {
        synchronized (lock) {
            return beforeGet;
        }
    }
}
