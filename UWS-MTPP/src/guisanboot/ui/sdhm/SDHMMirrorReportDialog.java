/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guisanboot.ui.sdhm;

import guisanboot.data.sdhm.SDHMUWSState;
import javax.swing.*;
import javax.swing.border.*;

import mylib.UI.*;
import guisanboot.ui.InitApp;
import guisanboot.ui.SanBootView;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import java.lang.Integer;
import java.math.BigDecimal;
import java.text.DecimalFormat;

/**
 * @author Administrator
 */
public class SDHMMirrorReportDialog extends javax.swing.JDialog {

    SanBootView view;
    BrowserTable table = new BrowserTable();
    int begin = 1;
    int end = 51;
    boolean isFirst = true;
    boolean beforeGet = true;
    boolean hasDel = false;
    private Object lock = new Object();
    private Vector agentList;
    private Vector mirrorUWSList;

    /** Creates new customizer SDHMMirrorReportDialog */
    public SDHMMirrorReportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public SDHMMirrorReportDialog(SanBootView view) {
        this(view, true);
        myInit(view);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        UWSStatePanel = new javax.swing.JPanel();
        CPUUsedLabel = new javax.swing.JLabel();
        MemoryUsedTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        MemoryUsedLabel = new javax.swing.JLabel();
        CPUUsedTextField = new javax.swing.JTextField();
        NetReadLabel = new javax.swing.JLabel();
        NetReadTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        NetWriteLabel = new javax.swing.JLabel();
        NetWriteTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        ButtonPanel = new javax.swing.JPanel();
        RefreshButton = new javax.swing.JButton();
        ReportButton = new javax.swing.JButton();
        CloseButton = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        DiskStatePanel = new javax.swing.JPanel();
        TotalSpaceLabel = new javax.swing.JLabel();
        FreeSpaceTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        FreeSpaceLabel = new javax.swing.JLabel();
        TotalSpaceTextField = new javax.swing.JTextField();
        LocalUsedLabel = new javax.swing.JLabel();
        LocalUsedTextField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        MirrorUsedLabel = new javax.swing.JLabel();
        MirrorUsedTextField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        DateSelectPanel = new javax.swing.JPanel();
        FromLabel = new javax.swing.JLabel();
        YearLabel = new javax.swing.JLabel();
        MonthLabel = new javax.swing.JLabel();
        DayLabel = new javax.swing.JLabel();
        FromDayComboBox = new javax.swing.JComboBox();
        FromMonthComboBox = new javax.swing.JComboBox();
        FromYearTextField = new javax.swing.JTextField();
        ToYearTextField = new javax.swing.JTextField();
        ToMonthComboBox = new javax.swing.JComboBox();
        ToDayComboBox = new javax.swing.JComboBox();
        ToLabel = new javax.swing.JLabel();
        ReportOptionPanel = new javax.swing.JPanel();
        RecoveryMonitorCheckBox = new javax.swing.JCheckBox();
        AgentMonitorCheckBox = new javax.swing.JCheckBox();
        SpaceMonitorCheckBox = new javax.swing.JCheckBox();
        ScheduleMonitorCheckBox = new javax.swing.JCheckBox();
        AgentListComboBox = new javax.swing.JComboBox();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        UWSStatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "UWS State", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        UWSStatePanel.setMinimumSize(new java.awt.Dimension(410, 200));
        UWSStatePanel.setPreferredSize(new java.awt.Dimension(410, 100));
        UWSStatePanel.setLayout(new java.awt.GridBagLayout());

        CPUUsedLabel.setText("CPU Used :");
        CPUUsedLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        CPUUsedLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        CPUUsedLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        UWSStatePanel.add(CPUUsedLabel, gridBagConstraints);

        MemoryUsedTextField.setText("55%");
        MemoryUsedTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        MemoryUsedTextField.setEnabled(false);
        MemoryUsedTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        UWSStatePanel.add(MemoryUsedTextField, gridBagConstraints);

        jLabel2.setMaximumSize(new java.awt.Dimension(50, 15));
        jLabel2.setMinimumSize(new java.awt.Dimension(50, 15));
        jLabel2.setPreferredSize(new java.awt.Dimension(30, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        UWSStatePanel.add(jLabel2, gridBagConstraints);

        MemoryUsedLabel.setText("Memory Used :");
        MemoryUsedLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        MemoryUsedLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        MemoryUsedLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        UWSStatePanel.add(MemoryUsedLabel, gridBagConstraints);

        CPUUsedTextField.setText("50%");
        CPUUsedTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        CPUUsedTextField.setEnabled(false);
        CPUUsedTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        UWSStatePanel.add(CPUUsedTextField, gridBagConstraints);

        NetReadLabel.setText("Net Read :");
        NetReadLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        NetReadLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        NetReadLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        UWSStatePanel.add(NetReadLabel, gridBagConstraints);

        NetReadTextField.setText("666 B/S");
        NetReadTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        NetReadTextField.setEnabled(false);
        NetReadTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        UWSStatePanel.add(NetReadTextField, gridBagConstraints);

        jLabel16.setMaximumSize(new java.awt.Dimension(50, 15));
        jLabel16.setMinimumSize(new java.awt.Dimension(50, 15));
        jLabel16.setPreferredSize(new java.awt.Dimension(30, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        UWSStatePanel.add(jLabel16, gridBagConstraints);

        NetWriteLabel.setText("Net Write :");
        NetWriteLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        NetWriteLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        NetWriteLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        UWSStatePanel.add(NetWriteLabel, gridBagConstraints);

        NetWriteTextField.setText("99 B/S");
        NetWriteTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        NetWriteTextField.setEnabled(false);
        NetWriteTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        UWSStatePanel.add(NetWriteTextField, gridBagConstraints);

        jLabel18.setMaximumSize(new java.awt.Dimension(50, 10));
        jLabel18.setMinimumSize(new java.awt.Dimension(50, 10));
        jLabel18.setPreferredSize(new java.awt.Dimension(30, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        UWSStatePanel.add(jLabel18, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(UWSStatePanel, gridBagConstraints);

        ButtonPanel.setMinimumSize(new java.awt.Dimension(410, 200));
        ButtonPanel.setPreferredSize(new java.awt.Dimension(410, 30));
        ButtonPanel.setLayout(new java.awt.GridBagLayout());

        RefreshButton.setText("Refresh");
        RefreshButton.setMaximumSize(new java.awt.Dimension(90, 23));
        RefreshButton.setMinimumSize(new java.awt.Dimension(90, 23));
        RefreshButton.setPreferredSize(new java.awt.Dimension(90, 23));
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        ButtonPanel.add(RefreshButton, gridBagConstraints);

        ReportButton.setText("Report");
        ReportButton.setMaximumSize(new java.awt.Dimension(90, 23));
        ReportButton.setMinimumSize(new java.awt.Dimension(90, 23));
        ReportButton.setPreferredSize(new java.awt.Dimension(90, 23));
        ReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        ButtonPanel.add(ReportButton, gridBagConstraints);

        CloseButton.setText("Close");
        CloseButton.setMaximumSize(new java.awt.Dimension(90, 23));
        CloseButton.setMinimumSize(new java.awt.Dimension(90, 23));
        CloseButton.setPreferredSize(new java.awt.Dimension(90, 23));
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        ButtonPanel.add(CloseButton, gridBagConstraints);

        jLabel31.setMaximumSize(new java.awt.Dimension(30, 15));
        jLabel31.setMinimumSize(new java.awt.Dimension(30, 15));
        jLabel31.setPreferredSize(new java.awt.Dimension(30, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        ButtonPanel.add(jLabel31, gridBagConstraints);

        jLabel32.setMaximumSize(new java.awt.Dimension(30, 15));
        jLabel32.setMinimumSize(new java.awt.Dimension(30, 15));
        jLabel32.setPreferredSize(new java.awt.Dimension(30, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        ButtonPanel.add(jLabel32, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        getContentPane().add(ButtonPanel, gridBagConstraints);

        DiskStatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Disk State", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        DiskStatePanel.setMinimumSize(new java.awt.Dimension(410, 200));
        DiskStatePanel.setPreferredSize(new java.awt.Dimension(410, 100));
        DiskStatePanel.setLayout(new java.awt.GridBagLayout());

        TotalSpaceLabel.setText("Total Space :");
        TotalSpaceLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        TotalSpaceLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        TotalSpaceLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        DiskStatePanel.add(TotalSpaceLabel, gridBagConstraints);

        FreeSpaceTextField.setText("666 GB");
        FreeSpaceTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        FreeSpaceTextField.setEnabled(false);
        FreeSpaceTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        DiskStatePanel.add(FreeSpaceTextField, gridBagConstraints);

        jLabel20.setMaximumSize(new java.awt.Dimension(50, 15));
        jLabel20.setMinimumSize(new java.awt.Dimension(50, 15));
        jLabel20.setPreferredSize(new java.awt.Dimension(30, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        DiskStatePanel.add(jLabel20, gridBagConstraints);

        FreeSpaceLabel.setText("Free Space :");
        FreeSpaceLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        FreeSpaceLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        FreeSpaceLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        DiskStatePanel.add(FreeSpaceLabel, gridBagConstraints);

        TotalSpaceTextField.setText("1000 GB");
        TotalSpaceTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TotalSpaceTextField.setEnabled(false);
        TotalSpaceTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        DiskStatePanel.add(TotalSpaceTextField, gridBagConstraints);

        LocalUsedLabel.setText("Local Used :");
        LocalUsedLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        LocalUsedLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        LocalUsedLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        DiskStatePanel.add(LocalUsedLabel, gridBagConstraints);

        LocalUsedTextField.setText("500 GB");
        LocalUsedTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        LocalUsedTextField.setEnabled(false);
        LocalUsedTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        DiskStatePanel.add(LocalUsedTextField, gridBagConstraints);

        jLabel23.setMaximumSize(new java.awt.Dimension(50, 10));
        jLabel23.setMinimumSize(new java.awt.Dimension(50, 10));
        jLabel23.setPreferredSize(new java.awt.Dimension(30, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        DiskStatePanel.add(jLabel23, gridBagConstraints);

        MirrorUsedLabel.setText("Mirror Used :");
        MirrorUsedLabel.setMaximumSize(new java.awt.Dimension(100, 15));
        MirrorUsedLabel.setMinimumSize(new java.awt.Dimension(100, 15));
        MirrorUsedLabel.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        DiskStatePanel.add(MirrorUsedLabel, gridBagConstraints);

        MirrorUsedTextField.setText("166 GB");
        MirrorUsedTextField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        MirrorUsedTextField.setEnabled(false);
        MirrorUsedTextField.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        DiskStatePanel.add(MirrorUsedTextField, gridBagConstraints);

        jLabel25.setMaximumSize(new java.awt.Dimension(50, 15));
        jLabel25.setMinimumSize(new java.awt.Dimension(50, 15));
        jLabel25.setPreferredSize(new java.awt.Dimension(30, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        DiskStatePanel.add(jLabel25, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(DiskStatePanel, gridBagConstraints);

        DateSelectPanel.setMinimumSize(new java.awt.Dimension(410, 200));
        DateSelectPanel.setPreferredSize(new java.awt.Dimension(410, 80));
        DateSelectPanel.setLayout(new java.awt.GridBagLayout());

        FromLabel.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        DateSelectPanel.add(FromLabel, gridBagConstraints);

        YearLabel.setText("Year");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        DateSelectPanel.add(YearLabel, gridBagConstraints);

        MonthLabel.setText("Month");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        DateSelectPanel.add(MonthLabel, gridBagConstraints);

        DayLabel.setText("Day");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        DateSelectPanel.add(DayLabel, gridBagConstraints);

        FromDayComboBox.setPreferredSize(new java.awt.Dimension(45, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        DateSelectPanel.add(FromDayComboBox, gridBagConstraints);

        FromMonthComboBox.setPreferredSize(new java.awt.Dimension(45, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        DateSelectPanel.add(FromMonthComboBox, gridBagConstraints);

        FromYearTextField.setPreferredSize(new java.awt.Dimension(45, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        DateSelectPanel.add(FromYearTextField, gridBagConstraints);

        ToYearTextField.setPreferredSize(new java.awt.Dimension(6, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        DateSelectPanel.add(ToYearTextField, gridBagConstraints);

        ToMonthComboBox.setPreferredSize(new java.awt.Dimension(45, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        DateSelectPanel.add(ToMonthComboBox, gridBagConstraints);

        ToDayComboBox.setPreferredSize(new java.awt.Dimension(45, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        DateSelectPanel.add(ToDayComboBox, gridBagConstraints);

        ToLabel.setText("To :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        DateSelectPanel.add(ToLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        getContentPane().add(DateSelectPanel, gridBagConstraints);

        ReportOptionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Report Option", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        ReportOptionPanel.setMinimumSize(new java.awt.Dimension(410, 200));
        ReportOptionPanel.setPreferredSize(new java.awt.Dimension(410, 150));
        ReportOptionPanel.setLayout(new java.awt.GridBagLayout());

        RecoveryMonitorCheckBox.setText("Recovery Monitor");
        RecoveryMonitorCheckBox.setMaximumSize(new java.awt.Dimension(130, 23));
        RecoveryMonitorCheckBox.setMinimumSize(new java.awt.Dimension(130, 23));
        RecoveryMonitorCheckBox.setPreferredSize(new java.awt.Dimension(130, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        ReportOptionPanel.add(RecoveryMonitorCheckBox, gridBagConstraints);

        AgentMonitorCheckBox.setText("Agent Monitor");
        AgentMonitorCheckBox.setMaximumSize(new java.awt.Dimension(130, 23));
        AgentMonitorCheckBox.setMinimumSize(new java.awt.Dimension(130, 23));
        AgentMonitorCheckBox.setPreferredSize(new java.awt.Dimension(130, 27));
        AgentMonitorCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                AgentMonitorCheckBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        ReportOptionPanel.add(AgentMonitorCheckBox, gridBagConstraints);

        SpaceMonitorCheckBox.setText("Space Monitor");
        SpaceMonitorCheckBox.setMaximumSize(new java.awt.Dimension(130, 23));
        SpaceMonitorCheckBox.setMinimumSize(new java.awt.Dimension(130, 23));
        SpaceMonitorCheckBox.setOpaque(false);
        SpaceMonitorCheckBox.setPreferredSize(new java.awt.Dimension(130, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        ReportOptionPanel.add(SpaceMonitorCheckBox, gridBagConstraints);

        ScheduleMonitorCheckBox.setText("Schedule Monitor");
        ScheduleMonitorCheckBox.setMaximumSize(new java.awt.Dimension(130, 23));
        ScheduleMonitorCheckBox.setMinimumSize(new java.awt.Dimension(130, 23));
        ScheduleMonitorCheckBox.setPreferredSize(new java.awt.Dimension(130, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        ReportOptionPanel.add(ScheduleMonitorCheckBox, gridBagConstraints);

        AgentListComboBox.setEnabled(false);
        AgentListComboBox.setMinimumSize(new java.awt.Dimension(115, 19));
        AgentListComboBox.setPreferredSize(new java.awt.Dimension(120, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        ReportOptionPanel.add(AgentListComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(ReportOptionPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
// TODO add your handling code here:
    this.dispose();
}//GEN-LAST:event_CloseButtonActionPerformed

private void ReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportButtonActionPerformed
// TODO add your handling code here:
    try {
        boolean spaceMonitorFlag = this.SpaceMonitorCheckBox.isSelected();
        boolean agentMonitorFlag = this.AgentMonitorCheckBox.isSelected();
        boolean scheduleMonitorFlag = this.ScheduleMonitorCheckBox.isSelected();
//        boolean transferMonitorFlag = this.TransferMonitorCheckBox.isSelected();
        boolean recoveryMonitorFlag = this.RecoveryMonitorCheckBox.isSelected();

        if (spaceMonitorFlag || agentMonitorFlag || scheduleMonitorFlag || recoveryMonitorFlag) {
        } else {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMMirrorReportDialog.error.noSelectOption"));
            return;
        }

        int bMon = 0, eMon = 0, bDay = 0, eDay = 0, bYear, eYear;

        String _bYear = this.FromYearTextField.getText().trim();
        try {
            bYear = Integer.parseInt(_bYear);
            if (bYear < 2001 || bYear > 9999) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SDHMMirrorReportDialog.error.badBeginYear"));
                return;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMMirrorReportDialog.error.badBeginYear"));
            return;
        }

        String _eYear = this.ToYearTextField.getText().trim();
        try {
            eYear = Integer.parseInt(_eYear);
            if (eYear < 2001 || eYear > 9999) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SDHMMirrorReportDialog.error.badEndYear"));
                return;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMMirrorReportDialog.error.badEndYear"));
            return;
        }

        String _bMon = (String) this.FromMonthComboBox.getSelectedItem();
        try {
            bMon = Integer.parseInt(_bMon);
        } catch (Exception ex) {
        }

        String _bDay = (String) this.FromDayComboBox.getSelectedItem();
        try {
            bDay = Integer.parseInt(_bDay);
        } catch (Exception ex) {
        }

        String _eMon = (String) this.ToMonthComboBox.getSelectedItem();
        try {
            eMon = Integer.parseInt(_eMon);
        } catch (Exception ex) {
        }

        String _eDay = (String) this.ToDayComboBox.getSelectedItem();
        try {
            eDay = Integer.parseInt(_eDay);
        } catch (Exception ex) {
        }

        // 检查日期是否有矛盾
        if (bYear > eYear) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMMirrorReportDialog.error.mismatched"));
            return;
        } else {
            if (bYear == eYear) {
                if (bMon > eMon) {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SDHMMirrorReportDialog.error.mismatched"));
                    return;
                } else {
                    if (bMon == eMon) {
                        if (bDay > eDay) {
                            JOptionPane.showMessageDialog(this,
                                    SanBootView.res.getString("SDHMMirrorReportDialog.error.mismatched"));
                            return;
                        }
                    }
                }
            }
        }

        if (_bMon.length() == 1) {
            _bMon = "0" + _bMon;
        }

        if (_eMon.length() == 1) {
            _eMon = "0" + _eMon;
        }

        if (_bDay.length() == 1) {
            _bDay = "0" + _bDay;
        }

        if (_eDay.length() == 1) {
            _eDay = "0" + _eDay;
        }


        SimpleDateFormat sdfDateToday = new SimpleDateFormat("yyyyMMdd");
        Date todayDate = new Date();
        Date startDate = sdfDateToday.parse(_bYear + _bMon + _bDay);
        Date endDate = sdfDateToday.parse(_eYear + _eMon + _eDay);
        if (todayDate.compareTo(startDate) < 0 || todayDate.compareTo(endDate) < 0) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMMirrorReportDialog.error.beforeToday"));
            return;
        }

        Calendar c = Calendar.getInstance();
        SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMddHHmmss");
        String reportDir = SanBootView.res.getString("SDHMMirrorReportDialog.reportDir");
        String path = InitApp.getUserWorkDir() + File.separator + reportDir;
        File dirname = new File(path);
        if (!dirname.isDirectory())
        {
             dirname.mkdir(); 
        }
        String reportName = InitApp.getUserWorkDir() + File.separator + reportDir + File.separator + "mirrorReport_" + sdfDate.format(c.getTime()) + ".xls";
        File targetFile = new File(reportName);
        String starttime = _bYear + _bMon + _bDay + "000000";
        String endtime = _eYear + _eMon + _eDay + "235959";
        String agentip = ConvertToString(this.AgentListComboBox.getSelectedItem());
//        String mirrorUWSip =  ConvertToString(this.MirrorListComboBox.getSelectedItem());

        SDHMMirrorReportGetter geter = new SDHMMirrorReportGetter(
                view,
                agentList,
                mirrorUWSList,
                spaceMonitorFlag,
                agentMonitorFlag,
                scheduleMonitorFlag,
                //                transferMonitorFlag,
                recoveryMonitorFlag,
                agentip,
                //                mirrorUWSip,
                starttime,
                endtime,
                targetFile);
        view.startupProcessDiag(
                SanBootView.res.getString("View.pdiagTitle.generateReport"),
                SanBootView.res.getString("View.pdiagTip.generateReport"),
                geter);

        if (!geter.getRetVal()) {
            if (targetFile.exists()) {
                targetFile.delete();
            }
            JOptionPane.showMessageDialog(view,
                    SanBootView.res.getString("SDHMMirrorReportDialog.error.generateReportError") + ": " +
                    geter.getErrorMsg());
            return;
        }
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMMirrorReportDialog.error.generateReportOK"));
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMMirrorReportDialog.error.generateReportError" + ex.getMessage()));
    }
}//GEN-LAST:event_ReportButtonActionPerformed

private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
// TODO add your handling code here:
    getUWSState();
}//GEN-LAST:event_RefreshButtonActionPerformed

private void AgentMonitorCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_AgentMonitorCheckBoxItemStateChanged
// TODO add your handling code here:
    Object obj = evt.getItem();
    if (obj.equals(this.AgentMonitorCheckBox)) {
        if (this.AgentMonitorCheckBox.isSelected()) {
            SDHMMonitorHostListGetter geter = new SDHMMonitorHostListGetter(
                    view,
                    this);
            view.startupProcessDiag(
                    SanBootView.res.getString("View.pdiagTitle.getSDHMHostList"),
                    SanBootView.res.getString("View.pdiagTip.getSDHMHostList"),
                    geter);
            if (!geter.getRetVal()) {
                JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("SDHMMirrorReportDialog.error.getSDHMHostListError") + ": " +
                        geter.getErrorMsg());
                return;
            }
            this.AgentListComboBox.setEnabled(true);
        } else {
            this.AgentListComboBox.removeAllItems();
            this.AgentListComboBox.setEnabled(false);
        }
    }

}//GEN-LAST:event_AgentMonitorCheckBoxItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AgentListComboBox;
    private javax.swing.JCheckBox AgentMonitorCheckBox;
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JLabel CPUUsedLabel;
    private javax.swing.JTextField CPUUsedTextField;
    private javax.swing.JButton CloseButton;
    private javax.swing.JPanel DateSelectPanel;
    private javax.swing.JLabel DayLabel;
    private javax.swing.JPanel DiskStatePanel;
    private javax.swing.JLabel FreeSpaceLabel;
    private javax.swing.JTextField FreeSpaceTextField;
    private javax.swing.JComboBox FromDayComboBox;
    private javax.swing.JLabel FromLabel;
    private javax.swing.JComboBox FromMonthComboBox;
    private javax.swing.JTextField FromYearTextField;
    private javax.swing.JLabel LocalUsedLabel;
    private javax.swing.JTextField LocalUsedTextField;
    private javax.swing.JLabel MemoryUsedLabel;
    private javax.swing.JTextField MemoryUsedTextField;
    private javax.swing.JLabel MirrorUsedLabel;
    private javax.swing.JTextField MirrorUsedTextField;
    private javax.swing.JLabel MonthLabel;
    private javax.swing.JLabel NetReadLabel;
    private javax.swing.JTextField NetReadTextField;
    private javax.swing.JLabel NetWriteLabel;
    private javax.swing.JTextField NetWriteTextField;
    private javax.swing.JCheckBox RecoveryMonitorCheckBox;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton ReportButton;
    private javax.swing.JPanel ReportOptionPanel;
    private javax.swing.JCheckBox ScheduleMonitorCheckBox;
    private javax.swing.JCheckBox SpaceMonitorCheckBox;
    private javax.swing.JComboBox ToDayComboBox;
    private javax.swing.JLabel ToLabel;
    private javax.swing.JComboBox ToMonthComboBox;
    private javax.swing.JTextField ToYearTextField;
    private javax.swing.JLabel TotalSpaceLabel;
    private javax.swing.JTextField TotalSpaceTextField;
    private javax.swing.JPanel UWSStatePanel;
    private javax.swing.JLabel YearLabel;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    // End of variables declaration//GEN-END:variables

    private void myInit(SanBootView _view) {
        view = _view;

        setupTime();
        setupDefalutTime();
//         fromYearTextField.requestFocus();
//
        setupLanguage();
        setDisable();
        getUWSState();
    }

    private void setupLanguage() {
        setTitle(SanBootView.res.getString("SDHMMirrorReportDialog.borderTitle"));
        ((TitledBorder) this.DiskStatePanel.getBorder()).setTitle(
                SanBootView.res.getString("SDHMMirrorReportDialog.borderTitle.diskState"));
        ((TitledBorder) this.UWSStatePanel.getBorder()).setTitle(
                SanBootView.res.getString("SDHMMirrorReportDialog.borderTitle.UWSState"));
        ((TitledBorder) this.ReportOptionPanel.getBorder()).setTitle(
                SanBootView.res.getString("SDHMMirrorReportDialog.borderTitle.reportOption"));
        this.RefreshButton.setText(SanBootView.res.getString("SDHMMirrorReportDialog.btn.refresh"));
        this.ReportButton.setText(SanBootView.res.getString("SDHMMirrorReportDialog.btn.report"));
        this.CloseButton.setText(SanBootView.res.getString("SDHMMirrorReportDialog.btn.close"));

        this.TotalSpaceLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.totalSpace"));
        this.FreeSpaceLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.freeSpace"));
        this.LocalUsedLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.localUsed"));
        this.MirrorUsedLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.mirrorUsed"));
        this.CPUUsedLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.cpuUsed"));
        this.MemoryUsedLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.memoryUsed"));
//        this.DiskReadLabel.setText( SanBootView.res.getString("SDHMMirrorReportDialog.label.diskRead"));
//        this.DiskWriteLabel.setText( SanBootView.res.getString("SDHMMirrorReportDialog.label.diskWrite") );
        this.NetReadLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.netRead"));
        this.NetWriteLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.netWrite"));
        this.SpaceMonitorCheckBox.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.spaceMonitor"));
        this.AgentMonitorCheckBox.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.agentMonitor"));
        this.ScheduleMonitorCheckBox.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.scheduleMonitor"));
//        this.TransferMonitorCheckBox.setText( SanBootView.res.getString("SDHMMirrorReportDialog.label.transferMonitor"));
        this.RecoveryMonitorCheckBox.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.recoveryMonitor"));
        this.YearLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.year"));
        this.MonthLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.month"));
        this.DayLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.day"));
        this.FromLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.from"));
        this.ToLabel.setText(SanBootView.res.getString("SDHMMirrorReportDialog.label.to"));

    }

    public void setDisable() {
        this.RecoveryMonitorCheckBox.setEnabled(false);
    }

    private void setupTime() {
        String[] monthList = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"};
        String[] dayList = {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"};
        Vector fromMonthList = new Vector(12);
        for (int i = 0; i < monthList.length; i++) {
            fromMonthList.addElement(monthList[i]);
        }
        this.FromMonthComboBox.setModel(new DefaultComboBoxModel(fromMonthList));

        Vector fromDayList = new Vector(31);
        for (int i = 0; i < dayList.length; i++) {
            fromDayList.addElement(dayList[i]);
        }
        this.FromDayComboBox.setModel(new DefaultComboBoxModel(fromDayList));

        Vector toMonthList = new Vector(12);
        for (int i = 0; i < monthList.length; i++) {
            toMonthList.addElement(monthList[i]);
        }
        this.ToMonthComboBox.setModel(new DefaultComboBoxModel(toMonthList));

        Vector toDayList = new Vector(31);
        for (int i = 0; i < dayList.length; i++) {
            toDayList.addElement(dayList[i]);
        }
        this.ToDayComboBox.setModel(new DefaultComboBoxModel(toDayList));
    }

    private void setupDefalutTime() {
        Calendar b = Calendar.getInstance();
        b.add(Calendar.MONTH, -1);
        Calendar c = Calendar.getInstance();
        SimpleDateFormat sdfYear = new SimpleDateFormat("yyyy");
        SimpleDateFormat sdfMonth = new SimpleDateFormat("MM");
        SimpleDateFormat sdfDay = new SimpleDateFormat("dd");

        this.FromYearTextField.setText(sdfYear.format(b.getTime()));
        this.FromMonthComboBox.setSelectedItem(sdfMonth.format(b.getTime()));
        this.FromDayComboBox.setSelectedItem(sdfDay.format(b.getTime()));

        this.ToYearTextField.setText(sdfYear.format(c.getTime()));
        this.ToMonthComboBox.setSelectedItem(sdfMonth.format(c.getTime()));
        this.ToDayComboBox.setSelectedItem(sdfDay.format(c.getTime()));
    }

    private void getUWSState() {
        SDHMUWSStateGetter geter = new SDHMUWSStateGetter(
                view,
                this);
        view.startupProcessDiag(
                SanBootView.res.getString("View.pdiagTitle.getSDHMUWSInfo"),
                SanBootView.res.getString("View.pdiagTip.getSDHMUWSInfo"),
                geter);
        if (!geter.getRetVal()) {
            JOptionPane.showMessageDialog(view,
                    SanBootView.res.getString("SDHMMirrorReportDialog.error.getSDHMUWSInfoError") + ": " +
                    geter.getErrorMsg());
            return;
        }
    }

    public void setAgentHostList(Vector _hostList) {
        agentList = _hostList;
        Vector tempList = (Vector) _hostList.clone();
        tempList.add(0, SanBootView.res.getString("SDHMMirrorReportDialog.text.all"));
        this.AgentListComboBox.removeAllItems();
        this.AgentListComboBox.setModel(new DefaultComboBoxModel(tempList));
    }

//    public void setMirrorUWSHostList(Vector _hostList){
//        mirrorUWSList = _hostList;
//        Vector tempList = (Vector)_hostList.clone();
//        tempList.add(0, SanBootView.res.getString("SDHMMirrorReportDialog.text.all"));
//        this.MirrorListComboBox.removeAllItems();
//        this.MirrorListComboBox.setModel( new DefaultComboBoxModel( tempList ) );
//    }
    public void setUWSState(SDHMUWSState _sdhmUWSState) {
        BigDecimal byteToKB = new BigDecimal(1024);
        BigDecimal byteToGB = new BigDecimal(1024 * 1024 * 1024);
        DecimalFormat df = new DecimalFormat("0");
        String alldisk = df.format(_sdhmUWSState.getAllDisk().divide(byteToGB)) + " GB";
        String freedisk = df.format(_sdhmUWSState.getFreeDisk().divide(byteToGB)) + " GB";
        String visualdisk = df.format(_sdhmUWSState.getVisualDisk().divide(byteToGB)) + " GB";
        String useddisk = df.format(_sdhmUWSState.getUsedDisk().divide(byteToGB)) + " GB";
        String localdisk = df.format(_sdhmUWSState.getLocalDisk().divide(byteToGB)) + " GB";
        String mirrordisk = df.format(_sdhmUWSState.getMirrorDisk().divide(byteToGB)) + " GB";
        String memoryused = df.format(_sdhmUWSState.getMemoryUsed()) + " %";
        String cpuused = df.format(_sdhmUWSState.getCpuUsed()) + " %";
        String receive = df.format(_sdhmUWSState.getNetReceive().divide(byteToKB)) + " kb/s";
        String send = df.format(_sdhmUWSState.getNetSend().divide(byteToKB)) + " kb/s";

        this.TotalSpaceTextField.setText(alldisk);
        this.FreeSpaceTextField.setText(freedisk);
        this.LocalUsedTextField.setText(localdisk);
        this.MirrorUsedTextField.setText(mirrordisk);
        this.MemoryUsedTextField.setText(memoryused);
        this.CPUUsedTextField.setText(cpuused);
        this.NetReadTextField.setText(receive);
        this.NetWriteTextField.setText(send);
    }

    public void setBeforeGet(boolean val) {
        synchronized (lock) {
            beforeGet = val;
        }
    }

    public boolean getBeforeGet() {
        synchronized (lock) {
            return beforeGet;
        }
    }

    public String ConvertToString(Object s) {
        String result = "";
        if (s != null) {
            try {
                result = s.toString();
            } catch (Exception ex) {
            }
        }
        return result;
    }
}
