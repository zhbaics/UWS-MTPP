/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guisanboot.ui.sdhm;

import guisanboot.data.sdhm.SDHMConfig;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.border.*;

import mylib.UI.*;
import guisanboot.ui.SanBootView;
import java.util.Vector;

/**
 * @author Administrator
 */
public class SDHMSetDialog extends javax.swing.JDialog {

    SanBootView view;
    BrowserTable table = new BrowserTable();
    int begin = 1;
    int end = 51;
    boolean isFirst = true;
    boolean beforeGet = true;
    boolean hasDel = false;
    private Object lock = new Object();
    private SDHMConfig sdhmConfig;
    // 表选择listener,但是要注意add和remove，否则gui上有问题
    ListSelectionListener listener;

    /** Creates new customizer SDHMSetDialog */
    public SDHMSetDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public SDHMSetDialog(SanBootView view) {
        this(view, true);
        myInit(view);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        applyButton = new javax.swing.JButton();
        hostListPanel = new javax.swing.JPanel();
        hostListComboBox = new javax.swing.JComboBox();
        ipaddressLabel = new javax.swing.JLabel();
        monitorCheckBox = new javax.swing.JCheckBox();
        servicePanel = new javax.swing.JPanel();
        availableServicesScrollPane = new javax.swing.JScrollPane();
        availableServicesList = new javax.swing.JList();
        monitoringServicesScrollPane = new javax.swing.JScrollPane();
        monitoringServicesList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        thresholdPanel = new javax.swing.JPanel();
        memoryLabel = new javax.swing.JLabel();
        netIOTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        netioLabel = new javax.swing.JLabel();
        memoryTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        cpuLabel = new javax.swing.JLabel();
        cpuTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        diskIOTextField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        diskLabel = new javax.swing.JLabel();
        diskTextField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        diskioLabel = new javax.swing.JLabel();
        intervalPanel = new javax.swing.JPanel();
        intervalLabel = new javax.swing.JLabel();
        intervalTextField = new javax.swing.JTextField();
        minsLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();

        setTitle("SDHMSetDialog");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        applyButton.setText("Apply");
        applyButton.setMaximumSize(new java.awt.Dimension(80, 40));
        applyButton.setMinimumSize(new java.awt.Dimension(80, 40));
        applyButton.setPreferredSize(new java.awt.Dimension(81, 23));
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        getContentPane().add(applyButton, gridBagConstraints);

        hostListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Host List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        hostListPanel.setMinimumSize(new java.awt.Dimension(410, 50));
        hostListPanel.setPreferredSize(new java.awt.Dimension(410, 50));
        hostListPanel.setRequestFocusEnabled(false);
        hostListPanel.setLayout(new java.awt.GridBagLayout());

        hostListComboBox.setMinimumSize(new java.awt.Dimension(175, 19));
        hostListComboBox.setOpaque(false);
        hostListComboBox.setPreferredSize(new java.awt.Dimension(175, 20));
        hostListComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hostListComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        hostListPanel.add(hostListComboBox, gridBagConstraints);

        ipaddressLabel.setText("IP Address:");
        ipaddressLabel.setMaximumSize(new java.awt.Dimension(90, 20));
        ipaddressLabel.setMinimumSize(new java.awt.Dimension(90, 20));
        ipaddressLabel.setPreferredSize(new java.awt.Dimension(90, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        hostListPanel.add(ipaddressLabel, gridBagConstraints);

        monitorCheckBox.setText("monitor");
        monitorCheckBox.setMaximumSize(new java.awt.Dimension(80, 23));
        monitorCheckBox.setMinimumSize(new java.awt.Dimension(80, 23));
        monitorCheckBox.setPreferredSize(new java.awt.Dimension(80, 23));
        monitorCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monitorCheckBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        hostListPanel.add(monitorCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        getContentPane().add(hostListPanel, gridBagConstraints);

        servicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Monitoring Services", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        servicePanel.setMinimumSize(new java.awt.Dimension(410, 200));
        servicePanel.setPreferredSize(new java.awt.Dimension(410, 200));
        servicePanel.setLayout(new java.awt.GridBagLayout());

        availableServicesScrollPane.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Available Services:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        availableServicesScrollPane.setMinimumSize(new java.awt.Dimension(150, 150));
        availableServicesScrollPane.setOpaque(false);
        availableServicesScrollPane.setPreferredSize(new java.awt.Dimension(150, 200));
        availableServicesScrollPane.setRequestFocusEnabled(false);

        availableServicesList.setEnabled(false);
        availableServicesList.setMaximumSize(new java.awt.Dimension(32767, 32767));
        availableServicesList.setMinimumSize(new java.awt.Dimension(80, 85));
        availableServicesList.setRequestFocusEnabled(false);
        availableServicesScrollPane.setViewportView(availableServicesList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        servicePanel.add(availableServicesScrollPane, gridBagConstraints);

        monitoringServicesScrollPane.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(null, "Monitoring Services:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        monitoringServicesScrollPane.setMinimumSize(new java.awt.Dimension(150, 150));
        monitoringServicesScrollPane.setPreferredSize(new java.awt.Dimension(150, 200));

        monitoringServicesList.setEnabled(false);
        monitoringServicesList.setMaximumSize(new java.awt.Dimension(32767, 32767));
        monitoringServicesList.setMinimumSize(new java.awt.Dimension(80, 85));
        monitoringServicesList.setRequestFocusEnabled(false);
        monitoringServicesScrollPane.setViewportView(monitoringServicesList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        servicePanel.add(monitoringServicesScrollPane, gridBagConstraints);

        jLabel2.setText("       ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        servicePanel.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        getContentPane().add(servicePanel, gridBagConstraints);

        jPanel4.setMinimumSize(new java.awt.Dimension(38, 100));
        jPanel4.setPreferredSize(new java.awt.Dimension(38, 100));
        jPanel4.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        getContentPane().add(jPanel4, gridBagConstraints);

        thresholdPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Threshold Notification", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        thresholdPanel.setMinimumSize(new java.awt.Dimension(410, 90));
        thresholdPanel.setPreferredSize(new java.awt.Dimension(410, 90));
        thresholdPanel.setLayout(new java.awt.GridBagLayout());

        memoryLabel.setText("Memory:");
        memoryLabel.setMaximumSize(new java.awt.Dimension(60, 20));
        memoryLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        memoryLabel.setOpaque(true);
        memoryLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        thresholdPanel.add(memoryLabel, gridBagConstraints);

        netIOTextField.setMinimumSize(new java.awt.Dimension(50, 20));
        netIOTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        thresholdPanel.add(netIOTextField, gridBagConstraints);

        jLabel16.setText(" B/S");
        jLabel16.setMaximumSize(new java.awt.Dimension(25, 20));
        jLabel16.setMinimumSize(new java.awt.Dimension(25, 20));
        jLabel16.setPreferredSize(new java.awt.Dimension(25, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        thresholdPanel.add(jLabel16, gridBagConstraints);

        netioLabel.setText("Net I/O:");
        netioLabel.setMaximumSize(new java.awt.Dimension(60, 20));
        netioLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        netioLabel.setOpaque(true);
        netioLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        thresholdPanel.add(netioLabel, gridBagConstraints);

        memoryTextField.setMinimumSize(new java.awt.Dimension(50, 20));
        memoryTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        thresholdPanel.add(memoryTextField, gridBagConstraints);

        jLabel18.setText(" %");
        jLabel18.setMaximumSize(new java.awt.Dimension(20, 20));
        jLabel18.setMinimumSize(new java.awt.Dimension(20, 20));
        jLabel18.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        thresholdPanel.add(jLabel18, gridBagConstraints);

        cpuLabel.setText("CPU:");
        cpuLabel.setMaximumSize(new java.awt.Dimension(60, 20));
        cpuLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        cpuLabel.setOpaque(true);
        cpuLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        thresholdPanel.add(cpuLabel, gridBagConstraints);

        cpuTextField.setMinimumSize(new java.awt.Dimension(50, 20));
        cpuTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        thresholdPanel.add(cpuTextField, gridBagConstraints);

        jLabel20.setText(" %");
        jLabel20.setMaximumSize(new java.awt.Dimension(20, 20));
        jLabel20.setMinimumSize(new java.awt.Dimension(20, 20));
        jLabel20.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        thresholdPanel.add(jLabel20, gridBagConstraints);

        diskIOTextField.setMinimumSize(new java.awt.Dimension(50, 20));
        diskIOTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        thresholdPanel.add(diskIOTextField, gridBagConstraints);

        jLabel21.setText(" B/S");
        jLabel21.setMaximumSize(new java.awt.Dimension(25, 20));
        jLabel21.setMinimumSize(new java.awt.Dimension(25, 20));
        jLabel21.setPreferredSize(new java.awt.Dimension(25, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        thresholdPanel.add(jLabel21, gridBagConstraints);

        diskLabel.setText("Disk:");
        diskLabel.setMaximumSize(new java.awt.Dimension(60, 20));
        diskLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        diskLabel.setOpaque(true);
        diskLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        thresholdPanel.add(diskLabel, gridBagConstraints);

        diskTextField.setMinimumSize(new java.awt.Dimension(50, 20));
        diskTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        thresholdPanel.add(diskTextField, gridBagConstraints);

        jLabel23.setText(" %");
        jLabel23.setMaximumSize(new java.awt.Dimension(20, 20));
        jLabel23.setMinimumSize(new java.awt.Dimension(20, 20));
        jLabel23.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        thresholdPanel.add(jLabel23, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 10;
        thresholdPanel.add(jPanel3, gridBagConstraints);

        diskioLabel.setText("Disk I/O:");
        diskioLabel.setMaximumSize(new java.awt.Dimension(60, 20));
        diskioLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        diskioLabel.setOpaque(true);
        diskioLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        thresholdPanel.add(diskioLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        getContentPane().add(thresholdPanel, gridBagConstraints);

        intervalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Monitoring Interval", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        intervalPanel.setMinimumSize(new java.awt.Dimension(410, 50));
        intervalPanel.setPreferredSize(new java.awt.Dimension(410, 50));
        intervalPanel.setLayout(new java.awt.GridBagLayout());

        intervalLabel.setText("Interval:");
        intervalLabel.setMaximumSize(new java.awt.Dimension(60, 20));
        intervalLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        intervalLabel.setOpaque(true);
        intervalLabel.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        intervalPanel.add(intervalLabel, gridBagConstraints);

        intervalTextField.setMinimumSize(new java.awt.Dimension(50, 20));
        intervalTextField.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        intervalPanel.add(intervalTextField, gridBagConstraints);

        minsLabel.setText(" mins");
        minsLabel.setMaximumSize(new java.awt.Dimension(280, 20));
        minsLabel.setMinimumSize(new java.awt.Dimension(280, 20));
        minsLabel.setPreferredSize(new java.awt.Dimension(280, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        intervalPanel.add(minsLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        getContentPane().add(intervalPanel, gridBagConstraints);

        jLabel3.setText("    ");
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        getContentPane().add(jLabel3, gridBagConstraints);

        closeButton.setText("Close");
        closeButton.setMaximumSize(new java.awt.Dimension(80, 40));
        closeButton.setMinimumSize(new java.awt.Dimension(80, 40));
        closeButton.setPreferredSize(new java.awt.Dimension(81, 23));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        getContentPane().add(closeButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
// TODO add your handling code here:
    this.dispose();
}//GEN-LAST:event_closeButtonActionPerformed

private void hostListComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hostListComboBoxItemStateChanged
// TODO add your handling code here:
//    String selectItem = this.hostListComboBox.getSelectedItem().toString();
    SDHMConfigGetter geter = new SDHMConfigGetter(
            view,
            this,
            hostListComboBox.getSelectedItem().toString());
    view.startupProcessDiag(
            SanBootView.res.getString("View.pdiagTitle.getSDHMInfo"),
            SanBootView.res.getString("View.pdiagTip.getSDHMInfo"),
            geter);
    if (!geter.getRetVal()) {
        JOptionPane.showMessageDialog(view,
                SanBootView.res.getString("SDHMReportDialog.error.getSDHMInfoError") + ": " +
                geter.getErrorMsg());
        return;
    }
//    JOptionPane.showMessageDialog(this,
//        SanBootView.res.getString("SDHMReportDialog.error.getSDHMInfoOK")
//    );
    cpuTextField.requestFocus();
}//GEN-LAST:event_hostListComboBoxItemStateChanged

private void monitorCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monitorCheckBoxItemStateChanged
// TODO add your handling code here:
    Object obj = evt.getItem();
    if (obj.equals(this.monitorCheckBox)) {
        if (this.monitorCheckBox.isSelected()) {
            this.cpuTextField.setEnabled(true);
            this.diskTextField.setEnabled(true);
            this.diskIOTextField.setEnabled(true);
            this.memoryTextField.setEnabled(true);
            this.netIOTextField.setEnabled(true);
            this.intervalTextField.setEnabled(true);
        } else {
            this.cpuTextField.setEnabled(false);
            this.diskTextField.setEnabled(false);
            this.diskIOTextField.setEnabled(false);
            this.memoryTextField.setEnabled(false);
            this.netIOTextField.setEnabled(false);
            this.intervalTextField.setEnabled(false);
        }
    }
}//GEN-LAST:event_monitorCheckBoxItemStateChanged

private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
// TODO add your handling code here:
    int cpu, disk, diskio, memory, netio, interval;

    String _cpu = this.cpuTextField.getText().trim();
    try {
        cpu = Integer.parseInt(_cpu);
        if (cpu < 0 || cpu > 100) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMSetDialog.error.badPercentValue"));
            return;
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMSetDialog.error.badPercentValue"));
        return;
    }

    String _disk = this.diskTextField.getText().trim();
    try {
        disk = Integer.parseInt(_disk);
        if (disk < 0 || disk > 100) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMSetDialog.error.badPercentValue"));
            return;
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMSetDialog.error.badPercentValue"));
        return;
    }


    String _diskio = this.diskIOTextField.getText().trim();
    try {
        diskio = Integer.parseInt(_diskio);
        if (diskio < 0) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMSetDialog.error.badValue"));
            return;
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMSetDialog.error.badValue"));
        return;
    }

    String _memory = this.memoryTextField.getText().trim();
    try {
        memory = Integer.parseInt(_memory);
        if (memory < 0 || disk > 100) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMSetDialog.error.badPercentValue"));
            return;
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMSetDialog.error.badPercentValue"));
        return;
    }

    String _netio = this.netIOTextField.getText().trim();
    try {
        netio = Integer.parseInt(_netio);
        if (netio < 0) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMSetDialog.error.badValue"));
            return;
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMSetDialog.error.badValue"));
        return;
    }

    String _interval = this.intervalTextField.getText().trim();
    try {
        interval = Integer.parseInt(_interval);
        if (interval < 0) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SDHMSetDialog.error.badValue"));
            return;
        }
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SDHMSetDialog.error.badValue"));
        return;
    }

    sdhmConfig = new SDHMConfig();
    sdhmConfig.setHostip(hostListComboBox.getSelectedItem().toString());
    if (this.monitorCheckBox.isSelected()) {
        sdhmConfig.setMonitorUWS("yes");
    } else {
        sdhmConfig.setMonitorUWS("no");
    }

    sdhmConfig.setThrcpu(String.valueOf(cpu));
    sdhmConfig.setThrdisk(String.valueOf(disk));
    sdhmConfig.setThrdiskio(String.valueOf(diskio));
    sdhmConfig.setThrmemory(String.valueOf(memory));
    sdhmConfig.setThrnetio(String.valueOf(netio));
    sdhmConfig.setInterval(String.valueOf(interval));

    if (this.getSDHMConfig() == null) {
        return;
    }

    SDHMConfigSetter seter = new SDHMConfigSetter(
            view,
            this,
            this.getSDHMConfig());
    view.startupProcessDiag(
            SanBootView.res.getString("View.pdiagTitle.setSDHMInfo"),
            SanBootView.res.getString("View.pdiagTip.setSDHMInfo"),
            seter);

    if (!seter.getRetVal()) {
        JOptionPane.showMessageDialog(view,
                SanBootView.res.getString("SDHMSetDialog.error.setSDHMInfoError") + ": " +
                seter.getErrorMsg());
        return;
    }
    JOptionPane.showMessageDialog(this,
            SanBootView.res.getString("SDHMSetDialog.error.setSDHMInfoOK"));

}//GEN-LAST:event_applyButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JList availableServicesList;
    private javax.swing.JScrollPane availableServicesScrollPane;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel cpuLabel;
    private javax.swing.JTextField cpuTextField;
    private javax.swing.JTextField diskIOTextField;
    private javax.swing.JLabel diskLabel;
    private javax.swing.JTextField diskTextField;
    private javax.swing.JLabel diskioLabel;
    private javax.swing.JComboBox hostListComboBox;
    private javax.swing.JPanel hostListPanel;
    private javax.swing.JLabel intervalLabel;
    private javax.swing.JPanel intervalPanel;
    private javax.swing.JTextField intervalTextField;
    private javax.swing.JLabel ipaddressLabel;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel memoryLabel;
    private javax.swing.JTextField memoryTextField;
    private javax.swing.JLabel minsLabel;
    private javax.swing.JCheckBox monitorCheckBox;
    private javax.swing.JList monitoringServicesList;
    private javax.swing.JScrollPane monitoringServicesScrollPane;
    private javax.swing.JTextField netIOTextField;
    private javax.swing.JLabel netioLabel;
    private javax.swing.JPanel servicePanel;
    private javax.swing.JPanel thresholdPanel;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel model1 = null;
    private DefaultListModel model2 = null;

    private void myInit(SanBootView _view) {
        view = _view;
        SDHMReportHostListGetter geter = new SDHMReportHostListGetter(
                view,
                this);
        view.startupProcessDiag(
                SanBootView.res.getString("View.pdiagTitle.getSDHMHostList"),
                SanBootView.res.getString("View.pdiagTip.getSDHMHostList"),
                geter);
        if (!geter.getRetVal()) {
            JOptionPane.showMessageDialog(view,
                    SanBootView.res.getString("SDHMReportDialog.error.getSDHMHostListError") + ": " +
                    geter.getErrorMsg());
            return;
        }

        int count = hostListComboBox.getItemCount();
        if (count > 0) {
            SDHMConfigGetter geter1 = new SDHMConfigGetter(
                    view,
                    this,
                    hostListComboBox.getItemAt(0).toString());
            view.startupProcessDiag(
                    SanBootView.res.getString("View.pdiagTitle.getSDHMInfo"),
                    SanBootView.res.getString("View.pdiagTip.getSDHMInfo"),
                    geter1);
            if (!geter1.getRetVal()) {
                JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("SDHMReportDialog.error.getSDHMInfoError") + ": " +
                        geter.getErrorMsg());
                return;
            }
//            cpuTextField.requestFocus();        
        } else {
            this.cpuTextField.setText("");
            this.diskIOTextField.setText("");
            this.diskTextField.setText("");
            this.memoryTextField.setText("");
            this.netIOTextField.setText("");
            this.intervalTextField.setText("");
        }

        if (this.monitorCheckBox.isSelected()) {
            this.cpuTextField.setEnabled(true);
            this.diskTextField.setEnabled(true);
            this.diskIOTextField.setEnabled(true);
            this.memoryTextField.setEnabled(true);
            this.netIOTextField.setEnabled(true);
            this.intervalTextField.setEnabled(true);
        } else {
            this.cpuTextField.setEnabled(false);
            this.diskTextField.setEnabled(false);
            this.diskIOTextField.setEnabled(false);
            this.memoryTextField.setEnabled(false);
            this.netIOTextField.setEnabled(false);
            this.intervalTextField.setEnabled(false);
        }

//        String[] s = {"美国","加拿大","法国","日本","中国","澳洲","德国","意大利","其他"};
//        model1 = new DefaultListModel();
//        for(int i=0; i < s.length; i++){
//            model1.addElement(s[i]);
//        }
//        availableServicesList.setModel(model1);
//        
//        model2 = new DefaultListModel();
//        monitoringServicesList.setModel(model2);
//
//        MouseListener mouseListener = new MouseAdapter(){
//            public void mouseClicked(MouseEvent e){
//                mouseClick(e);
//            }
//         };
//        availableServicesList.addMouseListener(mouseListener);
//        monitoringServicesList.addMouseListener(mouseListener);


//        availableServicesScrollPane.getViewport().add( table,null );
//        availableServicesScrollPane.getViewport().setBackground( Color.white );
//        table.addMouseListener( new java.awt.event.MouseAdapter() {
//            @Override public void mouseClicked(MouseEvent e) {
//                table_mouseClicked(e);
//            }
//            
//        });
//        
//        table.setSelectionMode( ListSelectionModel.MULTIPLE_INTERVAL_SELECTION );
//        
//        listener = new ListSelectionListener(){
//            public void valueChanged( ListSelectionEvent e ){
//                table_mouseClicked( null );
//            }
//        };
//        
//        jTextArea2.setFont( new Font( "MonoSpaced", 0,12 ) );
//        
//        enableButton( false );
//        clearGenandSumPane();
        setupLanguage();
//        setupTaskTable();
    }

    private void setupLanguage() {
        setTitle(SanBootView.res.getString("SDHMSetDialog.borderTitle"));
        ((TitledBorder) this.hostListPanel.getBorder()).setTitle(
                SanBootView.res.getString("SDHMSetDialog.borderTitle.hostList"));
        ((TitledBorder) this.thresholdPanel.getBorder()).setTitle(
                SanBootView.res.getString("SDHMSetDialog.borderTitle.threshold"));
        ((TitledBorder) this.intervalPanel.getBorder()).setTitle(
                SanBootView.res.getString("SDHMSetDialog.borderTitle.interval"));
        ((TitledBorder) this.servicePanel.getBorder()).setTitle(
                SanBootView.res.getString("SDHMSetDialog.borderTitle.service"));
        ((TitledBorder) this.availableServicesScrollPane.getViewportBorder()).setTitle(
                SanBootView.res.getString("SDHMSetDialog.borderTitle.availableServices"));
        ((TitledBorder) this.monitoringServicesScrollPane.getViewportBorder()).setTitle(
                SanBootView.res.getString("SDHMSetDialog.borderTitle.monitoringServices"));
        this.applyButton.setText(SanBootView.res.getString("SDHMSetDialog.btn.apply"));
        this.closeButton.setText(SanBootView.res.getString("SDHMSetDialog.btn.close"));

        this.ipaddressLabel.setText(SanBootView.res.getString("SDHMSetDialog.label.ipaddress"));
        this.monitorCheckBox.setText(SanBootView.res.getString("SDHMSetDialog.label.monitor"));
        this.cpuLabel.setText(SanBootView.res.getString("SDHMSetDialog.label.cpu"));
        this.diskLabel.setText(SanBootView.res.getString("SDHMSetDialog.label.disk"));
        this.diskioLabel.setText(SanBootView.res.getString("SDHMSetDialog.label.diskio"));
        this.memoryLabel.setText(SanBootView.res.getString("SDHMSetDialog.label.memory"));
        this.netioLabel.setText(SanBootView.res.getString("SDHMSetDialog.label.netio"));
        this.intervalLabel.setText(SanBootView.res.getString("SDHMSetDialog.label.interval"));
        this.minsLabel.setText(SanBootView.res.getString("SDHMSetDialog.label.mins"));

    }

    public void mouseClick(MouseEvent e) {
        int index;

        if (e.getSource() == availableServicesList) {
            if (e.getClickCount() == 2) {
                index = availableServicesList.locationToIndex(e.getPoint());
                String tmp = (String) model1.getElementAt(index);
                model2.addElement(tmp);
                monitoringServicesList.setModel(model2);
                model1.removeElementAt(index);
                availableServicesList.setModel(model1);
            }
        }
        if (e.getSource() == monitoringServicesList) {
            if (e.getClickCount() == 2) {
                index = monitoringServicesList.locationToIndex(e.getPoint());
                String tmp = (String) model2.getElementAt(index);
                model1.addElement(tmp);
                availableServicesList.setModel(model1);
                model2.removeElementAt(index);
                monitoringServicesList.setModel(model2);
            }
        }

    }

    public void setHostList(Vector _hostList) {
//        this.hostListComboBox.removeAll();
        hostListComboBox.setModel(new DefaultComboBoxModel(_hostList));
    }

    public void setConfig(SDHMConfig _sdhmconfig) {
        if ("yes".equals(_sdhmconfig.getMonitorUWS())) {
            this.monitorCheckBox.setSelected(true);
        } else {
            this.monitorCheckBox.setSelected(false);
        }
        this.cpuTextField.setText(_sdhmconfig.getThrcpu());
        this.diskIOTextField.setText(_sdhmconfig.getThrdiskio());
        this.diskTextField.setText(_sdhmconfig.getThrdisk());
        this.memoryTextField.setText(_sdhmconfig.getThrmemory());
        this.netIOTextField.setText(_sdhmconfig.getThrnetio());
        this.intervalTextField.setText(_sdhmconfig.getInterval());
    }

    public void setBeforeGet(boolean val) {
        synchronized (lock) {
            beforeGet = val;
        }
    }

    public boolean getBeforeGet() {
        synchronized (lock) {
            return beforeGet;
        }
    }

    public SDHMConfig getSDHMConfig() {
        return sdhmConfig;
    }
}
