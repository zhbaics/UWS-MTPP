/*
 * SelectSnapshotPane.java
 *
 * Created on 2006/12/29,��AM�9:52
 */

package guisanboot.ui;

import guisanboot.cluster.entity.Cluster;
import guisanboot.cmdp.ui.multiRenderTable.MyDefaultCellEditor;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;

import guisanboot.data.*;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.multiRenderTable.*;
import guisanboot.unlimitedIncMj.entity.CloneDiskWrapper;

/**
 *
 * @author  Administrator
 */
public class SelectSnapshotPane extends javax.swing.JPanel {
    
    /** Creates new form SelectBootHostPane */
    public SelectSnapshotPane() {
        initComponents();
    }

    public SelectSnapshotPane( SanBootView view ) {
        this();
        myInit( view,ResourceCenter.CMD_TYPE_MTPP );
    }

    public SelectSnapshotPane( SanBootView view,int mode ) {
        this();
        myInit( view,mode );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 70));
        jScrollPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 25));
        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    ////GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    ////GEN-END:variables
    
    JTableY table;
    Vector list;
    SanBootView view;
    BootHost host;
    Cluster cluster = null;
    int mode;
    Object[] header;
    Object[] label;
    RowEditorModel rm2 = new RowEditorModel();
    RowEditorModel rm0 = new RowEditorModel();
    Object osVol = null;
    
    private void myInit( SanBootView _view,int mode ){
        view = _view;
        this.mode = mode;

        jTextArea1.setText(
            SanBootView.res.getString("FailoverWizardDialog.tip3")
        );
    }
    
    public void setHost( BootHost host ){
        this.host = host;
    }
    
    public void setCluster( Cluster cluster ){
        this.cluster = cluster;
    }
    
    public void setupTable( int hid ){
        VolumeMap volMap;
        BindofVolAndSnap bind,binder;
        VolumeMapWrapper wrapper,volMap1;
        ArrayList svList,snapList;
        JComboBox cb; 
        DefaultCellEditor ed;
        CheckBoxEditor ced;
        int i,size;
        Object[][] data;
        
        Vector alist = new Vector();
        Vector volMapList = view.initor.mdb.getVolMapWrapOnClntID( hid,( mode == ResourceCenter.CMD_TYPE_MTPP )?1:2 );
        size = volMapList.size();
        for( i=0; i<size; i++ ){
            volMap1 = (VolumeMapWrapper)volMapList.elementAt(i);
            svList = new ArrayList();
            svList.add( volMap1 ); //这一列要用系统缺省的渲染器，否则CheckBox的图形效果出不来
            binder = new BindofVolAndSnap( volMap1.volMap, svList ); 
            alist.addElement( binder );
        }
        
        this.list = alist;
        
        int num = list.size();
        data = new Object[num][3]; 
        
        header = new Object[3]; //recovered?,disk,ver
        label = new Object[num];
        
        header[0] = SanBootView.res.getString("SelectSnapshotPane.table.snap.recovered");
        header[1] = SanBootView.res.getString("SelectSnapshotPane.table.snap.disk");
        header[2] = SanBootView.res.getString("SelectSnapshotPane.table.snap.ver");
        
        for( i=0; i<num; i++ ){
            bind = (BindofVolAndSnap)list.elementAt(i);
            volMap = bind.getVolMap();
            wrapper = new VolumeMapWrapper();
            wrapper.volMap = volMap;
            snapList = bind.getSnapList();
            
            data[i][0] = Boolean.TRUE;
            data[i][1] = wrapper;
            data[i][2] = snapList.get( 0 ); // 就是 target volume 本身
            
            // 保存 OS 所在的卷
            if( volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ) {
                osVol = volMap;
            }
            
            cb = new JComboBox( snapList.toArray() );
            ed = new DefaultCellEditor( cb );
            rm2.addEditorForRow( i, ed );
            
            label[i]= volMap.getVolDiskLabel();
        }
        
        MyDefaultTableModelForTabY model = new MyDefaultTableModelForTabY( data,header,label );
        
        table = new JTableY( model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        ced = new CheckBoxEditor();
        rm0.addEditorForRow( 0, ced );
            
        table.setCol2EditorModel(rm2);
        table.setCol0EditorModel(rm0);
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 65 );
        tableColumnModel.getColumn(1).setWidth( 40 );
        tableColumnModel.getColumn(2).setWidth( 350 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
        
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }
    
    public void setupTable( Vector list,ArrayList oldVerList  ){
        VolumeMap volMap;
        MirrorDiskInfo mdi;
        BootHost aHost;
        SourceAgent sa;
        Object volObj,binderObj;
        VolumeMapWrapper wrapper;
        MirrorDiskInfoWrapper mwrap;
        ArrayList snapList;
        JComboBox cb; 
        DefaultCellEditor ed;
        CheckBoxEditor ced;
        int i,colSize,aMode;
        Object selectSnapVer;
        Object[][] data;
        boolean isCMDPVol;
        
        this.list = list;

        aMode = this.mode;

        if( aMode == ResourceCenter.CMD_TYPE_CMDP ){
            colSize = 4;
        }else{
            colSize = 4;
        }
        int num = list.size();
        data = new Object[num][colSize];
        
        header = new Object[colSize]; //recovered?,disk,select version,boot version
        label = new Object[num];
        
        header[0] = SanBootView.res.getString("SelectSnapshotPane.table.snap.recovered");
        header[1] = SanBootView.res.getString("SelectSnapshotPane.table.snap.disk");
        header[2] = SanBootView.res.getString("SelectSnapshotPane.table.snap.ver");
        header[3] = SanBootView.res.getString("SelectSnapshotPane.table.snap.bootver");
        
        for( i=0; i<num; i++ ){
            binderObj = list.elementAt(i);
            if( binderObj instanceof BindofVolAndSnap ){
                snapList = ((BindofVolAndSnap)binderObj).getSnapList();              
                volObj = ((BindofVolAndSnap)binderObj).getVolObj();
                volMap = (VolumeMap)volObj;
                if( cluster != null ){
                    aHost = view.initor.mdb.getBootHostFromVector( volMap.getVolClntID() );
                    wrapper = new VolumeMapWrapper( aHost.getIP() );
                }else{
                    wrapper = new VolumeMapWrapper();
                }
                wrapper.volMap = volMap;
                data[i][1] = wrapper;
                
                selectSnapVer = getLastSelBootVer( wrapper.toString(), snapList, oldVerList );
                if( selectSnapVer == null ){
                    if( snapList.size() > 0 ){
                        data[i][2] = snapList.get( 0 ); // 就是 target volume 本身
                    }else{
                        data[i][2] = null;
                    }
                }else{
                    data[i][2] = selectSnapVer; // 上次所选的网络启动的版本
                }

                selectSnapVer = getSelectSnapVer( wrapper.toString(), snapList, oldVerList );
                if( selectSnapVer == null ){
                    if ( snapList.size() > 0 ){
                        data[i][3] = snapList.get( 0 ); // 就是 target volume 本身
                    }else{
                        data[i][3] = null;
                    }
                }else{
                    data[i][3] = selectSnapVer; // 上次网络启动所用的版本
                }

                // 保存 OS 所在的卷
                if( volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ) {
                    osVol = volMap;
                }
                label[i]= volMap.getVolDiskLabel();
            }else{
                snapList = ((BindofMdiWrapAndSnap)binderObj).getSnapList();              
                mwrap = ((BindofMdiWrapAndSnap)binderObj).mdi;
                if( cluster != null ){
                    sa = view.initor.mdb.getSrcAgntFromVectorOnID( mwrap.mdi.getSrc_agnt_id() );
                    mwrap.setType( 2 );
                    mwrap.setHost_IP( sa.getSrc_agnt_ip() );
                }
                mdi = mwrap.mdi;
                data[i][1] = mwrap;
                
                selectSnapVer = getSelectSnapVer( mwrap.toString(), snapList, oldVerList );
                if( selectSnapVer == null ){
                    if( snapList.size() > 0 ){
                        data[i][2] = snapList.get( 0 );
                        data[i][3] = snapList.get( 0 );
                    }else{
                        data[i][2] = null;
                        data[i][3] = null;
                    }
                }else{
                    data[i][2] = selectSnapVer; // 上次网络启动的版本
                    data[i][3] = selectSnapVer;
                }
                
                // 保存 OS 所在的卷
                if( mdi.getSrc_agent_mp().toUpperCase().equals("C:\\") ) {
                    osVol = mdi;
                }
                label[i] = mdi.getSrc_agent_mp();
            }
                        
            data[i][0] = Boolean.TRUE;
        }
        
        MyDefaultTableModelForTabY model = new MyDefaultTableModelForTabY( data,header,label );
        
        table = new JTableY( model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );
        
        ced = new CheckBoxEditor();
        rm0.addEditorForRow( 0, ced );
        table.setCol0EditorModel( rm0 );

        for( i=0; i<num; i++ ){
            binderObj = list.elementAt( i );

            isCMDPVol = false;
            if( binderObj instanceof BindofVolAndSnap ){
                snapList = ((BindofVolAndSnap)binderObj).getSnapList();
                isCMDPVol = ((BindofVolAndSnap)binderObj).getVolMap().isCMDPProtect();
            }else{
                snapList = ((BindofMdiWrapAndSnap)binderObj).getSnapList();
            }

            cb = new JComboBox( snapList.toArray() );
            if( !isCMDPVol ){
                ed = new DefaultCellEditor( cb );
            }else{
                if( cluster != null ){
                    ed = new MyDefaultCellEditor( cb,host,cluster,this,table,view );
                }else{
                    ed = new MyDefaultCellEditor( cb,host,this,table,view );
                }
            }
            rm2.addEditorForRow( i, ed );
        }
        table.setCol2EditorModel( rm2 );

        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 65 );
        if( cluster != null ){
            tableColumnModel.getColumn(1).setWidth( 135 );
        }else{
            tableColumnModel.getColumn(1).setWidth( 40 );
        }
        tableColumnModel.getColumn(2).setWidth( 350 );
        tableColumnModel.getColumn(3).setWidth( 350 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);

        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }

    public Snapshot getSuiableSnapshot( VolumeMap volMap,ViewWrapper viewWrap ){
        Object verObj;
        ArrayList snapList;
        SnapWrapper snapWrap = null;

        int row = this.getValueOnDiskLabel( volMap.getVolDiskLabel() );
        if( row != -1 ){
            Object binderObj = list.elementAt( row );
            if( binderObj instanceof BindofVolAndSnap ){
                snapList = ((BindofVolAndSnap)binderObj).getSnapList();
            }else{
                snapList = ((BindofMdiWrapAndSnap)binderObj).getSnapList();
            }

            int size = snapList.size();
            for( int i=0; i<size; i++ ){
                verObj = snapList.get(i);

                if( verObj instanceof ViewWrapper ){
SanBootView.log.debug(getClass().getName(), " (SelectSnapshotPane:getSuiableSnapshot)select version is view.");
                    ViewWrapper verView = (ViewWrapper)verObj;
                    if( verView.view.getSnap_root_id() == viewWrap.view.getSnap_root_id() &&
                        verView.view.getSnap_local_snapid() == viewWrap.view.getSnap_local_snapid()
                    ){
                        return snapWrap.snap;
                    }
                }else if( verObj instanceof SnapWrapper ){
SanBootView.log.debug(getClass().getName(), " (SelectSnapshotPane:getSuiableSnapshot)select version is snapshot.");
                    snapWrap = (SnapWrapper)verObj;
                }else{
SanBootView.log.debug(getClass().getName(), " (SelectSnapshotPane:getSuiableSnapshot)select version is other type.");
                }
            }
            return null;
        }else{
            return null;
        }
    }

    public int getValueOnDiskLabel( String diskLabel ){
        String tempDiskLabel;

        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int rowCnt = model.getRowCount();
        for( int row=0; row<rowCnt; row++ ){
            Object volObj = model.getValueAt( row, 1 );
            if( volObj instanceof VolumeMapWrapper ){
                tempDiskLabel = (((VolumeMapWrapper)volObj).volMap).getVolDiskLabel();
            }else{
                tempDiskLabel = (((MirrorDiskInfoWrapper)volObj).mdi).getSrc_agent_mp();
            }
            if( tempDiskLabel.equals( diskLabel ) ){
                return row;
            }
        }
        return -1;
    }

    private boolean findSuitableVersion( int row,ArrayList snapList,Object selObj ){
        Object verObj;
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();

        int size = snapList.size();
        for( int i=0; i<size; i++ ){
            verObj = snapList.get(i);
            
            if( selObj instanceof VolumeMapWrapper ){
SanBootView.log.debug(getClass().getName(), " (SelectSnapshotPane:findSuitableVersion)select version is volume.");
                if( verObj instanceof VolumeMapWrapper ){
                    model.setValueAt( verObj, row, 2 );
                    return true;
                }
            }else if( selObj instanceof ViewWrapper ){
SanBootView.log.debug(getClass().getName(), " (SelectSnapshotPane:findSuitableVersion)select version is view.");
                ViewWrapper viewWrap1 = (ViewWrapper)selObj;
                if( verObj instanceof ViewWrapper ){
                    ViewWrapper viewWrap2 = (ViewWrapper)verObj;
                    if( viewWrap1.view.getSnap_create_time().equals( viewWrap2.view.getSnap_create_time() ) ){
                        model.setValueAt( verObj, row, 2 );
                        return true;
                    }
                }
            }else if( selObj instanceof SnapWrapper ){
SanBootView.log.debug(getClass().getName(), " (SelectSnapshotPane:findSuitableVersion)select version is snapshot.");
                SnapWrapper snapWrap1 = (SnapWrapper)selObj;
                if( verObj instanceof SnapWrapper ){
                    SnapWrapper snapWrap2 = (SnapWrapper)verObj;
                    if( snapWrap1.snap.getSnap_create_time().equals( snapWrap2.snap.getSnap_create_time() ) ){
                        model.setValueAt( verObj, row, 2 );
                        return true;
                    }
                }
            }else{
SanBootView.log.debug(getClass().getName(), " (SelectSnapshotPane:findSuitableVersion)select version is other type.");
                return false;
            }
        }
        return false;
    }

    public void setVersionObjOfSameTime( int row,Object selObj ){
        Object binderObj;
        ArrayList snapList;

        int size = this.list.size();
        for( int i=0; i<size; i++ ){
            if( i != row ) continue;

            binderObj = list.elementAt(i);
            if( binderObj instanceof BindofVolAndSnap ){
                snapList = ((BindofVolAndSnap)binderObj).getSnapList();
            }else{
                snapList = ((BindofMdiWrapAndSnap)binderObj).getSnapList();
            }

            // findSuitableVersion的返回值为true表示找到匹配的了，暂时不管找到与否
            findSuitableVersion( row,snapList,selObj );
        }
    }

    public Object getSnapshotVersion( String diskLabel,ArrayList snapList,ArrayList oldVerList,boolean isBootVer ){
        int tid;
        
        int size = oldVerList.size();
        for( int i=0; i<size; i++ ){
            BindOfDiskLabelAndTid binder = (BindOfDiskLabelAndTid)oldVerList.get(i);
            
            if(isBootVer){
                tid = binder.getTid();
            }else{
                tid = binder.getSelectedBootVer();
            }
         
            if( binder.getDiskLabel().equals( diskLabel ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object obj = snapList.get(j);
                    if( obj instanceof ViewWrapper ){
                        ViewWrapper vw = (ViewWrapper)obj;
                        if( vw.view.getSnap_target_id() == tid ){
                            return obj;
                        }
                    }else if( obj instanceof VolumeMapWrapper ){
                        VolumeMapWrapper vm =(VolumeMapWrapper)obj;
                        if( vm.volMap.getVolTargetID() == tid ){
                            return obj;
                        }
                    }else if( obj instanceof CloneDiskWrapper ){
                        CloneDiskWrapper cd = (CloneDiskWrapper)obj;
                        if( cd.cloneDisk.getTarget_id() == tid ){
                            return obj;
                        }
                    }else if( obj instanceof MirrorDiskInfoWrapper ){
                        
                    }else{ // SnapWrapper   
                    }
                }
                break;
            }
        }
        
        return null;
    }
    
    public Object getSelectSnapVer( String diskLabel,ArrayList snapList,ArrayList oldVerList ){
        return getSnapshotVersion( diskLabel,snapList,oldVerList,true );
    }
    
    public Object getLastSelBootVer( String diskLabel,ArrayList snapList,ArrayList oldVerList ){
         return getSnapshotVersion( diskLabel,snapList,oldVerList,false );
    }
    
    public Object getOSSnap( boolean autoDR ){
        VolumeMapWrapper wraper;
        boolean isSel;
        
        if( autoDR ){
            return osVol;
        }
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( !isSel ) continue;

            wraper = (VolumeMapWrapper)model.getValueAt(row,1);
            if( wraper.volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                return model.getValueAt(row,2);
            }
        }
        
        return null;
    }
    
    public boolean toRecoverOSDisk(){
        VolumeMapWrapper wraper;
        MirrorDiskInfoWrapper mwrap;
        Object volObj;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            volObj = model.getValueAt( row,1 );
            if( volObj instanceof VolumeMapWrapper ){
                wraper = (VolumeMapWrapper)volObj;
                if( wraper.volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                    if( ((Boolean)model.getValueAt(row, 0 )).booleanValue() ){
                        return true;
                    }
                }
            }else{
                mwrap = (MirrorDiskInfoWrapper)volObj;
                if( mwrap.mdi.getSrc_agent_mp().toUpperCase().equals("C:\\") ){
                    if( ((Boolean)model.getValueAt(row, 0 )).booleanValue() ){
                        return true;
                    }
                }
            }
        }
        
        return false;
    }

    public Object getHostInfoAboutOSDisk(){
        VolumeMapWrapper wraper;
        MirrorDiskInfoWrapper mwrap;
        Object volObj;

        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            volObj = model.getValueAt( row,1 );
            if( volObj instanceof VolumeMapWrapper ){
                wraper = (VolumeMapWrapper)volObj;
                if( wraper.volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                    if( ((Boolean)model.getValueAt(row, 0 )).booleanValue() ){
                        return view.initor.mdb.getHostFromVectorOnID( wraper.volMap.getVolClntID() );
                    }
                }
            }else{
                mwrap = (MirrorDiskInfoWrapper)volObj;
                if( mwrap.mdi.getSrc_agent_mp().toUpperCase().equals("C:\\") ){
                    if( ((Boolean)model.getValueAt(row, 0 )).booleanValue() ){
                        return view.initor.mdb.getSrcAgntFromVectorOnID( mwrap.mdi.getSrc_agnt_id() );
                    }
                }
            }
        }

        return null;
    }

    public Object getOSSnapVer(){
        VolumeMapWrapper wraper;
        MirrorDiskInfoWrapper mwrap;
        Object volObj;
        boolean isSel;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( !isSel ) continue;
            
            volObj = model.getValueAt( row,1 );
            if( volObj instanceof VolumeMapWrapper ){
                wraper = (VolumeMapWrapper)volObj;
                if( wraper.volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                    return model.getValueAt(row, 2 );
                }
            }else{
                mwrap = (MirrorDiskInfoWrapper)volObj;
                if( mwrap.mdi.getSrc_agent_mp().toUpperCase().equals("C:\\") ){
                    return model.getValueAt(row, 2 );
                }
            }
        }
        return null;
    }
    
    public ArrayList getSelectedSnap(){
        BindOfVolMapandSnap binder;
        Object volObj;
        boolean isSel;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList ret = new ArrayList( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( !isSel ) continue;

            binder = new BindOfVolMapandSnap();
            volObj = model.getValueAt(row,1);
            if( volObj instanceof VolumeMapWrapper ){
                binder.volObj = ((VolumeMapWrapper)volObj).volMap;
            }else{
                binder.volObj = ((MirrorDiskInfoWrapper)volObj).mdi;
            }
            binder.snap = model.getValueAt(row,2);
            binder.isSel = isSel;
            ret.add( binder );
        }
        
        return ret;
    }
    
    public Object getVolMapWrapper( String label ){
        VolumeMapWrapper wraper;
        MirrorDiskInfoWrapper mwrap;
        Object volObj;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            volObj = model.getValueAt( row,1 );
            if( volObj instanceof VolumeMapWrapper ){
                wraper = (VolumeMapWrapper)model.getValueAt(row,1);
                if( wraper.volMap.getVolDiskLabel().toUpperCase().equals( label.toUpperCase() ) ){
                    return wraper;
                }
            }else{
                mwrap = (MirrorDiskInfoWrapper)model.getValueAt( row,1);
                if( mwrap.mdi.getSrc_agent_mp().toUpperCase().equals( label.toUpperCase() ) ){
                    return mwrap;
                }
            }
        }
        
        return null;
    }
    
    public ArrayList getSnapshotList( String label,int rootid,int local_snap_id ){
        VolumeMap volMap;
        MirrorDiskInfo mdi;
        Object volObj;
        BindofVolAndSnap bind;
        String volLabel;
        ArrayList snapList;
        ArrayList ret = new ArrayList(0);
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            bind = (BindofVolAndSnap)list.elementAt(i);
            volObj = bind.getVolObj();
            if( volObj instanceof VolumeMap ){
                volMap = bind.getVolMap();
                volLabel = volMap.getVolDiskLabel().toUpperCase();
            }else{
                mdi = bind.getMDI();
                volLabel = mdi.getSrc_agent_mp().toUpperCase();
            }
            
            snapList = bind.getSnapList();
            if( volLabel.equals( label.toUpperCase() ) ){
                int size1 = snapList.size();
                ret = new ArrayList( size1 );
                for( int j=0; j<size1; j++ ){
                    Object item = snapList.get(j);
                    if( item instanceof SnapWrapper ){
                        if( rootid <= 0 ){
                            ret.add( item );
                        }else{
                            SnapWrapper snapWrapper = (SnapWrapper)item;
                            if( (snapWrapper.snap.getSnap_root_id() != rootid ) ||
                                 ( snapWrapper.snap.getSnap_local_snapid() != local_snap_id )){
                                ret.add( item );
                            }
                        }
                    }
                }
                break;
            }
        }
        
        return ret;
    }
    
    public int getSnapshotNum( String label ){
        VolumeMap volMap;
        MirrorDiskInfo mdi;
        Object volObj;
        String volLabel;
        BindofVolAndSnap bind;
        ArrayList snapList;
        int cnt=0;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            bind = (BindofVolAndSnap)list.elementAt(i);
            volObj = bind.getVolObj();
            if( volObj instanceof VolumeMap ){
                volMap = (VolumeMap)volObj;
                volLabel = volMap.getVolDiskLabel().toUpperCase();
            }else{
                mdi = (MirrorDiskInfo)volObj;
                volLabel = mdi.getSrc_agent_mp().toUpperCase();
            }
            snapList = bind.getSnapList();
            if( volLabel.equals( label.toUpperCase() ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object item = snapList.get(j);
                    if( item instanceof SnapWrapper ){
                        cnt+=1;
                    }
                }
                break;
            }
        }
        
        return cnt;
    }
    
    public int getViewNum( String label,SnapWrapper snap ){
        VolumeMap volMap;
        MirrorDiskInfo mdi;
        String volLabel;
        Object volObj;
        BindofVolAndSnap bind;
        ArrayList snapList;
        boolean found = false;
        int cnt=0;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            bind = (BindofVolAndSnap)list.elementAt(i);
            volObj = bind.getVolObj();
            if( volObj instanceof VolumeMap ){
                volMap  = bind.getVolMap();
                volLabel = volMap.getVolDiskLabel().toUpperCase();
            }else{
                mdi = bind.getMDI();
                volLabel = mdi.getSrc_agent_mp().toUpperCase();
            }
            snapList = bind.getSnapList();
            if( volLabel.equals( label.toUpperCase() ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object item = snapList.get(j);
                    if( found ){
                        if( item instanceof ViewWrapper ){
                            cnt+=1;
                        }else{
                            break;
                        }
                    }else{
                        if( item instanceof SnapWrapper ){
                            SnapWrapper snapItem =(SnapWrapper)item;
                            if( ( snapItem.snap.getSnap_root_id() == snap.snap.getSnap_root_id() )&&
                                ( snapItem.snap.getSnap_local_snapid() == snap.snap.getSnap_local_snapid() ) 
                            ){
                                found = true;
                            }
                        }
                    }
                }
                break;
            }
        }
        
        return cnt;
    }
    
    HashMap<String,Integer> map;
    public boolean restoreAllDisk(){
        Object volObj;
        VolumeMapWrapper wraper;
        MirrorDiskInfoWrapper mwrap;
        String fs;
        boolean isSel;

        map = new HashMap<String,Integer>();

        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount(); 
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            volObj = model.getValueAt( row,1 );
            if( volObj instanceof VolumeMapWrapper ){
                wraper = (VolumeMapWrapper)volObj;
                fs = wraper.volMap.getVolDiskLabel();
            }else{
                mwrap = (MirrorDiskInfoWrapper)volObj;
                fs = mwrap.mdi.getSrc_agent_mp();
            }

            Integer val = map.get( fs );
            if( val == null ){
                if( isSel ){
                    map.put( fs, new Integer(1) );
                }else{
                    map.put( fs, new Integer(0) );
                }
            }else{
                if( isSel ){
                    map.put( fs, new Integer( val.intValue()+1 ) );
                }
            }
        }

        Iterator iterator  = map.keySet().iterator();
        while( iterator.hasNext() ){
            String key = (String)iterator.next();
            Integer val = map.get( key );
System.out.println(" yyy fs: "+ key + " cnt: "+ val.toString() );
            if( val.intValue() <= 0 ){
                return false;
            }
        }

        return true;
    }

    public boolean multiFsToRestore1(){
        Object volObj;
        VolumeMapWrapper wraper;
        MirrorDiskInfoWrapper mwrap;
        String fs;
        boolean isSel;

        map = new HashMap<String,Integer>();

        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( !isSel ) continue;

            volObj = model.getValueAt( row,1 );
            if( volObj instanceof VolumeMapWrapper ){
                wraper = (VolumeMapWrapper)volObj;
                fs = wraper.volMap.getVolDiskLabel();
            }else{
                mwrap = (MirrorDiskInfoWrapper)volObj;
                fs = mwrap.mdi.getSrc_agent_mp();
            }

            Integer val = map.get( fs );
            if( val == null ){
                map.put( fs, new Integer(1) );
            }else{
                map.put( fs, new Integer( val.intValue()+1 ) );
            }
        }
        
        Iterator iterator  = map.keySet().iterator();
        while( iterator.hasNext() ){
            String key = (String)iterator.next();
            Integer val = map.get( key );
System.out.println(" yyy fs: "+ key + " cnt: "+ val.toString() );
            if( val.intValue() > 1 ){
                return false;
            }
        }

        return true;
    }

    public boolean multiFsToRestore(){
        Iterator iterator  = map.keySet().iterator();
        while( iterator.hasNext() ){
            String key = (String)iterator.next();
            Integer val = map.get( key );
System.out.println(" xxxxx  fs: "+ key + " cnt: "+ val.toString() );
            if( val.intValue() > 1 ){
                return false;
            }
        }

        return true;
    }

    public ArrayList getSelectedSnap1(){
        BindOfVolMapandSnap binder;
        VolumeMapWrapper wraper;
        Object volObj;
        MirrorDiskInfoWrapper mwrap;
        boolean isSel;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList ret = new ArrayList( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            binder = new BindOfVolMapandSnap();
            volObj = model.getValueAt( row,1 );
            if( volObj instanceof VolumeMapWrapper ){
                wraper = (VolumeMapWrapper)volObj;
                binder.volObj = wraper.volMap;
            }else{
                mwrap = (MirrorDiskInfoWrapper)volObj;
                binder.volObj = mwrap.mdi;
            }
            binder.snap = model.getValueAt(row,2);
            binder.isSel = isSel;
            ret.add( binder );
        }
        
        return ret;
    }
    
    public boolean checkSnapNumber( String label,int rootid,int local_snap_id ){
        int size,i,cnt,max_snap,snapNum;
        Object volObj;
        ArrayList snapWrapperList;
        SnapWrapper one;
        
        // 先检查各个卷的快照数是否超出了max number;若超出了，则检查是否每个快照都有view
SanBootView.log.debug( getClass().getName(), " begin to check snap number limit: " + label );        
        volObj = getVolMapWrapper( label );
        if( volObj != null ){
            if( volObj instanceof VolumeMapWrapper ){
                VolumeMapWrapper wrapper = (VolumeMapWrapper)volObj;
                max_snap = wrapper.volMap.getMaxSnapNum();
                if( max_snap <= 0 ) {
SanBootView.log.debug( getClass().getName()," max snap number: 0 "+ " vol: " + label  );                     
                    return true;
                }
                
SanBootView.log.debug( getClass().getName()," max snap number: "+ max_snap +" vol: " + label ); 
                // 找出tgt的当前快照数
                snapNum = getSnapshotNum( label );
SanBootView.log.debug( getClass().getName()," snap number is : "+ snapNum +" vol: " + label );            
                if( snapNum >= max_snap ){
                    snapWrapperList = getSnapshotList( label,rootid,local_snap_id );
                    size = snapWrapperList.size();
                    cnt = 0;
                    for( i=0; i<size; i++ ){
                        one = (SnapWrapper)snapWrapperList.get(i);
                        int viewNum = getViewNum( label, one );
                        if( viewNum > 0 ){
                            cnt+=1;
                        }
                    }
SanBootView.log.debug( getClass().getName()," snaps with view is : "+ cnt +" vol: "+label );

                    if( cnt == size ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBootVerDialog.error.beyondMaxSnap")+" : "+ label
                        );
                        return false;
                    }else{
                        return true;
                    }
                }else{
                    return true;
                }
            }else{
                return true;
            }
        }else{
SanBootView.log.error( getClass().getName(),"Not found object on table(it's impossible): "+ label );
            return false;
        }
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            for( int j=0;j<3;j++ ){ // 专门停止0,1,2列
                if( j == 1 ) continue;

                dce = table.getCellEditor( i,j );
                if( dce!=null ){
                    try{
                        while(!dce.stopCellEditing()){}
                    }catch(Exception ex){}
                }
            }
        }
    }
}
