/*
 * RestoreOrigiDiskForUnixWizardDialog.java
 *
 * Created on 2006/12/29, AM 9:51
 */

package guisanboot.ui;

import javax.swing.*;
import java.util.*;
import java.io.*;
import guisanboot.data.*;
import guisanboot.datadup.data.BackupClient;
import guisanboot.datadup.data.UniProBackup;
import guisanboot.datadup.data.UniProDrive;
import guisanboot.datadup.data.UniProHeader;
import guisanboot.datadup.data.UniProIBoot;
import guisanboot.datadup.data.UniProIdentity;
import guisanboot.datadup.data.UniProfile;
import guisanboot.datadup.cmd.RunBackup;
import guisanboot.datadup.ui.GetDataDupProcess;
import guisanboot.res.*;

/**
 *
 * @author  Administrator
 */
public class RestoreOrigiDiskForUnixWizardDialog extends WizardDialogSample implements RecordUWSRptable,RestoreOrigiDiskable{
    ActModePaneForRestUnixOrgDisk actModePane;
    DefineRstRelationshipForUnixPane definePane;
    SelectUnixRestoreDiskPane selectRestDiskPane;
    InputSnapshotCmdUnixPane inputSnapCmdPane;
    RunningTaskForRstLocalDiskForUnix runPane;
    
    SanBootView view;
    DestAgent host;
    String osLoader = null;
    String targetSrvName;
    ArrayList lvmInfo;
    boolean needModUUID;
    
    Vector volList = null;
    Vector partList = null;
    ArrayList oldDiskPartList = null;
    ArrayList newDiskPartList = null;
    HashMap rstMapperList = null;
    
    /** Creates new form RestoreOrigiDiskForUnixWizardDialog */
    public RestoreOrigiDiskForUnixWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public RestoreOrigiDiskForUnixWizardDialog( 
        SanBootView view,
        DestAgent host,
        String targetSrvName,
        ArrayList lvmInfo,
        boolean needModUUID
    ){
        super( view );
        myInit( view,host,targetSrvName,lvmInfo,needModUUID );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitBootHostWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    ////GEN-BEGIN:variables
    ////GEN-END:variables
    
    private void myInit( SanBootView _view,DestAgent _host,String targetSrvName,ArrayList lvmInfo,boolean needModUUID ){
        view = _view;
        host = _host;
        this.targetSrvName = targetSrvName;
        this.needModUUID = needModUUID;
        this.lvmInfo = lvmInfo;
        
        setupLanguage1();
        enableBackButton( false );
        
        setWizardTipText( 
            SanBootView.res.getString( "WizardDialogSample.wizardText"),
            SanBootView.res.getString( "RestoreOriginalDiskWizardDialog.wizardText1" ) 
        );
        
        setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
        
        actModePane = new ActModePaneForRestUnixOrgDisk( view );
        definePane = new DefineRstRelationshipForUnixPane( view );
        selectRestDiskPane = new SelectUnixRestoreDiskPane( view,host,this ); 
        inputSnapCmdPane = new InputSnapshotCmdUnixPane( view );
        runPane = new RunningTaskForRstLocalDiskForUnix( view,host ); 
    }
    
    private void setupLanguage1(){
        setTitle( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
    }
    
    @Override public void backButtonProcess(){         
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1").trim() ) == 0 ){
            enableBackButton( false );
            removeCenterPane();
            addImagePaneOntoCenterPane();
            addWizardTipTextPane();
            setWizardTipText(
                SanBootView.res.getString("WizardDialogSample.wizardText"),
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.wizardText1")
            );
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2").trim() ) == 0 ){     
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1") );
            removePaneFromContentPane( definePane );
            addPaneOntoContentPane( actModePane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3").trim() ) == 0 ){
            removePaneFromContentPane( selectRestDiskPane );
            if( useOldRstMap ){
                enableBackButton( false );
                removeCenterPane();
                addImagePaneOntoCenterPane();
                addWizardTipTextPane();
                setWizardTipText(
                    SanBootView.res.getString("WizardDialogSample.wizardText"),
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.wizardText1")
                );
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
                refreshCenterPane();
                return;
            }else{
                if( actModePane.isAutoRst() ){
                    setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2") );
                    addPaneOntoContentPane( definePane );
                }else{
                    setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1") );
                    addPaneOntoContentPane(  actModePane );
                }
            }
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4").trim() ) == 0 ){     
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
            removePaneFromContentPane( inputSnapCmdPane );
            addPaneOntoContentPane( selectRestDiskPane );
            refreshCenterPane();
            return;
        }
    }
    
    boolean isFirst = true;
    boolean isFirst1 = true;
    boolean useOldRstMap = false;
    JPanel pane = null;
    String title = null;
    @Override public void nextButtonProcess(){
        boolean isOk;
        int bootRow,rootRow,ret;
        Vector rstList1;
        Hashtable rstList;
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1").trim() ) == 0 ){      
            if( actModePane.isAutoRst() ){ 
                if( oldDiskPartList == null ){
                    isOk = view.initor.mdb.getOldDiskPartitionTableForUnix( host.getOldDiskConfAbsPathForUnix() );
                    if( isOk ){
                        oldDiskPartList = view.initor.mdb.getAllOldDiskPartListForUnix();
                        if( oldDiskPartList.size() == 0 ){
SanBootView.log.error( getClass().getName(),"can't find any old partition for autoformat");                         
                            oldDiskPartList = null;
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getOldDiskInfo")
                            );
                            return;
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getOldDiskInfo")+" : "+
                                view.initor.mdb.getErrorMessage()
                        );
                        return;
                    }
                }
                
                if( newDiskPartList == null ){
                    isOk = view.initor.mdb.getNewDiskPartitionTableForUnix( host.getIP(),host.getPort(),"list_localdisk_partition.sh" );
                    if( isOk ){
                        newDiskPartList = view.initor.mdb.getAllNewDiskPartListForUnix();
                        if( newDiskPartList.size() == 0 ){
SanBootView.log.error( getClass().getName(),"can't find any new partition for autoformat");                             
                            newDiskPartList = null;
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getNewDiskInfo")
                            );
                            return;
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getNewDiskInfo")+" : "+
                                view.initor.mdb.getErrorMessage()
                        );
                        return;
                    }
                }
                
                if( isFirst ){
                    definePane.setupTable( oldDiskPartList,newDiskPartList );
                    isFirst = false;
                }
                removePaneFromContentPane( actModePane );
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2") );
                addPaneOntoContentPane( definePane );
            }else{ // manually create partitions
                removePaneFromContentPane( actModePane );
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
                addPaneOntoContentPane( selectRestDiskPane );
            }
            
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2").trim() ) == 0 ){
            definePane.fireEditingStopMsg();
            
            if( !definePane.hasRestoreDisk() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRstDisk")
                );
                return ;
            }
            
            if( !definePane.checkVolInfoValidity() ){
                return;
            }
            
            if( definePane.hasNoSeledDisk() ){
                ret = JOptionPane.showConfirmDialog(
                    view,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.confirm1"),
                    SanBootView.res.getString("common.confirm"),  //"Confirm",
                    JOptionPane.OK_CANCEL_OPTION
                );
                if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                    return;
                }
            } 
            
            ret = JOptionPane.showConfirmDialog(
                view,
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.confirm2"),
                SanBootView.res.getString("common.confirm"),  //"Confirm",
                JOptionPane.OK_CANCEL_OPTION
            );
            if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                return;
            }
            
            // 开始分区并格式化新磁盘
            InitProgramDialog initDiag = new InitProgramDialog( 
                view,
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTitle.rst"),
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTip.rst")
            );
            
            RestoreNewDiskForUnixThread rstNewDisk = new RestoreNewDiskForUnixThread( this, view,definePane.getDiskInfo(),host ); 
            Thread initThread = new Thread( new LaunchSomething( initDiag,rstNewDisk ) );
            initThread.start();
            
            int width  = 300+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 120+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            initDiag.setSize( width, height );
            initDiag.setLocation( view.getCenterPoint(width,height) ); 
            initDiag.setVisible( true );
            
            if( !rstNewDisk.isSuccessfully() ){
                return;
            }
            
            removePaneFromContentPane( definePane );
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
            // 更新 dest 列
            HashMap map = rstNewDisk.getRstMapper();
            selectRestDiskPane.updateDest( map ); 
            addPaneOntoContentPane( selectRestDiskPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3").trim() ) == 0 ){      
            selectRestDiskPane.fireEditingStopMsg();
            
            if( !selectRestDiskPane.isOSDiskSelected() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noneOSDisk")
                );
                return ;
            }
            
            rootRow = selectRestDiskPane.getSelectedRowOnMp("/");
            if( selectRestDiskPane.isMpRight( "/",rootRow) ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.badRootMp")
                );
                return ;
            }
            
            bootRow = selectRestDiskPane.getSelectedRowOnMp("/boot");
            if( bootRow!= -1 ){
                if( !selectRestDiskPane.isThisRowProtected( bootRow ) ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noneBootDisk")
                    );
                    return ;
                }
                
                if( selectRestDiskPane.isMpRight( "/",bootRow ) ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.badBootMp")
                    );
                    return ;
                }
            }
                        
            if( !selectRestDiskPane.hasRestoredDisk() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRestoredDisk")
                );
                return ;
            }
            
            if( !selectRestDiskPane.checkInfoValidity() ){ 
                return;
            }
            
            if( selectRestDiskPane.isInputSnapCmd() ){
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4") );
                removePaneFromContentPane( selectRestDiskPane );
                rstList = selectRestDiskPane.getSelectedVolume();
                inputSnapCmdPane.updateGUI( rstList );
                addPaneOntoContentPane( inputSnapCmdPane );
                refreshCenterPane();
                return;
            }else{    
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5") );
                removePaneFromContentPane( selectRestDiskPane );
                setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
                enableNextButton( false );
                enableBackButton( false );
                enableCancelButton( false );
                setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
                rstList = selectRestDiskPane.getSelectedVolume();
                runPane.updateGUI( rstList );
                addPaneOntoContentPane( runPane );
                refreshCenterPane();

                beginRestoring();

                return;
            }
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4").trim() ) == 0 ){    
            inputSnapCmdPane.fireEditingStopMsg();
            
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5") );
            removePaneFromContentPane( inputSnapCmdPane );
            setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton( false );
            enableBackButton( false );
            enableCancelButton( false );
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
            rstList1 = inputSnapCmdPane.getTasks();
            runPane.updateGUI1( rstList1 );
            addPaneOntoContentPane( runPane );
            refreshCenterPane();
            
            beginRestoring();
            
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5").trim() ) == 0 ){
            if( allFinished ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK")
                );
            }else{
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.needReRestore")
                );
            }
            dispose();
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title").trim() ) == 0 ){       
            if( partList == null ){
                ProgressDialog initDiag = new ProgressDialog( 
                    view,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTitle.prepare"),
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTip.prepare")
                );
                PrepareWorkForUnix prepare = new PrepareWorkForUnix( initDiag,this,view,host );
                prepare.start();
                initDiag.mySetSize();
                initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                initDiag.setVisible( true );
                
                this.partList = prepare.getPartList();
                if( partList == null ){
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_GET_PARTITION )+" : "+
                            view.initor.mdb.getErrorMessage()
                    );
                    return;
                }
                
                this.rstMapperList = prepare.getRstMap();
                this.volList = prepare.getVolList();
                this.osLoader = prepare.getOSLoader();
                if( volList.size() > 0 ){
                    selectRestDiskPane.setInputSnapCmdFlag( true );
                    selectRestDiskPane.setupTable( volList );
                    // 更新 dest 列
                    selectRestDiskPane.updateDest( rstMapperList );
                    
                    if( rstMapperList.size() >0 ){
                        ret = JOptionPane.showConfirmDialog(
                            view,
                            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.confirm3"),
                            SanBootView.res.getString("common.confirm"),  //"Confirm",
                            JOptionPane.OK_CANCEL_OPTION
                        );
                        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                            // 用户要修改恢复关系
                            title = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1");
                            pane = actModePane;
                        }else{ // 用户同意继续使用原有恢复关系
                            // 按上次源盘恢复时保存的恢复关系将本地目的盘mount起来
                            ProgressDialog mntDiag = new ProgressDialog( 
                                view,
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTitle.mntoldfs1"),
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTip.mntoldfs1")
                            );
                            MountOldFs mntThread = new MountOldFs( mntDiag,this,rstMapperList );
                            mntThread.start();
                            mntDiag.mySetSize();
                            mntDiag.setLocation( view.getCenterPoint( mntDiag.getDefWidth(),mntDiag.getDefHeight() ) );
                            mntDiag.setVisible( true );
                            
                            useOldRstMap = true;
                            title = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3");
                            pane = selectRestDiskPane;
                        }
                    }else{
                        title = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1");
                        pane = actModePane;
                    }
                }else{
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRestoredDisk")
                    );
                    return ;
                }
            }
            
            if( volList.size() == 0 ){ // impossible to happen
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRestoredDisk")
                );
                return ;
            }
            
            setTipTextOnTopPane( title );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( pane );
            if( isFirst1 ){
                if( pane instanceof ActModePaneForRestUnixOrgDisk ){
                    ((ActModePaneForRestUnixOrgDisk)pane).setAutoRst( true );
                }
                isFirst1 = false;
            }
            refreshCenterPane();
            return;
        }else{
            return;
        }
    }
    
    public void setProcess(){    
    }
     
    private void beginRestoring(){
        Thread initThread = new Thread( new RestoreLocalDisk(  this ) );
        initThread.start();
    }
      
    boolean allFinished = true; // 表明所有task都成功完成了
    String errMsg="";
    public void writeLogBuf( String errMsg ){
        if( isWrFirst ){
            logBuf.append( replaceLine( errMsg ) );
            isWrFirst = false;
        }else{
            logBuf.append( ResourceCenter.NEWLINE_STRING + replaceLine( errMsg ) );
        }
    }
    
    public void putIntoLogBuf( String errMsg,int which ){
        writeLogBuf( errMsg );
    }

    private boolean handleUUID( int row ){
        boolean isOkForHandleUUID;
        if( this.needModUUID ){
            isOkForHandleUUID = view.initor.mdb.reCrtUUID( host.getDst_agent_ip(), host.getDst_agent_port(),ResourceCenter.CMD_TYPE_MTPP,false );
            if( !isOkForHandleUUID ){
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.reCrtUUID");
SanBootView.log.error( getClass().getName(),"can not re-create uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ]" );
                runPane.setLogOnTabpane( errMsg, row );
                writeLogBuf( errMsg );
            }
        }else{
            view.initor.mdb.getHostUUID( host.getDst_agent_ip(), host.getDst_agent_port(),false );
            String curUUID = view.initor.mdb.getUUID();
            isOkForHandleUUID = !curUUID.equals("");
            if( isOkForHandleUUID ){
                if( !curUUID.equals( host.getHostUUID() ) ){
                    isOkForHandleUUID = view.initor.mdb.setUUID( host.getDst_agent_ip(), host.getDst_agent_port(),host.getHostUUID(),ResourceCenter.CMD_TYPE_MTPP,false );
                    if( !isOkForHandleUUID ){
SanBootView.log.error( getClass().getName(),"can not set uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ] for new-uuid: " + host.getHostUUID() );
                        errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.setUUID");
                        runPane.setLogOnTabpane( errMsg, row );
                        writeLogBuf( errMsg );
                    }
                }
            }else{
SanBootView.log.error( getClass().getName(),"can not get uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ]" );
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getUUID");
                runPane.setLogOnTabpane( errMsg, row );
                writeLogBuf( errMsg );
            }
        }
        return isOkForHandleUUID;
    }

    public void realRestore(){
        int row,num,i,size,size1,j;
        InitTask task;
        boolean isOk,isFinished, setActiveOk,saveBootInfoOk,savePartInfoOk,saveRstMapOk,umountOk,addLabel,restorenetfile;
        boolean isOkForHandleUUID;
        String rstMapStr,dest,args,bootDirDevPath;
        GetDataDupProcess getProcessThread;
        SystemPartitionForUnix part;
        Vector destList;
        Object[] dev_label;
        RunBackup rst = null;
        File tmpFile;
        ArrayList profList = new ArrayList();
        ArrayList dev_label_list;
        
        num = runPane.getTableRow(); 
        for( row=0; row<num; row++ ){
            task = runPane.getTask( row );  // 肯定有这个任务
            
            if( row == num-1 ){ // 保存信息
                runPane.setCurTabPane( row );
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), row, 2
                );
                
      /*        modified for susu linux 
          
                // 每次都修改label,以防用户随时更改label
                dev_label_list = selectRestDiskPane.getDevAndLabelList();
                size = dev_label_list.size();
                addLabel = true;
                for( i=0; i<size; i++ ){
                    dev_label = (Object[])dev_label_list.get(i);
                    isOk = view.initor.mdb.changeFsLabel( host.getIP(), host.getPort(), (String)dev_label[0] +" "+(String)dev_label[1] );
                    if( !isOk ){
                        errMsg = SanBootView.res.getString("SelectRestoreDiskPane.error.addlabel") + " [ "+(String)dev_label[0] +" , "+(String)dev_label[1]+" ]";
                        runPane.setLogOnTabpane( errMsg,row );
                        writeLogBuf( errMsg );
                        addLabel = false;
                    }
                }
       */         
                // 修改供本地硬盘启动的fstab配置
                if( osLoader != null ){
                    // 如果本地盘上的/etc/fstab没有恢复成功，则下面命令出错
                    args = " modify_2_local.sh -b " + osLoader + " " + selectRestDiskPane.getRstMpList();
                    saveBootInfoOk = view.initor.mdb.modBootConf( host.getIP(),host.getPort(),args );
                    if( saveBootInfoOk ){
                        runPane.setLogOnTabpane(
                            SanBootView.res.getString("InitNWinHostWizardDialog.log.modBootConf")+" "+
                                SanBootView.res.getString("common.ok"), 
                            row
                        );
                    }else{
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.modBootConf")+" "+
                                SanBootView.res.getString("common.failed");
                        runPane.setLogOnTabpane( errMsg,row );
                        writeLogBuf( errMsg );
                    }
                }else{
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.unknownOsLoader");
                    runPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg );
                    saveBootInfoOk = false;
                }
                
                // restore netwok/killall/halt to local disk
                //args = "  linux_iboot_cmd.sh  postexecute restore / ";
                args = " linux_iboot_cmd.sh postexecute restore " + this.getOsDestDevPath();
                restorenetfile = view.initor.mdb.modBootConf( host.getIP(),host.getPort(),args );
                if( restorenetfile ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.restorenetfile")+" "+
                            SanBootView.res.getString("common.ok"), 
                        row
                    );
                }else{
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.restorenetfile")+" "+
                            SanBootView.res.getString("common.failed");
                    runPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg );
                }
                
                // 检查boot目录是否为active
                bootDirDevPath = getBootDevPath();
                if( bootDirDevPath == null ){
SanBootView.log.error( getClass().getName(),"Can't find boot directory.");
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.noneBootDirDevPath");
                    runPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg );
                    setActiveOk = false;
                }else{
                    args = " setactive.sh " + bootDirDevPath;
                    isOk = view.initor.mdb.getUnixActiveFlag( host.getIP(),host.getPort(), args );
                    if( isOk ){
                        setActiveOk = view.initor.mdb.isActive();
                    }else{
SanBootView.log.warning(getClass().getName(),"Can' get active flag. So we will think boot device partition hasn't active flag." );                        
                        setActiveOk = false;
                    }
                    
                    if( !setActiveOk ){
                        if( isOk ){
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.needSetActive") +" [ " +bootDirDevPath +" ]"; 
                            runPane.setLogOnTabpane( errMsg, row );
                            writeLogBuf( errMsg );
                        }else{
                            errMsg =  SanBootView.res.getString("InitBootHostWizardDialog.log.setactive") +" " + bootDirDevPath +" "+
                                           SanBootView.res.getString("common.failed");
                            runPane.setLogOnTabpane( errMsg, row ); 
                            writeLogBuf( errMsg );
                        }
                    }
                }
                
                // 获取网络启动时的分区,并保存该信息
                savePartInfoOk = saveInfo(
                    host.getNetbootDiskInfo(),
                    view.initor.mdb.getUnixSysPartStrContents(),
                    row
                );
                if( savePartInfoOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                }else{
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                              SanBootView.res.getString("common.failed"); 
                    runPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg );
                }
                
                // 获取恢复mapping表,并保存该表
                rstMapStr = selectRestDiskPane.getRstMappingTable(); 
                saveRstMapOk = saveInfo(
                    host.getRstMapFileName(),    
                    rstMapStr, 
                    row
                );
                if( saveRstMapOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.saveRstMapInfo")+" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                }else{
                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.saveRstMapInfo")+" "+
                              SanBootView.res.getString("common.failed"); 
                    runPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg );
                }
                
                // 如果源盘恢复全部成功，则将临时mount起来的本地盘umount掉
                umountOk = true;
                if( allFinished ){
                    destList = selectRestDiskPane.getRstDestList();
                    size = destList.size();
                    size1 = partList.size();
                    for( i=0; i<size; i++ ){
                        dest = (String)destList.elementAt(i);
SanBootView.log.debug( getClass().getName(), " dest: " + dest );
                        for( j=0; j<size1; j++ ){
                            part = (SystemPartitionForUnix)partList.elementAt(j);
SanBootView.log.debug( getClass().getName()," part info: "+part.mp ); 
                            if( part.mp.equals( dest ) ){ 
                                // 执行umount命令
                                isOk = view.initor.mdb.umountFs( host.getIP(),host.getPort(), dest );
                                if( isOk ){
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.umount") +dest+" "+
                                            SanBootView.res.getString("common.ok"), 
                                        row
                                    );
                                }else{
                                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.umount") +dest+" "+
                                              SanBootView.res.getString("common.failed") + " : " + view.initor.mdb.getErrorMessage(); 
                                    runPane.setLogOnTabpane( errMsg,row );
                                    writeLogBuf( errMsg );
                                    umountOk = false;
                                }
                        
                                break;
                            }
                        }
                    }
                }
                
                // 每次都修改label,以防用户随时更改label
                dev_label_list = selectRestDiskPane.getDevAndLabelList();
                size = dev_label_list.size();
                addLabel = true;
                for( i=0; i<size; i++ ){
                    dev_label = (Object[])dev_label_list.get(i);
                    isOk = view.initor.mdb.changeFsLabel( host.getIP(), host.getPort(), (String)dev_label[0] +" "+(String)dev_label[1] );
                    if( !isOk ){
                        errMsg = SanBootView.res.getString("SelectRestoreDiskPane.error.addlabel") + " [ "+(String)dev_label[0] +" , "+(String)dev_label[1]+" ]";
                        runPane.setLogOnTabpane( errMsg,row );
                        writeLogBuf( errMsg );
                        addLabel = false;
                    }
                }
                
                if( addLabel && saveBootInfoOk && restorenetfile && setActiveOk && savePartInfoOk && saveRstMapOk && umountOk ){
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), row, 2
                    );                    
                    if( allFinished ){
                        allFinished = true;
                    }
                }else{
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                    );
                    allFinished = false;
                }
                
                recordUWSRpt( allFinished,partList );
                
                continue;
            } // all tasks are finished. 
            
            runPane.setCurTabPane( row );
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), row, 2
            );
            
            UniProfile profile = collectRestInfo( task.parm,task.preSnapCmd,task.postSnapCmd );
            if( profile == null ){
                runPane.setLogOnTabpane( errMsg, row );
                writeLogBuf( errMsg );
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                );
                allFinished = false;
            }else{
System.out.println(" restore profile:\n" + profile.prtMe() );
                tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_RESTORE );
                if( tmpFile == null ){
                    errMsg =  SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
                    writeLogBuf( errMsg );
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                    );
                    allFinished = false;
                }else{
                    String name = ResourceCenter.TMP_DIR  + tmpFile.getName();    
                    profile.setProfileName( name );
                    profile.setIdentityProfileName();
                    profile.setHeaderProfileName();
SanBootView.log.info(getClass().getName(), " restore profile:\n" + profile.prtMe() );
                    
                    if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),profile.prtMe() ) ){
                        errMsg =  SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                                    view.initor.mdb.getErrorMessage();
                        writeLogBuf( errMsg );
                        runPane.setTaskStatus( InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2 );         
                        allFinished = false;
                        tmpFile.delete();
                    }else{
                        tmpFile.delete();
                        
                        isOkForHandleUUID = true;
                        if( isRstOS( task.parm ) ){
                            isOkForHandleUUID = handleUUID( row );
                        }

                        if( isOkForHandleUUID ){
                            try{
                                rst = new RunBackup(
                                    ResourceCenter.getCmd( ResourceCenter.CMD_DATA_ANTI_DUP )+
                                    profile.getProfileName() +
                                    " -clnt=" +
                                    bkClnt.getID(),
                                    view.getSocket()
                                );
    SanBootView.log.info( getClass().getName(), " data-restore cmd: " + rst.getCmdLine() );
                                rst.run();
                            }catch( Exception ex ){
                                rst.setExceptionErrMsg( ex);
                                rst.setExceptionRetCode( ex );
                            }
    SanBootView.log.info( getClass().getName(), " data-restore cmd retcode: " + rst.getRetCode() );

                            if( !rst.isOk() ){
    SanBootView.log.error( getClass().getName(), " data-restore cmd errmsg: " + rst.getErrMsg() );
                                allFinished = false;
                                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.dupRstCmdFail");
                                runPane.setLogOnTabpane( errMsg,row );
                                writeLogBuf( errMsg  );
                                runPane.setTaskStatus(
                                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                                );
                            }else{
                                // 开始监控
                                profList.clear();
                                profList.add( profile );
                                getProcessThread = new GetDataDupProcess(
                                    view,
                                    runPane,
                                    profList,
                                    task.toString(),
                                    row
                                );
                                getProcessThread.start();

                                isFinished = false;
                                while( !isFinished ){
                                    isFinished = getProcessThread.isToEnd();
                                    try{
                                        Thread.sleep( 4*1000 );
                                    }catch(Exception ex){
                                    }
                                }

                                if ( allFinished ){ // 截至到上一次，任务全部成功
                                    allFinished = getProcessThread.getLastResult();
                                }

                                if( getProcessThread.getLastResult() ){
                                    runPane.setTaskStatus(
                                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), row, 2
                                    );
                                }else{
                                    runPane.setTaskStatus(
                                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                                    );
                                }
                            }
                        }else{
                            if ( allFinished ){ // 截至到上一次，任务全部成功
                                allFinished = false;
                            }
                            runPane.setTaskStatus(
                                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                            );
                        }
                    }
                }
            }
        }
    }

    private boolean isRstOS( Vector rstMapList ){
        int size = rstMapList.size();
        for( int i=0; i<size; i++ ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)rstMapList.elementAt( i );
            String srcdrive = binder.src.substring( 0,1 );
            if( srcdrive.toUpperCase().equals("/") ){
                return true;
            }
        }
        return false;
    }

    BackupClient bkClnt = null;
    public UniProfile collectRestInfo( Vector mpList,String snapBefCmd,String snapPostCmd ){
        UniProfile profile  = new UniProfile();
        UniProIdentity identity = profile.getUniProIdentity();
        UniProHeader header  = profile.getUniProHeader();
        UniProDrive  drive1  = profile.getUniProDrive1();
        UniProBackup backup  = profile.getUniProBackup();
        UniProIBoot  iboot   = profile.getUniProIBoot();
        
        if( host.isOriginalBootHost() ){
            BootHost bHost = view.initor.mdb.getBootHostFromVector( host.getID() );
            if( bHost == null ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.missingBHost");
SanBootView.log.error( getClass().getName(),"Missing client,id: "+host.getID() );        
                return null;
            }
            
            if( bkClnt == null ){
                bkClnt = view.initor.mdb.getBkClntOnUUID( bHost.getUUID() );
                if( bkClnt == null ) {
                    errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.missingD2DClnt");
SanBootView.log.error( getClass().getName(),"Missing d2d client,uuid: "+bHost.getUUID() );            
                    return null;
                }
            }
        }else { 
            bkClnt = view.initor.mdb.getBkClntForRestOriDisk( host.getDst_agent_ip(), host.getDst_agent_port() );
            if( bkClnt == null ){
                bkClnt = new BackupClient(
                    BackupClient.FLAG_FOR_RST_ORI_DISK, host.getDst_agent_ip(), BackupClient.FLAG_FOR_RST_ORI_DISK,host.getDst_agent_port(), host.getDst_agent_ostype(), host.getDst_agent_id()
                );
                
                if( view.initor.mdb.addOneClient( bkClnt ) ){
                    bkClnt.setID( view.initor.mdb.getNewId() );
                    view.initor.mdb.addBakClntIntoCache( bkClnt );
                }else{
                    errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_CLIENT ) +": "+ view.initor.mdb.getErrorMessage();
SanBootView.log.error( getClass().getName(),"add d2d client for restoring original disk failed." );    
                    return null;
                }
            }
SanBootView.log.info( getClass().getName()," ready to restore original disk using this ip: "+ host.getDst_agent_ip() );            
        }
        
        int size = mpList.size();
        String src = "";
        String target="";
        boolean aIsFirst = true;
        for( int i=0; i<size; i++ ){
            BindOfSrcAndDest binder = (BindOfSrcAndDest)mpList.elementAt( i );
            src += binder.src+";";
            if( aIsFirst ){
                target = binder.src+"-?"+binder.dest;
                aIsFirst = false;
            }else{
                target += "-?"+binder.src+"-?"+binder.dest;
            }
        }
        
        // 生成 identity 部分  ���
        identity.setClntID( bkClnt.getID()+"" );
        identity.setAction("restore-file");
        identity.setTarget( target );
        
        // 生成 header 部分
        header.setAct("restore-file"); 
        header.setSnapPreCmd( snapBefCmd );
        header.setSnapPostCmd( snapPostCmd ); 
        boolean isSnapBefCmdNull = snapBefCmd.equals("");
        boolean isSnapAftCmdNull = snapPostCmd.equals("");
        
        if( !isSnapBefCmdNull || !isSnapAftCmdNull ){
            header.setLinux_lvm_snap("1");
        }
        
        getMpListForLinux( mpList );
        String src_dest_map = getDestDevPathForLinux( true );
        if( src_dest_map == null ){
            return null;
        }else{
            header.setSource_dest_reference( src_dest_map );
        }
        
        // 生成 drive-1部分
        String path = getDestDevPathForLinux( false );
        if( path == null ){
            return null;
        }else{
            drive1.setPath( path );
        }

        String lvm_refer = getLvmReference();
        if( lvm_refer == null ){
            return null;
        }else{
            header.setLinux_lvm_reference( lvm_refer );
        }
        
        // 生成 Backup部分
        backup.setSrc( src );
        backup.setSrcType( "4" );
        backup.setTarget( target );
        backup.setKillPreCmd( "1" );
        backup.setBlkIncRstMode( "0" );
        backup.setPhyIncJudgeTimeFlag( "0" );
        backup.setBakWithSnapFlag( "1" );
        
        // 生成iboot部分
        iboot.cleanIboot_af_cmd();
        iboot.setUws_username( view.initor.user );
        iboot.setUws_passwd( view.initor.passwd );
        iboot.setUws_ip( view.initor.getTxIP(bkClnt.getIP()) );
        iboot.setUws_port( view.initor.port+"" );
        
        return profile;
    }
    
    Hashtable unixSrcList = new Hashtable();
    private void getMpListForLinux( Vector mpList ){ 
        BindOfFSAndDevNo binder;
        BindOfSrcAndDest binder1;
        
        unixSrcList.clear();
        int size = mpList.size();
        for( int i=0; i<size; i++ ){
            binder1 = (BindOfSrcAndDest)mpList.elementAt( i );
            binder = new BindOfFSAndDevNo();
            binder.mp = binder1.src;
            unixSrcList.put( binder1.src, binder );
        }
    }
    
    private String getDestDevPathForLinux( boolean withLabel ){
        VolumeMap lv,vg,tgt;
        MirrorDiskInfo md = null;
        String bkdir;
        boolean aIsFirst = true;
        String drivepath="";
        int tid;
        
        errMsg = "";
        
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
        ArrayList diskInfoList = view.initor.mdb.getMDIFromCacheOnSrcAgntID( host.getID() );
      
SanBootView.log.debug( getClass().getName()," mp size:" + unixSrcList.size() );
        
        if( unixSrcList.size() <=0 ){
            errMsg = SanBootView.res.getString("EditProfileDialog.error.getMp");
            return null;
        }
        
        Enumeration list  = unixSrcList.elements();
        while( list.hasMoreElements() ){
            BindOfFSAndDevNo binder =(BindOfFSAndDevNo) list.nextElement();
SanBootView.log.debug(getClass().getName(), "====> " + binder.mp );
            bkdir = binder.mp;
            
            if( host.isRealBootHost() ){
                lv = getRealLVOnClntIDAndMPForLinux( volMapList,binder.mp );
                if( lv == null ){
    SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + binder.mp );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ binder.mp;
                    drivepath = null;
                    break;
                }else{
                    tgt = getTgtOnVGname( volMapList,lv.getVolDesc() );
                    vg = getVGOnVGName( volMapList,lv.getVolDesc() );
                    if( tgt == null || vg == null ){
    SanBootView.log.error(getClass().getName(), "\nVG or Target is null,exit." );
                        errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : "+ lv.getVolName();
                        drivepath = null;
                        break;
                    }else{
                        tid = tgt.getVolTargetID();
                    }
                }
            }else{
                md = getRealLVOnClntIDAndMP( diskInfoList, binder.mp );
                if( md == null ){
                    // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
SanBootView.log.error( getClass().getName(), "\nMirrorDisk is null in MDB: " + binder.mp );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ binder.mp;
                    drivepath = null;
                    break;
                }else{
                    //tid = md.
                    tid = 32908; // 随便赋个值就行
                }
            }
            
            if( aIsFirst ){
                if( !withLabel ){
                    drivepath = ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                            ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tid;
                }else{
                    drivepath = bkdir+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                        ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tid;
                }
                aIsFirst = false;
            }else{
                if( !withLabel ){
                    drivepath+="-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                        ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tid;
                }else{
                    drivepath+="-?"+bkdir+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                        ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tid;
                }
            }
        }
        
        return drivepath;
    }
    
    public VolumeMap getRealLVOnClntIDAndMPForLinux( Vector list,String mp ){
        VolumeMap lv;
        
        Vector lvList = getRealLVListOnClntID( list );
        int size = lvList.size();
        for( int i=0; i<size; i++ ){
            lv = (VolumeMap)lvList.elementAt(i);
            if( lv.getVolDiskLabel().equals( mp ) ){
                return lv;
            }
        }
        
        return null;
    }
    
    public MirrorDiskInfo getRealLVOnClntIDAndMP( ArrayList list,String mp ){
        MirrorDiskInfo md;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            md = (MirrorDiskInfo)list.get( i );
            if( md.getSrc_agent_mp().equals( mp ) ){
                return md;
            }
        }
        
        return null;
    }
    
    public Vector getRealLVListOnClntID( Vector list ){
        VolumeMap volMap;
        int tid;
        
        Vector ret = new Vector();
        
        //Vector lvList = getLVListOnClntID( list,null );
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = (VolumeMap)list.elementAt(i);
            tid = getTgtIDOnVGname( list,volMap.getVolDesc() );
            if( tid != -1 ){
                ret.addElement( volMap );
            }
        }
        
        return ret;
    }
    
    public int getTgtIDOnVGname( Vector list,String vgname ){
        VolumeMap tgt = getTgtOnVGname( list,vgname );
        if( tgt!= null ){
            return tgt.getVolTargetID();
        }else{
            return -1;
        }
    }
    
    public VolumeMap getTgtOnVGname( Vector list,String vgname ){
        Vector tgtList = getTgtListOnClntIDAndVg( list,vgname );
        if( tgtList.size() > 0 ){
            return (VolumeMap)tgtList.elementAt( 0 );
        }else{
            return null;
        }
    }
    
    public Vector getTgtListOnClntIDAndVg( Vector list, String vgname ){
        VolumeMap volMap;
        Vector ret = new Vector();
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = (VolumeMap)list.elementAt(i);
            if( volMap.isTGT() ){
                if( vgname!=null ){
                    if( volMap.getVolDiskLabel().equals( vgname ) ){
                        ret.addElement( volMap );
                    }
                }else{
                    ret.addElement( volMap );
                }
            }
        }
        
        return ret;
    }
   
    public VolumeMap getVGOnVGName( Vector list,String vgname ){
        Vector vgList = getVgListOnClntID( list );
        int size = vgList.size();
        for( int i=0; i<size; i++ ){
            VolumeMap vg =(VolumeMap)vgList.elementAt(i);
            if( vg.getVolName().equals( vgname ) ){
                return vg;
            }
        }
        return null;
    }
    
    public Vector getVgListOnClntID( Vector list ){
        VolumeMap volMap;
        Vector ret = new Vector();
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = (VolumeMap)list.elementAt(i);
            if( volMap.isVG() ){
                ret.addElement( volMap );
            }
        }
        
        return ret;
    }   
        
    private String getLvmReference(){
        StringBuffer buf  = new StringBuffer();
    
        errMsg = "";
        
        if( unixSrcList.size() <=0 ){
            errMsg = SanBootView.res.getString("EditProfileDialog.error.getMp");
            return null;
        }
        
        String lvmType = "";
        
        Enumeration list = unixSrcList.elements();
        while( list.hasMoreElements() ){
            BindOfFSAndDevNo binder =(BindOfFSAndDevNo) list.nextElement();
            String mp = binder.mp;
SanBootView.log.debug(getClass().getName(), "====> " + binder.mp );
            LVInfo info = findLVM( mp );
            if( info == null ){
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ binder.mp;
                buf = null;
                break;
            }else{
                buf.append( "serverip-?");
                buf.append( view.initor.getTxIP(host.getIP()) );
                buf.append( "-?tgtid-?" );
                buf.append( info.tid );
                buf.append( "-?lvmtype-?" );
                buf.append( lvmType );
                buf.append( "-?vgname-?" );
                buf.append( info.vg );
                buf.append( "-?lvname-?" );
                buf.append( info.lv );
                buf.append( "-?fstype-?" );
                buf.append( info.fstype );
                buf.append( ";" );
            }
        }
        
        if( buf == null ){
            return null;
        }else{
            return buf.toString();
        }
    }
    
    private LVInfo findLVM( String mp ){
        int size = lvmInfo.size();
        for( int i=0; i<size; i++ ){
            LVInfo info =(LVInfo)lvmInfo.get(i);
            if( info.mp.equals( mp ) ){
                return info;
            }
        }
        
        return null;
    }
    
    public String autoMountVol( HashMap rstMapperList ){
        DestDevice dest;
        String mp,src;
        boolean isOk,aIsFirst=true;
        
        StringBuffer aErrMsg = new StringBuffer();
        String ip = host.getIP();
        int port = host.getPort();
        
        Set set = rstMapperList.keySet(); 
        Iterator iterator = set.iterator();
        while( iterator.hasNext() ){
            RestoreMapper maper = (RestoreMapper)rstMapperList.get( iterator.next() );
            src = maper.getSrc();
            dest = maper.getDest();
            mp = dest.getMp();
            
            if( src.equals(ResourceCenter.SWAP_MP) )continue;
            
            isOk = view.initor.mdb.mntDevice( ip, port,dest.getVolName(), mp );
            if( !isOk ){
                if( aIsFirst ){
                    aErrMsg.append( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.mntDisk")+" : \n" + mp );
                    aIsFirst = false;
                }else{
                    aErrMsg.append(" , " + mp );
                }
            }
        }
        
        return aErrMsg.toString();
    }
    
    public RetValObj sizeIsMatched( String src,String dest ){
        int i,size;
        long free,occupied;
        RetValObj ret = new RetValObj();
        SystemPartitionForUnix part,srcPart=null,destPart=null;
        
SanBootView.log.info( getClass().getName(), "compare size: src==> "+ src+ " dest==> "+dest );
        size = partList.size();
        for( i=0; i<size; i++ ){
            part = (SystemPartitionForUnix)partList.elementAt(i);
SanBootView.log.info( getClass().getName()," partition: " + part.mp );
            if( part.mp.equals( src ) ){
                srcPart = part;
            }else if( part.mp.equals( dest ) ){
                destPart = part;
            }
        }
        
        if( srcPart!=null && destPart!=null ){
            occupied = srcPart.getUsedInMega();
SanBootView.log.info( getClass().getName(),"src disk occupied: "+ occupied );     
            if( occupied <0 ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.badOccupied");
                ret.isOk = false;
                return ret;
            }
            
            free = destPart.getAvailableInMega();
SanBootView.log.info( getClass().getName(),"dest disk free: "+ free );    
            if( free <=0 ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.badFree");
                ret.isOk = false;
                return ret;
            }
            
            if( free < occupied ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.tooSmall") + " [ " + free + " < " + occupied + " ]";
                ret.isOk = false;
                return ret;
            }
            
            return ret;
        }else{
            if( srcPart == null ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.notFoundSrc");
            }else{
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.notFoundDest");
            }
            ret.isOk = false;
            
            return ret;
        }
    }

    private String getOsDestDevPath(){
        /*
        int i,size;
        SystemPartitionForUnix part;

        size = partList.size();
        int rootRow = selectRestDiskPane.getSelectedRowOnMp("/");
        String mp = selectRestDiskPane.getLocalDiskMp( rootRow );
        for( i=0;i<size;i++ ){
            part = (SystemPartitionForUnix)partList.elementAt(i);
            if( part.mp.equals( mp ) ){
                return part.dev_path;
            }
        }
        return null;
         */

        int rootRow = selectRestDiskPane.getSelectedRowOnMp("/");
        return selectRestDiskPane.getLocalDiskMp( rootRow );
    }

    private String getBootDevPath(){
        int size,i;
        SystemPartitionForUnix part;
        String mp;
        
        size = partList.size();
        int bootRow = selectRestDiskPane.getSelectedRowOnMp("/boot");
SanBootView.log.info(getClass().getName()," bootRow =======> : "+bootRow );
        if( bootRow == -1 ){
            int rootRow = selectRestDiskPane.getSelectedRowOnMp("/");
            mp = selectRestDiskPane.getLocalDiskMp( rootRow );
            for( i=0;i<size;i++ ){
                part = (SystemPartitionForUnix)partList.elementAt(i);
                if( part.mp.equals( mp ) ){
                    return part.dev_path;
                }
            }
        }else{
            mp = selectRestDiskPane.getLocalDiskMp( bootRow );
SanBootView.log.info(getClass().getName(), " boot on local disk's mp =======> : "+mp );
            for( i=0; i<size; i++ ){
                part = (SystemPartitionForUnix)partList.elementAt(i);
                if( part.mp.equals( mp ) ){
                    return part.dev_path;
                }
            }
        }
        
        return null;
    }
    
    private boolean saveInfo( String confile,String contents,int row ){        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_DISKINFO );
        if( tmpFile == null ){
            errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
            runPane.setLogOnTabpane( errMsg,row);
            writeLogBuf( errMsg );
            return false; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            errMsg = SanBootView.res.getString("common.errmsg.sendFileFailed");
            runPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg );
            tmpFile.delete();
            return false;
        }    
           
        tmpFile.delete();
            
        // 将tmpFile move to profile dir
        boolean isOk = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile.getName(), confile      
        );
        
        return isOk;   
    }

    private SystemPartitionForUnix getSysPart( Vector sysPartList,String mp ){
        int size = sysPartList.size();
        for( int i=0; i<size; i++ ){
            SystemPartitionForUnix part = (SystemPartitionForUnix)sysPartList.elementAt( i );
            if( part.isSamePartition( mp ) ) {
                return part;
            }
        }
        return null;
    }

    private String statisticRestoreDataSize( Vector sysPartList ){
        String src;
        int num,row,i,size;
        boolean aIsFirst = true;

        StringBuffer statis_buf = new StringBuffer();

        num = runPane.getTableRow();
        for( row=0; row<num; row++ ){
            InitTask task = runPane.getTask( row );  // 肯定有这个任务�
            if( row == num-1 ){ // 保存其他信息( the last task )
                continue;
            }else{
                size = task.parm.size();
                for( i=0; i<size; i++ ){
                    BindOfSrcAndDest binder = (BindOfSrcAndDest)task.parm.elementAt( i );
                    src  = binder.src;

                    SystemPartitionForUnix part = this.getSysPart( sysPartList,src );
                    if( part != null ){
                        if( aIsFirst ){
                            statis_buf.append( src+"-?"+part.getUsedInMega() );
                            aIsFirst = false;
                        }else{
                            statis_buf.append( "-?" + src+"-?"+part.getUsedInMega() );
                        }
                    }
                }
            }
        }
        return statis_buf.toString();
    }
    
    private void recordUWSRpt( boolean initOk,Vector sysPartList ){
        String msg;
        
        UWSReport rpt = new UWSReport();

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime( date );
        
        int year  = today.get( Calendar.YEAR );
        String stime = year + "";
        int month = today.get( Calendar.MONTH ) + 1;
        if( month<10 ){
            stime+= "0" + month;
        }else{
            stime+=month;
        }
        int day   = today.get( Calendar.DAY_OF_MONTH );
        if( day <10 ){
            stime+= "0" + day;
        }else{
            stime+=day;
        }
        int hour  = today.get(Calendar.HOUR_OF_DAY);
        if( hour <10 ){
            stime+= "0" + hour;
        }else{
            stime+=hour;
        }
        int min   = today.get(Calendar.MINUTE);
        if( min <10 ){
            stime +="0"+min;
        }else{
            stime+=min;
        }
        int sec   = today.get(Calendar.SECOND);
        if( sec <10 ){
            stime+="0"+sec;
        }else{
            stime+=sec;
        }
        
        rpt.setSTime( stime ); 
        rpt.setClntName( host.getIP() );

        rpt.setTaskClntId( ( host.getDst_agent_id() > 0 ) ? host.getDst_agent_id() : host.getSrc_Agnt_id()  );
        rpt.setTask_clnt_type( ( host.getDst_agent_id() > 0 ) ? DestAgent.TYPE_DST_AGNT : DestAgent.TYPE_ORI_HOST );
        rpt.setTask_parent_clnt_id( this.getTaskParentClntID( host ) );
        rpt.setTask_parent_clnt_type( this.getTaskParentClntType( host ) );
        rpt.setTask_clnt_mac( host.getDst_agent_mac() );

        rpt.setTType( UWSReport.TASK_TYPE_RECOVER_LOCALDISK );
        rpt.setTResult( initOk? UWSReport.TASK_RESULT_END:UWSReport.TASK_RESULT_FAIL );
        
        msg = logBuf.toString();
        if( msg.getBytes().length > 1014 ){
            byte[] arr = msg.getBytes();
            String newmsg = new String(arr,0,1014 );
            //rpt.setTaskMsg( initOk? SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") : newmsg );
            rpt.setTaskMsg( initOk?this.statisticRestoreDataSize( sysPartList ):newmsg );
        }else{
            //rpt.setTaskMsg( initOk? SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") : msg );
            rpt.setTaskMsg( initOk?this.statisticRestoreDataSize( sysPartList ):msg );
        }
        
        String fname = generateUWSRptTmpFile( rpt.prtMe() );
        if( fname != null ){
            if( !view.initor.mdb.addReport( fname ) ){
                // save in local host 
                saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_RESTL_RPT +stime );
            }
        }else{
            // save in local host
            saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_RESTL_RPT + stime );
        }
    }
    
    private String generateUWSRptTmpFile( String contents ){
        String fname;
        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_USWTMP );
        if( tmpFile == null ){
            return null; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            tmpFile.delete();
            return null;
        }    
        
        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }
    
    private void saveUWSRpt( String contents,String fname ){
        try{
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File( path );
            
            f1.createNewFile();
            
            PrintWriter out = new PrintWriter( new FileWriter(f1),true );
            out.print( contents );
            out.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    public boolean reGetUnixPart(){
        // 重新获取最新的系统分区信息
        boolean isOk = view.initor.mdb.getUnixPart( host.getIP(), host.getPort(), "list_mp.sh" );
        if( isOk ){
            partList = view.initor.mdb.getUnixSysPart();
        }else{
SanBootView.log.error(getClass().getName(),  "Can' get newer system partition. We can't tolerant this error. "); 
        } 
        return isOk;
    }
    
    public boolean isExist( String dest ){ 
        SystemPartitionForUnix part;
        int size = partList.size();
        for( int i=0; i<size; i++ ){
            part = (SystemPartitionForUnix)partList.elementAt(i);
            
          //  if( part.mp.startsWith("/media/") ){
          //      tmp = part.mp.substring(7);
          //      part.mp = "/mnt/"+tmp;
          //  }
            
SanBootView.log.info(getClass().getName(), "part mp: "+part.mp );           
            if( part.mp.equals( dest ) ){
                return true;
            }
        }
        
        return false;
    }
    
    public String getDevName( String dest ){
        SystemPartitionForUnix part;
        int size = partList.size();
        for( int i=0; i<size; i++ ){
            part = (SystemPartitionForUnix)partList.elementAt(i);
            if( part.mp.equals( dest ) ){
                return part.dev_path;
            }
        }
        
        return "";
    }
    
    public boolean isLocalDisk( String dest ){
        SystemPartitionForUnix part;
        
        int size = partList.size();
        for( int i=0; i<size; i++ ){
            part = (SystemPartitionForUnix)partList.elementAt(i);
            if( part.mp.equals( dest ) ){
                if( part.vender.toUpperCase().equals("ODYSYS") ){
                    return false;
                }
            }
        }
        
        return true;
    }
}

class MountOldFs extends Thread {
    JDialog diag;
    RestoreOrigiDiskForUnixWizardDialog pdiag;
    HashMap rstMapperList;
    
    Runnable close = new Runnable(){
        public void run(){
            diag.dispose();
        }
    };
    
    public MountOldFs( JDialog diag,RestoreOrigiDiskForUnixWizardDialog pdiag,HashMap rstMapperList ){
        this.diag = diag;
        this.pdiag = pdiag;
        this.rstMapperList = rstMapperList;
    }
    
    @Override public void run(){
        if( rstMapperList.size()>0 ){
            // 自动mount已有的文件系统
            pdiag.autoMountVol( rstMapperList );  // 不报告错误,由后面的校验来确保mount的分区没有问题
        }
        
        try{
            SwingUtilities.invokeAndWait( close );
        } catch( Exception e){
            e.printStackTrace();
        }
    }
}

class PrepareWorkForUnix extends Thread {
    JDialog diag;
    RestoreOrigiDiskForUnixWizardDialog pdiag;
    SanBootView view;
    DestAgent host;
    Vector partList = null;
    Vector volList = new Vector();
    HashMap rstMapperList;
    String osLoader;
    
    Runnable close = new Runnable(){
        public void run(){
            diag.dispose();
        }
    };
    
    public PrepareWorkForUnix( JDialog diag,RestoreOrigiDiskForUnixWizardDialog pdiag,SanBootView view,DestAgent host ){
        this.diag = diag;
        this.pdiag = pdiag; 
        this.view = view;
        this.host = host;
    }
    
    @Override public void run(){
        VolumeMap volMap,vg;
        LVWrapper1 lv;
        int i,size;
        
        while( true ){
            boolean isOk = view.initor.mdb.getUnixPart( host.getIP(), host.getPort(), "list_mp.sh" );
            if( isOk ){   
                partList = view.initor.mdb.getUnixSysPart();
            }else{
                break;
            }
            
            isOk = view.initor.mdb.getUnixRstMapper(  host.getRstMapFileName() ); 
            if( isOk ){
                rstMapperList = view.initor.mdb.getUnixRstMapperList();
            }else{
SanBootView.log.warning( getClass().getName(),"Can't get restore mapper from "+ host.getRstMapFileName() );                   
                rstMapperList = new HashMap();
            }
            
            if( host.isRealBootHost() ){
                // 找出当前系统中有哪些盘是 iscsi target volume,只有这些盘才能恢复到本地盘。
                size = partList.size();
                for( i=0; i<size; i++ ){
                    SystemPartitionForUnix part = (SystemPartitionForUnix)partList.elementAt(i);
                    volMap = view.initor.mdb.getRealLVOnClntIDAndMP( host.getID(), part.mp );
                    if( volMap!=null ){
                        vg = view.initor.mdb.getVGOnVGName( volMap.getVolDesc(), host.getID() );
                        if( vg!= null ){
                            lv = new LVWrapper1( volMap,vg.getVolDiskLabel() );  // lv,lvmType
                            lv.setFsType( part.fsType );
                            volList.addElement( lv );
                        }
                    }
                }

                // 找出当前系统的iscsi target volume中有哪些是swap device
                volMap = view.initor.mdb.getRealLVOnClntIDAndMP( host.getID(), ResourceCenter.SWAP_MP );
                if( volMap!= null ){
                    vg = view.initor.mdb.getVGOnVGName( volMap.getVolDesc(), host.getID() );
                    if( vg != null ){
                        //lv = new LVWrapper1( new VolumeMap( ResourceCenter.SWAP_MP ), "NONE" );
                        lv = new LVWrapper1( volMap, vg.getVolDiskLabel() );
                        lv.setFsType( ResourceCenter.SWAP_FS_TYPE );
                        volList.addElement( lv );
                    }
                }else{
                    lv = new LVWrapper1( new VolumeMap( ResourceCenter.SWAP_MP ), "NONE" );
                    lv.setFsType( ResourceCenter.SWAP_FS_TYPE );
                    volList.addElement( lv );
                }
            }else{
                // 1个盘可能存在多个snap usage，所以用hashmap进行过滤.(2010.4.6)
                HashMap<String,LVWrapper1> map = new HashMap<String,LVWrapper1>();

                ArrayList list = view.initor.mdb.getMSUFromCacheOnDstAgntID( host.getDst_agent_id() );
                size = list.size();
                for( i=0; i<size; i++ ){
                    SnapUsage su = (SnapUsage)list.get(i);
                    volMap = new VolumeMap( su.getExport_mp() );
                    lv = new LVWrapper1( volMap,"NONE" );
                    map.put( su.getExport_mp(), lv );
                }
                
                Iterator<String> iterator = map.keySet().iterator();
                while( iterator.hasNext() ){
                    LVWrapper1 lv1 = map.get( iterator.next() );
                    volList.addElement( lv1 ) ;
                }
            }
            
            isOk = view.initor.mdb.getOsLoaderTypeOnClnt( host.getOsloaderType() );
            if( isOk ){
                osLoader = view.initor.mdb.getOsLoaderType();
            }else{
                osLoader = null;
            }
            
            break;
        }
        
        try{
            SwingUtilities.invokeAndWait( close );
        } catch( Exception e){
            e.printStackTrace();
        }
    }
    
    public String getOSLoader(){
        return osLoader;
    }
    
    public Vector getVolList(){
        return volList;
    }
    
    public HashMap getRstMap(){
        return rstMapperList;
    }
    
    public Vector getPartList(){
        return partList;
    }
}
