/*
 * CreateOrphanVolDialog.java
 *
 * Created on 2006/12/28, 8:35 PM
 */

package guisanboot.ui;

import java.util.ArrayList;
import guisanboot.data.*;
import guisanboot.res.ResourceCenter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import mylib.tool.Check;

/**
 *
 * @author  Administrator
 */
public class CreateOrphanVolDialog extends javax.swing.JDialog {
    
    /**
     * Creates new form CreateOrphanVolDialog 
     */
    public CreateOrphanVolDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public CreateOrphanVolDialog( SanBootView view,ArrayList poolList ){
        this( view,true );
        myInit( view,poolList );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Volume Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Volume Size[GB] :");
        jLabel2.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextField1.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(jTextField1, gridBagConstraints);

        jTextField2.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jTextField2, gridBagConstraints);

        jLabel3.setText("Block Size :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jComboBox1.setPreferredSize(new java.awt.Dimension(29, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(jComboBox1, gridBagConstraints);

        jLabel4.setText("Pool :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jComboBox2.setPreferredSize(new java.awt.Dimension(29, 20));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jComboBox2, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 35, 5));

        jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 1, 2, 1)));
        jButton1.setText("OK");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 27));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.setPreferredSize(new java.awt.Dimension(75, 27));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton2);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.add(jSeparator1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        poolCombobox_process();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        PoolWrapper wrap = (PoolWrapper)jComboBox2.getSelectedItem();
        if( wrap == null ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("CreateOrphanVol.error.nonePool")
            );
            return;
        }
        
        Pool pool = wrap.pool;
        
        String _name = jTextField1.getText().trim();
        if( _name.equals("") ){
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("CreateOrphanVol.error.noneName")
            );
            return;
        }
        if( Check.checkInput( _name ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("CreateOrphanVol.error.badName")
            );
            return;
        }
        
        if( _name.getBytes().length >=255 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("CreateOrphanVol.error.nametoolong")
            );
            return;
        }
        
        // check whethre the name is same(由服务器检查)
        
        String blkSizeStr = (String)jComboBox1.getSelectedItem();
        int blk_size = BasicVDisk.getBlkSizeFromStr( blkSizeStr );
        long bksize = ( 1 << blk_size );
        
        String _val = jTextField2.getText().trim();
        if( _val.equals("") ){
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("CreateOrphanVol.error.noneVal")
            );
            return;
        }
        
        double fval = -1;
        try{
            fval = Double.parseDouble( _val );
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("CreateOrphanVol.error.invalidVal")
            );
            return;
        }
        
        double ff = ( fval*1024*1024*1024 + bksize-1 )/bksize;
SanBootView.log.debug(getClass().getName(),  "bk num: " + ff + " bksize: " + bksize);        
        //int bkNum =(int)(( fval*1024*1024*1024 + bksize-1 )/bksize);
        int bkNum = (int)ff;
        long val = bkNum*bksize;
        
        PoolInfo info = (PoolInfo)poolMap.get( new Integer( pool.getPool_id() ) );
        if( info == null ){
            boolean isOk = view.initor.mdb.getPoolInfo( pool.getPool_id() );
            if( !isOk ){
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_POOLINFO )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                return;
            }else{
                info = new PoolInfo( 
                    view.initor.mdb.getPoolTotalCap(),
                    view.initor.mdb.getPoolAvailCap(),
                    view.initor.mdb.getPoolVUsed()
                );
            }
        }
        
        long avail = info.getAvail();
        if( avail <=0 ){
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("CreateOrphanVol.error.noSpaceOnPool")+ " " +pool.getPool_name()
            );
            return;
        }else{
            if( val <=0 || val > avail ){
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("CreateOrphanVol.error.invalidVal")
                );
                return;
            }
        }
        
        values = new Object[4];
        values[0] = _name;
        values[1] = new Integer( blk_size );
        values[2] = new Integer( bkNum );
        values[3] = new Integer( pool.getPool_id() );
        
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        values = null;
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateOrphanVolDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    ////GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    ////GEN-END:variables
    
    Object[] values=null;
    SanBootView view;
    ArrayList poolList;
    
    private void myInit( SanBootView view,ArrayList poolList ){
        this.view = view;
        this.poolList = poolList;
        
        ArrayList list = BasicVDisk.getBlkSizeList();
        int size = list.size();
        for( int i=0; i<size; i++ ){
            jComboBox1.addItem( list.get(i) );
        }
        jComboBox1.setSelectedItem( BasicVDisk.BLK_SIZE_128K );
        
        size = poolList.size();
        for( int i=0; i<size; i++ ){
            PoolWrapper wrap = new PoolWrapper( (Pool)poolList.get(i) );
            jComboBox2.addItem( wrap );
        }
        regKeyboardAction();
        setupLanguage();
    }
    
    private void setupLanguage(){
        setTitle( SanBootView.res.getString("CreateOrphanVol.title"));
        jLabel1.setText(SanBootView.res.getString("CreateOrphanVol.label.name"));
        jLabel2.setText(SanBootView.res.getString("CreateOrphanVol.label.size"));
        jLabel3.setText(SanBootView.res.getString("CreateOrphanVol.label.blksize"));
        
        jButton1.setText( SanBootView.res.getString("common.button.ok"));
        jButton2.setText( SanBootView.res.getString("common.button.cancel"));
    }
    
    private void regKeyboardAction(){            
        jTextField1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField2.requestFocusInWindow();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
        
        jTextField2.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jComboBox1.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            //JComponent.WHEN_IN_FOCUSED_WINDOW
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
          
        jComboBox1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jComboBox2.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            //JComponent.WHEN_IN_FOCUSED_WINDOW
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
            
        jComboBox2.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jButton1.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            //JComponent.WHEN_IN_FOCUSED_WINDOW
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
    }
    
    private HashMap<Integer,PoolInfo> poolMap = new HashMap<Integer,PoolInfo>();
    private void poolCombobox_process(){
        PoolInfo info;
        Integer key;
        Pool pool;
        
        PoolWrapper wrap = (PoolWrapper)jComboBox2.getSelectedItem();
        if( wrap == null ) return;
        
        int sel = jComboBox2.getSelectedIndex();
        
        pool = wrap.pool;
        key = new Integer( pool.getPool_id() );
        Object obj = poolMap.get(  key );
        if( obj == null ){
            boolean isOk = view.initor.mdb.getPoolInfo( pool.getPool_id() );
            if( !isOk ){
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_POOLINFO )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                jLabel4.setText( 
                    SanBootView.res.getString("CreateOrphanVol.label.pool")+
                    SanBootView.res.getString("CreateOrphanVol.label.max")+
                    "   )"
                );
                return;
            }else{
                info = new PoolInfo( 
                    view.initor.mdb.getPoolTotalCap(),
                    view.initor.mdb.getPoolAvailCap(),
                    view.initor.mdb.getPoolVUsed()
                );
                poolMap.put( key,info );
                
                jLabel4.setText( 
                    SanBootView.res.getString("CreateOrphanVol.label.pool")+
                    SanBootView.res.getString("CreateOrphanVol.label.max")+
                    info.getAvailStr()+")"
                );
                
                wrap.pool.setTotalSize( view.initor.mdb.getPoolTotalCap() );
                wrap.pool.setFreeSize( view.initor.mdb.getPoolAvailCap() );
                wrap.pool.setUsed( view.initor.mdb.getPoolVUsed() );
            }
        }else{
            info = (PoolInfo)obj;
            jLabel4.setText( 
                SanBootView.res.getString("CreateOrphanVol.label.pool")+
                SanBootView.res.getString("CreateOrphanVol.label.max")+
                info.getAvailStr()+")"
            );
        }
    }
    
    public Object[] getValues(){
        return values;
    }
}

class PoolInfo{
    long total;
    long avail;
    long vused;
    
    public PoolInfo( long v1,long v2,long v3 ){
        total = v1;
        avail = v2;
        vused = v3;
    }
    
    public long getAvail(){
        return total-vused;
    }
    
    public String getAvailStr(){
        return BasicVDisk.getCapStr( getAvail() );
    }
}
