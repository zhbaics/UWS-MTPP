/*
 * EditMirrorJobDialog.java
 *
 * Created on 2008/6/11, ���PM�1:29
 */

package guisanboot.ui;

import guisanboot.MenuAndBtnCenterForMainUi;
import guisanboot.data.MirrorJob;
import guisanboot.data.Pool;
import guisanboot.data.PoolWrapper;
import guisanboot.data.UWSrvNode;
import guisanboot.res.ResourceCenter;
import java.awt.Point;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;

/**
 *
 * @author  zjj
 */
public class EditMirrorJobDialog extends javax.swing.JDialog {
    
    /** Creates new form EditMirrorJobDialog */
    public EditMirrorJobDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public EditMirrorJobDialog( SanBootView view,MirrorJob mj,String mjName,int func,boolean isTransferBranch){
        this( view,true );
        myInit( view,mj,mjName,func,isTransferBranch);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(351, 150));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Transfer Option"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jCheckBox1.setText("Continue Transfer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("DES Encry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel6.add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setText("Compressed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setText("Copy branch");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel6.add(jCheckBox4, gridBagConstraints);

        jCheckBox5.setText("Delete views");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel6.add(jCheckBox5, gridBagConstraints);

        jPanel4.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Remote UWS Server"));
        jPanel7.setPreferredSize(new java.awt.Dimension(10, 100));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("UWS Server :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel7.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Pool :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel7.add(jLabel4, gridBagConstraints);

        jComboBox1.setPreferredSize(new java.awt.Dimension(240, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel7.add(jComboBox1, gridBagConstraints);

        jComboBox2.setPreferredSize(new java.awt.Dimension(29, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel7.add(jComboBox2, gridBagConstraints);

        jPanel4.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("General"));
        jPanel5.setPreferredSize(new java.awt.Dimension(10, 175));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel5.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Desc : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel2, gridBagConstraints);

        jTextField1.setPreferredSize(new java.awt.Dimension(275, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel5.add(jTextField1, gridBagConstraints);

        jTextField2.setPreferredSize(new java.awt.Dimension(275, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel5.add(jTextField2, gridBagConstraints);

        jLabel5.setText("Type :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel5, gridBagConstraints);

        jComboBox3.setPreferredSize(new java.awt.Dimension(275, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel5.add(jComboBox3, gridBagConstraints);

        jLabel6.setText("intervaltime :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel6, gridBagConstraints);

        jTextField3.setPreferredSize(new java.awt.Dimension(275, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel5.add(jTextField3, gridBagConstraints);

        jLabel7.setText("maxlogtime :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel7, gridBagConstraints);

        jTextField4.setPreferredSize(new java.awt.Dimension(275, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel5.add(jTextField4, gridBagConstraints);

        jLabel8.setText("mgmaxsnapshot:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel5.add(jTextField5, gridBagConstraints);

        jPanel1.add(jPanel5, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(225, 40));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 10));

        jButton1.setText("OK");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);
        jPanel2.add(jSeparator1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ok_process();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ok_process(){
        String name = jTextField1.getText().trim();
        if( name.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditMirrorJobDialog.error.noneName")
            );
            return;
        }
        
        if( name.getBytes().length > 254 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditMirrorJobDialog.error.tooLongName")
            );
            return;   
        }
        
        String desc = jTextField2.getText().trim();
        if( !desc.equals("") ){
            if( desc.getBytes().length > 254 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditMirrorJobDialog.error.tooLongDesc")
                );
                return;  
            }
        }
        
        int mgintervaltime = 0;
        int mglogmaxtime = 0;
        int mgmaxsnapshot = 0;
        if( func == MenuAndBtnCenterForMainUi.FUNC_CRT_LMJ ){
            String mgIT = jTextField3.getText().trim();
            if( !"".equals(mgIT) ){
                try{
                    mgintervaltime = Integer.valueOf(mgIT);
                } catch ( Exception ex ){
                    JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditMirrorJobDialog.error.timeMustInteger")
                    );
                return;
                }
            }
            String mgLMT = jTextField4.getText().trim();
            if( !"".equals(mgLMT) ){
                try{
                    mglogmaxtime = Integer.valueOf(mgLMT);
                } catch ( Exception ex ){
                    JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditMirrorJobDialog.error.timeMustInteger")
                    );
                return;
                }
            }
            String mgMSS = jTextField5.getText().trim();
            if( !"".equals(mgLMT) ){
                try{
                    mgmaxsnapshot = Integer.valueOf(mgMSS);
                } catch ( Exception ex ){
                    JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditMirrorJobDialog.error.snapshotMustInteger")
                    );
                return;
                }
            }
        }
        
        
        Object obj1 = jComboBox1.getSelectedItem();
        if( obj1 == null ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditMirrorJobDialog.error.noneSWUSrvNode")
            );
            return;  
        }
        UWSrvNode uws =(UWSrvNode)obj1;
        
        Object obj2 = jComboBox2.getSelectedItem();
        if( obj2 == null ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditMirrorJobDialog.error.nonePool")
            );
            return;
        }
        
        PoolWrapper pool = (PoolWrapper)obj2;
        if( pool.pool.getRealFreeSize() <= 0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditMirrorJobDialog.error.insufficientPool")
            );
            return;
        }

        int type;
        if( ( func == MenuAndBtnCenterForMainUi.FUNC_CRT_MJ ) ||
            ( func == MenuAndBtnCenterForMainUi.FUNC_CRT_CJ )
        ){
            type = MirrorJob.MJ_TYPE_REMOTE;
        }else if( func == MenuAndBtnCenterForMainUi.FUNC_CRT_LMJ ){
            type = MirrorJob.MJ_TYPE_REMOTE_LOG_JOB;
        } else {
            String sType = (String)jComboBox3.getSelectedItem();
            if( sType.equals( SanBootView.res.getString(MirrorJob.MJ_TYPE_LOCAL_STRING ) ) ){
                type = MirrorJob.MJ_TYPE_LOCAL_TRACK_JOB;
            }else{
                type = MirrorJob.MJ_TYPE_REMOTE_TRACK_JOB;
            }
        }
System.out.println("mirror job type: " + type);

        if( type == MirrorJob.MJ_TYPE_LOCAL_TRACK_JOB ){
            view.initor.mdb.targetSrvName = null;
            String local_hostName = view.initor.mdb.getHostName();
            if( local_hostName.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditMirrorJobDialog.error.getSWUHostName")
                );
                return;
            }

            view.initor.mdb.targetSrvName = null;
            String remote_hostName = view.initor.mdb.getHostName(uws.getUws_ip(), uws.getUws_port(),
                pool.pool.getPool_id(), pool.pool.getPool_passwd()
            );
            if( remote_hostName.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditMirrorJobDialog.error.getSWUHostName")
                );
                return;
            }

            if( !local_hostName.equals( remote_hostName ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditMirrorJobDialog.error.mustLocalSWU")
                );
                return;
            }
        }

        if( !pool.pool.getPool_passwd().equals("") ){
            InputPasswordDiag inputPass = new InputPasswordDiag( view,uws,pool );
            int width  = 285+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 155+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            inputPass.setSize( width,height );
            inputPass.setLocation( getCenterPoint( width,height ) );
            inputPass.setVisible( true );
            
            String passwd = inputPass.getPasswd();
            if( passwd == null ) return;
        }else{
SanBootView.log.error(getClass().getName(), "there is no password for pool on destinated swu server.");
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditMirrorJobDialog.error.nopasswd")
            );
            return;
        }
        
        boolean con_trans = jCheckBox1.isSelected();
        boolean encrypt = jCheckBox2.isSelected();
        boolean compress = jCheckBox3.isSelected();
        boolean branch = jCheckBox4.isSelected();
        boolean delview = jCheckBox5.isSelected();
        
        int opt = 0;
        if( con_trans ){
            opt |= MirrorJob.MJ_OPT_CONTINUE;
        }
        if( encrypt ){
            opt |= MirrorJob.MJ_OPT_ENCRY;
        }
        if( compress ){
            opt |= MirrorJob.MJ_OPT_ZIP;
        }
        if( branch ){
            opt |= MirrorJob.MJ_OPT_BRANCH;
        }
        if( delview ){
            opt |= MirrorJob.MJ_OPT_DEL_VIEW;
        }
        values = new Object[9];
        values[0] = name;
        values[1] = desc;
        values[2] = uws;
        values[3] = pool.pool;
        values[4] = new Integer( opt );
        values[5] = new Integer( type );
        values[6] = new Integer( mgintervaltime*60 );
        values[7] = new Integer( mglogmaxtime*60 );
        values[8] = new Integer( mgmaxsnapshot ) ;
        
        this.dispose();
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        values = null;
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditMirrorJobDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
    
    SanBootView view;
    MirrorJob mj;
    Object[] values = null;
    ArrayList cache = new ArrayList();
    int func;
    
    private void myInit( SanBootView view,MirrorJob mj,String mjName,int func,boolean isTransferBranch){
        this.view = view;
        this.mj = mj;
        this.func = func;
        setupDestUWSrv();
        setupMirrorJobType();

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed();
            }
        });
        setupLanguage(func);      
        if( ( func == MenuAndBtnCenterForMainUi.FUNC_CRT_MJ ) ||
            (func == MenuAndBtnCenterForMainUi.FUNC_CRT_CJ )
        ){
            jPanel5.remove( this.jLabel5 );
            jPanel5.remove( this.jComboBox3 );
            jPanel5.remove( this.jLabel6 );
            jPanel5.remove( this.jLabel7 );
            jPanel5.remove(this.jLabel8);
            
            jPanel5.remove( this.jTextField3 );
            jPanel5.remove( this.jTextField4 );
            jPanel5.remove(this.jTextField5);
            setupGUI( mjName,isTransferBranch );
        } else if (func == MenuAndBtnCenterForMainUi.FUNC_CRT_LMJ){
            jPanel5.remove( this.jLabel5 );
            jPanel5.remove( this.jComboBox3 );
            setupGUI( mjName,isTransferBranch );
        }else{
            jPanel5.remove( this.jLabel6 );
            jPanel5.remove( this.jLabel7 );
            jPanel5.remove(this.jLabel8);
            jPanel5.remove( this.jTextField3 );
            jPanel5.remove( this.jTextField4 );
            jPanel5.remove(this.jTextField5);
            setupGUI("Inc"+mjName,isTransferBranch );
        }
        
    }
    
    private void setupLanguage( int func ){
        if( mj == null ){
            if( func == MenuAndBtnCenterForMainUi.FUNC_CRT_MJ ){
                setTitle( SanBootView.res.getString("EditMirrorJobDialog.dialogTitle.addMj"));
            }else if( func == MenuAndBtnCenterForMainUi.FUNC_CRT_MJ1){
                setTitle( SanBootView.res.getString("EditMirrorJobDialog.dialogTitle.addMj1"));
            }else{
                setTitle( SanBootView.res.getString("EditMirrorJobDialog.dialogTitle.addCj"));
            }
        }else{
            if( func == MenuAndBtnCenterForMainUi.FUNC_CRT_MJ ){
                setTitle( SanBootView.res.getString("EditMirrorJobDialog.dialogTitle.modMj") + " [ " + mj.getMj_job_name() +" ]" );
            }else if( func == MenuAndBtnCenterForMainUi.FUNC_CRT_MJ1 ){
                setTitle( SanBootView.res.getString("EditMirrorJobDialog.dialogTitle.modMj1") + " [ " + mj.getMj_job_name() +" ]" );
            }else{
                setTitle( SanBootView.res.getString("EditMirrorJobDialog.dialogTitle.modCj") + " [ " + mj.getMj_job_name() +" ]" );
            }
        }
        jLabel1.setText( SanBootView.res.getString("EditMirrorJobDialog.label.name"));
        jLabel2.setText( SanBootView.res.getString("EditMirrorJobDialog.label.desc"));
        jLabel3.setText( SanBootView.res.getString("EditMirrorJobDialog.label.swu"));
        jLabel4.setText( SanBootView.res.getString("EditMirrorJobDialog.label.pool"));
        jLabel5.setText( SanBootView.res.getString("EditMirrorJobDialog.label.type"));
        jLabel6.setText( SanBootView.res.getString("EditMirrorJobDialog.label.mgintervaltime"));
        jLabel7.setText( SanBootView.res.getString("EditMirrorJobDialog.label.mglogmaxtime"));
        jLabel8.setText( SanBootView.res.getString("EditMirrorJobDialog.label.mgmaxsnapshot"));

        jCheckBox1.setText( SanBootView.res.getString("EditMirrorJobDialog.checkbox.continue"));
        jCheckBox2.setText( SanBootView.res.getString("EditMirrorJobDialog.checkbox.des"));
        jCheckBox3.setText( SanBootView.res.getString("EditMirrorJobDialog.checkbox.compress"));
        jCheckBox4.setText( SanBootView.res.getString("EditMirrorJobDialog.checkbox.copybranch"));
        jCheckBox5.setText( SanBootView.res.getString("EditMirrorJobDialog.checkbox.delview"));        
        jButton1.setText( SanBootView.res.getString("common.button.ok"));
        jButton2.setText( SanBootView.res.getString("common.button.cancel"));
        TitledBorder bor = (TitledBorder)jPanel5.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditMirrorJobDialog.borderTitle.general")
        );
        bor = (TitledBorder)jPanel6.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditMirrorJobDialog.borderTitle.option")
        );
        bor = (TitledBorder)jPanel7.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditMirrorJobDialog.borderTitle.swu")
        );
    }
    
    boolean isInitia = true;
    private void setupGUI( String mjName,boolean isTransferBranch ){
        if( mj != null ){
            jTextField1.setText( mj.getMj_job_name() );
            jTextField2.setText( mj.getMj_desc() );
            jCheckBox1.setSelected(  mj.isContinue() );
            jCheckBox2.setSelected( mj.isEncrypt() );
            jCheckBox3.setSelected( mj.isZip() );
            jCheckBox4.setSelected( mj.isBranch() );
            jCheckBox5.setSelected( mj.isDelView() );
            jComboBox3.setSelectedItem(
                mj.isRemoteMjType()?
                SanBootView.res.getString( MirrorJob.MJ_TYPE_REMOTE_STRING ):
                SanBootView.res.getString( MirrorJob.MJ_TYPE_LOCAL_STRING )
            );
            if(mj.isRemoteLjType()){
                if( mj.getMg_interval_time() != -1 && mj.getMg_interval_time() != 0){
                    jTextField3.setText(mj.getMg_interval_time()/60+"");
                } else {
                    jTextField3.setText("");
                }
                if( mj.getMg_log_max_time() != -1 && mj.getMg_log_max_time() != 0){
                    jTextField4.setText(mj.getMg_log_max_time()/60+"");
                } else {
                    jTextField4.setText("");
                }
                if( mj.getMg_max_snapshot() != -1 && mj.getMg_max_snapshot() != 0){
                    jTextField5.setText(mj.getMg_max_snapshot()+"");
                } else {
                    jTextField5.setText("");
                }
            }
            jComboBox3.setEnabled( false );
            jComboBox3.setOpaque( false );
            jLabel5.setEnabled( false );
            jLabel5.setOpaque( false );
        }else{
            jTextField1.setText( mjName );
            jCheckBox1.setSelected( true );
            
            if( isTransferBranch ){
                jCheckBox4.setSelected( true );
            }
        }
        
        try{
            SwingUtilities.invokeLater( selectUWS );
        }catch( Exception ex ){
            ex.printStackTrace();
        }
    }
    
    public Object[] getValues(){
        return values;
    }

    private void performOnComboBox(){
        GetAllPoolThread thread;
        int i,size,uws_port;
        String uws_ip;
        PoolListItem poolListItem;

        Object obj = jComboBox1.getSelectedItem();
        if( obj == null ) return;

        UWSrvNode uws = (UWSrvNode)obj;
        uws_ip = uws.getUws_ip();
        uws_port = uws.getUws_port();

        ArrayList pools = hasOne( uws_ip,uws_port );
        if( pools == null ){
            thread = new GetAllPoolThread(
                view,
                uws_ip,
                uws_port
            );
            view.startupProcessDiag(
                SanBootView.res.getString("View.pdiagTitle.getPool2"),
                SanBootView.res.getString("View.pdiagTip.getPool2"),
                thread
            );

            jComboBox2.removeAllItems();
            ArrayList list = thread.getRet();
            if( list == null ){
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_POOL_REMOTE_UWS ) +" : "+view.initor.mdb.getErrorMessage()
                );
                return;
            }else{
                size = list.size();
                if( size <=0 ){
                    JOptionPane.showMessageDialog( view,
                        SanBootView.res.getString("MenuAndBtnCenter.error.noPool1")
                    );
                    return;
                }else{
                    boolean hasEnoughSpace = false;
                    for( i=0; i<size; i++ ){
                        Pool pool = (Pool)list.get(i);
                        if( pool.getRealFreeSize() >0 ){
                            hasEnoughSpace = true;
                            break;
                        }
                    }

                    if( !hasEnoughSpace ){
                        JOptionPane.showMessageDialog( view,
                            SanBootView.res.getString("MenuAndBtnCenter.error.noEnoughSpace1")
                        );
                        return;
                    }

                    pools = thread.getWraperRet();
                    size = pools.size();
                    for( i=0; i<size; i++ ){
                        jComboBox2.addItem( pools.get(i) );
                    }

                    poolListItem = new PoolListItem( uws_ip,uws_port, pools );
                    cache.add( poolListItem );

                    if( this.isInitia && ( mj != null ) ){
                        selectPool( mj.getMj_dest_pool() );
                        this.isInitia = false;
                    }
                }
            }
        }else{
            jComboBox2.removeAllItems();
            size = pools.size();
            for( i=0; i<size; i++ ){
                jComboBox2.addItem( pools.get(i) );
            }

            if( this.isInitia && ( mj != null ) ){
                selectPool( mj.getMj_dest_pool() );
                this.isInitia = false;
            }
        }
    }
    
    private void jComboBox1ActionPerformed(){
        performOnComboBox();
    }
    
    Runnable selectUWS = new Runnable(){
        public void run(){
            selectUWSrv();
        }
    };
    
    private void selectUWSrv( ){
        ComboBoxModel model = jComboBox1.getModel();
        int size = model.getSize();

        if( mj != null ){
            String ip = mj.getMj_dest_ip();
            int port  = mj.getMj_dest_port();
            for( int i=0; i<size; i++ ){
                UWSrvNode uws = (UWSrvNode)model.getElementAt(i);
                if( uws.getUws_ip().equals(ip) && ( uws.getUws_port() == port ) ){
                    jComboBox1.setSelectedItem( uws );
                    break;
                }
            }
        }else{
            if( size >0 ){
                jComboBox1.setSelectedItem( model.getElementAt(0) );
            }
        }
    }
    
    private void selectPool( int pool_id ){
        ComboBoxModel model = jComboBox2.getModel();
        int size = model.getSize();
        for( int i=0; i<size; i++ ){
            PoolWrapper pool = (PoolWrapper)model.getElementAt(i);
            if( pool.pool.getPool_id() == pool_id ){
                jComboBox2.setSelectedItem( pool );
                break;
            }
        }
    }
    
    private void setupDestUWSrv(){
        //ArrayList list = view.initor.mdb.getDestUWSrvNode();
        ArrayList list = view.initor.mdb.getAllUWSrv();
        int size = list.size();
        for( int i=0; i<size; i++ ){
            UWSrvNode uws = (UWSrvNode)list.get(i);
            jComboBox1.addItem( uws );
        }
    }

    private void setupMirrorJobType(){
        jComboBox3.addItem( SanBootView.res.getString( MirrorJob.MJ_TYPE_LOCAL_STRING ) );
        jComboBox3.addItem( SanBootView.res.getString( MirrorJob.MJ_TYPE_REMOTE_STRING ) );
    }
    
    private ArrayList hasOne( String uwsIP,int uwsPort ){
        int size = cache.size();
        for( int i=0; i<size; i++ ){
            PoolListItem item =(PoolListItem)cache.get(i);
            if( item.uws_ip.equals(uwsIP) && ( item.uws_port == uwsPort ) ){
                return item.pools;
            }
        }
        return null;
    }
    
    public Point getCenterPoint(int width,int height){
        int x = ( getSize().width - width ) / 2 + getX();
        int y = ( getSize().height - height ) / 2 + getY();
        return new Point(x,y);
    }
}

class PoolListItem {
    public String uws_ip;
    public int uws_port;
    public ArrayList pools;
    
    public PoolListItem( String uws_ip,int uws_port,ArrayList pools ){
        this.uws_ip = uws_ip;
        this.uws_port = uws_port;
        this.pools = pools;
    }
}
