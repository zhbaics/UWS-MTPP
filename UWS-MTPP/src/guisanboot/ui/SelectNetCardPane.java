/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SelectNetCardPane.java
 *
 * Created on 2009-12-9, 15:20:01
 */

package guisanboot.ui;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import guisanboot.data.*;
import guisanboot.ui.multiRenderTable.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author zjj
 */
public class SelectNetCardPane extends javax.swing.JPanel {

    /** Creates new form SelectNetCardPane */
    public SelectNetCardPane() {
        initComponents();
    }

    public SelectNetCardPane( SanBootView view ){
        this();
        myInit( view );
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 70));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 25));
        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    Object[] header;
    Object[] label;
    Vector ipListVect = null;
    JTableZ table; 
    SanBootView view;
    MyListSelectionListener2 myListener;
    WizardDialogSample wizardDiag;
    boolean isCluster = false;

    private void myInit( SanBootView _view ){
        view = _view;
        
        jTextArea1.setText(
            SanBootView.res.getString("InitBootHostWizardDialog.tip5")
        );
    }
        
    public void setWizardDialogSample( WizardDialogSample wdiag ){
        wizardDiag = wdiag;
    }

    public void setIsClusterFlag( boolean val ){
        this.isCluster = val;
    }
    
    public void setupNetCardTable( ArrayList cardList  ){
        int i;
        Object[][] cardTableData;
        Object nc;
        Vector ipList;
        MyComboBoxEditor[] editorArry;
        MyComboBoxRender[] renderArry;
        
        ipListVect = new Vector();
        int cardNum = cardList.size();
        cardTableData = new Object[cardNum][4]; 
        
        header = new Object[4]; // isSel?, interface,ip,mac
        label = new Object[cardNum]; 
        editorArry = new MyComboBoxEditor[cardNum];
        renderArry = new MyComboBoxRender[cardNum];
        
        header[0] = SanBootView.res.getString("SelectNetCardPane.table.netcard.isSel");
        header[1] = SanBootView.res.getString("SelectNetCardPane.table.netcard.interface");
        header[2] = SanBootView.res.getString("SelectNetCardPane.table.netcard.ip");
        header[3] = SanBootView.res.getString("SelectNetCardPane.table.netcard.mac");
        
        for( i=0; i<cardNum; i++ ){
            nc = cardList.get(i);
            if( nc instanceof NetCard ){
                NetCard wcard = (NetCard)cardList.get(i);
                if( wcard.isSel ){
                    cardTableData[i][0] = new Boolean( true );
                }else{
                    cardTableData[i][0] = new Boolean( false );
                }

                cardTableData[i][1] = wcard;
                ipList = wcard.getIPList();
                ipListVect.addElement( ipList );
                editorArry[i] = new MyComboBoxEditor( ipList );
                renderArry[i] = new MyComboBoxRender( wcard.getDefaultIP() );
                cardTableData[i][2] = ipList.elementAt(0);
                cardTableData[i][3] = wcard.mac;

                label[i]= wcard.info;
            }else{
                UnixNetCard ucard = (UnixNetCard)cardList.get(i);
                if( ucard.isSel ){
                    cardTableData[i][0] = new Boolean( true );
                }else{
                    cardTableData[i][0] = new Boolean( false );
                }

                cardTableData[i][1] = ucard;
                ipList = ucard.getIPList();
                ipListVect.addElement( ipList );
                editorArry[i] = new MyComboBoxEditor( ipList );
                renderArry[i] = new MyComboBoxRender( ucard.getDefaultIP() );
                cardTableData[i][2] = ipList.elementAt(0);
                cardTableData[i][3] = ucard.mac;
                
                label[i]= ucard.netInterface;
            }
        }
         
        MyDefaultTableModelForTabZ model = new MyDefaultTableModelForTabZ( cardTableData,header,label );
        
        table = new JTableZ( model,view,wizardDiag,editorArry,renderArry );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
          
        table.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        myListener = new MyListSelectionListener2( table );
        
        RowEditorModel rm = new RowEditorModel();
        table.setRowEditorModel(rm);
        
        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 65 );
        tableColumnModel.getColumn(1).setWidth( 135 );
        tableColumnModel.getColumn(2).setWidth( 135 );
        tableColumnModel.getColumn(3).setWidth( 155 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
                
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }
    
    public void setupGigaNetCard1( String[] mac_list ){
        for( int i=0; i<mac_list.length; i++ ){
            setupGigaNetCard( mac_list[i] );
        }
    }
    
    public void setupGigaNetCard( String mac ){
        NetCard wcard;
        UnixNetCard ucard;
        Object nc;
        boolean isSetup = false;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount(); 
        for( int row=0; row<lineNum; row++ ){
            nc = model.getValueAt( row,1 );
            if( nc instanceof NetCard ){
                wcard = (NetCard)nc;
                if( mac.equals("") ){
                    if( wcard.isGiga ){
                        model.setValueAt( new Boolean( true ), row, 0 );
                        isSetup = true;
                        break;
                    }
                }else{
                    if( wcard.mac.equals( mac ) ){
                        model.setValueAt( new Boolean( true ), row, 0 );
                        isSetup = true;
                        break;
                    }
                }
            }else{
                ucard =(UnixNetCard)nc;
                if( ucard.mac.equals( mac ) ){
                    model.setValueAt( new Boolean( true ), row, 0 );
                    isSetup = true;
                    break;
                }
            }
        }
        
        if( !isSetup ){
            if( lineNum > 0 )
                model.setValueAt( new Boolean( true ), 0, 0 );
        }
    }
    
    public void addListener(){
        table.getSelectionModel().addListSelectionListener( myListener );
    }
    
    public void removeListener(){
        table.getSelectionModel().removeListSelectionListener( myListener );
    }
    
    public ArrayList getNetCardInfo(){
        Object nc;
        NetCard wcard;
        UnixNetCard ucard;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList ret = new ArrayList( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            nc = model.getValueAt( row,1 );
            if( nc instanceof NetCard ){
                wcard = (NetCard)nc;
                wcard.isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue(); 
                ret.add( wcard );
            }else{
                ucard =(UnixNetCard)nc;
                ucard.isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue(); 
                ret.add( ucard );
            }
        }
        
        return ret;
    }
    
    public Object getSelectNetCard( String ip ){
        boolean isSel;

        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            NetCard nc = (NetCard)model.getValueAt(row, 1);
            if( nc.host_ip.equals( ip ) ){
                isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
                if( isSel ){
                    return nc;
                }
            }
        }
        
        return null;
    }
    
    public Object getSelectNetCard(){
        boolean isSel;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel ){
                return model.getValueAt(row, 1);
            }
        }
        
        return null;
    }
    
    public Vector getSelectedIPList(){
        boolean isSel;
        
        MyDefaultTableModelForTabZ model = (MyDefaultTableModelForTabZ)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel ){
                return (Vector)ipListVect.elementAt(row);
            }
        }
        
        return null;
    }
    
    public boolean hasSelectedNetCard(){
        int cnt = 0;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel= (Boolean)model.getValueAt(row, 0 );
            if( isSel.booleanValue() ){
                cnt++;
            }
        }

        if( this.isCluster ){
            return ( cnt >= 2 );
        }else{
            return ( cnt == 1 );
        }
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            dce = table.getCellEditor( i,0 );
            if( dce!=null ){
                try{
                    while(!dce.stopCellEditing()){}
                }catch(Exception ex){}
            }
        }
    }
}

class MyListSelectionListener2 implements ListSelectionListener{
    JTableZ table;

    public MyListSelectionListener2( JTableZ _table ){
        table = _table;
    }

    public void valueChanged(ListSelectionEvent e){
        table.updateNetCardColumn( table.getSelectedRow() );
    }
}