/*
 * InitNWinHostWizardDialog.java
 *
 * Created on 2006/12/29,AM 9:51
 */

package guisanboot.ui;

import javax.swing.*;
import javax.swing.tree.*;
import java.util.*;
import java.util.regex.*;
import java.io.*;

import mylib.UI.*;
import mylib.tool.Util;
import guisanboot.data.*;
import guisanboot.res.*;
import guisanboot.datadup.data.BackupClient;
import guisanboot.datadup.data.UniProBackup;
import guisanboot.datadup.data.UniProfile;
import guisanboot.datadup.data.UniProDrive;
import guisanboot.datadup.data.UniProHeader;
import guisanboot.datadup.data.UniProIBoot;
import guisanboot.datadup.ui.DuplicationStrategyPaneTest;
import guisanboot.datadup.cmd.RunBackup;
import guisanboot.datadup.ui.GetDataDupProcess;
import guisanboot.datadup.ui.viewobj.ChiefProfile;
import guisanboot.datadup.ui.EditProfileDialog;
import guisanboot.unlimitedIncMj.entity.ChiefCloneDiskList;
import guisanboot.unlimitedIncMj.entity.ChiefLocalUnLimitedIncMirrorVolList;
import guisanboot.unlimitedIncMj.model.table.CloneDisk;


public class InitNWinHostWizardDialogTest extends WizardDialogSample implements RecordUWSRptable,InitHostable {
    SelectBootHostPane selectHostPane;
    SelectProtectedUnixSysVolPane selectSysVolPane;
    SelectUnixNetCardPane selectNetCardPane;
    SetDhcpPane setDhcpPane;
    DuplicationStrategyPaneTest dupStrgyPane;
    RunningTaskPane runningTaskPane;
    
    GetPartitionOnClnt getPart;
    
    private Hashtable partOnClnt = new Hashtable();
    private Hashtable cardOnClnt = new Hashtable();
    private Hashtable profOnClnt = new Hashtable();
    private Hashtable dhcpOnClnt = new Hashtable();
    SanBootView view;
    
    private ArrayList orphVolList = null; // 用以自动生成新的tgt名字
    private Vector partList = null;  // 保存主机的分区情况
    private ArrayList fsList = null; // 保存fs的列表
    private ArrayList<SystemPartitionForUnix> iaHidenPartition = null; // ia平台的隐藏分区
    private String partitionContent;
    private String diskDetailInfo;
    String machine = "";   // 表示要初始化的机器的平台
    boolean hasEnoughSpace = true;
    private String bootTxIP = "";
    
    /** Creates new form InitNWinHostWizardDialog */
    public InitNWinHostWizardDialogTest(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public InitNWinHostWizardDialogTest( SanBootView view,BootHost selHost,boolean hasEnoughSpace ){
        super( view );
        myInit( view,selHost,hasEnoughSpace );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitNWinHostWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	   
    private void myInit( SanBootView _view,BootHost selHost,boolean hasEnoughSpace ){
        view = _view;
        this.hasEnoughSpace = hasEnoughSpace;
        
        setupLanguage1();
        enableBackButton( false );
        
        setWizardTipText( 
            SanBootView.res.getString( "WizardDialogSample.wizardText"),
            SanBootView.res.getString( "InitNWinHostWizardDialog.wizardText1" ) 
        );
        
        setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.ams.title") );
        
        selectHostPane = new SelectBootHostPane( view,1,selHost ); 
        selectHostPane.setWizardDialogSample( this );
        selectSysVolPane = new SelectProtectedUnixSysVolPane( view );
        selectSysVolPane.setWizardDialogSample( this );
        selectSysVolPane.setHasEnoughSpaceFlag( this.hasEnoughSpace );
        selectNetCardPane = new SelectUnixNetCardPane( view);
        selectNetCardPane.setWizardDialogSample( this );
        setDhcpPane = new SetDhcpPane( view,"linux" );
        dupStrgyPane = new DuplicationStrategyPaneTest( view );
        dupStrgyPane.setupTextTipInfo( SanBootView.res.getString("InitNWinHostWizardDialog.tip4") );
        dupStrgyPane.setWizardDialogSample( this );
        dupStrgyPane.setSelectProtectedFS( selectSysVolPane );
        runningTaskPane = new RunningTaskPane( view,0 );
        
        view.removeAllFromBindedTab();
        view.removeAllFromUnSelTab();
    }
    
    private void setupLanguage1(){
        setTitle( SanBootView.res.getString("InitNWinHostWizardDialog.ams.title") );
    }
    
    @Override public void backButtonProcess(){
        ArrayList netCardInfo,profInfo;
        String ip;
        InfoFromProtectPane info,oldInfo; 
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title1").trim() ) == 0 ){
            enableBackButton( false );
            removeCenterPane();
            addImagePaneOntoCenterPane();
            addWizardTipTextPane();
            setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString("InitNWinHostWizardDialog.wizardText1")
            );
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.ams.title") );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title2").trim() ) == 0 ){
            selectSysVolPane.fireEditingStopMsg();
            
            ip = selectHostPane.getIP();
            oldInfo =(InfoFromProtectPane)partOnClnt.get( new String(ip) );
            info = new InfoFromProtectPane();
            info.startNet = oldInfo.startNet;
            info.isCopyOS = selectSysVolPane.isCopyOS();
            info.isOnlyModRegister = selectSysVolPane.isOnlyModBootConf();
            info.isDonothing = selectSysVolPane.isDonothing();
            info.volList = selectSysVolPane.getVolInfo();
            info.lvmTypeList = oldInfo.lvmTypeList;
            
            partOnClnt.remove( new String(ip) );
            partOnClnt.put( new String(ip),info );
            
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title1") );
            removePaneFromContentPane( selectSysVolPane );
            addPaneOntoContentPane( selectHostPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title3").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            netCardInfo = selectNetCardPane.getNetCardInfo();
            ip = selectHostPane.getIP();
            cardOnClnt.remove( new String(ip) );
            cardOnClnt.put( new String(ip),netCardInfo );
            
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title2") );
            selectNetCardPane.removeListener();
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane( selectSysVolPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title4").trim() ) == 0 ){
            ip = selectHostPane.getIP();
            InfoFromDhcpSetupPane dhcpSetPane = new InfoFromDhcpSetupPane();
            dhcpSetPane.isUseOdyDhcp = setDhcpPane.isAutoSetup();
            dhcpSetPane.dhcpClntInfo = setDhcpPane.getDhcpSetInfo();
            dhcpOnClnt.remove( new String(ip) );
            dhcpOnClnt.put( new String(ip), dhcpSetPane );
            
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title3") );
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane( selectNetCardPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title5").trim() ) == 0 ){
            dupStrgyPane.fireEditingStopMsg();
            
            profInfo = dupStrgyPane.getProfileInfoFromTab();
            ip = selectHostPane.getIP();
            profOnClnt.remove( new String(ip) );
            profOnClnt.put( new String(ip),profInfo );

            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title4") );
            removePaneFromContentPane( dupStrgyPane );
            addPaneOntoContentPane( setDhcpPane );
            refreshCenterPane();
            return;
        }
    }
    
    private boolean modifyHost( BootHost selHost,String ip,int port ){
        BackupClient selClnt = view.initor.mdb.getBkClntOnUUID( selHost.getUUID() );
        BootHost newHost = new BootHost(
            selHost.getID(),
            getAgentInfo.getHostName(), 
            ip,
            getAgentInfo.getMachine(), 
            port,
            port,
            getAgentInfo.getOSName(), 
            selHost.getStatus(), 
            uuid, // uuid
            selHost.getInitFlag(), 
            selHost.getAutoDRFlag(), 
            selHost.getAutoRebootFlag(), 
            selHost.getStopAllBaseServFlag(),
            selHost.getBootMac(),
            selHost.getBootMode(),
            selHost.getProtectType()
        );
        
        boolean isOK = view.initor.mdb.modOneBootHost( newHost );
        if( isOK ){
            // 修改d2d client
            if( !changeD2DClient( selClnt,ip, port ) ){
SanBootView.log.error( getClass().getName()," Modify d2d client failed: "+ip +"/" + port );                            
                JOptionPane.showMessageDialog(view,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_MOD_BOOT_HOST )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                return false;
            }
            
            // 用新值替换旧值.
            selHost.setName( newHost.getName() );
            selHost.setIP( newHost.getIP() );
            selHost.setMachine( newHost.getMachine() );
            selHost.setPort( newHost.getPort() );
            selHost.setOS( newHost.getOS() );
            selHost.setStatus( newHost.getStatus() );
            selHost.setUUID( newHost.getUUID() );
        }else{
            JOptionPane.showMessageDialog(view,
                ResourceCenter.getCmdString( ResourceCenter.CMD_MOD_BOOT_HOST )+" : "+
                    view.initor.mdb.getErrorMessage()
            );
        }
        
        return isOK;
    }
    
    private boolean changeD2DClient( BackupClient selClnt,String ip,int port ){
        if( selClnt != null ){
            BackupClient newClnt = new BackupClient(
                selClnt.getID(),
                getAgentInfo.getHostName(), 
                ip,
                getAgentInfo.getMachine(), 
                port,
                getAgentInfo.getOSName(), 
                selClnt.getStatus(), 
                uuid, 
                selClnt.getAcctID()
            );
            
            boolean isOK = view.initor.mdb.ModOneClient( newClnt );
            if( isOK ){
                // 用新值替换旧值.
                selClnt.setHostName( newClnt.getHostName() );
                selClnt.setIP( newClnt.getIP() );
                selClnt.setMachineType( newClnt.getMachineType() );
                selClnt.setPort( newClnt.getPort() );
                selClnt.setOsType( newClnt.getOsType() );
                selClnt.setStatus( newClnt.getStatus() );
                selClnt.setUUID( newClnt.getUUID() );
            }
            return isOK;
        }{
            // 只有在需要的地方才增加对应的bk client
        }
        
        return true;
    }
    
    private BootHost getSelectHost( String uuid ){
        if( !uuid.equals("") ){
            return view.initor.mdb.getHostFromCacheOnUUID( uuid );
        }else{
            return null;
        }
    }
    
    // diskList包含了所有的disk,不仅仅是空闲disk(2010.3.16)
    private boolean isValidRootId( int rootid,ArrayList diskList ){
        Volume vol;
        int i,size;
        size = diskList.size();
        for( i=0; i<size; i++ ){
            vol = (Volume)diskList.get(i);
            if( vol.getSnap_root_id() == rootid ){
                return true;
            }
        }
        return false;
    }
    
    private boolean modifyLunMap( int hostId,String ip ){
        BindofVolAndSnap bind;
        Object volObj;
        ArrayList snapList;
        int i,j,size,size1,tid;
        boolean isOK;
        
        ProgressDialog pdiag = new ProgressDialog( 
            view,
            SanBootView.res.getString("View.pdiagTitle.modifyHost1"),
            SanBootView.res.getString("View.pdiagTip.modifyHost1")
        );
        
        GetRstVersion getRstVer = new GetRstVersion( pdiag,view,hostId,true );
        getRstVer.start();
        pdiag.mySetSize();
        pdiag.setLocation( view.getCenterPoint( pdiag.getDefWidth(),pdiag.getDefHeight() ) );
        pdiag.setVisible( true );
        
        Vector bindList = getRstVer.getBindList();
        size = bindList.size();
        for( i=0; i<size; i++ ){
            bind = (BindofVolAndSnap)bindList.elementAt(i);
            snapList = bind.getSnapList();
            volObj = bind.getVolObj();
            if( volObj instanceof VolumeMap ){                                
                size1 = snapList.size();
                for( j=0; j<size1; j++ ){
                    Object obj = snapList.get(j);
                    if( obj instanceof ViewWrapper ){
                        ViewWrapper vw = (ViewWrapper)obj;
                        tid = vw.view.getSnap_target_id();
                    }else if( obj instanceof VolumeMapWrapper ){
                        VolumeMapWrapper vm =(VolumeMapWrapper)obj;
                        tid = vm.volMap.getVolTargetID();
                    }else if( obj instanceof MirrorDiskInfoWrapper ){
                        tid = -1;
                    }else{ // SnapWrapper   
                        tid = -1;
                    }
                    
                    if( tid != -1 ){
                        isOK = view.initor.mdb.addLunMap( tid, ip, "255.255.255.255", "rw", "", "", "", "" );
                        if( !isOK ){
                            JOptionPane.showMessageDialog(view,
                               SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " " +
                                      SanBootView.res.getString("common.failed")
                            );
                            return false;                            
                        }
                    }
                }
            }
        }
        
        return true;
    }
    
    GetAgentInfo getAgentInfo;
    String uuid;
    BootHost aHost = null;
    @Override public void nextButtonProcess(){
        boolean isOk,contained,startNet;
        Vector volList,lvmTypeList,subnetList,ibootSrvList;
        ArrayList netCardList,profList;
        int i,j,size,bootRow,indx,port;
        long cid;
        VolumeMap volMap,lv,tgt,vg,swap;
        Volume vol;
        SystemPartitionForUnix part;
        BackupClient bkClnt;
        BindOfUnixPartandLV binder;
        DhcpClientInfo dhcpClntInfo;
        InfoFromProtectPane info; 
        InfoFromDhcpSetupPane dhcpSetPane;
        String ip,mac="",ip_3rd="",nextsrv_3rd="";
        GetInitInfoForUnixThreadTest getInitInfo;
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title1").trim() ) == 0 ){
            if( !selectHostPane.checkClntInfoValidity() ){
                selectHostPane.setFocusOnTextField1();
                return;
            }
            
            ip   = selectHostPane.getIP();
            port = selectHostPane.getPort();
            
            // Collect client info before initing it
            ProgressDialog initDiag = new ProgressDialog( 
                view,
                SanBootView.res.getString("View.pdiagTitle.getInitInfo"),
                SanBootView.res.getString("View.pdiagTip.getInitInfo")
            );
            
            // 每次都获取agent的全部信息，防止根据<ip,port>找到的host和由<ip,port>得到的实际情况不相符合。
            getInitInfo = new GetInitInfoForUnixThreadTest(
                initDiag, ip, port, true, view, this.getFirstFlag()
            );
            getInitInfo.start();
            initDiag.mySetSize();
            initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
            initDiag.setVisible( true );
            
            if( !getInitInfo.getAgtInfoIsOK() ){ return; }
            if( !getInitInfo.mountHidenFsIsOK() ){ return; }
            this.machine = getInitInfo.getMachine();
            if( machine.equals("") ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitNWinHostWizardDialog.log.getMachine")+
                        SanBootView.res.getString("common.failed")
                );
                return;
            }

            this.iaHidenPartition = getInitInfo.getIAHidenPartition();
            this.dupStrgyPane.setHidenFs( iaHidenPartition );

            if( this.iaHidenPartition == null ){
                if( this.machine.toUpperCase().equals( ResourceCenter.PLATFORM_IA64 ) ){
SanBootView.log.error( this.getClass().getName(), "get IA hiden partition failed." );
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.getIAHidenFs")+
                            SanBootView.res.getString("common.failed")
                    );
                    return;
                }
            }

            getAgentInfo = getInitInfo.getAgentInfoCmdObj();
            uuid = getInitInfo.getUUID();

            // 必须采用uuid来唯一识别host（2010.7.15）
            aHost = getSelectHost( uuid );
                        
            // 检查host信息是否有不一致的地方, 如有不一致就修改
            if( aHost != null ){ // MDB中已经存在该clnt
SanBootView.log.debug( getClass().getName()," ######### re-init exist host: "+ ip +" / " + port );   
                
SanBootView.log.debug( getClass().getName(),"\n =========================== " );
SanBootView.log.debug( getClass().getName(),getAgentInfo.getHostName() +"/"+aHost.getName() );
SanBootView.log.debug( getClass().getName(),getAgentInfo.getOSName() +"/"+aHost.getOS() );
SanBootView.log.debug( getClass().getName(),getAgentInfo.getMachine() +"/"+aHost.getMachine() );
SanBootView.log.debug( getClass().getName(),uuid +"/"+aHost.getUUID() );
SanBootView.log.debug( getClass().getName(),ip +"/"+aHost.getIP() );
SanBootView.log.debug( getClass().getName(),port +"/"+aHost.getPort() );
                
                if( aHost.isWinHost() ){
SanBootView.log.error( getClass().getName()," ##### host is not Linux. uuid: "+ uuid +" ip: "+ ip );                
                    JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("MenuAndBtnCenter.error.badConsistance")
                    );
                    return;
                }
                
                // 检查平台是否冲突
                if( getAgentInfo.isWin() ){
                    JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("MenuAndBtnCenter.error.mismatchedOS")
                    );
                    return;
                }
                
               if( !BootHost.isSameHost1( getAgentInfo.getHostName(), aHost.getName(), getAgentInfo.getOSName(), aHost.getOS(),
                        getAgentInfo.getMachine(), aHost.getMachine(), uuid, aHost.getUUID(),ip, aHost.getIP(), port, aHost.getMtppPort() )
                ){
SanBootView.log.warning( getClass().getName(),"host info mismatched: " + ip+"/"+port );
                    // 将host的信息修改为最新获取的
                    if( !modifyHost( aHost,ip,port ) ){
                        return;
                    }else{
                        // dhcp和profile的修改先不管

                        // 收集该机器上所有相关的vol,snap,view等,以便修改lunmap
                        if( !modifyLunMap( aHost.getID(), ip ) ){
                            return;
                        }
                    }
                }else{
SanBootView.log.debug( getClass().getName(),"re-init host isn't changed anything: "+ ip );            
                }
            }else{
SanBootView.log.debug( getClass().getName()," ######### init new host: "+ ip +" / " + port );                
            }
            
            if( first ){ //第一次先获取所有的卷(不管孤立还是不孤立)
                if( !getInitInfo.getOrphanVolIsOK() ){
                    return;
                }else{
                    orphVolList = getInitInfo.getOrphanVolList();
                    size = orphVolList.size();
SanBootView.log.debug(getClass().getName(), "disk size: " + size );
                    for( i=0; i<size; i++ ){
                        vol = (Volume)orphVolList.get(i);
                        view.addVolumeToUnSelTabForTID( vol.getTargetID(), vol );
                    }

                    Vector list = view.initor.mdb.getAllVolMaps();
                    size = list.size();
SanBootView.log.debug(getClass().getName(), "VolMap size: " + size );
                    for( j=0; j<size; j++ ){
                        volMap = (VolumeMap)list.elementAt(j);
			   
                        // 检查volmap是否合法（判断rootid是否有效）
                        if( !isValidRootId( volMap.getVol_rootid(),orphVolList ) ) continue;

                        int tid = volMap.getVolTargetID();
SanBootView.log.debug(getClass().getName(),"@@@@@@@@@@@@@ vol.voldesc: "+ volMap.getVolDesc() );
                        if( view.hasThisVolInUnSelTab( tid ) ){
SanBootView.log.debug(getClass().getName(), " volmap object is in unsel hash table: "+ tid +"  pick it into selected hash table." );
                            vol = view.getVolumeFromUnSelTab( tid );
                            view.addVolumeToBindedTabForTID( tid,vol );  // add to binded hashtable
                            view.removeVolumeFromUnSelTabForTID( tid ); //  remove from unselected hashtable
                        }else{ //volMap只能是unix的vg或lv volmap
                            if( volMap.getVolDesc().equals("VG") ){
                                indx = volMap.getVolName().indexOf("_", 3);
                                try{
                                    tid = Integer.parseInt( volMap.getVolName().substring(indx+1) );
                                }catch(Exception ex){
                                    tid = -1;
                                }
                            }else{
                                indx= volMap.getVolDesc().indexOf("_", 3);
                                try{
                                    tid = Integer.parseInt( volMap.getVolDesc().substring(indx+1));
                                }catch(Exception ex){
                                    tid = -1;
                                }
                            }
                            
                            if( view.hasThisVolInUnSelTab( tid ) ){ 
SanBootView.log.debug( getClass().getName()," volmap object(vg or lv) is in unsel hash table: "+ tid +"  pick it into selected hash table." );
                                vol = view.getVolumeFromUnSelTab( tid );
                                view.addVolumeToBindedTabForTID( tid,vol );  // add to binded hashtable
                                view.removeVolumeFromUnSelTabForTID( tid ); //  remove from unselected hashtable
                            }
                        }
                    }
                    
                    ArrayList mdiList = view.initor.mdb.getAllMDI();
                    size = mdiList.size();
SanBootView.log.debug( getClass().getName(), "mdi num: " + size );
                    for( j=0; j<size; j++ ){
                        MirrorDiskInfo mdi = (MirrorDiskInfo)mdiList.get(j);
                        
                        // 检查mdi是否与主机关联
                        if( mdi.getTargetID() <=0 ) continue;
                        
                        int tid = mdi.getTargetID();
                        if( view.hasThisVolInUnSelTab( tid ) ){ // 说明该mdi正在关联着
SanBootView.log.debug( getClass().getName(),"  volmap object is in unsel hash table: "+ tid +" pick it into selected hash table." );
                            vol = view.getVolumeFromUnSelTab( tid );
                            view.addVolumeToBindedTabForTID( tid,vol );  // add to binded hashtable
                            view.removeVolumeFromUnSelTabForTID( tid ); //  remove from unselected hashtable
                        }
                    }

                    view.printBindedTabContents();
                }
                setFirstFlag( false );
            }
            
            contained = partOnClnt.containsKey( new String( ip ) );
            if( !contained ){
                if( !getInitInfo.getSystemPartIsOK() ){ return; }
                partitionContent = getInitInfo.getSystemPartContents();
                
                if( !getInitInfo.getDiskPartForUnixIsOK() ){ return; }
                diskDetailInfo = getInitInfo.getDiskDetailInfo();
                
                // 判断是否从网络启动的
                if( !getInitInfo.isStartupFromSAN() ){ return; }
                startNet = getInitInfo.isStartFromNet();
                
                // 获取该主机上的lvm type
                if( !getInitInfo.getLvmTypeIsOK() ){
                    lvmTypeList = new Vector();
                    lvmTypeList.addElement( GetLVMType.LVM_TYPE_NONE );
                }else{
                    lvmTypeList = getInitInfo.getLVMTypeList();
                }
                
                fsList = getInitInfo.getFsList();
                partList = getInitInfo.getSysPartList();
                size = partList.size();
                volList = new Vector();
SanBootView.log.debug(getClass().getName(), " part size: "+size);
                for( i=0; i<size; i++ ){
                    part = (SystemPartitionForUnix)partList.elementAt(i);
                    binder = new BindOfUnixPartandLV();
                    binder.part = part;
                    
                    // 找出该client上已经创建好了的LV
                    if( aHost != null ){
                        // 此lv实际上表示一个real Logical volume
                        lv = view.initor.mdb.getRealLVOnClntIDAndMP( aHost.getID(), part.mp );
                        binder.lv = lv;
                        if( lv !=null ){
SanBootView.log.debug(getClass().getName(), "lv: "+lv.getVolName() +" mp: "+ part.mp );
                            
                            // lv对应的vg
                            vg = view.initor.mdb.getVGOnVGName( lv.getVolDesc(), lv.getVolClntID() );
                            if( vg!=null ){
SanBootView.log.debug(getClass().getName(), "vg: "+vg.getVolName() + " mp: "+ part.mp );
                                binder.lvType = vg.getVolDiskLabel();
                                binder.snapSapce = vg.getMaxSnapNum()+"";
                            }
                            
                            // lv对应的tgt(VolumeMap)
                            tgt = view.initor.mdb.getTgtOnVGname( lv.getVolDesc(), lv.getVolClntID() );
                            if( tgt != null ){
SanBootView.log.debug( getClass().getName(),"tgt: "+tgt.getVolName() + " mp: "+ part.mp );
                                // tgt对应的原始tgt
                                binder.rawTgt = view.getVolumeFromBindedTab( tgt.getVolTargetID() ); 
                                if( binder.rawTgt != null ){
SanBootView.log.debug( getClass().getName(),"raw tgt: "+binder.rawTgt.toString() + " mp: "+ part.mp );
                                    binder.isProtected = true;
                                    binder.action = 1;
                                    binder.isRealLV = true;
SanBootView.log.debug(getClass().getName(),"===========: "+tgt.getVolTargetID());
                                    
SanBootView.log.debug(getClass().getName(),"===========: "+binder.rawTgt.getCap() );
                                    binder.tgtSize = binder.rawTgt.getCapStr1();
                                    binder.maxSnap = tgt.getMaxSnapNum()+"";
                                    binder.tgtName = tgt.getVolName();
                                    binder.rootID = binder.rawTgt.getSnap_root_id();
                                }else{
                                    binder.lvName = getDefaultVolName( part.mp,ip );
                                }
                            }else{
                                binder.lvName = getDefaultVolName( part.mp,ip );
                            }
                        }else{
                            binder.lvName = getDefaultVolName( part.mp,ip );
                        }
                    }else{
                        binder.lvName = getDefaultVolName( part.mp,ip );
                    }
                    
                    if( binder.action == 0 ){
                        binder.isFormatted = true;
                    }
                    volList.addElement( binder );
                }
                
                // 找出swap对应的卷( swap的mp为空 )
                if( aHost!= null ){
                    swap = view.initor.mdb.getRealLVOnClntIDAndMP( aHost.getID(),ResourceCenter.SWAP_MP );
                    if( swap !=null ){
                        binder = new BindOfUnixPartandLV();
                        part = new SystemPartitionForUnix();
                        part.mp = ResourceCenter.SWAP_MP;
                        part.fsType = ResourceCenter.SWAP_FS_TYPE;
                        binder.part = part;
                        binder.lv = swap;
                        
                        // swap对应的vg
                        vg = view.initor.mdb.getVGOnVGName( swap.getVolDesc(), swap.getVolClntID() );
                        if( vg!=null ){
                            binder.lvType = vg.getVolDiskLabel();
                            binder.snapSapce = vg.getMaxSnapNum()+"";
                        }
                        
                        // swap对应的tgt(VolumeMap)
                        tgt = view.initor.mdb.getTgtOnVGname( swap.getVolDesc(), swap.getVolClntID() );
                        if( tgt != null ){
                            // tgt对应的原始tgt
                            binder.rawTgt = view.getVolumeFromBindedTab( tgt.getVolTargetID() ); 
                            if( binder.rawTgt != null ){
                                binder.isProtected = true;
                                binder.action = 1;
                                binder.isRealLV = true;
                                binder.tgtSize = binder.rawTgt.getCapStr1();
                                binder.maxSnap = tgt.getMaxSnapNum()+"";
                                binder.tgtName = tgt.getVolName();
                                binder.rootID = binder.rawTgt.getSnap_root_id();
                            }else{
                                binder.lvName = getDefaultVolName("/swap",ip);
                            }
                        }else{
                            binder.lvName = getDefaultVolName("/swap",ip);
                        }
                    }else{
                        binder = new BindOfUnixPartandLV();
                        part = new SystemPartitionForUnix();
                        part.mp = ResourceCenter.SWAP_MP;
                        part.fsType = ResourceCenter.SWAP_FS_TYPE;
                        binder.part = part;
                        binder.lvName = getDefaultVolName("/swap",ip);
                    }
                }else{
                    binder = new BindOfUnixPartandLV();
                    part = new SystemPartitionForUnix();
                    part.mp = ResourceCenter.SWAP_MP;
                    part.fsType = ResourceCenter.SWAP_FS_TYPE;
                    binder.part = part;
                    binder.lvName = getDefaultVolName("/swap",ip);
                }
                if( binder.action == 0 ){
                    binder.isFormatted = true;
                }
                volList.addElement( binder );
                
                info = new InfoFromProtectPane(); 
                info.volList = volList;
                info.startNet = startNet;
                info.lvmTypeList = lvmTypeList;
                partOnClnt.put( new String(ip), info );
                selectSysVolPane.setupTable( volList,lvmTypeList );
                selectSysVolPane.setActionMode( info.isCopyOS,info.isOnlyModRegister,info.isDonothing );
                
                if( startNet ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("InitNWinHostWizardDialog.error.bootFromNet")
                    );
                    return;
                }
                
            }else{
                Object val = partOnClnt.get( new String(ip) );
                info = (InfoFromProtectPane)val;
                
                if( info.startNet ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("InitNWinHostWizardDialog.error.bootFromNet")
                    );
                    return;
                }
                
                selectSysVolPane.setupTable( info.volList,info.lvmTypeList );
                selectSysVolPane.setActionMode( info.isCopyOS,info.isOnlyModRegister,info.isDonothing );
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title2") ); 
            removePaneFromContentPane( selectHostPane );
            addPaneOntoContentPane( selectSysVolPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title2").trim() ) == 0 ){
            selectSysVolPane.fireEditingStopMsg();
            
            if( !selectSysVolPane.checkVolInfoValidity() ){ return; }
            
            if( !selectSysVolPane.isLessThanUsedSize() ){
                int ret =  JOptionPane.showConfirmDialog(
                    view,
                    SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVal1"),
                    SanBootView.res.getString("common.confirm"),  //"Confirm",
                    JOptionPane.OK_CANCEL_OPTION
                );
                if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION ) ){
                    return;
                }
            }
            
            if( !selectSysVolPane.hasProtectOSDisk() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitNWinHostWizardDialog.error.mustProtectOS")
                );
                return ;
            }
            
            bootRow = selectSysVolPane.getSelectedRowOnMp("/boot");
            if( bootRow != -1 ){
                if( !selectSysVolPane.isThisRowProtected( bootRow ) ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("InitNWinHostWizardDialog.error.mustProtectBoot")
                    );
                    return ;
                }
            }

            if( this.iaHidenPartition != null ){
                size = this.iaHidenPartition.size();
                for( i=0; i<size; i++ ){
                    SystemPartitionForUnix unixPart = iaHidenPartition.get(i);
                    if( !selectSysVolPane.isThisFsProtected( unixPart.mp ) ){
SanBootView.log.error( this.getClass().getName(), "this hiden fs must be selected to protect: " + unixPart.dev_path + " mounted on " + unixPart.mp );
                        JOptionPane.showMessageDialog( this,
                            SanBootView.res.getString("InitNWinHostWizardDialog.error.mustProtectFS") + unixPart.mp
                        );
                        return ;
                    }
                }
            }

            ip = selectHostPane.getIP();
            port = selectHostPane.getPort();
            
            contained = cardOnClnt.containsKey( new String( ip ) );
            if( !contained ){
                isOk = view.initor.mdb.getUnixNetCard( ip,port,"list_netinfo.sh" );
                if( !isOk ){
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                            view.initor.mdb.getErrorMessage()
                    );
                    return;
                }
                
                netCardList = view.initor.mdb.getUnixNetCard();
                cardOnClnt.put( new String(ip), netCardList );
                
                //aHost = view.initor.mdb.getHostFromVecOnIP( ip );
                if( aHost!= null ){
                    isOk = view.initor.mdb.getUnixNetCardInfo( ResourceCenter.CLT_IP_CONF+"/"+aHost.getID()+".conf" );
                    if( isOk ){
                        mac = view.initor.mdb.getUnixBootMac();       
                    }
                }
                
                selectNetCardPane.setupNetCardTable( netCardList );
                selectNetCardPane.setupGigaNetCard( mac );
            }else{
                Object val = cardOnClnt.get( new String(ip) );
                netCardList = (ArrayList)val;
                selectNetCardPane.setupNetCardTable( netCardList );
            }
            
            selectNetCardPane.addListener();
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title3") );
            removePaneFromContentPane( selectSysVolPane );
            addPaneOntoContentPane( selectNetCardPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title3").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            if( !selectNetCardPane.hasSelectedNetCard() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitNWinHostWizardDialog.error.notSelCard")
                );
                return;
            }
            
            ip = selectHostPane.getIP();
            port = selectHostPane.getPort();
            
            contained = dhcpOnClnt.containsKey( new String( ip ) );
            if( !contained ){
                dhcpClntInfo = null;
                
                // 首先判断该主机是否使用了uws服务器上的dhcp服务;
                // 如果主机不存在,则认为它使用了UWS服务器上的dhcp服务
                boolean isUseOdyDhcp = true;
                //aHost = view.initor.mdb.getHostFromVecOnIP( ip );
                if( aHost!= null ){
                    isUseOdyDhcp = aHost.isUseOdyDhcp(); 
                    
                    // get the 3rd dhcp info
                    isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+aHost.getID()+ ResourceCenter.CONF_3RD_DHCP );
                    if( isOk ){
                        ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                        nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                    }
                    if( ip_3rd.equals(""))
                        ip_3rd = ip;
                    if( nextsrv_3rd.equals("") )
                        nextsrv_3rd= view.initor.getTxIP(ip);
                }else{
                    ip_3rd = ip;
                    nextsrv_3rd= view.initor.getTxIP(ip);
                }
                
                if( view.initor.dhcpdb.isLoginOK() ){
                    // 获取boot netcard mac's dhcp config
                    if( aHost != null ){
                        isOk = view.initor.mdb.getUnixNetCardInfo( ResourceCenter.CLT_IP_CONF + "/" + aHost.getID() + ResourceCenter.CONF_IP );
                        if( isOk ){
                            mac = view.initor.mdb.getUnixBootMac();
                            if( !mac.equals("") ){
                                dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac( mac );
                            }
                        }
                    }
                    
                    // 获取UWS服务器上的subnet列表
                    subnetList = view.initor.dhcpdb.getSubnetListFromDhcp();
                    ibootSrvList = view.initor.dhcpdb.getIbootSrvListFromDhcp();
                }else{
                    // dhcp server不可用( 无法登陆它,可能没有关于它的配置信息,或者配置信息有误 )
                    subnetList = new Vector();
                    ibootSrvList = new Vector();
                }
                
                UnixNetCard card = selectNetCardPane.getSelectNetCard();
                setDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,card.mac,isUseOdyDhcp,dhcpClntInfo,ip,ip_3rd,nextsrv_3rd ); 
            }else{
                Object val  = dhcpOnClnt.get( new String(ip) );
                dhcpSetPane = (InfoFromDhcpSetupPane)val;
                UnixNetCard card = selectNetCardPane.getSelectNetCard(); 
                setDhcpPane.setDhcpSetInfo( dhcpSetPane.isUseOdyDhcp,dhcpSetPane.dhcpClntInfo,card.mac ); 
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title4") );      
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane( setDhcpPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title4").trim() ) == 0 ){ 
            if( !setDhcpPane.checkDhcpInfoValidity() ){  return; }
            bootTxIP = setDhcpPane.getDhcpSetInfo().getNextServer();      //set iboot server ip
            ip = selectHostPane.getIP();
            port = selectHostPane.getMtppPort();
            
            contained = profOnClnt.containsKey( new String( ip ) );
            if( !contained ){    
                if( aHost!=null ){
                    bkClnt = view.initor.mdb.getBkClntOnUUID( aHost.getUUID()   );
                    if( bkClnt != null ){
                        cid = bkClnt.getID();
                    }else{
                        cid = -1;
                    }
                }else{
                    cid =-1;
                }
                profList = view.initor.mdb.getAllProfileOnClntID( cid ); 
                dupStrgyPane.setupTable( profList );
                dupStrgyPane.setOldProfList( profList );
            }else{
                Object val  = profOnClnt.get( new String(ip) );
                profList = (ArrayList)val;
                dupStrgyPane.setupTable( profList );
            }
            
            UnixNetCard card = selectNetCardPane.getSelectNetCard();
            mac = UnixNetCard.getSimpleMac( card.mac ).toLowerCase();
            if( aHost != null ){
                dupStrgyPane.setIPAndPort( ip,port,port,aHost.getName(), aHost.getMachine(),aHost.getOS(), aHost.getUUID(),mac,"", bootTxIP );
            }else{
                dupStrgyPane.setIPAndPort( ip,port,port,getAgentInfo.getHostName(), getAgentInfo.getMachine(), getAgentInfo.getOSName(), uuid,mac,"", bootTxIP );
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title5") );      
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane( dupStrgyPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title5").trim() ) == 0 ){ 
            dupStrgyPane.fireEditingStopMsg();
            
            if( !dupStrgyPane.checkProfile() ){ return; }
            
            // 检查卷是否换了，若是，则提示必须对包含“/”的策略重新进行一次增量复制，以便修改fstab等配制
            
            int ret = JOptionPane.showConfirmDialog(
                view,
                SanBootView.res.getString("InitBootHostWizardDialog.confirm4"),
                SanBootView.res.getString("common.confirm"),  //"Confirm",
                JOptionPane.OK_CANCEL_OPTION
            );
            if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                return;
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title7") );
            removePaneFromContentPane( dupStrgyPane );
            setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton( false );
            enableBackButton( false );
            enableCancelButton( false );
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
            runningTaskPane.ctrDhcpCb( setDhcpPane.isManualSetup(),selectNetCardPane.getSelectNetCard().mac ); 
            addPaneOntoContentPane( runningTaskPane );
            refreshCenterPane();
            
            beginInitClient();
            
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitNWinHostWizardDialog.title7").trim() ) == 0 ){ 
            if( allFinished ){
                if( setDhcpPane.isManualSetup() ){
                    if( runningTaskPane.isDoneDHCP() ){
                        JOptionPane.showMessageDialog( this,
                            SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK")
                        );
                        updateGUI();
                        dispose();
                    }else{
                        JOptionPane.showMessageDialog( this,
                            SanBootView.res.getString("InitNWinHostWizardDialog.error.notDoneManualJob")
                        );
                        return;
                    }
                }else{
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK")
                    );
                    updateGUI();    
                    dispose();
                }
            }else{
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitNWinHostWizardDialog.error.needReInit")
                );
                updateGUI();
                dispose();
            }
            aHost.setProtectType( BootHost.PROTECT_TYPE_MTPP );
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("InitNWinHostWizardDialog.ams.title").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("InitNWinHostWizardDialog.title1") );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( selectHostPane );
            selectHostPane.setFocusOnTextField1();
            refreshCenterPane();
            return;
        }else{
            return;
        }
        
    }
    
    public void updateGUI(){
        if( !hasAddBootHost ){ //没有增加client
//System.out.println("updateGUI(updateOldHost)");
            updateOldHostOnTree();
        }else{
            if( isAddHostOk ){ //增加client成功
                initNewHostOnTree();
            }else{ //失败
                // do nothing
            }
        }
    }

    private void updateOldHostOnTree(){
        int i,size,targetID,maxSnap;
        VolumeMap vol,tgt;
        LogicalVol lv;

        BrowserTreeNode chiefHostNode = view.getChiefNodeOnRoot( ResourceCenter.TYPE_CHIEF_HOST_INDEX );
        if( chiefHostNode == null ) return;

        BrowserTreeNode hostNode = view.getHostNodeOnChiefHostNode( chiefHostNode, host.getID() );
        if( hostNode == null ) return;
        hostNode.setUserObject( host ); // host的属性也许变化了

        BrowserTreeNode chiefHostVolNode = view.getChiefHostVolNodeOnHostNode( hostNode );
        if( chiefHostVolNode == null ) return;

        // 先删除
        chiefHostVolNode.removeAllChildren();

        // 最新的volmap belonged to this host
        Vector lvList = view.initor.mdb.getRealLVListOnClntID( host.getID() );
        size = lvList.size();
        for( i=0; i<size; i++ ){
            vol = (VolumeMap)lvList.elementAt(i);
            tgt = view.initor.mdb.getTgtOnVGname( vol.getVolDesc(),host.getID() );
            if( tgt != null ){
                targetID = tgt.getVolTargetID();
                maxSnap = tgt.getMaxSnapNum();
            }else{
                targetID = vol.getVolTargetID();
                maxSnap = vol.getMaxSnapNum();
            }

            lv = new LogicalVol(
                vol.getVolName(),
                vol.getVolClntID(),
                vol.getVolDiskLabel(),
                targetID,
                maxSnap,
                vol.getVolDesc(),
                vol.getVol_rootid()
            );
            lv.setType( ResourceCenter.TYPE_LV_INDEX );

            BrowserTreeNode lvNode = new BrowserTreeNode( lv, false );
            lv.setTreeNode( lvNode );
            lv.setFatherNode( chiefHostVolNode );

            // 准备lunmap list node
            ChiefLunMap chiefLm = new ChiefLunMap();
            BrowserTreeNode chiefLmNode = new BrowserTreeNode( chiefLm, true );
            chiefLm.setTreeNode( chiefLmNode );
            chiefLm.setFatherNode( lvNode );
            lvNode.add( chiefLmNode );

            // 准备snapshot list node
            ChiefSnapshot chiefSnap = new ChiefSnapshot();
            BrowserTreeNode chiefSnapNode = new BrowserTreeNode( chiefSnap,false );
            chiefSnap.setTreeNode( chiefSnapNode );
            chiefSnap.setFatherNode( lvNode );
            lvNode.add( chiefSnapNode );

            // 准备mj list node
            ChiefMirrorJobList chiefMjList = new ChiefMirrorJobList();
            BrowserTreeNode chiefMjNode = new BrowserTreeNode( chiefMjList,false );
            chiefMjList.setTreeNode( chiefMjNode );
            chiefMjList.setFatherNode( lvNode );
            lvNode.add( chiefMjNode );

            // unlimited incremental mirror vol list
            ChiefLocalUnLimitedIncMirrorVolList chiefUIMVolList = new ChiefLocalUnLimitedIncMirrorVolList();
            BrowserTreeNode chiefUIMVolNode = new BrowserTreeNode( chiefUIMVolList,false );
            chiefUIMVolList.setTreeNode( chiefUIMVolNode );
            chiefUIMVolList.setFatherNode( lvNode );
            lvNode.add( chiefUIMVolNode );

            // clone disk list
            ChiefCloneDiskList chiefCloneDiskList = new ChiefCloneDiskList();
            BrowserTreeNode chiefCloneDiskNode = new BrowserTreeNode( chiefCloneDiskList,false );
            chiefCloneDiskList.setTreeNode( chiefCloneDiskNode );
            chiefCloneDiskList.setFatherNode( lvNode );
            lvNode.add( chiefCloneDiskNode );

            chiefHostVolNode.add( lvNode );
        }

        view.reloadTreeNode( chiefHostVolNode );

        view.setCurNode( chiefHostNode );
        view.setCurBrowserEventType( Browser.TREE_SELECTED_EVENT );
        ProcessEventOnChiefHost peOnChiefHost = new ProcessEventOnChiefHost( view );
        TreePath path = new TreePath( chiefHostNode.getPath() );
        peOnChiefHost.processTreeSelection( path );
        peOnChiefHost.controlMenuAndBtnForTreeEvent();
    }

    private void initNewHostOnTree(){
        int i,size,targetID,maxSnap;
        VolumeMap vol,tgt;
        LogicalVol lv;

        BrowserTreeNode chiefHostNode = view.getChiefNodeOnRoot( ResourceCenter.TYPE_CHIEF_HOST_INDEX );
        host.setProtectType( ResourceCenter.CMD_TYPE_CMDP );

        BrowserTreeNode hostNode = new BrowserTreeNode( host,false );
        host.setTreeNode( hostNode );
        host.setFatherNode( chiefHostNode );
        chiefHostNode.add( hostNode );

        ChiefHostVolume chiefHostVol = new ChiefHostVolume();
        BrowserTreeNode chiefHVolNode = new BrowserTreeNode( chiefHostVol,false );
        chiefHostVol.setTreeNode( chiefHVolNode );
        chiefHostVol.setFatherNode( hostNode );

        ChiefProfile chiefProf = new ChiefProfile();
        BrowserTreeNode chiefProfNode = new BrowserTreeNode( chiefProf, false );
        chiefProf.setTreeNode( chiefProfNode );
        chiefProf.setFatherNode( hostNode );

        ChiefNetBootHost chiefNBootHost = new ChiefNetBootHost();
        BrowserTreeNode chiefNBHNode = new BrowserTreeNode( chiefNBootHost,false );
        chiefNBootHost.setTreeNode( chiefNBHNode );
        chiefNBootHost.setFatherNode( hostNode );

        hostNode.add( chiefHVolNode );
        hostNode.add( chiefProfNode );
        hostNode.add( chiefNBHNode );

        Vector lvList = view.initor.mdb.getRealLVListOnClntID( host.getID() );
        size = lvList.size();
        for( i=0; i<size; i++ ){
            vol = (VolumeMap)lvList.elementAt(i);
            tgt = view.initor.mdb.getTgtOnVGname( vol.getVolDesc(),host.getID() );
            if( tgt != null ){
                targetID = tgt.getVolTargetID();
                maxSnap = tgt.getMaxSnapNum();
            }else{
                targetID = vol.getVolTargetID();
                maxSnap = vol.getMaxSnapNum();
            }

            lv = new LogicalVol(
                vol.getVolName(),
                vol.getVolClntID(),
                vol.getVolDiskLabel(),
                targetID,
                maxSnap,
                vol.getVolDesc(),
                vol.getVol_rootid()
            );
            lv.setType( ResourceCenter.TYPE_LV_INDEX );

            BrowserTreeNode lvNode = new BrowserTreeNode( lv, false );
            lv.setTreeNode( lvNode );
            lv.setFatherNode( chiefHVolNode );

            // 准备lunmap list node
            ChiefLunMap chiefLm = new ChiefLunMap();
            BrowserTreeNode chiefLmNode = new BrowserTreeNode( chiefLm, true );
            chiefLm.setTreeNode( chiefLmNode );
            chiefLm.setFatherNode( lvNode );
            lvNode.add( chiefLmNode );

            // 准备snapshot list node
            ChiefSnapshot chiefSnap = new ChiefSnapshot();
            BrowserTreeNode chiefSnapNode = new BrowserTreeNode( chiefSnap,false );
            chiefSnap.setTreeNode( chiefSnapNode );
            chiefSnap.setFatherNode( lvNode );
            lvNode.add( chiefSnapNode );

            // 准备mj list node
            ChiefMirrorJobList chiefMjList = new ChiefMirrorJobList();
            BrowserTreeNode chiefMjNode = new BrowserTreeNode( chiefMjList,false );
            chiefMjList.setTreeNode( chiefMjNode );
            chiefMjList.setFatherNode( lvNode );
            lvNode.add( chiefMjNode );

            // unlimited incremental mirror vol list
            ChiefLocalUnLimitedIncMirrorVolList chiefUIMVolList = new ChiefLocalUnLimitedIncMirrorVolList();
            BrowserTreeNode chiefUIMVolNode = new BrowserTreeNode( chiefUIMVolList,false );
            chiefUIMVolList.setTreeNode( chiefUIMVolNode );
            chiefUIMVolList.setFatherNode( lvNode );
            lvNode.add( chiefUIMVolNode );

            // clone disk list
            ChiefCloneDiskList chiefCloneDiskList = new ChiefCloneDiskList();
            BrowserTreeNode chiefCloneDiskNode = new BrowserTreeNode( chiefCloneDiskList,false );
            chiefCloneDiskList.setTreeNode( chiefCloneDiskNode );
            chiefCloneDiskList.setFatherNode( lvNode );
            lvNode.add( chiefCloneDiskNode );

            chiefHVolNode.add( lvNode );
        }

        view.reloadTreeNode( chiefHostNode );

        view.setCurNode( chiefHostNode );
        view.setCurBrowserEventType( Browser.TREE_SELECTED_EVENT );
        ProcessEventOnChiefHost peOnChiefHost = new ProcessEventOnChiefHost( view );
        TreePath path = new TreePath( chiefHostNode.getPath() );
        peOnChiefHost.processTreeSelection( path );
        peOnChiefHost.controlMenuAndBtnForTreeEvent();
    }
    public void setInitLog( ){}
    public void setProcess(){}

    // 如果下面两个中有一个为false，则不能进行数据复制
    boolean crtVolStepOK = true;
    boolean formatVolStepOK = true;

    // 下面这些记录了os volume创建和格式化的状态，保留这些状态，也许将来有用
    boolean hasCrtOSDisk=false;
    boolean isCrtOSDiskOk=false;
    boolean hasLoginOSDisk=false;
    boolean isLoginOSDiskOk=false;
    boolean isVgonlineOSDiskOk=false;
    boolean isFormatOSDiskOk=false;

    BindOfUnixPartandLV OSBinder=null; //记录由创建产生的OS LV对应的 BindOfUnixPartandLV 对象
    String targetSrvName="";
    boolean allFinished = false;    // 表明所有task都成功完成了
    boolean hasAddBootHost = false; //是否增加了新client
    boolean isAddHostOk = true;     // 增加host是否成功
    BootHost host = null; // 要初始化的客户端
    String lvmType;
    
    public String getInitHostName(){ return host.getName(); }
    
    String errMsg;
    @Override public void writeLogBuf( String errMsg,int which ){
        if( isWrFirst ){
            logBuf.append( runningTaskPane.getTabStr( which ) + replaceLine( errMsg ) );
            isWrFirst = false;
        }else{
            logBuf.append( ResourceCenter.NEWLINE_STRING + runningTaskPane.getTabStr( which ) + replaceLine( errMsg ) );
        }
    }
    
    public void putIntoLogBuf( String errMsg,int which ){
        writeLogBuf( errMsg,which );
    }

    private boolean crtHost( String ip,int port ){
        // 要初始化的client
        //host = view.initor.mdb.getHostFromVecOnIP( ip );
        host = this.getSelectHost( uuid );
        boolean isOk = true;
        if( host == null ){
            host = new BootHost(
                -1,
                getAgentInfo.getHostName(),
                ip,
                getAgentInfo.getMachine(),
                port,
                port,
                getAgentInfo.getOSName(),
                "Online",
                uuid,    // ip and san config path
                0,     // inited ?( 稍后根据情况还要修改 )
                0,   // auto dr ?
                0,   // auto reboot?
                0,   // use odysys dhcp?
                "",
                1,
                1
            );

            hasAddBootHost = true;
            isOk = view.initor.mdb.addOneBootHost( host );
            if( isOk ){
                host.setID( view.initor.mdb.getNewId() );
                view.initor.mdb.addBootHostToVector( host );

                // 增加一个对应的
            }else{
                isAddHostOk = true;
            }
        }

        return isOk;
    }

    private void beginInitClient(){
        Thread initThread = new Thread( new InitializingBootHost( this ) );
        initThread.start();
    }
    
    private boolean addLunMap( String ip,int tid,int row ){
        Vector lmList;
        int j,size;
        LunMap lm;
        
        boolean hasIp = false;
        
        // 首先删除老的、没用的lunmap,不管是否成功删除
        boolean isOk = view.initor.mdb.getLunMapForTID( tid );
        if( isOk ){
            lmList = view.initor.mdb.getAllLunMapForTid();
            size = lmList.size();
            for( j=0; j<size; j++ ){
                lm = (LunMap)lmList.elementAt( j );
                if( !lm.getIP().equals( ip ) ){
                    view.initor.mdb.delLunMap( tid, lm.getIP(),lm.getMask(), lm.getAccessMode() );
                }else{
                    hasIp = true;
                }
            }
        }
        
        if( !hasIp ){
            isOk = view.initor.mdb.addLunMap( tid, ip, "255.255.255.255", "rw", "", "", "", "" );
            if( isOk ){
                if( row >= 0 ){
                    runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid +" "+ ip + " 255.255.255.255 rw ]" + " " +
                            SanBootView.res.getString("common.ok") ,
                        row
                    );
                }
                return isOk;
            }else{
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid +" "+ ip + " 255.255.255.255 rw ]" + " " +
                           SanBootView.res.getString("common.failed"); 
                if( row >= 0 ){
                    runningTaskPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg, row );
                }
            }
            return isOk;
        }else{
            return true;
        }
    }
    
    public void initBootHost(){
        Vector volInfo,lmList;
        BindOfUnixPartandLV binder;
        int i,j,crtSize,size,size1,targetID,port,snapSpace,bksize,bkNum;
        boolean isOk,mayLogout,isNoneType;
        double tgtSize,lvSize;
        String lvName,ip,iscsiVar,tgtName,vgName,args;
        VolumeMap vg,lv;
        LunMap lm;
        LVWrapper osLv;
        boolean getInfoStepOK;
        boolean saveInfoStepOK;
        boolean hasIp;
         
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Init Linux Host Begin @@@@@@@@@@@@@@@@@## ");
        
        ip = selectHostPane.getIP();
        port = selectHostPane.getPort();
        
        volInfo = selectSysVolPane.getVolInfo();
        Vector crtList = new Vector();
        Vector selList = new Vector();
        Vector formatList = new Vector();
        
        size = volInfo.size();
        for( i=0; i<size ;i++ ){
            binder = (BindOfUnixPartandLV)volInfo.elementAt(i);
            if( binder.isProtected ){
                if( binder.action == 0 ){
                    crtList.addElement( binder );
                }
                
                if( binder.action == 1 ){
SanBootView.log.debug(getClass().getName(), " has selected volumes.");
                    selList.addElement( binder );
                }
                
                if( binder.isFormatted ){
                    formatList.addElement( binder ); // 有可能含有刚刚创建好的target volume
                }
            }
        }
        
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Create Volume Begin @@@@@@@@@@@@@@@@@## ");         
        // 1. create volume
        crtVolStepOK = true;
        runningTaskPane.setCurTabPane( RunningTaskPane.CRT_VOL_ROW );
        runningTaskPane.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskPane.CRT_VOL_ROW, 2
        );
        
        // 先创建host,因为下面要用到clnt id ( vg的名字要用到,vg的格式：vg_clntID_targetID )
        isOk = crtHost( ip,port );
        if( !isOk ){
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskPane.CRT_VOL_ROW, 2
            );
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.addHost")+
                      SanBootView.res.getString("common.failed"); 
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.CRT_VOL_ROW );
            writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
            allFinished = false;
            return;
        }
        
        isOk = view.initor.mdb.addIscsiInitorDriver( ip,port );
        if( !isOk ){
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.CRT_VOL_ROW, 2
            );
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.loadIscsiMod")+
                      SanBootView.res.getString("common.failed"); 
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.CRT_VOL_ROW );
            writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
            allFinished = false;
            return;
        }
        
        crtSize = crtList.size();
        if( crtSize > 0 ){    
            for( i=0; i<crtSize; i++ ){
                binder = (BindOfUnixPartandLV)crtList.elementAt(i);
                
                if( binder.part.mp.equals("/") ){
                    // 表明 OS volume 由创建产生
                    hasCrtOSDisk = true;
                }
                
                if( binder.rawTgt == null ){ // 表明这个lv是从头开始创建的(即先建target)
                    // 自动生成底层tgt的名字，名字的生成规则如下：
                    // 1. 以a-z开头，每个字母后边可以跟0-999的数字
                    // 2. 从a开始查找，如果a0-a999全部被占用，就从b开始，如此类推�����
                    tgtName = generateTgtName();
SanBootView.log.debug(getClass().getName(), "auto generate new tgt name: " + tgtName );
                    if( tgtName.equals("") ){
                        // tgt name名字空间被用光了,这几乎不可能���
SanBootView.log.error( getClass().getName(),"tgt name space is used up. It's impossible.");    
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.noTgtNameSpace");
                        runningTaskPane.setLogOnTabpane( errMsg ,RunningTaskPane.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                        crtVolStepOK = false;
                        break;
                    }
                    tgtName = tgtName + "_" + binder.part.mp+"_"+ip;
                    if( tgtName.length() >254 ){
                        tgtName = tgtName.substring( 0,250 );
                    }
                    binder.tgtName = tgtName;
                    
                    isNoneType = binder.lvType.equals( GetLVMType.LVM_TYPE_NONE );
                    //isSwap = binder.part.mp.equals( ResourceCenter.SWAP_MP );
                    try{
                        lvSize = Double.parseDouble( binder.tgtSize );
                        snapSpace = Integer.parseInt( binder.snapSapce );
                        
                        if( isNoneType ){
SanBootView.log.info( getClass().getName(),"LVM type is None : "+ binder.part.mp );
                            tgtSize = lvSize;
                        }else{
                            // 真正创建的tgt大小,包含了snapshot space
                            tgtSize = lvSize*( 100 + snapSpace )/100;
                        }
                    }catch(Exception ex){
SanBootView.log.error( getClass().getName(),"Error: invalid size of target disk: "+ binder.tgtSize );                        
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.invalidSize")+" [ "+binder.tgtSize+" ]"; 
                        runningTaskPane.setLogOnTabpane( errMsg ,RunningTaskPane.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                        crtVolStepOK = false;
                        continue;
                    }
                    
                    bksize = ( 1<< binder.blkSize );
                    bkNum =(int)(( tgtSize*1024*1024*1024 + bksize-1 )/bksize);
                    
                    isOk = view.initor.mdb.addOrphVol( binder.tgtName, binder.blkSize,bkNum,binder.poolid ); 
                    if( isOk ){   
                        runningTaskPane.setLogOnTabpane(
                            SanBootView.res.getString("InitNWinHostWizardDialog.log.crtTgt") + " [ " + binder.tgtName + "(PV) ] " +
                                SanBootView.res.getString("common.ok"),
                            RunningTaskPane.CRT_VOL_ROW
                        );
                        binder.targetID = view.initor.mdb.getNewId();
                        binder.rootID = view.initor.mdb.getRootID();
                        // 为下次生成新的tgtname做准备
                        orphVolList.add( new Volume( binder.targetID,binder.tgtName ) );
                        
                        targetSrvName = view.initor.mdb.getHostName();
                        iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName;                    
                        
                        isOk = view.initor.mdb.addLunMap( binder.targetID, ip, "255.255.255.255", "rw", "", "", "", "");
                        if( isOk ){
                            runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.lunmap") + " [ " + binder.targetID + " " + ip + " 255.255.255.255 rw ] " + 
                                    SanBootView.res.getString("common.ok") ,
                                RunningTaskPane.CRT_VOL_ROW
                            );
                            
                            // 文剑在addvg脚本中自己login target
                            isOk = view.initor.mdb.addVg( ip,port, 
                                " -I " + iscsiVar +" -S " + view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT +
                                " -lv " + binder.lvType + " -c " + host.getID() + " -t "+binder.targetID
                            );  
                            
                            // 新vg的名字肯定为如下所示
                            vgName = "vg_" + host.getID() + "_" + binder.targetID;
                            if( isOk ){
                                runningTaskPane.setLogOnTabpane(
                                    SanBootView.res.getString("InitNWinHostWizardDialog.log.crtVg") + " [ " + vgName + " ] " +
                                        SanBootView.res.getString("common.ok"),
                                    RunningTaskPane.CRT_VOL_ROW
                                );
                                
                                isOk = crtLVorVgVolMap(vgName, null, null,RunningTaskPane.CRT_VOL_ROW, host.getID(), binder.lvType,binder.snapSapce,binder.rootID );                        
                                if( !isOk ){
                                    crtVolStepOK = false;
                                }else{
                                    // 创建LV
                                    isOk = view.initor.mdb.addLV( ip,port,
                                        " -I " + iscsiVar +" -S " + view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT +
                                        " -lv "+binder.lvType + " -L " + (lvSize*1024) + " -n "+ binder.lvName + " "+vgName+
                                        ( isNoneType ? " -t "+binder.targetID:"")
                                    );
                                    if( isOk ){
                                        runningTaskPane.setLogOnTabpane(
                                            SanBootView.res.getString("InitNWinHostWizardDialog.log.crtLV") + " [ " + binder.lvName + " ] " +
                                                SanBootView.res.getString("common.ok"),
                                            RunningTaskPane.CRT_VOL_ROW
                                        );
                                        
                                        isOk = crtLVorVgVolMap( vgName, binder.lvName, binder.part.mp,RunningTaskPane.CRT_VOL_ROW, host.getID(),null, null,binder.rootID );
                                        if( !isOk ){
                                            crtVolStepOK = false;
                                        }else{
                                            if( binder.part.mp.equals("/") ){
                                                // 表明 OS disk创建成功了
                                                isCrtOSDiskOk = true;
                                                OSBinder = binder;
                                            }
                                        } 
                                    }else{
                                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.crtLV") + " [ " + binder.lvName+ " ] " + 
                                                    SanBootView.res.getString("common.failed");
                                        runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                        writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                        crtVolStepOK = false;
                                    }
                                }
                                
                                // 将vg offline掉
                                args = " -lv " + binder.lvType + " -g " + vgName;
                                isOk = view.initor.mdb.vgOffline( ip,port, args );
                                if( isOk ){
                                    runningTaskPane.setLogOnTabpane(
                                        SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + " [ " + vgName + " ] " +
                                            SanBootView.res.getString("common.ok"),
                                        RunningTaskPane.CRT_VOL_ROW
                                    );
                                    
                                    args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT + " -t " + binder.targetID;
                                    isOk = doLogoutTarget( ip,port, RunningTaskPane.CRT_VOL_ROW, args,iscsiVar+":"+binder.targetID );
                                    if( !isOk ){
                                        crtVolStepOK = false;
                                    }
                                }else{
                                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + " [ " + vgName + " ] " + 
                                                SanBootView.res.getString("common.failed");
                                    runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                    writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                    crtVolStepOK = false;
                                }
                            }else{
                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.crtVg") + " [ " + vgName + " ] " + 
                                            SanBootView.res.getString("common.failed");
                                runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                crtVolStepOK = false;
                            }       
                        }else{
                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.lunmap") + " [ " + binder.targetID + " " + ip + " 255.255.255.255 rw ] " +
                                      SanBootView.res.getString("common.failed") ;
                            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.CRT_VOL_ROW );
                            writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                            crtVolStepOK = false;
                        }
                    }else{
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.crtTgt") + " [ " + binder.tgtName + "(PV) ] " +
                                  SanBootView.res.getString("common.failed");
                        runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                        crtVolStepOK = false;
                    }
                }else{// 表明这个lv是从一个存在的raw target上创建的，也许这个raw target存在对应的vg和lv
                    targetSrvName = view.initor.mdb.getHostName();
                    if( targetSrvName.equals("") ){
SanBootView.log.error(getClass().getName(),"target server name is null." );                        
                        crtVolStepOK = false;
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostNameFailed"); 
                        runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.CRT_VOL_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                        continue; // 继续后面的创建
                    }else{
                        iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName;
                        targetID = binder.rawTgt.getTargetID();
                        
                        hasIp = false; 
                        // 首先删除老的、没用的lunmap,不管是否成功删除
                        isOk = view.initor.mdb.getLunMapForTID( targetID );
                        if( isOk ){
                            lmList = view.initor.mdb.getAllLunMapForTid();
                            size1 = lmList.size();
                            for( j=0;j<size1;j++ ){
                                lm = (LunMap)lmList.elementAt( j );
                                if( !lm.getIP().equals( ip ) ){
                                    view.initor.mdb.delLunMap( targetID, lm.getIP(),lm.getMask(), lm.getAccessMode() );
                                }else{
                                    hasIp = true;
                                }
                            }
                        }
                        
                        if( !hasIp ){
                            isOk = view.initor.mdb.addLunMap( targetID, ip, "255.255.255.255", "rw", "", "", "", "" );
                            if( isOk ){
                                runningTaskPane.setLogOnTabpane(
                                    SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + targetID +" "+ ip + " 255.255.255.255 rw ]" + " " +
                                        SanBootView.res.getString("common.ok") ,
                                    RunningTaskPane.CRT_VOL_ROW
                                );
                            }else{
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + targetID +" "+ ip + " 255.255.255.255 rw ]" + " " +
                                           SanBootView.res.getString("common.failed"); 
                                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.CRT_VOL_ROW );
                                writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                crtVolStepOK = false;
                                continue;  // add lunmap for client ip,can't do the following operation.
                            }
                        }
                         
                        args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT + " -t "+targetID;
                        isOk = doLoginTarget( ip, port, RunningTaskPane.CRT_VOL_ROW, args, iscsiVar+":"+targetID );
                        if( isOk ){
                            // 直接将vg全部删除(包括vg本身)
                            vgName = "vg_" + host.getID() + "_" + targetID;
                            args = " -g " + vgName; // 不知道原来的lvtype是什么，因为服务器端可能没有vg 对应的volmap
                            boolean delVgOk = true;
                            boolean delLVOk = true; 
                            isOk = view.initor.mdb.delVg( ip, port, args );
                            if( isOk ){
                                // 找出被删除的vg和lv对应的volmap对象
                                vg = view.initor.mdb.getVgOnTid( host.getID(),targetID ); 
                                if( vg != null ){
                                    isOk = view.initor.mdb.delVolumeMap( vg );
                                    if( isOk ){
                                        runningTaskPane.setLogOnTabpane(
                                            SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap") +" [ "+ vgName+ " ] " +
                                                SanBootView.res.getString("common.ok") ,
                                            RunningTaskPane.CRT_VOL_ROW
                                        );
                                    }else{
                                        delVgOk = false;
                                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap") + "[ " + vgName +" ] " + 
                                        SanBootView.res.getString("common.failed"); 
                                        runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                        writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                        crtVolStepOK = false;
                                    }
                                }
                                
                                lv = view.initor.mdb.getLVOnTid( targetID );// 只能用这种方法来找到对应的lv,因为vg volmap可能已经不存在了
                                if( lv != null ){
                                    isOk = view.initor.mdb.delVolumeMap( lv );
                                    if( isOk ){
                                        runningTaskPane.setLogOnTabpane(
                                            SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap") +" [ "+ lv.getVolName()+ " ] " +
                                                SanBootView.res.getString("common.ok") ,
                                            RunningTaskPane.CRT_VOL_ROW
                                        );
                                    }else{
                                        delLVOk = false;
                                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap") + "[ " + lv.getVolName() +" ] " + 
                                                        SanBootView.res.getString("common.failed"); 
                                        runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                        writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                        crtVolStepOK = false;
                                    }
                                }
                                
                                if( delLVOk && delVgOk ){
                                    // 然后按照最新的lvtype和snapspace来创建新的vg
                                    isOk = view.initor.mdb.addVg( ip,port, 
                                        " -I " + iscsiVar +" -S " + view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT +
                                        " -lv " + binder.lvType + " -c " + host.getID() + " -t " + targetID
                                    );

                                    if( isOk ){
                                        runningTaskPane.setLogOnTabpane(
                                            SanBootView.res.getString("InitNWinHostWizardDialog.log.crtVg") + " [ " + vgName + " ] " +
                                                SanBootView.res.getString("common.ok"),
                                            RunningTaskPane.CRT_VOL_ROW
                                        );

                                        isOk = crtLVorVgVolMap( vgName, null, null,RunningTaskPane.CRT_VOL_ROW, host.getID(), binder.lvType,binder.snapSapce,binder.rawTgt.getSnap_root_id() );
                                        if( !isOk ){
                                            crtVolStepOK = false;
                                        }else{
                                            // 创建LV
                                            isNoneType = binder.lvType.equals( GetLVMType.LVM_TYPE_NONE );
                                            //isSwap = binder.part.mp.equals( ResourceCenter.SWAP_MP );
                                            try{
                                                lvSize = Double.parseDouble( binder.tgtSize );
                                                snapSpace = Integer.parseInt( binder.snapSapce );
                                                
                                                if( !isNoneType ){
                                                    // 真正创建的tgt大小,包含了snapshot space
                                                    lvSize = lvSize*( 100 - snapSpace )/100;
                                                }
                                            }catch(Exception ex){
                                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.invalidSize")+" [ "+binder.tgtSize+" ]"; 
                                                runningTaskPane.setLogOnTabpane( errMsg ,RunningTaskPane.CRT_VOL_ROW );
                                                writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                                crtVolStepOK = false;
                                                continue;
                                            }

                                            isOk = view.initor.mdb.addLV( ip,port,
                                                " -I " + iscsiVar +" -S " + view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT +
                                                " -lv "+binder.lvType + " -L " + (lvSize*1024) + " -n "+ binder.lvName + " "+vgName+
                                                ( isNoneType ? " -t "+targetID:"")
                                            );
                                            if( isOk ){
                                                runningTaskPane.setLogOnTabpane(
                                                    SanBootView.res.getString("InitNWinHostWizardDialog.log.crtLV") + " [ " + binder.lvName + " ] " +
                                                        SanBootView.res.getString("common.ok"),
                                                    RunningTaskPane.CRT_VOL_ROW
                                                );

                                                isOk = crtLVorVgVolMap( vgName, binder.lvName,binder.part.mp,RunningTaskPane.CRT_VOL_ROW, host.getID(),null,null,binder.rawTgt.getSnap_root_id() );
                                                if( !isOk ){
                                                    crtVolStepOK = false;
                                                }else{
                                                    if( binder.part.mp.equals("/") ){
                                                        // 表明 OS disk创建成功了
                                                        isCrtOSDiskOk = true;
                                                        OSBinder = binder;
                                                    }
                                                } 
                                            }else{
                                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.crtLV") + " [ " + binder.lvName+ " ] " + 
                                                            SanBootView.res.getString("common.failed");
                                                runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                                writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                                crtVolStepOK = false;
                                            }
                                        }
                                        
                                        // 将vg offline掉
                                        args =" -lv " + binder.lvType + " -g " + vgName;
                                        isOk = view.initor.mdb.vgOffline( ip,port, args );
                                        if( isOk ){
                                            runningTaskPane.setLogOnTabpane(
                                                SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + " [ " + vgName + " ] " +
                                                    SanBootView.res.getString("common.ok"),
                                                RunningTaskPane.CRT_VOL_ROW
                                            );
                                            
                                            args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT + " -t " + targetID;
                                            isOk = doLogoutTarget( ip,port, RunningTaskPane.CRT_VOL_ROW, args,iscsiVar+":"+targetID );
                                            if( !isOk ){
                                                crtVolStepOK = false;
                                            }
                                        }else{
                                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + " [ " + vgName + " ] " + 
                                                        SanBootView.res.getString("common.failed");
                                            runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                            writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                            crtVolStepOK = false;
                                        }
                                    }else{
                                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.crtVg") + " [ " + vgName + " ] " + 
                                                    SanBootView.res.getString("common.failed");
                                        runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                        writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                        crtVolStepOK = false;
                                    }
                                }
                            }else{
                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.delVG") + "[ " + vgName +" ] " + 
                                          SanBootView.res.getString("common.failed"); 
                                runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                writeLogBuf( errMsg, RunningTaskPane.CRT_VOL_ROW );
                                crtVolStepOK = false;
                            }
                        }else{
                            crtVolStepOK = false;
                        }
                    }
                }
            }
            
            if( crtVolStepOK ){
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskPane.CRT_VOL_ROW, 2
                );
            }else{
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskPane.CRT_VOL_ROW, 2
                );
            }
        }else{
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskPane.CRT_VOL_ROW, 2
            );
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.crtNothing"),
                RunningTaskPane.CRT_VOL_ROW
            );
        }
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Create Volume End @@@@@@@@@@@@@@@@@## ");
        
        // 2. format volume
        formatVolStepOK = true;
        runningTaskPane.setCurTabPane(  RunningTaskPane.FORMAT_VOL_ROW );
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Format Volume Begin @@@@@@@@@@@@@@@@@## ");        
        size = formatList.size();
        if( size > 0 ){            
            targetSrvName = view.initor.mdb.getHostName();
            if( targetSrvName.equals("") ){
SanBootView.log.error( getClass().getName()," target server name is null.");                
                formatVolStepOK = false;
                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostNameFailed"); 
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.FORMAT_VOL_ROW );
                writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.FORMAT_VOL_ROW, 2
                );
            }else{
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ),RunningTaskPane.FORMAT_VOL_ROW, 2
                );
                
                // 开始 format lv
                iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName;
                for( i=0; i<size; i++ ){
                    binder = (BindOfUnixPartandLV)formatList.elementAt(i);
                    
                    if( binder.isRealLV ){ // GUI上选中了已经存在的 lv
                        lvName = binder.lv.getVolName();
                        targetID =binder.targetID;
                        
                        // 记录C盘所在的volume是否要login
                        osLv = selectSysVolPane.getSelectOSDiskVol();
                        if( osLv != null ){
                            if( osLv.rawTgt.getTargetID() == targetID ){
                                hasLoginOSDisk = true;
                            }
                        }
                        
                        if( !addLunMap( ip, targetID, RunningTaskPane.FORMAT_VOL_ROW ) ){
                            formatVolStepOK = false;
                            continue;
                        }
                        
                        args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT + " -t "+targetID;
                        // login this target volume
                        if( view.initor.mdb.loginUnixTarget( ip,port,args )){
                            runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.loginTarget") +" [ "+ iscsiVar +":"+targetID + " ] " +
                                    SanBootView.res.getString("common.ok") ,
                                RunningTaskPane.FORMAT_VOL_ROW
                            );
                            
                            // 记录C盘所在的volume是否成功login
                            osLv = selectSysVolPane.getSelectOSDiskVol();
                            if( osLv!=null ){
                                if( osLv.rawTgt.getTargetID() == targetID ){
                                    isLoginOSDiskOk = true;
                                }
                            }
                            
                            // 将 vg online
                            vgName = "vg_" + host.getID() + "_" + targetID;
                            args = " -lv " + binder.lvType + " -g " + vgName;
                            isOk = view.initor.mdb.vgOnline( ip,port,args);
                            if( isOk ){
                                // 记录C盘所在的vg是否成功online
                                osLv = selectSysVolPane.getSelectOSDiskVol();
                                if( osLv!=null ){
                                    if( osLv.rawTgt.getTargetID() == targetID ){
                                        isVgonlineOSDiskOk = true;
                                    }
                                }
                                
                                // 由于iscsi卷的大小不能确定，所以format的时间不好确定，
                                // 故而一律将超时时间设置为10 hours
                                view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT );
                                args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT +" -lv "+binder.lvType;
                                args += " -g "+binder.lv.getVolDesc();
                                args += ( binder.lvType.equals( GetLVMType.LVM_TYPE_NONE )?" -t "+targetID:" -l "+lvName );
                                args += " -T "+binder.part.fsType;
                                isOk = view.initor.mdb.formatUnixVol( ip,port,args );
                                view.initor.mdb.restoreOldTimeOut();
                                
                                if( binder.part.isEfiFlag() ){
                                    String dev = binder.part.getDeviceName();
                                    String part_num = binder.part.getPartitionNumber();
                                    if( !dev.equals("") && !part_num.equals("") ){
                                        args = dev + " " + part_num + " " + binder.part.flag;
                                        isOk = view.initor.mdb.setEfiPartitionFlag( ip,port,args );
                                    }else{
SanBootView.log.error( getClass().getName(), "invalid device path( when format lv ): "+ binder.part.dev_path );                              
                                        isOk = false;
                                    }
                                }
                                
                                if( isOk ){
                                    runningTaskPane.setLogOnTabpane(
                                        SanBootView.res.getString("InitNWinHostWizardDialog.log.formatVol") + "[ " + lvName + " ] "+ 
                                            SanBootView.res.getString("common.ok"),
                                        RunningTaskPane.FORMAT_VOL_ROW
                                    );
                                    
                                    // 记录C盘所在的volume是否成功format
                                    mayLogout = false;
                                    osLv = selectSysVolPane.getSelectOSDiskVol();
                                    if( osLv!=null ){
                                        if( osLv.rawTgt.getTargetID() == targetID ){
                                            isFormatOSDiskOk = true;
                                            mayLogout = true;
                                        }else{
                                            mayLogout = true;
                                        }
                                    }else{
                                        mayLogout=true;
                                    }
                                    
                                    if( mayLogout ){ 
                                        args = " -lv " + binder.lvType + " -g " + vgName;
                                        isOk = view.initor.mdb.vgOffline( ip,port,args );
                                        if( isOk ){
                                            runningTaskPane.setLogOnTabpane(
                                                SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + "[ " + vgName + " ] " +
                                                    SanBootView.res.getString("common.ok"),
                                                RunningTaskPane.FORMAT_VOL_ROW
                                            );
                                            
                                            args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT + " -t "+targetID;
                                            // 注销失败不算严重错误，不置formatVolStepOK为false
                                            isOk = view.initor.mdb.logoutUnixTarget( ip,port,args );
                                            if( isOk ){
                                                runningTaskPane.setLogOnTabpane(
                                                    SanBootView.res.getString("InitNWinHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar +":"+targetID + " ] " +
                                                        SanBootView.res.getString("common.ok"),
                                                    RunningTaskPane.FORMAT_VOL_ROW
                                                );
                                            }else{
                                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar + targetID +" ] " +
                                                           SanBootView.res.getString("common.failed");
                                                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.FORMAT_VOL_ROW );
                                                writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                            }
                                        }else{
                                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + "[ " + vgName +" ] " +
                                                       SanBootView.res.getString("common.failed");
                                            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.FORMAT_VOL_ROW );
                                            writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                            formatVolStepOK = false;
                                        }
                                    }
                                }else{
                                    errMsg =  SanBootView.res.getString("InitNWinHostWizardDialog.log.formatVol") + "[ " + lvName + " ] " +
                                               SanBootView.res.getString("common.failed"); 
                                    runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                    writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                    formatVolStepOK = false;
                                }
                            }else{
                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOnline") +" [ "+ vgName + " ] " +
                                          SanBootView.res.getString("common.failed"); 
                                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.FORMAT_VOL_ROW );
                                writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                formatVolStepOK = false;
                            }
                        }else{
                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.loginTarget") +" [ "+ iscsiVar +":"+targetID + " ] " +
                                      SanBootView.res.getString("common.failed"); 
                            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.FORMAT_VOL_ROW );
                            writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                            formatVolStepOK = false;
                        }
                    }else{// format 新创建的lv
                        lvName = binder.lvName;
                        if( binder.rawTgt != null ){
                            targetID = binder.rawTgt.getTargetID();
                        }else{ // format new crted target vol
                            targetID = binder.targetID;
                        }
                        
                        // 查看刚才的lv创建是否成功
                        vg = view.initor.mdb.getVgOnTid( host.getID(),targetID );
                        if( vg != null ){
                            lv = view.initor.mdb.getLVOnClntAndVG( vg.getVolClntID(), vg.getVolName() );
                            if( lv != null ){
                                // 记录C盘所在的volume是否要login
                                if( OSBinder!=null ){
                                    if( OSBinder.targetID == targetID ){
                                        hasLoginOSDisk = true;
                                    }
                                }
                                
                                if( !addLunMap( ip, targetID, RunningTaskPane.FORMAT_VOL_ROW ) ){ 
                                    formatVolStepOK = false;
                                    continue;
                                }
                                
                                // login this target volume
                                args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT + " -t "+targetID;
                                if( view.initor.mdb.loginUnixTarget( ip,port,args )){
                                    runningTaskPane.setLogOnTabpane(
                                        SanBootView.res.getString("InitNWinHostWizardDialog.log.loginTarget") +" [ "+ iscsiVar +":"+targetID + " ] " +
                                            SanBootView.res.getString("common.ok") ,
                                        RunningTaskPane.FORMAT_VOL_ROW
                                    );
                                    
                                    // 记录C盘所在的volume是否成功login
                                    if( OSBinder!=null ){
                                        if( OSBinder.targetID == targetID ){
                                            isLoginOSDiskOk = true;
                                        }
                                    }
                                    
                                    // 将 vg online
                                    vgName = "vg_" + host.getID() + "_" + targetID;
                                    args = " -lv " + binder.lvType + " -g " + vgName;
                                    isOk = view.initor.mdb.vgOnline( ip,port,args );
                                    if( isOk ){
                                        // 记录C盘所在的vg是否成功online
                                        if( OSBinder!=null ){
                                            if( OSBinder.targetID == targetID ){
                                                isVgonlineOSDiskOk = true;
                                            }
                                        }
                                        
                                        view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT );
                                        args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT +" -lv "+binder.lvType;
                                        args += " -g "+vg.getVolName();
                                        args += ( binder.lvType.equals( GetLVMType.LVM_TYPE_NONE )?" -t "+targetID:" -l "+lvName );
                                        args += " -T "+binder.part.fsType;
                                        isOk = view.initor.mdb.formatUnixVol( ip, port, args );
                                        view.initor.mdb.restoreOldTimeOut();

                                        if( binder.part.isEfiFlag() ){
                                            String dev = binder.part.getDeviceName();
                                            String part_num = binder.part.getPartitionNumber();
                                            if( !dev.equals("") && !part_num.equals("") ){
                                                args = dev + " " + part_num + " " + binder.part.flag;
                                                isOk = view.initor.mdb.setEfiPartitionFlag( ip,port,args );
                                            }else{
SanBootView.log.error( getClass().getName(), "invalid device path( when format lv ): "+ binder.part.dev_path );
                                                isOk = false;
                                            }
                                        }

                                        if( isOk ){
                                            runningTaskPane.setLogOnTabpane(
                                                SanBootView.res.getString("InitNWinHostWizardDialog.log.formatVol") + "[ " + lvName + " ] " +
                                                    SanBootView.res.getString("common.ok"),
                                                RunningTaskPane.FORMAT_VOL_ROW
                                            );

                                            // 记录C盘所在的volume是否成功format
                                            mayLogout = false;
                                            if( OSBinder!=null ){
                                                if( OSBinder.targetID == targetID ){
                                                    isFormatOSDiskOk = true;
                                                    mayLogout = true;
                                                }else{
                                                    mayLogout = true;
                                                }
                                            }else{
                                                mayLogout = true;
                                            }

                                            if( mayLogout ){
                                                args = " -lv " + binder.lvType + " -g " + vgName;
                                                isOk = view.initor.mdb.vgOffline( ip,port,args );
                                                if( isOk ){
                                                    runningTaskPane.setLogOnTabpane(
                                                        SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + "[ " + vgName + " ] " +
                                                            SanBootView.res.getString("common.ok"),
                                                        RunningTaskPane.FORMAT_VOL_ROW
                                                    );
                                              
                                                    args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT + " -t "+targetID;
                                                    // 注销失败不算严重错误，不置formatVolStepOK为false
                                                    isOk = view.initor.mdb.logoutUnixTarget( ip,port,args );
                                                    if( isOk ){
                                                        runningTaskPane.setLogOnTabpane(
                                                            SanBootView.res.getString("InitNWinHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar +":"+targetID + " ] " +
                                                                SanBootView.res.getString("common.ok"),
                                                            RunningTaskPane.FORMAT_VOL_ROW
                                                        );
                                                    }else{
                                                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar +":"+targetID +" ] " + 
                                                                  SanBootView.res.getString("common.failed"); 
                                                        runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                                        writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                                    }
                                                }else{
                                                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + "[ " + vgName +" ] " +
                                                               SanBootView.res.getString("common.failed");
                                                    runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.FORMAT_VOL_ROW );
                                                    writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                                    formatVolStepOK = false;
                                                }
                                            }
                                        }else{
                                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.formatVol") + "[ " + lvName + " ] " +
                                                       SanBootView.res.getString("common.failed") ; 
                                            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.FORMAT_VOL_ROW );
                                            writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                            formatVolStepOK = false;
                                        }
                                    }else{
                                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOnline") +" [ "+ vgName + " ] " +
                                                  SanBootView.res.getString("common.failed"); 
                                        runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.FORMAT_VOL_ROW );
                                        writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                        formatVolStepOK = false;
                                    }
                                }else{
                                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.loginTarget") +" [ "+ iscsiVar +":"+targetID + " ] "+
                                               SanBootView.res.getString("common.failed");
                                    runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.FORMAT_VOL_ROW );  
                                    writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                    formatVolStepOK = false;
                                }
                            }else{
SanBootView.log.error( getClass().getName(),"Not found LV: " + lvName );                                
                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.notFoundLV") + " : " + lvName;
                                runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                                formatVolStepOK = false;
                            }
                        }else{
SanBootView.log.error( getClass().getName(),"Not found VG: " + "vg_" + host.getID() + "_" + targetID );                  
                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.notFoundVG") + " : " + "vg_" + host.getID() + "_" + targetID ;
                            runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                            writeLogBuf( errMsg, RunningTaskPane.FORMAT_VOL_ROW );
                            formatVolStepOK = false;
                        }
                    }
                }
                
                if( formatVolStepOK ){
                    runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ),RunningTaskPane.FORMAT_VOL_ROW, 2
                    );
                }else{
                    runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.FORMAT_VOL_ROW, 2
                    );
                }
            }    
        }else{
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ),RunningTaskPane.FORMAT_VOL_ROW, 2
            );
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.formatNothing"),
                RunningTaskPane.FORMAT_VOL_ROW
            );
        }
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Format Volume End @@@@@@@@@@@@@@@@@## ");        
        
        // 3. get other info.
        getInfoStepOK = true;
        runningTaskPane.setCurTabPane( RunningTaskPane.GET_INFO_ROW );
        runningTaskPane.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskPane.GET_INFO_ROW, 2
        );
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Get other info Begin @@@@@@@@@@@@@@@@@## ");        
        // 网卡信息之前已经取过了
        UnixNetCard selCard = selectNetCardPane.getSelectNetCard();
        isOk = true;
        if( isOk ){
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskPane.GET_INFO_ROW, 2
            );
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.getIpInfo")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.GET_INFO_ROW 
            );
            
            runningTaskPane.setLogOnTabpane(
                view.initor.mdb.getUnixIPContents( selCard.mac ), 
                RunningTaskPane.GET_INFO_ROW 
            );
        }else{
            getInfoStepOK = false;
            
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL),RunningTaskPane.GET_INFO_ROW, 2
            );
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.getIpInfo")+
                       SanBootView.res.getString("common.failed"); 
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.GET_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.GET_INFO_ROW );
        }
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Get other info END @@@@@@@@@@@@@@@@@## ");
        
        // 4. copy os and save info  
        boolean autoDRReover = false;
        boolean autoReboot   = false;
        boolean useOdyDhcp   = setDhcpPane.isAutoSetup();
        
        saveInfoStepOK = true;
        boolean isOkForCrtVolMapFromCrtList = true;
        boolean isOkForCrtVolMapFromSelList = true;
        boolean isOkForSaveIp = true;
        boolean isOkForSaveMp = true;
        boolean isOkForSavePartition = true;
        boolean isOkForSaveFstab = true;
        boolean isOkForSaveNetworkCmd = true;
        boolean isOkForSaveKillCmd = true;
        boolean isOkForSaveHaltCmd = true;
        boolean isOkForSaveBootInfo = true;
        boolean isOkForSaveOsLoaderType = true;
        boolean isOkForSaveDhcpInfo = false;
        boolean isOkForSaveLVMInfo  = false;
        boolean isCopyOS = true;
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Copy OS Begin @@@@@@@@@@@@@@@@@## ");         
        // 4.1 copy OS 
        runningTaskPane.setCurTabPane( RunningTaskPane.COPY_OS_ROW );
        runningTaskPane.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskPane.COPY_OS_ROW, 2
        );
        
        if( targetSrvName.equals("") ){
            targetSrvName = view.initor.mdb.getHostName();
            iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName;
        }else{
            iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName;
        }
        
        // 4.2 create volMap from crtList and selList
        Vector oldVolMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
        isOkForCrtVolMapFromCrtList = createVolMapFromCrtList( RunningTaskPane.COPY_OS_ROW,crtList, host.getID() );
        isOkForCrtVolMapFromSelList = createVolMapFromSelList( RunningTaskPane.COPY_OS_ROW,iscsiVar,host.getIP(),host.getPort(),selList, oldVolMapList, host.getID() );
        
        if( isOkForCrtVolMapFromCrtList && isOkForCrtVolMapFromSelList ){
            isCopyOS = copyOS();
        }else{
            isCopyOS = false;
        }
        
        if( isCopyOS ){
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskPane.COPY_OS_ROW, 2
            );
        }else{
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskPane.COPY_OS_ROW, 2
            );
        }
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Copy OS End @@@@@@@@@@@@@@@@@## "); 
        
        runningTaskPane.setCurTabPane( RunningTaskPane.SAVE_INFO_ROW );
        runningTaskPane.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskPane.SAVE_INFO_ROW , 2
        );
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Save info Begin @@@@@@@@@@@@@@@@@## ");
        
        // 4.3 保存boot info(interface to CaoXiTao)
        isOkForSaveBootInfo = genIBootInfo( iscsiVar,host.getIP(),host.getPort(),host.getID(),"" ); // extra is null now
     
        // 4.4 保存dhcp config
        DhcpClientInfo  dhcpInfo = setDhcpPane.getDhcpSetInfo();
        if( useOdyDhcp ){
            // 先删除这个dhcp conf
            DhcpClientInfo  olddhcpInfo = setDhcpPane.getOldDhcpClntInfo();
            String simpleMac ="";
            if( olddhcpInfo != null ){
SanBootView.log.debug(getClass().getName(), " old dhcp info: "+olddhcpInfo.mac );
                simpleMac = UnixNetCard.getSimpleMac( olddhcpInfo.mac );
            }else{               
                simpleMac = UnixNetCard.getSimpleMac( selCard.mac );
SanBootView.log.debug(getClass().getName(), " old dhcp info is null "+" new mac: "+simpleMac );
            }
            isOk = view.initor.dhcpdb.dhcpOperation(
                       ResourceCenter.BIN_DIR + "dhcp_set.sh delcli -p " + simpleMac
                  );
            if( isOk ){
                try{
                    Thread.sleep( 5000 );//睡5秒钟，否则连续执行delcli和addcli会造成dhcpd起不来
                }catch(Exception ex){}
                
                boolean hasdns = ( !dhcpInfo.dns.equals("") );
                boolean hasgw = ( !dhcpInfo.defgw.equals("") );
                String ibootSrv = dhcpInfo.nextServer;
                args = "";
                if( hasdns ){
                    args+=" -d " +dhcpInfo.dns;
                }
                if( hasgw ){
                    args+=" -g "+dhcpInfo.defgw;
                }

                if( machine.equals("") ){
                    args += " -i "+dhcpInfo.ip + " -p " + UnixNetCard.getSimpleMac( selCard.mac) +" -s "+dhcpInfo.subnet + " -x "+ibootSrv + " -ostype linux";
                }else{
                    if( machine.toUpperCase().equals( ResourceCenter.PLATFORM_IA64 ) ){
                        args += " -i "+dhcpInfo.ip + " -p " + UnixNetCard.getSimpleMac( selCard.mac) +" -s "+dhcpInfo.subnet + " -x "+ibootSrv + " -machine " + machine + " -ostype linux";
                    }else{
                        args += " -i "+dhcpInfo.ip + " -p " + UnixNetCard.getSimpleMac( selCard.mac) +" -s "+dhcpInfo.subnet + " -x "+ibootSrv + " -ostype linux";
                    }
                }
                
                isOk = view.initor.dhcpdb.dhcpOperation(
                        ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args
                    ); 
                if( isOk ){
                    isOk = view.initor.dhcpdb.getClientFromDhcp();
                    if( isOk ){
                        if( view.initor.dhcpdb.getSelClntOnMac( selCard.mac ) !=null ){
                            isOkForSaveDhcpInfo = true;
                            runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                    SanBootView.res.getString("common.ok"),
                                RunningTaskPane.SAVE_INFO_ROW
                            );
                        }else{
SanBootView.log.error( getClass().getName()," Error: not found record in dhcp config about MAC: "+ selCard.mac );                            
                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                      SanBootView.res.getString("common.failed"); 
                            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                        }
                    }else{
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                  SanBootView.res.getString("common.failed"); 
                        runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                    }
                }else{
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                              SanBootView.res.getString("common.failed"); 
                    runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                    writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                }
            }else{
                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                          SanBootView.res.getString("common.failed"); 
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
            }           
        }else{
            // save the 3rd dhcp setup info.   
            isOkForSaveDhcpInfo = saveInfo( ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_3RD_DHCP,
                    "ip:"+dhcpInfo.ip_3rd +"  nextsrv:"+ dhcpInfo.nextServer_3rd,
                    RunningTaskPane.SAVE_INFO_ROW
                    );
            if( isOkForSaveDhcpInfo ){
                runningTaskPane.setLogOnTabpane(
                    SanBootView.res.getString("InitBootHostWizardDialog.log.save3rdDhcpInfo")+" "+
                        SanBootView.res.getString("common.ok"),
                    RunningTaskPane.SAVE_INFO_ROW
                );
            }else{
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.save3rdDhcpInfo")+" "+
                          SanBootView.res.getString("common.failed"); 
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
            }
        }
        
        // 4.5 保存ip info
        if( getInfoStepOK ){
            isOkForSaveIp = saveInfo( ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_IP, 
                    view.initor.mdb.getUnixIPContents( selCard.mac ),
                    RunningTaskPane.SAVE_INFO_ROW
            );
            if( isOkForSaveIp ){
                runningTaskPane.setLogOnTabpane(
                    SanBootView.res.getString("InitNWinHostWizardDialog.log.saveIPConf")+" "+
                        SanBootView.res.getString("common.ok"),
                    RunningTaskPane.SAVE_INFO_ROW
                );
            }else{
                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveIPConf")+" "+
                          SanBootView.res.getString("common.failed"); 
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
            }
        }
        
        // 4.6 保存os loader type
        String bootDirDevPath = selectSysVolPane.getBootDevPath(); //获取/boot对应的设备路径
        if( bootDirDevPath == null ){
SanBootView.log.error( getClass().getName(),"Error: Can't find boot directory path.");            
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.noneBootDirDevPath");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            isOkForSaveOsLoaderType = false;
        }else{
            args = " get_bootloader.sh " + bootDirDevPath;
            isOk = view.initor.mdb.getOsLoaderType( host.getIP(),host.getPort(), args );
            if( isOk ){
                if( view.initor.mdb.isGrub() || view.initor.mdb.isLilo() ){
                    isOkForSaveOsLoaderType = saveInfo( ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_OS_LOADER, 
                            view.initor.mdb.getOsLoader(),RunningTaskPane.SAVE_INFO_ROW
                    );
                    if( isOkForSaveOsLoaderType ){
                        runningTaskPane.setLogOnTabpane(
                            SanBootView.res.getString("InitNWinHostWizardDialog.log.saveOsLoaderType")+" "+
                                SanBootView.res.getString("common.ok"),
                            RunningTaskPane.SAVE_INFO_ROW
                        );
                    }else{
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveOsLoaderType")+" "+
                                  SanBootView.res.getString("common.failed");
                        runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                    }
                }else{
                    errMsg =  SanBootView.res.getString("InitNWinHostWizardDialog.log.unknownOsLoader") +" [ " + bootDirDevPath+" ]";
SanBootView.log.error(getClass().getName(), errMsg );
                    runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.SAVE_INFO_ROW ); 
                    writeLogBuf( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                    isOkForSaveOsLoaderType = false;
                }
            }else{
                errMsg =  SanBootView.res.getString("InitNWinHostWizardDialog.log.getOsLoaderType") +" "+SanBootView.res.getString("common.failed")+
                           " [ " + bootDirDevPath +" ]";
                runningTaskPane.setLogOnTabpane( errMsg, RunningTaskPane.SAVE_INFO_ROW ); 
                writeLogBuf( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                isOkForSaveOsLoaderType = false;
            }
        }
        
        // 4.7 save fs info,disk partition info, original fstab,/etc/init.d/network ,/etc/init.d/killall, /etc/init.d/halt
        isOkForSaveMp = saveInfo( ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_MP, 
                partitionContent, RunningTaskPane.SAVE_INFO_ROW );
        if( isOkForSaveMp ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitBootHostWizardDialog.log.saveFsInfo")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.SAVE_INFO_ROW
            );
        }else{
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveFsInfo")+" "+
                      SanBootView.res.getString("common.failed"); 
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
        }
        
        isOkForSavePartition = saveInfo( ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_OLDDISK, 
                diskDetailInfo, RunningTaskPane.SAVE_INFO_ROW );
        if( isOkForSavePartition ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.SAVE_INFO_ROW
            );
        }else{
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                      SanBootView.res.getString("common.failed"); 
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
        }
        
        if( iBootConf == null ){
            getIBootConfContents(iscsiVar, host.getIP(),host.getID() );
        }
        isOkForSaveLVMInfo = saveInfo( ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_LVMINFO, 
                iBootConf.toString(), RunningTaskPane.SAVE_INFO_ROW );
        if( isOkForSavePartition ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.saveLVMInfo")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.SAVE_INFO_ROW
            );
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveLVMInfo")+" "+
                      SanBootView.res.getString("common.failed"); 
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
        }
        

        isOkForSaveFstab = view.initor.mdb.sendFileFromAgtToSrv( host.getIP(),host.getPort(),"/etc/fstab", ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_FSTAB); 
        if( isOkForSaveFstab ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.savefstab")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.SAVE_INFO_ROW
            );
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.savefstab")+" "+
                      SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
        }
        
        
        // modify for suse (2009.7.9 ) 
        isOkForSaveNetworkCmd = true;
        isOkForSaveKillCmd = true;
        isOkForSaveHaltCmd = true;
        
        /*
        isOkForSaveNetworkCmd = view.initor.mdb.sendFileFromAgtToSrv( host.getIP(),host.getPort(),"/etc/init.d/network", ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_NETWORK_CMD ); 
        if( isOkForSaveNetworkCmd ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.saveNetworkCmd")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.SAVE_INFO_ROW
            );
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveNetworkCmd")+" "+
                      SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
        }
        
        isOkForSaveKillCmd = view.initor.mdb.sendFileFromAgtToSrv( host.getIP(),host.getPort(),"/etc/init.d/killall", ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_KILLALL_CMD ); 
        if( isOkForSaveNetworkCmd ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.saveKillAllCmd")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.SAVE_INFO_ROW
            );
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveKillAllCmd")+" "+
                      SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
        }
        
        isOkForSaveHaltCmd = view.initor.mdb.sendFileFromAgtToSrv( host.getIP(),host.getPort(),"/etc/init.d/halt", ResourceCenter.CLT_IP_CONF + "/" + host.getID() +ResourceCenter.CONF_HALT_CMD ); 
        if( isOkForSaveHaltCmd ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.saveHaltCmd")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.SAVE_INFO_ROW
            );
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveHaltCmd")+" "+
                      SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
        }
        */
        
        // 4.8 修改 boot host
        saveInfoStepOK = ( isOkForSaveDhcpInfo && isOkForSaveOsLoaderType && isOkForSaveBootInfo && isOkForSaveIp && isOkForSaveMp &&
                isOkForSavePartition && isOkForSaveLVMInfo && isOkForSaveFstab && isOkForSaveNetworkCmd && isOkForSaveKillCmd && isOkForSaveHaltCmd );
        boolean initOK = ( crtVolStepOK && formatVolStepOK && getInfoStepOK && saveInfoStepOK && isCopyOS );

        // 把隐藏分区umount掉
        if( iaHidenPartition != null ){
            view.initor.mdb.mountIAHidenFs( host.getIP(),host.getPort(),"umount" );
        }

        if( useOdyDhcp ){
            host.setUseOdyDhcp();
        }else{
            host.clearUseOdyDhcp();
        }
        
        isOk = view.initor.mdb.modOneBootHost1(
            host.getID(),
            initOK?1:0,   // 除了修改主机信息后，所有的都成功了
            autoDRReover?1:0,
            autoReboot?1:0,
            host.getStopAllBaseServFlag(),
            selCard.mac,
            1
        );
        if( isOk ){
            // modify host in cache
            host.setInitFlag( initOK?1:0 );
            host.setAutoDRFlag( autoDRReover?1:0 );
            host.setAutoRebootFlag( autoReboot? 1:0 );
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.modHost") +
                      SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
        }
        
        if( isOk && saveInfoStepOK ){  // 只判断save_info步骤是否成功
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskPane.SAVE_INFO_ROW , 2
            );
        }else{ 
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskPane.SAVE_INFO_ROW , 2
            );
        }
        
        allFinished = initOK && isOk ;

        // 4.9 保存UWS report( 不考虑其是否成功,有可能写入server上的report库中，或者写到了GUI所在的主机上)
        recordUWSRpt( allFinished );

SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Save info End @@@@@@@@@@@@@@@@@## ");
SanBootView.log.info( getClass().getName()," ##@@@@@@@@@@@@@@@@@  Init Linux host End @@@@@@@@@@@@@@@@@## ");        
    }
    
    private boolean copyOS(){
        boolean isOk;
        int i,j,k,size,cnt=0,size1;
        UniProfile prof;
        UniProBackup backup;
        UniProHeader header;
        UniProIBoot iboot;
        UniProDrive drive1;
        File tmpFile;
        String bkSrc,profName,bootMac;
        
        // 首先获取 iscsi target server的名字
        targetSrvName = view.initor.mdb.getHostName();
        if( targetSrvName.equals("") ){
SanBootView.log.error( getClass().getName()," Error: target server name is null.");                
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostNameFailed");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
            writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
            );        
            return false;
        }
        
        UnixNetCard netCard = selectNetCardPane.getSelectNetCard(); // 肯定有
        bootMac = netCard.mac;

        //对于平台为IA的主机，profList中含有复制隐藏文件系统的profile
        ArrayList profList = null;
        try{
            profList = dupStrgyPane.getProfileInfo();
        }catch(Exception ex){
            ex.printStackTrace();

            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.genProfileFailed");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
            writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
            );
            return false;
        }

        size = profList.size();
        for( i=0; i<size; i++ ){
            prof   = (UniProfile)profList.get( i );
            backup = prof.getUniProBackup();
            header = prof.getUniProHeader();
            drive1 = prof.getUniProDrive1();
            iboot  = prof.getUniProIBoot();
            bkSrc  = backup.getSrc();
            profName = prof.toString();
            
            if( !prof.isSel ){
                cnt++; 
            }
            
            // 生成src-dest-mapper
            getMpListForLinux( bkSrc );
            String src_dest_map = getDestDevPathForLinux( true );
            if( src_dest_map == null ){
SanBootView.log.error( getClass().getName()," Error: getting src_dest_mapper for profile failed.");
                errMsg += " : "+profName;
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
                );
                return false;
            }else{
                header.setSource_dest_reference( src_dest_map );
            }
            
            // 生成 drive-1部分
            String path = getDestDevPathForLinux( false );
            if( path == null ){
SanBootView.log.error( getClass().getName()," Error: getting dest_path for profile failed.");
                errMsg += " : "+profName;
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
                );
                return false;
            }else{
                drive1.setPath( path );
            }
            
            // 生成lvm mapper
            String lvm_refer = getLvmReference();
            if( lvm_refer == null ){
SanBootView.log.error( getClass().getName()," Error: getting lvm reference for profile failed.");
                errMsg += " : "+profName;
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
                );
                return false;
            }else{
                header.setLinux_lvm_reference( lvm_refer );
            }
            
            // update iboot user info
            iboot.setUws_username( view.initor.user );
            iboot.setUws_passwd( view.initor.passwd );
            iboot.setUws_port( view.initor.port+"" );
//            iboot.setUws_ip( view.initor.txIp );
            iboot.setUws_ip( this.getBootTxIP() );
            // 生成iboot_aft_cmd
            iboot.cleanIboot_bf_cmd();
            iboot.cleanIboot_af_cmd();
            if( EditProfileDialog.isOsDupForLinux( backup.getSrc() ) ){
                int tid = getOsTidForLinux();
                if( tid <=0  ){
SanBootView.log.error( getClass().getName()," Error: can't get os volume's target id.");
                    errMsg += " : "+profName;
                    runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                    writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                    runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
                    );
                    return false;
                }
                
                iboot.setOsTid( tid );
                
                VolumeMap vg = view.initor.mdb.getVgOnTid( host.getID(),tid );
                if( vg == null ){
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : "+ tid + " : "+profName;
                    runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                    writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                    runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
                    );
                    return false;
                }
                
                String lvmtype = view.initor.mdb.getRealLVMType( host.getID() );                      
                Object[] val = InitNWinHostWizardDialog.generateIboot_cmd( tid, vg, bootMac, view.initor.getTxIP(host.getIP()), getProtectedMp( host.getID() ),
                    host, getFSType("/"),lvmtype
                ); 
                ArrayList bef = (ArrayList)val[0];
                ArrayList aft = (ArrayList)val[1];
                size1 = bef.size();
                for(  k=0; k<size1; k++ ){
                    iboot.addIboot_bf_cmd( (String)bef.get(k) );
                }
                size1 = aft.size();
                for( j=0;j<size1;j++ ){
                    iboot.addIboot_af_cmd( (String)aft.get(j) );
                }
            }
            
            // 记录mgid/maxsnap/tid的对应关系
            String mgInfo = getMgInfoForLinux();
            if( mgInfo == null ){
SanBootView.log.error( getClass().getName()," Error: getting <mgid/maxsnap/tid> relationship failed.");
                errMsg += " : "+profName;
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
                );
                return false;
            }else{
                iboot.setMgid_info( mgInfo );
            }
            
            tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_PROF ); 
            if( tmpFile == null ){
SanBootView.log.error( getClass().getName()," Error: can't generate local temp file.");
                errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
                );
                return false;
            }
            
            // 发送profile的内容�
            if( !view.initor.mdb.sendFileToServer( tmpFile.getName(), prof.prtMe() ) ){
SanBootView.log.error( getClass().getName()," Error: send file from gui_console to server failed.");
                errMsg = SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                            view.initor.mdb.getErrorMessage();
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
                );
                tmpFile.delete();
                return false;
            }
            tmpFile.delete();
            
            // 将tmpFile move to profile dir
            isOk = view.initor.mdb.moveFile(
                ResourceCenter.TMP_DIR + tmpFile.getName(), 
                prof.getProfileName()
            );
            if( !isOk ){
SanBootView.log.error( getClass().getName()," Error: mv profile file failed.");
                errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_PROFILE)+": "+
                                SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
                );
                return false; 
            }
        }
        
        if( cnt == size ){
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskPane.COPY_OS_ROW, 2
            );
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.notNeedCopy"), 
                RunningTaskPane.COPY_OS_ROW
            );
            return true;
        }
        
        if( !crtVolStepOK || !formatVolStepOK ){
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notCopy");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
            writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
            
            return false;
        }
        
        // 开始复制
        return doCopyOS();
    }
       
    public static Object[] generateIboot_cmd(
            int tid,VolumeMap vg, String bootMac,String srv_ip,String mp, BootHost host,String fstype,
            String lvmtype
    ){    
        ArrayList bef = new ArrayList();
        ArrayList aft = new ArrayList();
        
        /* 
        //original contents before adding postexecute cmd by XiaoCao ( 2009/07/10 )         
        bef.add( "" );     
        aft.add( "<UWS_PLUGIN_PATH>/modify_fstab.sh " +  "<TARGET_ROOT_PATH="+tid+"> " + mp );
        aft.add( "<UWS_PLUGIN_PATH>/modify_other.sh " + "<TARGET_ROOT_PATH="+tid+">" );        
        String saveInfo3 = " <UWS_PARAM> -uuid " + host.getUUID();
        aft.add("<UWS_PLUGIN_PATH>/update_server_sch.sh -m "+"<TARGET_ROOT_PATH="+tid+"> " + saveInfo3 );
        */
        
        // new version ( 2009/07/08 for Suse linux )
        String mac = UnixNetCard.getSimpleMac( bootMac ).toLowerCase();        
        bef.add("");
        aft.add( "<UWS_PLUGIN_PATH>/iboot_set_configure.sh " + lvmtype + " " + mac + " " + srv_ip );
        aft.add( "<UWS_PLUGIN_PATH>/linux_iboot_cmd.sh  postexecute  run  <TARGET_ROOT_PATH=" + tid + "> " );
        aft.add( "<UWS_PLUGIN_PATH>/modify_fstab.sh " +  "<TARGET_ROOT_PATH=" + tid + "> " + mp );
        aft.add( "<UWS_PLUGIN_PATH>/modify_other.sh " + "<TARGET_ROOT_PATH=" + tid + ">" );
        String saveInfo3 = " <UWS_PARAM> -uuid " + host.getUUID();
        aft.add( "<UWS_PLUGIN_PATH>/update_server_sch.sh -m " + "<TARGET_ROOT_PATH=" + tid + "> " + saveInfo3 );

        /*
        StringBuffer iboot_cmd_buf = new StringBuffer();
        iboot_cmd_buf.append( "<UWS_PLUGIN_PATH>");
        iboot_cmd_buf.append( "/agent_aft_iboot_cmd.sh <UWS_PARAM>" + " -l " );
        iboot_cmd_buf.append( vg.getVolDiskLabel() );
        iboot_cmd_buf.append( " -m " );
        iboot_cmd_buf.append( bootMac );
        iboot_cmd_buf.append( " -rootfs " );
        iboot_cmd_buf.append( fstype );
        iboot_cmd_buf.append( " -tftpsever " );
        iboot_cmd_buf.append( srv_ip );
        iboot_cmd_buf.append( " -clntip " );
        iboot_cmd_buf.append( host.getIP() );
        iboot_cmd_buf.append( " -clntport " );
        iboot_cmd_buf.append( host.getPort() );
        aft.add( iboot_cmd_buf.toString() );
        */

        Object[] ret = new Object[2];
        ret[0] = bef;
        ret[1] = aft;
        return  ret;
    }
    
    private boolean doCopyOS(){
        int i,size;
        UniProfile prof;
        RunBackup dup = null;
        String profName,simpleName;
        BackupClient bkClnt;
        ArrayList goodProf;
        boolean hasCommitFail = false;
        
        bkClnt = view.initor.mdb.getBkClntOnUUID( host.getUUID() );
        if( bkClnt == null ){
SanBootView.log.error( getClass().getName()," Error: Can't find d2d client from MDB : UUID: "+ host.getUUID() );
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.noneD2DClnt");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
            writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
            runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),RunningTaskPane.COPY_OS_ROW, 2
            );
            return false;
        }
        
        ArrayList profList = null;
        try{
            profList = dupStrgyPane.getProfileInfo();
        }catch(Exception ex){
            ex.printStackTrace();
            return false;
        }
        size = profList.size();
        goodProf = new ArrayList( size );
        for( i=0; i<size; i++ ){
            prof   = (UniProfile)profList.get( i );
            if( !prof.isSel ) continue;
            prof.isSel = false;  // 将isSel属性复原
            
            profName = prof.getProfileName();
            simpleName = prof.toString();
SanBootView.log.info( getClass().getName(),"data-dup profile: \n"+prof.prtMe() );
            
            try{
                dup = new RunBackup( 
                    ResourceCenter.getCmd( ResourceCenter.CMD_DATA_DUP )+ 
                    profName +
                    " -clnt=" +
                    bkClnt.getID(),
                    view.getSocket()
                );
                
SanBootView.log.info( getClass().getName(), " data-duplication cmd: " + dup.getCmdLine() );
                
                dup.run(); 
            }catch( Exception ex ){
                dup.setExceptionErrMsg( ex);
                dup.setExceptionRetCode( ex );
            }
            
SanBootView.log.info( getClass().getName(), " data-duplication cmd retcode: " + dup.getRetCode() );
            
            if( !dup.isOk() ){
SanBootView.log.error( getClass().getName(), " data-duplication cmd errmsg: " + dup.getErrMsg() );
                hasCommitFail = true;
                errMsg = "[  "+simpleName + "  ] :  " + SanBootView.res.getString("InitNWinHostWizardDialog.log.dupCmdFail");
                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
            }else{
                goodProf.add( prof );
            }
        }
        
        if( hasCommitFail ){
runningTaskPane.setLogOnTabpane( "===========================================",RunningTaskPane.COPY_OS_ROW );
        }
        
        // 开始监控
        String prefix = runningTaskPane.getCopyLogOnTabpane( RunningTaskPane.COPY_OS_ROW ); 
        GetDataDupProcess getProcessThread = new GetDataDupProcess(  
            view,  
            runningTaskPane,
            goodProf,
            hasCommitFail,
            prefix,
            RunningTaskPane.COPY_OS_ROW
        );
        getProcessThread.start();
        
        boolean isFinished = false;
        while( !isFinished ){
            isFinished = getProcessThread.isToEnd();
            
            try{
                Thread.sleep( 4*1000 );
            }catch(Exception ex){    
            }
        }  
        
        return getProcessThread.getLastResult();
    }
    
    private int getOsTidForLinux(){
        VolumeMap lv,tgt;
        int tid = -1;
        
        errMsg = "";
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
        lv = getRealLVOnClntIDAndMPForLinux( volMapList,"/" );
        if( lv == null ){
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: / (root fs) " );
            errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : / ";
        }else{
            tgt = getTgtOnVGname( volMapList,lv.getVolDesc() );
            if( tgt == null ){
SanBootView.log.error(getClass().getName(), "\nTarget is null,exit." );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : "+ lv.getVolName();
            }else{
                tid = tgt.getVolTargetID();
            }
        }
        
        return tid;
    }
    
    private String getMgInfoForLinux(){
        VolumeMap lv,tgt;
        MirrorGrp mg;
        int mgid;
        String mgInfo="";
        
        errMsg = "";
        
        // 获取srcClnt上的卷信息
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
SanBootView.log.debug( getClass().getName()," mp size:" + unixSrcList.size() );
        
        Enumeration list  = unixSrcList.elements();
        while( list.hasMoreElements() ){
            BindOfFSAndDevNo binder =(BindOfFSAndDevNo) list.nextElement();
SanBootView.log.debug(getClass().getName(), "====> " + binder.mp );
            
            lv = getRealLVOnClntIDAndMPForLinux( volMapList,binder.mp );
            if( lv == null ){
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + binder.mp );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ binder.mp;
                mgInfo = null;
                break;
            }else{
                tgt = getTgtOnVGname( volMapList,lv.getVolDesc() );
                if( tgt == null ){
SanBootView.log.error(getClass().getName(), "\nVG or Target is null,exit." );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : "+ lv.getVolName();
                    mgInfo = null;
                    break;
                }
                
                mg = view.initor.mdb.getMGFromVectorOnRootID( tgt.getVol_rootid() );
                if( mg == null ){
                    mgid = -1;
                }else{
                    mgid = mg.getMg_id();
                }
                
                mgInfo += tgt.getVolTargetID()+"-?"+tgt.getMaxSnapNum()+"-?"+mgid+";";
            }
        }
        
        return mgInfo;
    }
    
    private Hashtable unixSrcList = new Hashtable();
    
    // 根据fs list从复制内容里筛选出要复制的fs(只需通信一次)
    private void getMpListForLinux( String bkSrc ){
        Object[] sortedFsList = null ;
        String src,fs,fs1;
        int i,j,size,len,strlen;
        char ch;
        Object val;
        BindOfFSAndDevNo binder;
        
        unixSrcList.clear();
        String[] lines = Pattern.compile(";").split( bkSrc,-1 );
        
        ArrayList list = fsList;
        sortedFsList = list.toArray();
        Arrays.sort( sortedFsList ); 
        
        if( sortedFsList != null ){
            len = sortedFsList.length;
            for( i=0; i<lines.length; i++ ){
                src = lines[i];
System.out.println(" src: "+ src );                
                if( src.equals("") ) continue;
                
                for( j=len-1; j>=0; j--){
                    fs = (String)sortedFsList[j];
System.out.println(" fs: "+fs );                      
                    if( src.startsWith( fs ) || new String(src+"/").startsWith( fs ) ){
                        val = unixSrcList.get( fs );
                        if( val == null ){
                            strlen = fs.length();
                            if( strlen >1 ){
                                ch = fs.charAt( strlen-1 );
                                if( ch == '/' || ch =='\\' ){                               
                                    fs1 = fs.substring( 0, strlen-1 );
                                }else{
                                    fs1 = fs;
                                }               
                            }else{
                                fs1 = fs;
                            }
                            
                            binder = new BindOfFSAndDevNo();
                            binder.mp = fs1;
                            unixSrcList.put( fs, binder);
                        }
                        break;
                    }
                }
            }
        }
    }
    
    private String getDestDevPathForLinux( boolean withLabel ){
        VolumeMap lv,vg,tgt;
        String bkdir;
        boolean isFirst = true;
        String drivepath="";
        
        errMsg = "";
        
        // 获取srcClnt上的卷信息
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
SanBootView.log.debug( getClass().getName()," mp size:" + unixSrcList.size() );
        
        if( unixSrcList.size() <=0 ){
            errMsg = SanBootView.res.getString("EditProfileDialog.error.getMp");
            drivepath = null;
            return drivepath;
        }
        
        Enumeration list  = unixSrcList.elements();
        while( list.hasMoreElements() ){
            BindOfFSAndDevNo binder =(BindOfFSAndDevNo) list.nextElement();
SanBootView.log.debug(getClass().getName(), "====> " + binder.mp );
            bkdir = binder.mp;
            
            lv = getRealLVOnClntIDAndMPForLinux( volMapList,binder.mp );
            if( lv == null ){
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + binder.mp );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ binder.mp;
                drivepath = null;
                break;
            }else{
                tgt = getTgtOnVGname( volMapList,lv.getVolDesc() );
                vg = getVGOnVGName( volMapList,lv.getVolDesc() );
                if( tgt == null || vg == null ){
SanBootView.log.error(getClass().getName(), "\nVG or Target is null,exit." );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : "+ lv.getVolName();
                    drivepath = null;
                    break;
                }else{
SanBootView.log.debug(getClass().getName()," Check lunmap if exist: ip: "+host.getIP() +"  tid: "+tgt.getVolTargetID() );                    
                    if( !addLunMap( host.getIP(), tgt.getVolTargetID(), -1 ) ){
                        // errMsg在addLunMap中赋值了��
                        drivepath = null;
                        break;
                    }
                    
                    if( isFirst ){
                        if( !withLabel ){
//                            drivepath = ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
//                                    ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                            drivepath = ResourceCenter.TARGET_TYPE + this.getBootTxIP()+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                                    ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                        }else{
                            drivepath = bkdir+"-?"+ResourceCenter.TARGET_TYPE + this.getBootTxIP() +":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                                ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                        }
                        isFirst = false;
                    }else{
                        if( !withLabel ){
                            drivepath+="-?"+ResourceCenter.TARGET_TYPE + this.getBootTxIP() +":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                                ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                        }else{
                            drivepath+="-?"+bkdir+"-?"+ResourceCenter.TARGET_TYPE + this.getBootTxIP() +":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                                ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                        }
                   }
                }
            }
        }
SanBootView.log.debug( getClass().getName(),"drivepath: "+drivepath );        
        return drivepath;
    }
    
    public VolumeMap getRealLVOnClntIDAndMPForLinux( Vector list,String mp ){
        VolumeMap lv;
        
        Vector lvList = getRealLVListOnClntID( list );
        int size = lvList.size();
        for( int i=0; i<size; i++ ){
            lv = (VolumeMap)lvList.elementAt(i);
            if( lv.getVolDiskLabel().equals( mp ) ){
                return lv;
            }
        }
        
        return null;
    }
    
    public Vector getRealLVListOnClntID( Vector list ){
        VolumeMap volMap;
        int tid;
        
        Vector ret = new Vector();
        
        Vector lvList = getLVListOnClntID( list,null );
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = (VolumeMap)list.elementAt(i);
            tid = getTgtIDOnVGname( list,volMap.getVolDesc() );
            if( tid != -1 ){
                ret.addElement( volMap );
            }
        }
        
        return ret;
    }
    
    public int getTgtIDOnVGname( Vector list,String vgname ){
        VolumeMap tgt = getTgtOnVGname( list,vgname );
        if( tgt!= null ){
            return tgt.getVolTargetID();
        }else{
            return -1;
        }
    }
    
    public VolumeMap getTgtOnVGname( Vector list,String vgname ){
        Vector tgtList = getTgtListOnClntIDAndVg( list,vgname );
        if( tgtList.size() > 0 ){
            return (VolumeMap)tgtList.elementAt( 0 );
        }else{
            return null;
        }
    }
    
    public Vector getTgtListOnClntIDAndVg( Vector list, String vgname ){
        VolumeMap volMap;
        Vector ret = new Vector();
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = (VolumeMap)list.elementAt(i);
            if( volMap.isTGT() ){
                if( vgname!=null ){
                    if( volMap.getVolDiskLabel().equals( vgname ) ){
                        ret.addElement( volMap );
                    }
                }else{
                    ret.addElement( volMap );
                }
            }
        }
        
        return ret;
    }
   
    public VolumeMap getVGOnVGName( Vector list,String vgname ){
        Vector vgList = getVgListOnClntID( list );
        int size = vgList.size();
        for( int i=0; i<size; i++ ){
            VolumeMap vg =(VolumeMap)vgList.elementAt(i);
            if( vg.getVolName().equals( vgname ) ){
                return vg;
            }
        }
        return null;
    }
    
    public Vector getVgListOnClntID( Vector list ){
        VolumeMap volMap;
        Vector ret = new Vector();
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = (VolumeMap)list.elementAt(i);
            if( volMap.isVG() ){
                ret.addElement( volMap );
            }
        }
        
        return ret;
    }   
    
    private Vector getLVListOnClntID( Vector list,String vgname ){
        VolumeMap volMap;
        int tid;
        Vector ret = new Vector();
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = (VolumeMap)list.elementAt(i);
            if( volMap.isLV() ){
                if( vgname!=null ){
                    if( volMap.getVolDesc().equals( vgname ) ){
                        ret.addElement( volMap );
                    }
                }else{
                    ret.addElement( volMap );
                }
            }
        }
        
        return ret;
    }
    
    private String getLvmReference(){
        int i,size,clntID,tid;
        String fsType;
        VolumeMap tgt,vg=null,lv=null;
        Vector tgtList,vgList,lvList;
        StringBuffer buf  = new StringBuffer();
        
        clntID = host.getID();
        Vector volMapList = view.initor.mdb.getVolMapOnClntID(  clntID );
        
        tgtList = view.initor.mdb.getTgtListOnClntIDAndVg( volMapList,null, clntID );
        size = tgtList.size();
        for( i=0; i<size; i++ ){
            tgt = (VolumeMap)tgtList.elementAt(i);
            tid = tgt.getVolTargetID();
            vg = view.initor.mdb.getVgOnTid( clntID, tid );
            if( vg != null ){
                lv = view.initor.mdb.getLVOnClntAndVG( clntID,vg.getVolName() );
            }else{
SanBootView.log.error( getClass().getName(), "\nVG is null in MDB: target_id=" + tid );                
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVg") + " : target_id=" + tid;
                buf = null;
                break;
            }
            
            if( lv == null ){
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: target_id=" + tid );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : target_id=" + tid;
                buf = null;
                break;
            }
            
            if( lv.getVolDiskLabel().equals( ResourceCenter.SWAP_MP ) ) continue;
            
            buf.append( "serverip-?");
            buf.append( view.initor.getTxIP(host.getIP()) );
            buf.append( "-?tgtid-?" );
            buf.append( "" + tid );
            buf.append( "-?lvmtype-?" );
            buf.append( vg.getVolDiskLabel() );
            buf.append( "-?vgname-?" );
            buf.append( vg.getVolName() );
            buf.append( "-?lvname-?" );
            buf.append( lv.getVolName() );
            buf.append( "-?fstype-?" );
            fsType = getFSType( lv.getVolDiskLabel() );
            buf.append( fsType );
            buf.append( ";" );
        }
        
        if( buf != null ){
            return buf.toString();
        }else{
            return null;
        }
    }
    
    private String getDefaultVolName( String fs,String ip ){
        try{
            int indx = ip.lastIndexOf(".");
            String lastElement = ip.substring( indx+1 );
            
            String[] list = Pattern.compile("/").split( fs,-1 );
            String path="";
            boolean isFirst = true;
            for( int i=0; i<list.length; i++ ){
SanBootView.log.debug(getClass().getName(), " ele: "+list[i]);
                if( list[i].equals("") ) continue;
                if( isFirst ){
                    path=list[i];
                    isFirst = false;
                }else{
                    path+="."+list[i];
                }
            }
            
            if( path.equals("") ) path ="root";
SanBootView.log.debug(getClass().getName()," path: "+ path );
            
            return "vol" + lastElement + "." + path;
        }catch(Exception ex){
            return "";
        }
    }
    
    private boolean genIBootInfo( String iscsiVar,String ip,int port,int clntID,String extra ){
        boolean isOk;
        String kernelName,initrdName,ibootConfName,pxeName,eliloName;
        StringBuffer pxeLinux,eliloConf;

        DhcpClientInfo  dhcpInfo = setDhcpPane.getDhcpSetInfo();
        String dhcp_ip = dhcpInfo.ip;
        UnixNetCard card = selectNetCardPane.getSelectNetCard();
        String mac = UnixNetCard.getSimpleMac( card.mac ).toLowerCase();
        String lvmtype = view.initor.mdb.getRealLVMType( clntID );
        String srv_ip = view.initor.getTxIP(ip);
        
        String args = " show kernel"; // show KERNEL
        String kernelVer = view.initor.mdb.getKernelVer( ip,port,args );
        if( kernelVer.equals("") ){
SanBootView.log.error( getClass().getName()," kernel is null. "); 
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.setBootInfo") +
                    SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
            return false;
        }
        
        if( extra.equals("") ){
            kernelName    = "vmlinuz-"+kernelVer+"."+lvmtype;
            initrdName    = "rd."+kernelVer+"."+lvmtype+".gz";
            ibootConfName = ResourceCenter.LINUX_IBOOT_CONF+"."+kernelVer+"."+lvmtype;
            pxeName       = "pxe."+kernelVer+"."+lvmtype;
            eliloName     = "elilo-"+machine+".conf."+kernelVer+"."+lvmtype;
        }else{
            kernelName    = "vmlinuz-"+kernelVer+"."+lvmtype+"."+extra;
            initrdName    = "rd."+kernelVer+"."+lvmtype+"."+extra+".gz";
            ibootConfName = ResourceCenter.LINUX_IBOOT_CONF+"."+kernelVer+"."+lvmtype+"."+extra;
            pxeName       = "pxe."+kernelVer+"."+lvmtype+"."+extra;
            eliloName     = "elilo-"+machine+".conf."+kernelVer+"."+lvmtype;
        }
        
        // 运行 configure 指令
        isOk = view.initor.mdb.setIBootConfigure( ip, port, lvmtype + " " + mac + " " + srv_ip );
        if( !isOk ){
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }

        String tftpRootPath = view.initor.mdb.getTftpRootPath();
        isOk = !tftpRootPath.equals("");
        if( !isOk ){
SanBootView.log.error( getClass().getName()," tftpRoot path is null. "); 
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }
        
        // 在tftpRootPath下生成mac目录
        isOk = view.initor.mdb.mkdir( tftpRootPath + "/" + mac );
        if( !isOk ){
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }
        
        isOk = view.initor.mdb.chmod( "777", tftpRootPath + "/" + mac );
        if( !isOk ){
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }
        
        isOk = view.initor.mdb.touchFile( tftpRootPath + "/" + mac +"/bootlog" );
        if( !isOk ){
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }
        
        isOk = view.initor.mdb.chmod( "666",tftpRootPath + "/" + mac +"/bootlog" );
        if( !isOk ){
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }
        
        args = " gen kernel img";
        String kernelImg = view.initor.mdb.genKernelImg( ip,port, args );
        isOk = !kernelImg.equals("");
        if( !isOk ){
SanBootView.log.error( getClass().getName()," gen kernel image failed. "); 
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }
        
        // 将kernel image放到服务器<tftpRootPath>/mac/下
        isOk = view.initor.mdb.sendFileFromAgtToSrv( ip, port,kernelImg, tftpRootPath+"/"+mac+"/"+kernelName );
        if( !isOk ){
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }

        args = " gen initrd";
        String initrd = view.initor.mdb.genInitrd( ip,port,args );
        isOk = !initrd.equals("");
        if( !isOk ){
SanBootView.log.error( getClass().getName()," gen initrd failed. ");
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }
        
        // 将initrd放到服务器<tftpRootPath>/mac/下
        isOk = view.initor.mdb.sendFileFromAgtToSrv( ip, port,initrd, tftpRootPath+"/"+mac+"/"+initrdName);
        if( !isOk ){
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }
        
        // 在tftpRootPath下生成pxelinux.cfg目录
        isOk = view.initor.mdb.mkdir( tftpRootPath + "/pxelinux.cfg" );
        if( !isOk ){
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }

        // linux iboot setup
        if( machine.toUpperCase().equals( ResourceCenter.PLATFORM_IA64 ) ){
            args = " gen eliloconf ";
            eliloConf = view.initor.mdb.genPxeLinux( ip,port,args );
            isOk = ( eliloConf != null );
            if( !isOk ){
SanBootView.log.error( getClass().getName()," gen eliloconf failed. ");
                prtErrMsgWhenGenerateIBoot( isOk );
                return false;
            }

            isOk = saveInfo( tftpRootPath+"/"+mac+"/"+eliloName, eliloConf.toString(), RunningTaskPane.SAVE_INFO_ROW );
            if( !isOk ){
                prtErrMsgWhenGenerateIBoot( isOk );
                return false;
            }

            String hexIp = Util.inetAddress2HexString( dhcp_ip ).toUpperCase();
System.out.println(" hexIp: "+ hexIp );
            isOk = view.initor.mdb.delFile( tftpRootPath+"/"+hexIp+".conf" );
            if( !isOk ){
                prtErrMsgWhenGenerateIBoot( isOk );
                return false;
            }

            isOk = view.initor.mdb.ln( tftpRootPath+"/"+hexIp+".conf", mac+"/"+eliloName );
            if( !isOk ){
                prtErrMsgWhenGenerateIBoot( isOk );
                return false;
            }    
        }else{ // x86 machine
            // support x86's xen feature
            // 将xenpackage放到服务器<tftpRootPath>/mac/下
            if( kernelVer.endsWith("xen") ){
                args = " guess xenpackage ";
                String xenpackage = view.initor.mdb.getKernelVer( ip,port,args );
                if( xenpackage.equals("") ){
SanBootView.log.error( getClass().getName()," xenpackage is null. ");
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.setBootInfo") +
                            SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                    writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                    return false;
                }else{
                    int iindx = xenpackage.indexOf( "/", 2 );
                    if( iindx >0 ){
                        String xen = xenpackage.substring( iindx+1 );
                        isOk = view.initor.mdb.sendFileFromAgtToSrv( ip, port,xenpackage, tftpRootPath+"/"+mac+"/"+xen );
                        if( !isOk ){
                            prtErrMsgWhenGenerateIBoot( isOk );
                            return false;
                        }
                    }else{
SanBootView.log.error( getClass().getName()," xenpackage is bad: " + xenpackage );
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.setBootInfo") +
                                SanBootView.res.getString("common.failed");
                        runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
                        writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
                        return false;
                    }
                }
            }

            args = " gen pxelinux";
            pxeLinux = view.initor.mdb.genPxeLinux( ip,port,args );
            isOk = ( pxeLinux!=null );
            if( !isOk ){
SanBootView.log.error( getClass().getName()," gen pxelinux failed. ");
                prtErrMsgWhenGenerateIBoot( isOk );
                return false;
            }

            isOk = saveInfo( tftpRootPath+"/"+mac+"/"+pxeName, pxeLinux.toString(), RunningTaskPane.SAVE_INFO_ROW );
            if( !isOk ){
                prtErrMsgWhenGenerateIBoot( isOk );
                return false;
            }

            isOk = saveInfo( tftpRootPath + "/pxelinux.cfg/" + card.getMac1().toLowerCase(),pxeLinux.toString(),RunningTaskPane.SAVE_INFO_ROW );
            if( !isOk ){
                prtErrMsgWhenGenerateIBoot( isOk );
                return false;
            }
        }

        // 生成与小曹的接口文件
        isOk = saveInfo( tftpRootPath+"/"+mac+"/"+ibootConfName,getIBootConfContents(iscsiVar, ip, clntID),RunningTaskPane.SAVE_INFO_ROW );
        if( !isOk ){
            prtErrMsgWhenGenerateIBoot( isOk );
            return false;
        }

        prtErrMsgWhenGenerateIBoot( true );
        return isOk;
    }
    
    private void prtErrMsgWhenGenerateIBoot( boolean isOk ){
        if( !isOk ){
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.setBootInfo") +
                    SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.SAVE_INFO_ROW );
            writeLogBuf( errMsg, RunningTaskPane.SAVE_INFO_ROW );
        }else{
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.setBootInfo")+" "+
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.SAVE_INFO_ROW
            );
        }
    }
    
    private boolean isCrtVgOnTgt( String ip,int port,int row,String args, int tid ){
        boolean isOk = view.initor.mdb.isCrtVGOnTgt( ip,port,args );
        if( isOk ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.isCrtVgOnTgt") +" [ "+ tid+ " ] " +
                    SanBootView.res.getString("common.ok") ,
                row
            );
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.isCrtVgOnTgt") +" [ "+ tid + " ] " +
                      SanBootView.res.getString("common.failed"); 
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg,row );
        }
        
        return isOk;
    }
    
    private boolean isCrtLVOnTgt( String ip,int port,int row,String args,String vgName ){
        boolean isOk = view.initor.mdb.isCrtLVOnTgt( ip,port,args );
        if( isOk ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.isCrtLVOnTgt") +" [ "+ vgName+ " ] " +
                    SanBootView.res.getString("common.ok") ,
                row
            );
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.isCrtLVOnTgt") +" [ "+ vgName + " ] " +
                      SanBootView.res.getString("common.failed"); 
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg,row );
        }
        
        return isOk;
    }
    
    private boolean crtVg( String ip,int port,int row,String args,int tid ){
        boolean isOk = view.initor.mdb.addVg( ip,port,args );
        // 新vg的名字肯定为如下所示
        String vgName = "vg_" + host.getID() + "_" + tid;
        if( isOk ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.crtVg") + " [ " + vgName + " ] " +
                    SanBootView.res.getString("common.ok"),
                row
            );
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.crtVg") + " [ " + vgName + " ] " + 
                        SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
        }
        
        return isOk;
    }
    
    private boolean crtLV( String ip,int port,int row,String args,String lvname ){
        boolean isOk = view.initor.mdb.addLV( ip,port,args );
        if( isOk ){
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.crtLV") + " [ " + lvname + " ] " +
                    SanBootView.res.getString("common.ok"),
                RunningTaskPane.CRT_VOL_ROW
            );           
        }else{
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.crtVg") + " [ " + lvname + " ] " + 
                        SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
        }
        
        return isOk;
    }
    
    public boolean doLoginTarget( String cltIP,int cltPort,int row,String args,String iscsiVar ){
        boolean isOk = view.initor.mdb.loginUnixTarget( cltIP,cltPort,args );
        if( !isOk ){
            errMsg =  SanBootView.res.getString("InitNWinHostWizardDialog.log.loginTarget") + " [ "+ iscsiVar +" ]"+
                       SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
           
        }else{
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.loginTarget") +" [ "+ iscsiVar + " ]" +
                    SanBootView.res.getString("common.ok") ,
                row
            );
        }
        
        return isOk;
    }
    
    public boolean doLogoutTarget( String cltIP,int cltPort,int row,String args,String target ){
        boolean isOk = view.initor.mdb.logoutUnixTarget( cltIP,cltPort,args );
        if( !isOk ){
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.logoutTarget") + " [ "+ target +" ] "+
                       SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
        }else{
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.logoutTarget") + " [ "+ target +" ] "+
                  SanBootView.res.getString("common.ok") ,
                row
            );
        }
        
        return isOk;
    }
    
    public boolean doVgOffline( String cltIP,int cltPort,int row,String args,String vgName){
        boolean isOk = view.initor.mdb.vgOffline( cltIP,cltPort,args );
        if( !isOk ){
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + " [ "+ vgName +" ] "+
                       SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
        }else{
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOffline") + " [ "+ vgName +" ] "+
                  SanBootView.res.getString("common.ok") ,
                row
            );
        }
        
        return isOk;
    }
    
    public boolean doVgOnline( String cltIP,int cltPort,int row,String args,String vgName){
        boolean isOk = view.initor.mdb.vgOnline( cltIP,cltPort,args );
        if( !isOk ){
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOnline") + " [ "+ vgName +" ] "+
                       SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
        }else{
            runningTaskPane.setLogOnTabpane(
                SanBootView.res.getString("InitNWinHostWizardDialog.log.vgOnline") + " [ "+ vgName +" ] "+
                  SanBootView.res.getString("common.ok") ,
                row
            );
        }
        
        return isOk;
    }
    
    private boolean crtLVorVgVolMap( String vgName,String lvName,String mp,int row,int clntId,String lvmType,String _snapSpace,int rootid ){
        VolumeMap volMap,tmpVolMap;
        boolean isOk;
            
        if( lvName == null ){
            // 创建该vg对应的VolumeMap对象
            int snapSpace=10;
            try{
                snapSpace = Integer.parseInt( _snapSpace );
            }catch(Exception ex){}
            
            // find mdb if volmap exist with same volname-vgName
            tmpVolMap = view.initor.mdb.getVolMapFromVectorOnName( vgName );
            if( tmpVolMap == null ){
                volMap = new VolumeMap(
                    vgName,
                    clntId, 
                    lvmType,
                    0,
                    snapSpace,
                    "VG",
                     rootid,
                     BootHost.PROTECT_TYPE_MTPP
                );
                isOk = view.initor.mdb.AddOneVolumeMap( volMap );
                if( isOk ){
                    view.initor.mdb.insertOneVolMapIntoVec( volMap );

                    runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+vgName +" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                }else{
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+vgName +" "+
                               SanBootView.res.getString("common.failed"); 
                    runningTaskPane.setLogOnTabpane(errMsg,row );
                    writeLogBuf( errMsg, row );
                }
            }else{ // modify volmap
                volMap = new VolumeMap(
                    vgName,
                    clntId, 
                    lvmType,
                    0,
                    snapSpace,
                    "VG",
                     rootid,
                     BootHost.PROTECT_TYPE_MTPP
                );
                isOk = view.initor.mdb.modWholeVolumeMap( volMap );
                if( isOk ){
                    view.initor.mdb.removeOneVolMapFromVec( tmpVolMap );
                    view.initor.mdb.insertOneVolMapIntoVec( volMap );
                    
                    runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+vgName +" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                }else{
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+vgName +" "+
                               SanBootView.res.getString("common.failed"); 
                    runningTaskPane.setLogOnTabpane(errMsg,row );
                    writeLogBuf( errMsg, row );
                }
            }
            return isOk;
        }else{
            // find mdb if volmap exist with same volname-vgName
            tmpVolMap = view.initor.mdb.getVolMapFromVectorOnName( lvName );
            if( tmpVolMap == null ){
                // 创建该lv对应的VolumeMap对象
                volMap = new VolumeMap(
                    lvName,
                    clntId,  
                    mp,
                    0,
                    0,
                    vgName,
                    rootid,
                    BootHost.PROTECT_TYPE_MTPP
                );
                isOk = view.initor.mdb.AddOneVolumeMap( volMap );
                if( isOk ){
                    view.initor.mdb.insertOneVolMapIntoVec( volMap );

                    runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+ lvName +" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                }else{
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+lvName +" "+
                               SanBootView.res.getString("common.failed"); 
                    runningTaskPane.setLogOnTabpane(errMsg,row );
                    writeLogBuf( errMsg, row );
                }
            }else{
                volMap = new VolumeMap(
                    lvName,
                    clntId,  
                    mp,
                    0,
                    0,
                    vgName,
                    rootid,
                    BootHost.PROTECT_TYPE_MTPP
                );
                isOk = view.initor.mdb.modWholeVolumeMap( volMap );
                if( isOk ){
                    view.initor.mdb.removeOneVolMapFromVec( tmpVolMap );
                    view.initor.mdb.insertOneVolMapIntoVec( volMap );
                    
                    runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+lvName +" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                }else{
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+lvName +" "+
                               SanBootView.res.getString("common.failed"); 
                    runningTaskPane.setLogOnTabpane(errMsg,row );
                    writeLogBuf( errMsg, row );
                }
            }
            
            return isOk;
        }
    }
    
    StringBuffer iBootConf;
    private String getIBootConfContents( String iscsiVar,String clntIP,int clntID ){
        int i,j,size,size1;
        String tmp,fsType;
        boolean isFirst;
        VolumeMap tgt,vg,lv;
        Vector tgtList,vgList,lvList;
        StringBuffer buf1;
        
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( clntID );
        
        // add lunmap on ip assigned by dhcp setup for os target(Don't care result.)
        String iboot_dhcp_ip ="";
        DhcpClientInfo curDhcpInfo = setDhcpPane.getDhcpSetInfo();
        if( setDhcpPane.isAutoSetup() ){
            iboot_dhcp_ip = curDhcpInfo.ip;
        }else{
            iboot_dhcp_ip = curDhcpInfo.ip_3rd;
        }
   
        // find suitable initiator ip according to dhcp setup
        String iboot_next_server ="";
        if( setDhcpPane.isAutoSetup() ){
            iboot_next_server = curDhcpInfo.nextServer;
        }else{
            iboot_next_server = curDhcpInfo.nextServer_3rd;
        }
        
        iBootConf  = new StringBuffer();
        iBootConf.append("[header]");
        iBootConf.append("\ntgt-prefix="+iscsiVar );
        iBootConf.append("\nTIP=" + iboot_next_server );
        iBootConf.append("\nSTRICT=1");
        
        tgtList = view.initor.mdb.getTgtListOnClntIDAndVg( volMapList,null, clntID );
        size = tgtList.size();
        isFirst = true;
        tmp="";
        iBootConf.append("\n\n[targetlist]");
        for( i=0; i<size; i++ ){
            tgt = (VolumeMap)tgtList.elementAt(i);
            // add lunmap on iboot_dhcp_ip for targets(Don't care result) 
            view.initor.mdb.addLunMap( tgt.getVolTargetID(), iboot_dhcp_ip, "255.255.255.255", "rw", "", "", "", "" );
            
            if( isFirst ){ 
                tmp=tgt.getVolTargetID()+"";
                isFirst = false;
            }else{
                tmp+=";"+tgt.getVolTargetID();
            }
        }
        iBootConf.append("\ntargetlist="+tmp+"\n");
        
        vgList = view.initor.mdb.getVgListOnClntID( volMapList, clntID );
        size = vgList.size();
        for( i=0; i<size; i++ ){
            vg = (VolumeMap)vgList.elementAt(i);
            iBootConf.append("\n\n[vg]");
            iBootConf.append("\nname="+vg.getVolName());
            
            tgtList = view.initor.mdb.getTgtListOnClntIDAndVg( volMapList, vg.getVolName(), clntID );
            size1 = tgtList.size();
            tmp="";
            isFirst = true;
            for( j=0; j<size1;j++){
                tgt = (VolumeMap)tgtList.elementAt(j);
                if( isFirst ){
                    tmp=tgt.getVolTargetID()+"";
                    isFirst = false;
                }else{
                    tmp+=";"+tgt.getVolTargetID();
                }
            }
            iBootConf.append("\npvs="+tmp);
             
            lvList = view.initor.mdb.getLVListOnClntID( volMapList, vg.getVolName() );
            size1 = lvList.size();
            tmp="";
            isFirst = true;
            for( j=0; j<size1; j++ ){
                lv = (VolumeMap)lvList.elementAt(j);
                if( isFirst ){
                    tmp=lv.getVolName();
                    isFirst = false;
                }else{
                    tmp+=";"+lv.getVolName();
                }
            }
            iBootConf.append("\nlvs="+tmp);
            iBootConf.append("\nlvmtype="+vg.getVolDiskLabel());
            
            // support for linux's P2V
            iBootConf.append("\npartition=1");
            iBootConf.append("\nvgpartition=1");
        }
        
        buf1 = new StringBuffer();
        buf1.append("\n\n[lv-mountpoint-fstype]");
        lvList = view.initor.mdb.getRealLVListOnClntID( clntID );
        size = lvList.size();
        for( i=0; i<size; i++ ){
            lv = (VolumeMap)lvList.elementAt(i);
            iBootConf.append("\n\n[lv]");
            iBootConf.append("\nname="+lv.getVolName());
            iBootConf.append("\nowner="+lv.getVolDesc());
            fsType = getFSType( lv.getVolDiskLabel() );
            iBootConf.append("\nfstype="+fsType);
            iBootConf.append("\nsize=");
            iBootConf.append("\nuuid=");
            iBootConf.append("\ntag=");
            //if( lv.getVolDiskLabel().equals(ResourceCenter.SWAP_MP ) ) continue;
            buf1.append( "\n"+lv.getVolDesc()+"/"+lv.getVolName()+" "+lv.getVolDiskLabel() +" "+fsType );
        }
        
        iBootConf.append( buf1.toString() );
        iBootConf.append("\n");
        
        return iBootConf.toString();
    }
    
    private String getProtectedMp( int clntID ){
        VolumeMap lv;
        String fsType;
        
        StringBuffer buf = new StringBuffer();
        Vector lvList = view.initor.mdb.getRealLVListOnClntID( clntID );
        int size = lvList.size();
        for( int i=0; i<size; i++ ){
            lv = (VolumeMap)lvList.elementAt(i);
            fsType = getFSType( lv.getVolDiskLabel() );
            
            //if( lv.getVolDiskLabel().equals( ResourceCenter.SWAP_MP) ) continue;
            buf.append( " -info "+"-g "+lv.getVolDesc()+" -l "+lv.getVolName()+" -m "+lv.getVolDiskLabel() +
                ( fsType.equals("")?"":" -t " + fsType )
            );
        }
        return buf.toString();
    }
    
    private String getFSType( String mp ){
        SystemPartitionForUnix part;
        
        int size = partList.size();
        for( int i=0; i<size; i++ ){
            part = (SystemPartitionForUnix)partList.elementAt(i);
            if( part.mp.equals(mp) ){
                return part.fsType;
            }
        }
        
        return "";
    }
    
    private String getRootFSType(){
        SystemPartitionForUnix part;
        
        int size = partList.size();
        for( int i=0; i<size; i++ ){
            part = (SystemPartitionForUnix)partList.elementAt(i);
            if( part.mp.equals("/") ){
                return part.fsType;
            }
        }
        
        return "";
    }
    
    private boolean createVolMapFromCrtList( int row,Vector crtList,int cltID ){
        BindOfUnixPartandLV binder;
        VolumeMap volMap,vg,lv;
        int maxSnap,tid;
        String tgtName;
        boolean isOk;
        
        boolean taskOk = true;
        
        int size = crtList.size();
        if( size >0 ){   
            for( int i=0; i<size; i++ ){
                binder = (BindOfUnixPartandLV)crtList.elementAt(i);
                
                if( binder.rawTgt != null ){
                    tid = binder.rawTgt.getTargetID();
                    tgtName = binder.rawTgt.getSnap_name();
                }else{
                    tid = binder.targetID;
                    tgtName = binder.tgtName;
                }
                
                vg = view.initor.mdb.getVgOnTid( cltID,tid );
                if( vg != null ){
                    lv = view.initor.mdb.getLVOnClntAndVG( vg.getVolClntID(), vg.getVolName() );
                    if( lv != null ){
                        try{
                            maxSnap = Integer.parseInt( binder.maxSnap );
                        }catch(Exception ex){
                            maxSnap = 0;
                            // impossible
                        }
                        
                        volMap = new VolumeMap(
                            tgtName, 
                            cltID, 
                            vg.getVolName(), 
                            tid,
                            maxSnap,
                            "TGT",
                             binder.rootID,
                             BootHost.PROTECT_TYPE_MTPP
                        );

                        isOk = view.initor.mdb.AddOneVolumeMap( volMap );
                        if( isOk ){
                            view.initor.mdb.insertOneVolMapIntoVec( volMap );

                            //修改volmap对应的UIM-vol
                            if( !modUIMVolOnVolMap( cltID,binder.rootID,0 ) ){
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modUIMVol")+" "+tgtName +" "+
                                          SanBootView.res.getString("common.failed");
                                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                                taskOk = false;
                            }

                            //修改volmap对应的clonedisk
                            if( !modCloneDiskOnVolMap( binder.rootID,cltID,0 ) ){
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modCloneDisk")+" "+tgtName +" "+
                                          SanBootView.res.getString("common.failed");
                                runningTaskPane.setLogOnTabpane( errMsg,RunningTaskPane.COPY_OS_ROW );
                                writeLogBuf( errMsg, RunningTaskPane.COPY_OS_ROW );
                                taskOk = false;
                            }

                            runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+tgtName +"(TGT) "+
                                    SanBootView.res.getString("common.ok"),
                                row
                            );
                        }else{
                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.addVolMap")+" "+tgtName +"(TGT) "+
                                       SanBootView.res.getString("common.failed"); 
                            runningTaskPane.setLogOnTabpane(errMsg,row );
                            writeLogBuf( errMsg, row );
                            taskOk = false;
                        }
                    }
                }
            } // end for 
        }
        
        return taskOk;
    }

    //这里所谓的“选择”指的是“选择了一个lv”,而“不是选择了一个空闲卷”
    private boolean createVolMapFromSelList( int row,String iscsiVar,String ip,int port,Vector selList,Vector oldVolMapList,int clntID ){
        BindOfUnixPartandLV binder;
        VolumeMap volMap,vg,lv,tgtVolMap;
        LunMap lm;
        Vector lmList,toDelList;
        String desc,args;
        int i,j,size1,maxSnap,lvTid;
        boolean isOk,founded;
        boolean taskOk = true;
        
        int size = selList.size();
        if( size > 0 ){
            for( i=0; i<size; i++ ){
                binder = (BindOfUnixPartandLV)selList.elementAt(i);
                lvTid = binder.rawTgt.getTargetID(); // 肯定有rawTgt对象
                        
                try{
                    maxSnap = Integer.parseInt( binder.maxSnap );
                }catch(Exception ex){
                    maxSnap = 0;
                    // impossible
                }
                                
                size1 = oldVolMapList.size();
                founded = false;
                for( j=0; j<size1; j++ ){
                    volMap = (VolumeMap)oldVolMapList.elementAt(j);   
                    if( lvTid == volMap.getVolTargetID()  ){
                        founded = true;
                        
                        // 修改lv对应的tgt volMap中的max snap
                        if( volMap.getMaxSnapNum() != maxSnap ){
                            isOk = view.initor.mdb.modOneVolumeMap( volMap.getVolName(),maxSnap );
                            if( isOk ){
                                // 修改 cache中的这个 volMap的 maxsnap值
                                volMap.setMaxSnapNum( maxSnap );
                                
                                runningTaskPane.setLogOnTabpane(
                                    SanBootView.res.getString("InitNWinHostWizardDialog.log.modVolMap")+" "+ volMap.getVolName() +"(TGT) "+
                                        SanBootView.res.getString("common.ok"),
                                    row
                                );
                            }else{
                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.modVolMap")+" "+volMap.getVolName() +"(TGT) "+
                                        SanBootView.res.getString("common.failed"); 
                                runningTaskPane.setLogOnTabpane( errMsg,row );
                                writeLogBuf( errMsg, row );
                                taskOk = false;
                            }
                        }
                        
                        // 从删除oldVolMapList中删除这个volmap
                        oldVolMapList.removeElementAt(j);
                        
                        // 找出对应的lv volmap,修改它的mp
                        lv = view.initor.mdb.getLVOnClntAndVG(clntID, volMap.getVolDiskLabel() );
                        if( lv!=null ){
                            if( !lv.getVolDiskLabel().equals( binder.part.mp) ){
                                isOk = view.initor.mdb.modOneVolumeMap( lv.getVolName(),binder.part.mp );
                                if( isOk ){
                                    // 修改cache中的这个 volMap(LV)的 mp值
                                    lv.setVolDiskLabel( binder.part.mp );
                                    
                                    runningTaskPane.setLogOnTabpane(
                                        SanBootView.res.getString("InitNWinHostWizardDialog.log.modVolMap")+" "+ lv.getVolName() +"(LV) "+
                                            SanBootView.res.getString("common.ok"),
                                        row
                                    );
                                }else{
                                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.modVolMap")+" "+lv.getVolName() +"(LV) "+
                                            SanBootView.res.getString("common.failed"); 
                                    runningTaskPane.setLogOnTabpane( errMsg,row );
                                    writeLogBuf( errMsg, row );
                                    taskOk = false;
                                }
                            }
                        }else{
                            // impossible
                        }
                        
                        break;
                    }
                }
                
            }
        }
        
        // 删除所有的old volmap
        // 1. 先找出要删除的tgt volmap
        toDelList = new Vector();
        size = oldVolMapList.size();
        for( i=0; i<size; i++ ){
            volMap =(VolumeMap)oldVolMapList.elementAt(i);
            if( volMap.isTGT() ){
                toDelList.addElement( volMap );
            }
        }
        
        // 2. 删除oldVolMapList中跟toDelList相关的vg/lv/tgt volmap
        size = oldVolMapList.size();
        for( i=0; i<size; i++ ){
            volMap = (VolumeMap)oldVolMapList.elementAt(i);
            if( volMap.isVG() ){
                size1=toDelList.size();
                for( j=0; j<size1; j++ ){
                    tgtVolMap = (VolumeMap)toDelList.elementAt(j);
                    if( tgtVolMap.getVolDiskLabel().equals( volMap.getVolName() ) ){
                        isOk = view.initor.mdb.delVolumeMap( volMap );
                        if( isOk ){
                            view.initor.mdb.removeVolMapFromVector( volMap );    
                            runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap")+" "+volMap.getVolName() +"(VG) "+
                                    SanBootView.res.getString("common.ok"),
                                row
                            );
                        }else{
                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap")+" "+volMap.getVolName() +"(VG) "+
                                      SanBootView.res.getString("common.failed");
                            runningTaskPane.setLogOnTabpane( errMsg,row );
                            writeLogBuf( errMsg, row );
                            taskOk = false;
                        }
                    }
                }
            }else if( volMap.isLV() ){
                size1=toDelList.size();
                for( j=0; j<size1; j++ ){
                    tgtVolMap = (VolumeMap)toDelList.elementAt(j);
                    if( tgtVolMap.getVolDiskLabel().equals( volMap.getVolDesc() ) ){
                        isOk = view.initor.mdb.delVolumeMap( volMap );
                        if( isOk ){
                            view.initor.mdb.removeVolMapFromVector( volMap );
                            runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap")+" "+volMap.getVolName() +"(LV) "+
                                    SanBootView.res.getString("common.ok"),
                                row
                            );
                        }else{
                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap")+" "+volMap.getVolName() +"(LV) "+
                                      SanBootView.res.getString("common.failed");
                            runningTaskPane.setLogOnTabpane( errMsg,row );
                            writeLogBuf( errMsg, row );
                            taskOk = false;
                        }
                    }
                }
            }
        }
        
        // 3. 删除toDelList中的tgt volmap以及相关的vg和lunmap
        size = toDelList.size();
        for( i=0; i<size; i++ ){
            volMap =(VolumeMap)toDelList.elementAt(i);
            isOk = view.initor.mdb.delVolumeMap( volMap );
            if( isOk ){
                view.initor.mdb.removeVolMapFromVector( volMap );

                runningTaskPane.setLogOnTabpane(
                    SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap")+" "+volMap.getVolName() +"(TGT) "+
                        SanBootView.res.getString("common.ok"),
                    row
                );
            }else{
                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.delVolMap")+" "+volMap.getVolName() +"(TGT) "+
                          SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane( errMsg,row );
                writeLogBuf( errMsg, row );
                taskOk = false;
            }
            
            args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT + " -t "+volMap.getVolTargetID();
            isOk = doLoginTarget( ip,port,row, args, iscsiVar+":"+volMap.getVolTargetID() );
            if( isOk ){
                //isOk = view.initor.mdb.delVg( ip,port," -g "+volMap.getVolDiskLabel() );
                isOk = view.initor.mdb.delVg( ip,port," -lv NONE " + " -g "+volMap.getVolDiskLabel()  );
                if( isOk ){
                    runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.delVG")+" "+volMap.getVolDiskLabel() +" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                    args = " -I "+iscsiVar +" -S "+ view.initor.getTxIP(ip) + " -P "+ ResourceCenter.ISCSI_LOGIN_PORT + " -t "+volMap.getVolTargetID();
                    isOk = doLogoutTarget( ip, port, row, args, iscsiVar+":"+volMap.getVolTargetID() );
                    if( !isOk ){
                        taskOk = false;
                        continue;
                    }
                }else{
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.delVG") + "[ " + volMap.getVolDiskLabel() +" ] " + 
                              SanBootView.res.getString("common.failed"); 
                    runningTaskPane.setLogOnTabpane( errMsg, row );
                    writeLogBuf( errMsg, row );
                    taskOk = false;
                    continue;
                }
            }else{
                taskOk = false;
                continue;
            }

            // del lunmap
            isOk = view.initor.mdb.getLunMapForTID( volMap.getVolTargetID() );
            if( isOk ){
                lmList = view.initor.mdb.getAllLunMapForTid();
                size1 = lmList.size();
                for( j=0; j<size1; j++ ){
                    lm = (LunMap)lmList.elementAt(j);
                    isOk = view.initor.mdb.delLunMap( volMap.getVolTargetID(), lm.getIP(), lm.getMask(), lm.getAccessMode() );
                    if( isOk ){
                        runningTaskPane.setLogOnTabpane(
                            SanBootView.res.getString("InitNWinHostWizardDialog.log.delLunMap")+" "+volMap.getVolTargetID() +" "+lm.getIP() +" "+lm.getMask() +" "+lm.getAccessMode()+" "+
                                SanBootView.res.getString("common.ok"),
                            row
                        );
                    }else{
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.delLunMap")+" "+volMap.getVolTargetID() +" "+lm.getIP() +" "+lm.getMask() +" "+lm.getAccessMode() +" "+
                                  SanBootView.res.getString("common.failed"); 
                        runningTaskPane.setLogOnTabpane( errMsg,row );
                        writeLogBuf( errMsg, row );
                        taskOk = false;
                    }
                }
            }else{
                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.getLunMap")+" "+volMap.getVolName() +" "+
                          SanBootView.res.getString("common.failed"); 
                runningTaskPane.setLogOnTabpane( errMsg,row);
                writeLogBuf( errMsg, row );
                taskOk = false;
            }
        }
        
        return taskOk;
    }

    private boolean modCloneDiskOnVolMap( int rootid,int clntID,int mode ){
        CloneDisk cd;
        boolean aIsOk;

        if( mode == 0 ){
            aIsOk = view.initor.mdb.getCloneDiskList( -1,CloneDisk.IS_FREEVOL,rootid );
        }else{
            aIsOk = view.initor.mdb.getCloneDiskList( clntID,CloneDisk.IS_BOOTHOST,rootid );
        }
        if( aIsOk ){
            ArrayList list = view.initor.mdb.getCloneDiskList();
            int size = list.size();
            for( int i=0; i<size; i++ ){
                cd = (CloneDisk)list.get(i);

                if( mode == 0 ){
                    // 修改clonedisk的属性，使之归于boothost的范畴
                    if( !view.initor.mdb.modCloneDisk( "",0,0,"",cd.getId(),clntID,CloneDisk.IS_BOOTHOST ) ){
                        errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_MOD_CLONE_DISK ) +" : " + view.initor.mdb.getErrorMessage();
                        return false;
                    }
                }else{
                    // 修改clonedisk的属性，使之归于空闲卷的范畴
                    if( !view.initor.mdb.modCloneDisk( "",0,0,"",cd.getId(),-1,CloneDisk.IS_FREEVOL) ){
                        errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_MOD_CLONE_DISK ) +" : " + view.initor.mdb.getErrorMessage();
                        return false;
                    }
                }
            }
        }else{
            errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_GET_CLONE_DISK ) +" : " + view.initor.mdb.getErrorMessage();
        }

        return aIsOk;
    }

    private boolean modUIMVolOnVolMap( int cltID,int rootid,int mode ){
        ArrayList list;

        if( mode == 0 ){
            list = view.initor.mdb.getMDIFromCacheOnHostIDandRootID( -1,rootid );
        }else{
            list = view.initor.mdb.getMDIFromCacheOnHostIDandRootID( cltID,rootid );
        }
        int size = list.size();
        for( int i=0; i<size; i++ ){
            MirrorDiskInfo mdi = (MirrorDiskInfo)list.get( i );

            if( mode == 0 ){
                // 修改uim-vol的属性，使之归于boothost的范畴
                if( !view.initor.mdb.modMDI( "",0,0,"",mdi.getSnap_rootid(),cltID ) ){
                    errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_MOD_MIRROR_DISK ) +" : " + view.initor.mdb.getErrorMessage();
                    return false;
                }
            }else{
                // 修改uim-vol的属性，使之归于空闲卷的范畴
                if( !view.initor.mdb.modMDI( "",0,0,"",mdi.getSnap_rootid(),-1 ) ){
                    errMsg = ResourceCenter.getCmdString(  ResourceCenter.CMD_MOD_MIRROR_DISK ) +" : " + view.initor.mdb.getErrorMessage();
                    return false;
                }
            }
        }

        return true;
    }

    private boolean saveInfo( String confile,String contents,int row ){        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_IPINFO );
        if( tmpFile == null ){           
            errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");         
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
            return false; 
        }
        
        if( contents.equals("") ){
SanBootView.log.warning(getClass().getName(),"Content to send is null.");            
            // if contents is null, must assign a string with some white spaces to it, or sendFileToServer will fail. 
            contents = "                        ";
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            errMsg =  SanBootView.res.getString("common.errmsg.sendFileFailed");          
            runningTaskPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg,row );
            tmpFile.delete();
            return false;
        }   
           
        tmpFile.delete();
            
        // ��tmpFile move to profile dir
        boolean isOk = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile.getName(), confile      
        );
        
        return isOk;   
    }
    
    //找出当前所有tgt name中符合正规表达式"^header\\d{1,3}$"的名字,
    //并且最终找出符合该表达式最小值
    public int realGenerateTgtName( char header ){
        Pattern pattern;
        Matcher matcher;
        Volume vol;
        VolumeMap volMap;
        String seqStr;
        int seq,i,size,indx;
        boolean founded = false;
        
        // tgt的名字长度最大为4
        int min = 999;
        Hashtable table = new Hashtable();
        
        switch( header ){
            case 'a':
                pattern = Pattern.compile("^a\\d{1,3}_\\S*$");
                break;
            case 'b':
                pattern = Pattern.compile("^b\\d{1,3}_\\S*$");
                break;
            case 'c':
                pattern = Pattern.compile("^c\\d{1,3}_\\S*$");
                break;
            case 'd':
                pattern = Pattern.compile("^d\\d{1,3}_\\S*$");
                break;
            case 'e':
                pattern = Pattern.compile("^e\\d{1,3}_\\S*$");
                break;
            case 'f':
                pattern = Pattern.compile("^f\\d{1,3}_\\S*$");
                break;
            case 'g':
                pattern = Pattern.compile("^g\\d{1,3}_\\S*$");
                break;
            case 'h':
                pattern = Pattern.compile("^h\\d{1,3}_\\S*$");
                break;
            case 'i':
                pattern = Pattern.compile("^i\\d{1,3}_\\S*$");
                break;
            case 'j':
                pattern = Pattern.compile("^j\\d{1,3}_\\S*$");
                break;
            case 'k':
                pattern = Pattern.compile("^k\\d{1,3}_\\S*$");
                break;
            case 'l':
                pattern = Pattern.compile("^l\\d{1,3}_\\S*$");
                break;     
            case 'm':
                pattern = Pattern.compile("^m\\d{1,3}_\\S*$");
                break;
            case 'n':
                pattern = Pattern.compile("^n\\d{1,3}_\\S*$");
                break;
            case 'o':
                pattern = Pattern.compile("^o\\d{1,3}_\\S*$");
                break;
            case 'p':
                pattern = Pattern.compile("^p\\d{1,3}_\\S*$");
                break;
            case 'q':
                pattern = Pattern.compile("^q\\d{1,3}_\\S*$");
                break;
            case 'r':
                pattern = Pattern.compile("^r\\d{1,3}_\\S*$");
                break;
            case 's':
                pattern = Pattern.compile("^s\\d{1,3}_\\S*$");
                break;
            case 't':
                pattern = Pattern.compile("^t\\d{1,3}_\\S*$");
                break;
            case 'u':
                pattern = Pattern.compile("^u\\d{1,3}_\\S*$");
                break;
            case 'v':
                pattern = Pattern.compile("^v\\d{1,3}_\\S*$");
                break;
            case 'w':
                pattern = Pattern.compile("^w\\d{1,3}_\\S*$");
                break;
            case 'x':
                pattern = Pattern.compile("^x\\d{1,3}_\\S*$");
                break;         
            case 'y':
                pattern = Pattern.compile("^y\\d{1,3}_\\S*$");
                break;
            case 'z':
                pattern = Pattern.compile("^z\\d{1,3}_\\S*$");
                break;
            default:
                pattern = Pattern.compile("^v\\d{1,3}_\\S*$");
                break;
        }
        
        size = orphVolList.size();
        for( i=0; i<size; i++ ){
            vol = (Volume) orphVolList.get( i );
SanBootView.log.debug( getClass().getName(),"vdisk snap-name(auto-generate-vdisk-name): "+ vol.getSnap_name() );            
            matcher = pattern.matcher( vol.getSnap_name() );      
            
            if( matcher.find() ){
                indx = vol.getSnap_name().indexOf("_");
                seqStr =  vol.getSnap_name().substring( 1,indx ).trim();
SanBootView.log.debug( getClass().getName(),"vdisk snap-name(auto-generate-vdisk-name) seqstr: "+ seqStr  );
                seq = -1;
                try{
                    seq = Integer.parseInt( seqStr );
                }catch( Exception ex){
                    seq = -1;
                }
                
                if( seq >=0 ){
                    founded = true;
                    
                    if( seq < min ){
                        // 找出最小的数值
                        min = seq;
                    }
                    
                    // 放到hashtable中
                    table.put( new Integer(seq), "VolName" );
                }
            }
        }
        
        // 再在volmap中查找,以便找出绝对没有冲突的vdisk name
        Vector volMapList = view.initor.mdb.getAllVolMaps();
        size = volMapList.size();
        for( i=0; i<size; i++){
            volMap = (VolumeMap)volMapList.elementAt(i);
SanBootView.log.debug( getClass().getName(),"volmap name(auto-generate-vdisk-name): "+ volMap.getVolName() ); 
            matcher = pattern.matcher( volMap.getVolName() ); 
            
            if( matcher.find() ){
                indx = volMap.getVolName().indexOf("_");
                seqStr =  volMap.getVolName().substring( 1,indx ).trim();
SanBootView.log.debug( getClass().getName(),"volmap name(auto-generate-vdisk-name) seqStr : "+ seqStr );
                seq = -1;
                try{
                    seq = Integer.parseInt( seqStr );
                }catch( Exception ex){
                    seq = -1;
                }
                
                if( seq >=0 ){
                    founded = true;
                    
                    if( seq < min ){
                        // 找出最小的数值
                        min = seq;
                    }
                    
                    // 放到hashtable中
                    table.put( new Integer(seq), "VolName" );
                }
            }
        }
        
        if( !founded ){
SanBootView.log.debug( getClass().getName(),  "Tgt name header:[" + header + "]" + " min seq: " + 0 );    
            return 0;
        }else{
SanBootView.log.debug( getClass().getName(),  "Tgt name header:[" + header + "]" + " min seq: " + min );   
            // 从min+1开始尝试
            min+=1;
            
            while( table.containsKey( new Integer(min) ) ){
                min++;
            }
        
            // 如果min>999，则表示该类表达式所表示的名字已经被全部使用了
            return min;
        }
    }
    
    private String generateTgtName(){
        int seq;
        for( char i='z'; i>='a';i-- ){
            seq = realGenerateTgtName( i );
            if( seq > 999 ){
                continue;
            }else{
                return ""+i+seq;
            }
        }
        
        return "";
    }
    
    private void recordUWSRpt( boolean initOk ){
        String msg;
        
        UWSReport rpt = new UWSReport();

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime( date );
        
        int year  = today.get( Calendar.YEAR );
        String stime = year + "";
        int month = today.get( Calendar.MONTH ) + 1;
        if( month<10 ){
            stime+= "0" + month;
        }else{
            stime+=month;
        }
        int day   = today.get( Calendar.DAY_OF_MONTH );
        if( day <10 ){
            stime+= "0" + day;
        }else{
            stime+=day;
        }
        int hour  = today.get(Calendar.HOUR_OF_DAY);
        if( hour <10 ){
            stime+= "0" + hour;
        }else{
            stime+=hour;
        }
        int min   = today.get(Calendar.MINUTE);
        if( min <10 ){
            stime +="0"+min;
        }else{
            stime+=min;
        }
        int sec   = today.get(Calendar.SECOND);
        if( sec <10 ){
            stime+="0"+sec;
        }else{
            stime+=sec;
        }
        
        rpt.setSTime( stime ); 
        rpt.setClntName( getInitHostName() );

        rpt.setTaskClntId( host.getID() );
        rpt.setTask_clnt_type( DestAgent.TYPE_ORI_HOST );
        
        rpt.setTType( UWSReport.TASK_TYPE_INIT );
        rpt.setTResult( initOk? UWSReport.TASK_RESULT_END:UWSReport.TASK_RESULT_FAIL );
        
        msg = logBuf.toString();
        if( msg.getBytes().length > 1014 ){
            byte[] arr = msg.getBytes();
            String newmsg = new String(arr,0,1014 );
            rpt.setTaskMsg( initOk? SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK") : newmsg );
        }else{
            rpt.setTaskMsg( initOk? SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK") : msg );
        }
        
        String fname = generateUWSRptTmpFile( rpt.prtMe() );
        if( fname != null ){
            if( !view.initor.mdb.addReport( fname ) ){
                // save in local host 
                saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_INIT_RPT +stime );
            }
        }else{
            // save in local host
            saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_INIT_RPT + stime );
        }
    }
    
    private String generateUWSRptTmpFile( String contents ){
        String fname;
        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_USWTMP );
        if( tmpFile == null ){
            return null; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            tmpFile.delete();
            return null;
        }    
        
        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }
    
    private void saveUWSRpt( String contents,String fname ){
        try{
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File( path );
            
            f1.createNewFile();
            
            PrintWriter out = new PrintWriter( new FileWriter(f1),true );
            out.print( contents );
            out.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }

    public String getBootTxIP() {
        return bootTxIP;
    }

    public void setBootTxIP(String bootTxIP) {
        this.bootTxIP = bootTxIP;
    }


}
class GetInitInfoForUnixThreadTest extends Thread{
    ProgressDialog pdiag;
    String ip;
    int port;
    boolean isGetAgtInfo;
    boolean isOK = true;
    SanBootView view;
    boolean isFirst;
    
    private boolean getAgtInfo = false;
    private boolean getOrphanVol = false;
    private boolean getSystemPart = false;
    private boolean getDiskPartForUnix = false;
    private boolean isStartupfromSAN = false;
    private boolean getLvmType = false;
    private boolean mountHidenFs = false;
    
    private GetFreePhyVol getOrVol;
    private String partitionContent;
    private Vector partList;
    private ArrayList fsList;
    private ArrayList<SystemPartitionForUnix> iaHidenPartition;
    private String diskDetailInfo;
    private boolean startNet = false; 
    private Vector lvmTypeList;
    private GetAgentInfo getAgentInfo;
    private String uuid="";
    private String machine="";  // platform
    
    Runnable close = new Runnable(){
        public void run(){
            pdiag.dispose();
        }
    };
    
    public GetInitInfoForUnixThreadTest(  ProgressDialog pdiag, String ip,int port,boolean isGetAgtInfo,SanBootView view,boolean isFirst ){
        this.pdiag = pdiag;
        this.ip = ip;
        this.port = port;
        this.isGetAgtInfo = isGetAgtInfo;
        this.view = view;
        this.isFirst = isFirst;
    }
    
    @Override public void run(){
        boolean isOk;
        
        if( isGetAgtInfo ){
            try{
                getAgentInfo = new GetAgentInfo( 
                    ResourceCenter.getCmd( ResourceCenter.CMD_GET_HOST_INFO )+ip+" "+port, 
                    view.getSocket()
                );
                
                isOK = getAgentInfo.getAgentInfo();
                if( isOK ){
                    if( getAgentInfo.getOSName().toUpperCase().startsWith("WIN") ){
                        JOptionPane.showMessageDialog( pdiag,
                            SanBootView.res.getString("InitNWinHostWizardDialog.error.notUnixHost")
                        );
                        isOK = false;
                    }else{
                        view.initor.mdb.getHostUUID( ip,port,false );
                        if( view.initor.mdb.getUUID().equals("") ){
SanBootView.log.error( getClass().getName(),"Client's UUID is none."); 
                            JOptionPane.showMessageDialog( pdiag,
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostInfo")+
                                    SanBootView.res.getString("common.failed")
                            );
                            isOK = false;
                        }else{
                            uuid = view.initor.mdb.getUUID();
                            // 判断是否存在相同的uuid（当网络启动在另外一台机器上后，源盘恢复后该机器的uuid就和源机器一样了）
                            // 下面的判断方法不对,还需要更多的依据（2008/10./31）
                            //if( view.initor.mdb.getHostFromCacheOnUUID( uuid ) != null ){
                            if( false ){
                                JOptionPane.showMessageDialog(view,
                                    SanBootView.res.getString("MenuAndBtnCenter.error.sameUUID")
                                );
                                isOK = false;
                            }else{
                                isOK = true;
                                getAgtInfo = true;
                            }
                        }
                    }  
                }else{
                    JOptionPane.showMessageDialog( pdiag,
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostInfo")+
                            SanBootView.res.getString("common.failed")
                    );
                    isOK = false;
                } 
            }catch(Exception ex){
                ex.printStackTrace();
                JOptionPane.showMessageDialog( pdiag,
                    SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostInfo")+
                        SanBootView.res.getString("common.failed")
                );
                isOK = false;
            }
        }else{
            getAgtInfo = true;
        }
        
        if( isFirst ){
            if( isOK ){
                try{
                    getOrVol = new GetFreePhyVol(
                        ResourceCenter.getCmd(
                            ResourceCenter.CMD_GET_VOL
                        ),
                        view.getSocket(),
                        view
                    );
                    getOrVol.setAddCacheFlag( true );
                    // 获取所有的disk,不仅是free disk(2010.3.16)
                    getOrVol.setFilterFlag( false );
                    
                    isOk = getOrVol.realDo();                    
                    if( !isOk ){
                        JOptionPane.showMessageDialog( pdiag,
                            SanBootView.res.getString("InitBootHostWizardDialog.error.getOrphanVol")
                        );
                        isOK = false;
                    }else{
                        getOrphanVol = true;
                    }
                }catch(Exception exp ){
                    JOptionPane.showMessageDialog( pdiag,
                        SanBootView.res.getString("InitBootHostWizardDialog.error.getOrphanVol")
                    );
                    isOK = false;
                }
            }
        }

        if( isOK ){
            machine = view.initor.mdb.getKernelVer( ip,port," show machine " );
            if( !machine.equals("") ){
                if( machine.toUpperCase().equals( ResourceCenter.PLATFORM_IA64 ) ){

                    view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT );
                    isOK = view.initor.mdb.mountIAHidenFs( ip, port, "mount" );
                    view.initor.mdb.restoreOldTimeOut();

                    if( !isOK ){
                        JOptionPane.showMessageDialog( pdiag,
                            SanBootView.res.getString("InitNWinHostWizardDialog.log.mountIAHidenFs")+
                                SanBootView.res.getString("common.failed")
                        );
                    }
                    mountHidenFs = isOK;
                }else{
                    mountHidenFs = true;
                }
            }else{
                mountHidenFs = true;
            }
        }
        
        if( isOK ){
            isOk = view.initor.mdb.getUnixPart( ip, port, "list_mp.sh" );
            if( !isOk ){
                JOptionPane.showMessageDialog(pdiag,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_UNIX_PART )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                isOK = false;
            }else{
                partitionContent = view.initor.mdb.getUnixSysPartStrContents();
                partList = view.initor.mdb.getUnixSysPart();
                fsList = view.initor.mdb.getFsList();
                if( partitionContent.equals("") ){
SanBootView.log.error( this.getClass().getName(),"There is no valid local volume( no file system )");
                    JOptionPane.showMessageDialog( pdiag,
                        SanBootView.res.getString("InitBootHostWizardDialog.error.volInfoIsNull")
                    );
                    getSystemPart = false;
                }else{
                    getSystemPart = true;
                }
            }
        }
        
        if( isOK ){
            isOk = view.initor.mdb.getDiskPartForUnix( ip,port,"save_partition.sh" );
            if( !isOk ){
                JOptionPane.showMessageDialog(pdiag,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_PARTITION )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                isOK = false;
            }else{
                diskDetailInfo = view.initor.mdb.getDiskPartForUnix();
                if( diskDetailInfo.equals("") ){
SanBootView.log.error( getClass().getName(),"Can't get disk partition info,so will not auto-restore-partition later. But we will tolerate this error."); 
                    diskDetailInfo = "Can't get disk partition when initiating the client.";                     
                }else{
System.out.println(" machine : " + machine );
                    if( !machine.equals("") ){
                        if( machine.toUpperCase().equals( ResourceCenter.PLATFORM_IA64 ) ) {
                            iaHidenPartition = view.initor.mdb.getIAHidenPartition();
                        }
                    }
                }
                getDiskPartForUnix = true;
            }
        }
        
        if( isOK ){
            isOk = view.initor.mdb.isStartupfromNetBoot( ip,port );
            if( isOk ){
                startNet = view.initor.mdb.isStartupFromNetBoot();
                isStartupfromSAN = true;
            }else{
                JOptionPane.showMessageDialog(pdiag,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_IS_STARTUP_FROM_NET )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                isOK = false;
            }
        }
        
        if( isOK ){
            // 获取该主机上的lvm type
            String lvmType = view.initor.mdb.getLVMType( ip,port );
            lvmTypeList = new Vector();
            if( lvmType.equals( GetLVMType.LVM_TYPE_NONE ) ){   
                lvmTypeList.addElement( GetLVMType.LVM_TYPE_NONE );
            }else{
                lvmTypeList.addElement( GetLVMType.LVM_TYPE_NONE );
                lvmTypeList.addElement( lvmType );
            }
            getLvmType = true;
        }
        
        try{
            SwingUtilities.invokeAndWait( close );
        }catch( Exception ex ){
            ex.printStackTrace();
        }
    }
    
    public boolean isOK(){
        return isOK;
    }
    
    public boolean getAgtInfoIsOK(){
        return getAgtInfo;
    }

    public boolean mountHidenFsIsOK(){
        return this.mountHidenFs;
    }
    
    public GetAgentInfo getAgentInfoCmdObj(){
        return getAgentInfo;
    }
    
    public String getUUID(){
        return uuid;
    }
    
    public boolean getOrphanVolIsOK(){
        return getOrphanVol;
    }
    
    public boolean getSystemPartIsOK(){
        return getSystemPart;
    }
    
    public boolean getDiskPartForUnixIsOK(){
        return getDiskPartForUnix;
    }
    
    public boolean isStartupFromSAN(){
        return isStartupfromSAN;
    }
    
    public ArrayList getOrphanVolList(){
        if( getOrVol != null ){
            //return getOrVol.getAllVolFromCache();
            return getOrVol.getAllVolAndFreeDiskFromCache();
        }else{
            return new ArrayList();
        }
    }
    
    public String getSystemPartContents(){
        return partitionContent;
    }
    
    public Vector getSysPartList(){
        return partList;
    }
    
    public ArrayList getFsList(){
        return fsList;
    }
    
    public ArrayList<SystemPartitionForUnix> getIAHidenPartition(){
        return iaHidenPartition;
    }

    public String getMachine(){
        return machine;
    }

    public String getDiskDetailInfo(){
        return diskDetailInfo;
    }
    
    public boolean isStartFromNet(){
        return startNet;
    }
    
    public boolean getLvmTypeIsOK(){
        return getLvmType;
    }
  
    public Vector getLVMTypeList(){
        return lvmTypeList;
    }
}
