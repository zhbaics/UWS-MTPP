/*
 * FailoverWizardDialog.java
 *
 * Created on 2006/12/29, AM 9:51
 */

package guisanboot.ui;

import javax.swing.*;
import java.util.*;
import java.io.*;
import guisanboot.data.*;
import guisanboot.res.*;
import guisanboot.op.init.*;
import guisanboot.unlimitedIncMj.entity.CloneDiskWrapper;
import guisanboot.unlimitedIncMj.model.table.CloneDisk;

/**
 *
 * @author  Administrator
 */
public class FailoverWizardDialog extends WizardDialogSample implements FailoverInterface{
    SelectDRRecoverModePane seleDRReoverMode;
    SelectHostForNetBootPane selectHostForNetBoot;
    SelectServicePane selectServPane;
    SelectNetBootModePane selectNetBootModePane;
    SelectNetCardPane selectNetCardPane;
    SetDhcpPane setDhcpPane;
    public SelectSnapshotPane selectSnapPane;
    TaskConfigForFailOverPane taskConfPane;
    RunningTaskForDRPane runPane;
    
    SanBootView view;
    BootHost host;          // 初始化的原机
    BootHost netBootedHost; // 网络启动所在的宿主机(也可能是初始化的原机)
    SeledHostForNetBoot selHostForNetBoot;
    String rstIP;
    int rstPort;
    
    Vector servList = null;
    Vector bindList = null;
    HashMap viewMap = new HashMap();
    private Hashtable cardOnClnt = new Hashtable();
    private Hashtable dhcpOnClnt = new Hashtable();
    private Hashtable oldBootVer = new Hashtable();
    private Hashtable oldSwitchVer = new Hashtable();
    
    String origi_bootMac ="";// 原机在初始化时所选的启动网卡
    String bootMac=""; // 要进行网络启动的物理主机的网卡
    String targetSrvName="";
    Vector tgtList = null;
    ArrayList persistentTgtList = null ; // 当前initiator中的 persistent target list
    ArrayList newBootVerList = new ArrayList(); // 当前选定的恢复版本
    BootVerList oldBootVerList;    // 上次网络启动的恢复版本( 里面包含版本列表和os的版本 )
    BootVerList oldSwitchVerList;  // 上次网络磁盘切换的版本（里面只包含版本列表）
    int osTid = -1;
    boolean delOsTidLunMap = false;
    boolean isSwitchDisk;
    String selVer_info;   // save selected version info for sdhm
    
    /** Creates new form FailoverWizardDialog */
    public FailoverWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public FailoverWizardDialog( SanBootView view,BootHost orgHost ){
        this( view,orgHost,false );
    }

    public FailoverWizardDialog( SanBootView view,BootHost orgHost,boolean isSwitchDisk ){
        super( view );
        myInit( view,orgHost,isSwitchDisk );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitBootHostWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    ////GEN-BEGIN:variables
    ////GEN-END:variables
    
    private void myInit( SanBootView _view,BootHost _host,boolean isSwitchDisk ){
        view = _view;
        host = _host;
        this.isSwitchDisk = isSwitchDisk;
        
        setupLanguage1();
        enableBackButton( false );

        if( this.isSwitchDisk ){
            setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString( "FailoverWizardDialog.wizardText2" )
            );
        }else{
            setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString( "FailoverWizardDialog.wizardText1" )
            );
        }

        if( this.isSwitchDisk ){
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.tit") );
        }else{
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title") );
        }
        
        seleDRReoverMode = new SelectDRRecoverModePane( view );
        seleDRReoverMode.setAutoRebootFlag( host.isAutoReboot() );
        if( host.isAutoDR() ){
            seleDRReoverMode.setAutoMode( true );
        }else{
            seleDRReoverMode.setManualMode( true );
        }
        selectHostForNetBoot = new SelectHostForNetBootPane( view,host );
        selectServPane = new SelectServicePane( view );
        selectNetBootModePane = new SelectNetBootModePane( view );
        //selectNetBootModePane.ctrlRadioBtn( false );
        selectNetCardPane = new SelectNetCardPane( view);
        setDhcpPane = new SetDhcpPane( view,"windows" );
        selectSnapPane = new SelectSnapshotPane( view );
        taskConfPane =  new TaskConfigForFailOverPane( view,this.isSwitchDisk );
        runPane = new RunningTaskForDRPane( view,this.isSwitchDisk );
    }
    
    private void setupLanguage1(){
        if( this.isSwitchDisk ){
            setTitle( SanBootView.res.getString("FailoverWizardDialog.tit") );
        }else{
            setTitle( SanBootView.res.getString("FailoverWizardDialog.title") );
        }
    }
    
    @Override public void backButtonProcess(){
        ArrayList netCardInfo;
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title0").trim() ) == 0 ){
            this.enableBackButton( false );
            this.removeCenterPane();
            this.addImagePaneOntoCenterPane();
            this.addWizardTipTextPane();
            this.setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString("FailoverWizardDialog.wizardText1")
            );
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title") );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title1").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title0") );
            removePaneFromContentPane( selectHostForNetBoot );
            addPaneOntoContentPane( seleDRReoverMode );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2").trim() ) == 0 ){
            if( this.isSwitchDisk ){
                this.enableBackButton( false );
                this.removeCenterPane();
                this.addImagePaneOntoCenterPane();
                this.addWizardTipTextPane();
                this.setWizardTipText(
                    SanBootView.res.getString( "WizardDialogSample.wizardText"),
                    SanBootView.res.getString("FailoverWizardDialog.wizardText2")
                );
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.tit") );
            }else{
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title1") );
                removePaneFromContentPane( selectServPane );
                addPaneOntoContentPane(  selectHostForNetBoot );
            }
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode").trim() ) == 0 ){           
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2") );
            removePaneFromContentPane( selectNetBootModePane );
            addPaneOntoContentPane( selectServPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2.5").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            netCardInfo = selectNetCardPane.getNetCardInfo();
            selHostForNetBoot = selectHostForNetBoot.getSelectHostToNetBoot();
            if( selHostForNetBoot.mac.equals("") ){
                String rstIP1 = selHostForNetBoot.host.getIP();
                cardOnClnt.remove( new String( rstIP1 ) );
                cardOnClnt.put( new String( rstIP1 ),netCardInfo );
            }
            selectNetCardPane.removeListener();    
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode") );
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane( selectNetBootModePane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2.6").trim() ) == 0 ){
            selHostForNetBoot = selectHostForNetBoot.getSelectHostToNetBoot();
            InfoFromDhcpSetupPane dhcpSetPane = new InfoFromDhcpSetupPane();
            dhcpSetPane.isUseOdyDhcp = setDhcpPane.isAutoSetup();
            dhcpSetPane.dhcpClntInfo = setDhcpPane.getDhcpSetInfo();
            if( selHostForNetBoot.mac.equals("") ){    
                String rstIP2 = selHostForNetBoot.host.getIP();              
                dhcpOnClnt.remove( new String( rstIP2 ) );
                dhcpOnClnt.put( new String(rstIP2), dhcpSetPane );
            }else{
                dhcpOnClnt.remove( new String( selHostForNetBoot.mac ) );
                dhcpOnClnt.put( new String(selHostForNetBoot.mac), dhcpSetPane );
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.5") );
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane( selectNetCardPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title3").trim() ) == 0 ){
            if( this.isSwitchDisk ){
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2") );
                removePaneFromContentPane( selectSnapPane );
                addPaneOntoContentPane( selectServPane );
            }else{
                if( (osTid != -1) && delOsTidLunMap ){
                    DhcpClientInfo dhcpCltInfo = setDhcpPane.getDhcpSetInfo();
                    String start_ip = setDhcpPane.isAutoSetup()? dhcpCltInfo.ip: dhcpCltInfo.ip_3rd;
                    // 去掉os view的lunmap,因为有可能用户会cancel掉这次failover操作，这样这个lunmap就不需要了。不管成功与否。
                    view.initor.mdb.delLunMap( osTid, start_ip, "255.255.255.255", "rw" );
                    osTid = -1;
                }

                removePaneFromContentPane( selectSnapPane );
                if( !selectNetBootModePane.isSelectIScsiHBAMode() ){
                    setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.6") );
                    addPaneOntoContentPane( setDhcpPane );
                }else{
                    setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode") );
                    addPaneOntoContentPane( selectNetBootModePane );
                }
            }
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title5").trim() ) == 0 ){
            if( this.isSwitchDisk ){
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title3") );
                removePaneFromContentPane( taskConfPane );
                addPaneOntoContentPane( selectSnapPane );
            }else{
                if( this.isAutoDR ){
                    setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title0") );
                    removePaneFromContentPane( taskConfPane );
                    addPaneOntoContentPane( seleDRReoverMode );
                }else{
                    setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title3") );
                    removePaneFromContentPane( taskConfPane );
                    addPaneOntoContentPane( selectSnapPane );
                }
            }
            refreshCenterPane();
            return;
        }
    }
    
    ArrayList ncOnOriginalHost = null;
    private boolean getNCOnOriginalHost(){
        if( ncOnOriginalHost == null ){
            boolean isOk = view.initor.mdb.getIPInfoFromSrv( ResourceCenter.CLT_IP_CONF+"/"+ host.getID() + ResourceCenter.CONF_IP );
            if( isOk ){
                ncOnOriginalHost = view.initor.mdb.getAllNetCardinfoFromSrv();
            }else{
                JOptionPane.showMessageDialog( 
                    this, 
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                    view.initor.mdb.getErrorMessage() 
                ); 
            }
            return isOk;
        }else{
            return true;
        }
    }
    
    private boolean isIPConfilict( String ip ){
        NetCard nc;
        BindIPAndMask ipPeer;
        Vector ipList;
        int i,j,size,size1;
        
        size = ncOnOriginalHost.size();
        for( i=0; i<size; i++ ){
            nc = (NetCard)ncOnOriginalHost.get( i );
            ipList = nc.getIPList();
            size1 = ipList.size();
            for( j=0; j<size1; j++ ){
                ipPeer = (BindIPAndMask)ipList.elementAt( j );
                if( ipPeer.ip.equals( ip ) ){
                    JOptionPane.showMessageDialog( this,SanBootView.res.getString("InitBootHostWizardDialog.error.conflictIP") );
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private ArrayList getNetCardList( ){
        ArrayList netCardList;
        boolean isOk;
        
        boolean isWin = netBootedHost.isWinHost();
        int hostID = netBootedHost.getID();
        
        if( isWin ){
            isOk = view.initor.mdb.getIPInfoFromSrv( ResourceCenter.CLT_IP_CONF+"/"+ hostID + ResourceCenter.CONF_IP );
        }else{
            isOk = view.initor.mdb.getUnixNetCardFromSrv( ResourceCenter.CLT_IP_CONF+"/"+ hostID + ResourceCenter.CONF_IP  ); 
        }
        
        if( !isOk ){
            if( isWin ){
                isOk = view.initor.mdb.getIPInfoFromClnt( rstIP,rstPort, "00-00-00-00-00-00" );
            }else{
                isOk = view.initor.mdb.getUnixNetCard( rstIP,rstPort, "list_netinfo.sh" ); 
            }
            if( !isOk ){
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                return null;
            }else{
                if( isWin )
                    netCardList = view.initor.mdb.getAllNetCardinfo();
                else
                    netCardList = view.initor.mdb.getUnixNetCard();
            }
        }else{
            if( isWin )
                netCardList = view.initor.mdb.getAllNetCardinfoFromSrv();
            else
                netCardList = view.initor.mdb.getUnixNetCardFromSrv();
            if( netCardList.size() <=0 ){
                if( isWin ){
                    isOk = view.initor.mdb.getIPInfoFromClnt( rstIP,rstPort, "00-00-00-00-00-00" );
                }else{
                    isOk = view.initor.mdb.getUnixNetCard( rstIP,rstPort, "list_netinfo.sh" ); 
                }
                if( !isOk ){
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                            view.initor.mdb.getErrorMessage()
                    );
                    return null;
                }else{
                    if( isWin )
                        netCardList = view.initor.mdb.getAllNetCardinfo();
                    else
                        netCardList = view.initor.mdb.getUnixNetCard();
                }
            }
        }
        
        return netCardList;
    }
    
    boolean isFirstTimeForSwitchDisk = true;
    private void setupServiceTable(){
        boolean stopAllService = false,founded;
        Vector srvMapList,osSrvList;
        ServiceMap servMap;
        Service service;
        int i,j,size,size1,cnt;

        if( servList == null ){ // 不管是否显示"select service pane",先将server table布置好
            /*
            boolean isOk = view.initor.mdb.getOSService( host.getIP(),host.getPort(),"services_process.exe list" );
            stopAllService = false;
            if( !isOk ){
             */
                // 用服务器上保存的
                boolean isOk = view.initor.mdb.getOSService( ResourceCenter.CLT_IP_CONF+"/"+host.getID() + ResourceCenter.CONF_SERVICE );
                if( !isOk ){
                    // GUI上显示出来的service只是之前保存下来的service
                    srvMapList = view.initor.mdb.getAllServMapOnClntID( host.getID() );
                    servList = new Vector();
                    if( !host.isStopAllBaseServ() ){
                        stopAllService = false;
                        size = srvMapList.size();
                        for( i=0; i<size; i++ ){
                            servMap = (ServiceMap)srvMapList.elementAt(i);
                            service = new Service(i, servMap.getServName(), servMap.getServDesc() );
                            service.setSeled( true );
                        }
                    }else{
                        stopAllService = true;
                    }
                }else{
                    // GUI上显示出来的service应该是系统当前的server(osSrvList)和之前保存下来的server(srvMapList)的总和
                    osSrvList = view.initor.mdb.getOSService();
                    srvMapList = view.initor.mdb.getAllServMapOnClntID( host.getID() );
                    servList = new Vector();
                    size = osSrvList.size();
                    for( i=0; i<size; i++ ){
                        servList.addElement( osSrvList.elementAt(i) );
                    }
                    cnt = size;

                    size1 = srvMapList.size();
                    for( j=0; j<size1; j++ ){
                        servMap =(ServiceMap)srvMapList.elementAt(j);

                        founded = false;
                        for( i=0; i<size; i++ ){
                            service = (Service)osSrvList.elementAt(i);
                            if( service.getServName().equals( servMap.getServName() ) &&
                                    service.getServDesc().equals( servMap.getServDesc() )
                            ){
                                founded = true;
                                break;
                            }
                        }

                        if( !founded ){
SanBootView.log.debug(getClass().getName(), " add servermap onto GUI: "+servMap.getServName() +"  "+ servMap.getServDesc() );
                            servList.addElement( new Service( cnt, servMap.getServName(), servMap.getServDesc() ) );
                            cnt++;
                        }
                    }

                    if( !host.isStopAllBaseServ() ){
                        stopAllService = false;

                        size = servList.size();
                        for( i=0; i<size; i++ ){
                            service = (Service)servList.elementAt(i);
                            // 找出该client上已经登记了的服务
                            servMap = view.initor.mdb.getServiceMap( host.getID(),service.getServName(),service.getServDesc() );
                            if( servMap !=null ){
                                service.setSeled( true );
                            }
                        }
                    }else{
                        stopAllService = true;
                    }
                }
            /*
            }else{
                // GUI上显示出来的service应该是系统当前的server(osSrvList)和之前保存下来的server(srvMapList)的总和
                osSrvList = view.initor.mdb.getOSService();
                srvMapList = view.initor.mdb.getAllServMapOnClntID( host.getID() );
                servList = new Vector();
                size = osSrvList.size();
                for( i=0; i<size; i++ ){
                    servList.addElement( osSrvList.elementAt(i) );
                }
                cnt = size;

                size1 = srvMapList.size();
                for( j=0; j<size1; j++ ){
                    servMap =(ServiceMap)srvMapList.elementAt(j);

                    founded = false;
                    for( i=0; i<size; i++ ){
                        service = (Service)osSrvList.elementAt(i);
                        if( service.getServName().equals( servMap.getServName() ) &&
                                service.getServDesc().equals( servMap.getServDesc() )
                        ){
                            founded = true;
                            break;
                        }
                    }

                    if( !founded ){
SanBootView.log.debug(getClass().getName(), " add servermap onto GUI: "+servMap.getServName() +"  "+ servMap.getServDesc() );
                        servList.addElement( new Service( cnt, servMap.getServName(), servMap.getServDesc() ) );
                        cnt++;
                    }
                }

                if( !host.isStopAllBaseServ() ){
                    stopAllService = false;

                    size = servList.size();
                    for( i=0; i<size; i++ ){
                        service = (Service)servList.elementAt(i);
                        // 找出该client上已经登记了的服务
                        servMap = view.initor.mdb.getServiceMap( host.getID(),service.getServName(),service.getServDesc() );
                        if( servMap !=null ){
                            service.setSeled( true );
                        }
                    }
                }else{
                    stopAllService = true;
                }
            }
            */

            if( stopAllService ){
                selectServPane.setStopAllService( true );
                selectServPane.clickJRadioBtn1();
            }else{
                selectServPane.setStopPartialService( true );
                selectServPane.clickJRadioBtn2();
            }

            selectServPane.setupServiceTable( servList );
        }
    }

    boolean isAutoDR = false;
    int OSTargetID = -1;
    boolean isFirstForSelBootMode = true;
    @Override public void nextButtonProcess(){
        boolean isOk,contained,isUseOdyDhcp=true;
        Vector subnetList=null,ibootSrvList=null;
        ArrayList netCardList;
        String oldmac="",ip_3rd="",nextsrv_3rd="",start_ip,ip_hba="";
        DhcpClientInfo dhcpClntInfo=null;
        InfoFromDhcpSetupPane dhcpSetPane; 
        
        if( getTipTitle().compareTo( SanBootView.res.getString("FailoverWizardDialog.title0").trim() ) == 0 ){
            this.setupServiceTable();
            if( seleDRReoverMode.isAutoMode() ){
                isAutoDR = true;
                
                // 首先获取设置dhcp所需的subnet和ibootsrv列表
                isUseOdyDhcp = host.isUseOdyDhcp();
                if( subnetList == null || ibootSrvList == null ){
                    // 首先判断该主机是否使用了uws服务器上的dhcp服务
                    if( view.initor.dhcpdb.isLoginOK() ){   
                        subnetList = view.initor.dhcpdb.getSubnetListFromDhcp();
                        ibootSrvList = view.initor.dhcpdb.getIbootSrvListFromDhcp();
                    }else{
                        // dhcp server不可用( 无法登陆它,可能没有关于它的配置信息,或者配置信息有误 )
                        subnetList = new Vector();
                        ibootSrvList = new Vector();
                    }    
                }
                
                // get the 3rd dhcp info
                isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+host.getID()+ ResourceCenter.CONF_3RD_DHCP );
                if( isOk ){
                    ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                    nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                }
                if( ip_3rd.equals("") ){
                    if( !host.isISCSIHBABoot() ){
                        ip_3rd = host.getIP();
                    }else{
SanBootView.log.error( getClass().getName()," not found iSCSI HBA boot ip from " + ResourceCenter.CLT_IP_CONF+"/"+host.getID()+ResourceCenter.CONF_3RD_DHCP );                         
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("FailoverWizardDialog.error.notFoundIscsiHBABootIp")
                        );
                        return;
                    }
                }
                if( nextsrv_3rd.equals("") )
                    nextsrv_3rd= view.initor.getTxIP(host.getIP());
                
                if( tgtList == null ){
                    tgtList = view.initor.mdb.getVolMapOnClntID( host.getID() );
                }
                
                // 将版本准备好
                contained = oldBootVer.containsKey( host.getIP() );
                if( !contained ){
                    oldBootVerList = view.getBootVer( host.getID() );          
                    oldBootVer.put( host.getIP(), oldBootVerList );
                }else{
                    oldBootVerList = (BootVerList)oldBootVer.get( host.getIP() ) ;
                }
                
                selectSnapPane.setupTable( host.getID() );
                
                if( origi_bootMac.equals("") ){
                    // 自动恢复方式对应的bootMac为当初初始化时在原机上所选的网卡
                    isOk = view.initor.mdb.getNetInfoFromMDB( ResourceCenter.CLT_IP_CONF+"/"+host.getID()+".conf" );
                    if( isOk ){
                         origi_bootMac = view.initor.mdb.getBootMac();
                         if( !host.isISCSIHBABoot() ){                         
                             if( origi_bootMac.equals("") ){
SanBootView.log.error( getClass().getName()," not found boot MAC from " + ResourceCenter.CLT_IP_CONF+"/"+host.getID()+".conf");                         
                                JOptionPane.showMessageDialog(this,
                                    SanBootView.res.getString("FailoverWizardDialog.error.notFoundBootMac")
                                );
                                return;
                             }else{
                                if( !DhcpClientInfo.isValidMAC( origi_bootMac ) ){
SanBootView.log.error( getClass().getName()," invalid boot MAC from " + ResourceCenter.CLT_IP_CONF+"/"+host.getID()+".conf");                         
                                    JOptionPane.showMessageDialog(this,
                                        SanBootView.res.getString("FailoverWizardDialog.error.notFoundBootMac")
                                    );
                                    return;
                                }else{
                                    bootMac = origi_bootMac;
                                }
                             }
                         }else{
                             bootMac = origi_bootMac;
                         }
                    }else{
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("FailoverWizardDialog.error.notFoundBootMac")
                        );
                        return;
                    }
                }else{
                    bootMac = origi_bootMac;
                }
System.out.println(" auto rest boot mac: "+ bootMac );
                
                if( targetSrvName.equals("") ){
                    targetSrvName = view.initor.mdb.getHostName();
                    if( targetSrvName.equals("") ){
SanBootView.log.error( getClass().getName(),"target server name is null." );                    
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("InitBootHostWizardDialog.log.getHostNameFailed")
                        );
                        return;
                    }
                }
                
                DhcpClientInfo dhcpClntInfo1 = view.initor.dhcpdb.getSelClntOnMac( DhcpClientInfo.getMacStr( bootMac ) );
                this.setDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,bootMac,isUseOdyDhcp,dhcpClntInfo1,host.getIP(),ip_3rd,nextsrv_3rd );
                this.netBootedHost = host;
                
                // 为所选的快照生成view
                ProgressDialog initDiag = new ProgressDialog( 
                    view,
                    SanBootView.res.getString("View.pdiagTitle.selRstVer"),
                    SanBootView.res.getString("View.pdiagTip.selRstVer")
                );
                
                DhcpClientInfo dhcpCltInfo = setDhcpPane.getDhcpSetInfo();
                if( !host.isISCSIHBABoot() ){
                    start_ip = setDhcpPane.isAutoSetup()? dhcpCltInfo.ip: dhcpCltInfo.ip_3rd;
                }else{
                    start_ip = ip_3rd; //ip_3rd是从保存hba卡信息的文件中获取的（见上面的519行）
                }
System.out.println("####################### set dhcp pane val: " + setDhcpPane.isAutoSetup() );                
                CrtView crtView = new CrtView( 
                    this,initDiag,selectSnapPane.getSelectedSnap1().toArray(),
                    viewMap,view,bootMac,host,start_ip,targetSrvName,
                    true, //肯定是在原机器上网络启动ԭ��������������
                    !host.isIBoot()   //iboot必须要每次都修改dhcp配置
                );
                crtView.start();
                initDiag.mySetSize();
                initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                initDiag.setVisible( true );
                
                if( crtView.allFinish ){
                    this.osTid = crtView.getOSTid();
                    this.selVer_info = crtView.getSelVersionInfo();
                    setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title5") );
                    removePaneFromContentPane( seleDRReoverMode );
                    taskConfPane.setOsTidOnUI( this.osTid );
                    addPaneOntoContentPane( taskConfPane );
                    refreshCenterPane();
                    return;
                }else{
                    this.osTid = crtView.getOSTid();
                    return;
                }
            }else{    
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title1") );    
                removePaneFromContentPane( seleDRReoverMode );
                addPaneOntoContentPane( selectHostForNetBoot );
                refreshCenterPane();
                return;
            }
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("FailoverWizardDialog.title1").trim() ) == 0 ){
            if( !selectHostForNetBoot.checkInputValidity() ) return;
            
            selHostForNetBoot = selectHostForNetBoot.getSelectHostToNetBoot();
            if( selHostForNetBoot.mac.equals("") ){
                netBootedHost = selHostForNetBoot.host;
                rstIP = netBootedHost.getIP();
                rstPort = netBootedHost.getPort(); 
            }else{ //从指定网卡进行网络启动
                netBootedHost = null;
                rstIP ="";
                rstPort = -1;
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2") );
            removePaneFromContentPane( selectHostForNetBoot );
            addPaneOntoContentPane( selectServPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2").trim() ) == 0 ){            
            if( this.isSwitchDisk ){
                // 将版本准备好(进行磁盘切换的物理机器就是发生初始化的原机)
                //contained = oldBootVer.containsKey( host.getIP() );
                contained = oldSwitchVer.containsKey( host.getIP() );
                if( !contained ){
                    //oldBootVerList = view.getBootVer( host.getID() );
                    oldSwitchVerList = view.getSwitchVer( host.getID() );
                    //oldBootVer.put( host.getIP(), oldBootVerList );
                    oldSwitchVer.put( host.getIP(), oldSwitchVerList );
                }else{
                    //oldBootVerList = (BootVerList)oldBootVer.get( host.getIP() ) ;
                    oldSwitchVerList = (BootVerList)oldSwitchVer.get( host.getIP() );
                }

                if( bindList == null ){
                    // 正在准备快照版本
                    ProgressDialog initDiag = new ProgressDialog(
                        view,
                        SanBootView.res.getString("View.pdiagTitle.getSnapVer"),
                        SanBootView.res.getString("View.pdiagTip.getSnapVer")
                    );

                    GetRstVersion getRstVer = new GetRstVersion( initDiag,view,host.getID(),false,false );
                    getRstVer.start();
                    initDiag.mySetSize();
                    initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                    initDiag.setVisible( true );

                    bindList = getRstVer.getBindList();
                }
                //selectSnapPane.setupTable( bindList, oldBootVerList.bootVerList );
                selectSnapPane.setupTable( bindList,oldSwitchVerList.bootVerList );
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title3") );
                removePaneFromContentPane( this.selectServPane );
                addPaneOntoContentPane( selectSnapPane );
            }else{
                if( isFirstForSelBootMode ){
                    if( host.isEmBoot() ){
                        selectNetBootModePane.setEmBootMode( true );
                        selectNetBootModePane.clickJRadioBtn1();
                    }else if( host.isIBoot() ){
                        selectNetBootModePane.setIBootMode( true );
                        selectNetBootModePane.clickJRadioBtn2();
                    }else if( host.isWindowsPEBoot() ){
                        selectNetBootModePane.setIbbotWindowsPE(true);
                        selectNetBootModePane.clickJRadioBtn4();
                    }else{
                        // get the 3rd dhcp info
                        isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_3RD_DHCP );
                        if( isOk ){
                            ip_hba = view.initor.mdb.getIpFrom3rdDhcpInfo();
                        }
                        selectNetBootModePane.setIScsiHBAMode( true );
                        selectNetBootModePane.clickJRadioBtn3();
                        selectNetBootModePane.setBootIPForIscsiHBA( ip_hba );
                    }
                    isFirstForSelBootMode = false;
                }
                setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode") );
                removePaneFromContentPane( selectServPane );
                addPaneOntoContentPane( selectNetBootModePane );
            }
            
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode").trim() ) == 0 ){
            if( selectNetBootModePane.isSelectIScsiHBAMode() ){
                if( !selectNetBootModePane.checkInput() ) return;                
                if( !getNCOnOriginalHost() ) return;                
                if( isIPConfilict( selectNetBootModePane.getBootIPForIscsiHBA() ) )return;                
                if( tgtList == null ){
                    tgtList = view.initor.mdb.getVolMapOnClntID( host.getID() );
                }
                
                //从指定网卡进行网络启动
                if( ( netBootedHost != null ) && ( netBootedHost.getID() == host.getID() ) ){
                    //从指定网卡进行网络启动��������������������Ƿ����ʼ����ԭ��
                    contained = oldBootVer.containsKey( host.getIP() );
                    if( !contained ){
                        oldBootVerList = view.getBootVer( host.getID() );
                        oldBootVer.put( host.getIP(), oldBootVerList );
                    }else{
                        oldBootVerList = (BootVerList)oldBootVer.get( host.getIP() ) ;
                    }
                }else{
                    SeledHostForNetBoot selNetBootInfo = selectHostForNetBoot.getSelectHostToNetBoot();
                    if( selNetBootInfo.host == null ){
                       bootMac = selNetBootInfo.mac;
                    }else{
                        ArrayList netCardList1 = this.getNetCardList();
                        if( ( netCardList1 == null) || netCardList1.size() <0 ) return;
                        Object ncObj = netCardList1.get(0);
                        if( ncObj instanceof UnixNetCard ){
                            bootMac = (( UnixNetCard)ncObj).mac;
                        }else{
                            bootMac = ((NetCard)ncObj).mac;
                        }     
                    }
                    
                    // 进行网络启动的是其他主机或是指定的网卡�����
                    DestAgent da = getSelectedMC( bootMac );
                    if( da != null ){
                        contained = oldBootVer.containsKey( bootMac );
                        if( !contained ){
                            oldBootVerList = view.getBootVerForDestAgent( da.getDst_agent_id() );
                            oldBootVer.put( bootMac,oldBootVerList  );
                        }else{
                            oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                        }
                    }else{
                        contained = oldBootVer.containsKey( bootMac );
                        if( !contained ){
                            oldBootVerList = view.getBootVerForDefault( host.getID() );
                            oldBootVer.put( bootMac,oldBootVerList );
                        }else{
                            oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                        }
                    }
                }
                
                if( bindList == null ){
                    // 正在准备快照版本
                    ProgressDialog initDiag = new ProgressDialog( 
                        view,
                        SanBootView.res.getString("View.pdiagTitle.getSnapVer"),
                        SanBootView.res.getString("View.pdiagTip.getSnapVer")
                    );
                    
                    GetRstVersion getRstVer = new GetRstVersion( initDiag,view,host.getID(),true );
                    getRstVer.start();
                    initDiag.mySetSize();
                    initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                    initDiag.setVisible( true );
                    
                    bindList = getRstVer.getBindList();
                }
                
                selectSnapPane.setupTable( bindList, oldBootVerList.bootVerList );
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title3") );
                removePaneFromContentPane( selectNetBootModePane );
                addPaneOntoContentPane( selectSnapPane );
                refreshCenterPane();
                return;
            }else{
                if( netBootedHost == null ){
                    setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.5") );
                    netCardList = new ArrayList();
                    PesudoNetCard pnc = new PesudoNetCard();
                    pnc.isSel = true;
                    pnc.mac = selHostForNetBoot.mac;
                    netCardList.add( pnc );
                    selectNetCardPane.setupNetCardTable( netCardList );
                }else{
                    contained = cardOnClnt.containsKey( new String( rstIP ) );
                    if( !contained ){
                        netCardList = getNetCardList();
                        if( netCardList == null ) return;
                        cardOnClnt.put( new String(rstIP), netCardList );
                        
                        if( host.getID() == netBootedHost.getID() ){
                            // 要网络启动的物理主机就是初始化的原机, 获取orghost在初始化时所选的启动网卡
                            isOk = view.initor.mdb.getNetInfoFromMDB( ResourceCenter.CLT_IP_CONF+"/"+host.getID() + ResourceCenter.CONF_IP );
                            if( isOk ){
                                oldmac = view.initor.mdb.getBootMac(); 
                            }
                            selectNetCardPane.setupNetCardTable( netCardList );
                            selectNetCardPane.setupGigaNetCard( oldmac );
                        }else{
                            // 获取当前的iboot list，从中找出netBootedHost曾经确定过的启动网卡
                            DestAgent da = getSelectedMC( netCardList );
                            if( da != null ){
                                oldmac = da.getDst_agent_mac();
                            }else{
                                oldmac = "";
                            }                       
                            selectNetCardPane.setupNetCardTable( netCardList );
                            selectNetCardPane.setupGigaNetCard( oldmac );
                        }
                    }else{
                        Object val = cardOnClnt.get( new String(rstIP) );
                        netCardList = (ArrayList)val;
                        selectNetCardPane.setupNetCardTable( netCardList );
                    }
                    setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.5") );                     
                    selectNetCardPane.addListener();
                }

                removePaneFromContentPane( selectNetBootModePane );
                addPaneOntoContentPane( selectNetCardPane );
                refreshCenterPane();
                return;
            }   
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2.5").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            if( !selectNetCardPane.hasSelectedNetCard() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitBootHostWizardDialog.error.notSelCard")
                );
                return;
            }
            
            // 首先获取设置dhcp所需的subnet和ibootsrv列表
            if( subnetList == null || ibootSrvList == null ){      
                if( view.initor.dhcpdb.isLoginOK() ){   
                    subnetList = view.initor.dhcpdb.getSubnetListFromDhcp();
                    ibootSrvList = view.initor.dhcpdb.getIbootSrvListFromDhcp();
                }else{
                    // dhcp server不可用( 无法登陆它,可能没有关于它的配置信息,或者配置信息有误 )
                    subnetList = new Vector();
                    ibootSrvList = new Vector();
                }    
            }
            
            if( netBootedHost == null ){
                contained = dhcpOnClnt.containsKey( new String( selHostForNetBoot.mac ) );
                if( !contained ){
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
SanBootView.log.debug( getClass().getName(),"selected netboot MAC: "+ mac ); 
                    start_ip = host.getIP();
                    DestAgent da = getSelectedMC( nc );
                    if( da != null ){
                        start_ip = da.getDst_agent_ip();
                        dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac( DhcpClientInfo.getMacStr( mac ) );
                        
                        // get the 3rd dhcp info
                        isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+ResourceCenter.PREFIX_DST_AGNT + da.getDst_agent_id() + ResourceCenter.CONF_3RD_DHCP );
                        if( isOk ){
                            isUseOdyDhcp = false; //due to have the 3rd dhcp info config file on server-side
                            ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                            nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                        }else{
                            isUseOdyDhcp = true;
                        }
                        if( ip_3rd.equals("") )
                            ip_3rd = start_ip;
                        if( nextsrv_3rd.equals("") )
                            nextsrv_3rd= view.initor.getTxIP(start_ip);
                    }else{
                        isUseOdyDhcp = true;
                        ip_3rd = start_ip;
                        nextsrv_3rd = view.initor.getTxIP(start_ip);
                    }
                    
                    setDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,selHostForNetBoot.mac,isUseOdyDhcp,dhcpClntInfo,start_ip,ip_3rd,nextsrv_3rd );
                }else{
                    Object val = dhcpOnClnt.get( new String( selHostForNetBoot.mac ) );
                    dhcpSetPane = (InfoFromDhcpSetupPane)val;
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
                    setDhcpPane.setDhcpSetInfo( dhcpSetPane.isUseOdyDhcp,dhcpSetPane.dhcpClntInfo,mac ); 
                }  
            }else{
                contained = dhcpOnClnt.containsKey( new String( rstIP ) ); 
                if( !contained ){
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
SanBootView.log.debug( getClass().getName(),"selected netboot MAC: "+ mac ); 
                    start_ip = host.getIP();
                    DestAgent da = getSelectedMC( nc );
                    if( da != null ){
                        start_ip = da.getDst_agent_ip();
                    }
             
                    if( ( netBootedHost !=null ) && ( netBootedHost.getID() == host.getID() ) ){
                        isUseOdyDhcp = host.isUseOdyDhcp(); 
                        isOk = view.initor.mdb.getNetInfoFromMDB( ResourceCenter.CLT_IP_CONF+"/"+host.getID()+".conf" );
                         if( isOk ){
                             oldmac = view.initor.mdb.getBootMac();
                             if( !oldmac.equals("") ){
                                 dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac( NetCard.getUnixMac( oldmac ) );
                             }
                         }
                        
                        // get the 3rd dhcp info
                        isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+host.getID()+ ResourceCenter.CONF_3RD_DHCP );
                        if( isOk ){
                            ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                            nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                        }
                        if( ip_3rd.equals(""))
                            ip_3rd = start_ip;
                        if( nextsrv_3rd.equals("") )
                            nextsrv_3rd= view.initor.getTxIP(start_ip);
                    }else{
                        if( da != null ){
                            dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac( DhcpClientInfo.getMacStr( mac ) );
                            
                            // get the 3rd dhcp info
                            isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+ResourceCenter.PREFIX_DST_AGNT + da.getDst_agent_id() + ResourceCenter.CONF_3RD_DHCP );
                            if( isOk ){
                                isUseOdyDhcp = false; //due to have the 3rd dhcp info config file on server-side
                                ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                                nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                            }else{
                                isUseOdyDhcp = true;
                            }
                            if( ip_3rd.equals("") )
                                ip_3rd = start_ip;
                            if( nextsrv_3rd.equals("") )
                                nextsrv_3rd= view.initor.getTxIP(start_ip);
                        }else{
                            isUseOdyDhcp = true;
                            ip_3rd = start_ip;
                            nextsrv_3rd = view.initor.getTxIP(start_ip);
                        }
                    }
                    
                    setDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,mac,isUseOdyDhcp,dhcpClntInfo,start_ip,ip_3rd,nextsrv_3rd ); 
                }else{
                    Object val = dhcpOnClnt.get( rstIP );
                    dhcpSetPane = (InfoFromDhcpSetupPane)val;
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
                    setDhcpPane.setDhcpSetInfo( dhcpSetPane.isUseOdyDhcp,dhcpSetPane.dhcpClntInfo,mac ); 
                }
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.6") ); 
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane( setDhcpPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2.6").trim() ) == 0 ){
            if( !setDhcpPane.checkDhcpInfoValidity() ){ 
                return;
            }
            
            Object selNC = selectNetCardPane.getSelectNetCard();
            if( selNC == null ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.notFoundBootMac")
                );
                return;
            }else{
                if( selNC instanceof NetCard ){
                    bootMac = ((NetCard)selNC).mac;
                }else{
                    bootMac = ((UnixNetCard)selNC).mac;
                }
            }
            
            if( tgtList == null ){
                tgtList = view.initor.mdb.getVolMapOnClntID( host.getID() );
            }
            
            // 将版本准备好
            if( ( netBootedHost != null ) && ( netBootedHost.getID() == host.getID() ) ){
                // 进行网络启动的物理机器就是发生初始化的原机������������������������Ƿ����ʼ����ԭ��
                contained = oldBootVer.containsKey( host.getIP() );
                if( !contained ){
                    oldBootVerList = view.getBootVer( host.getID() );
                    oldBootVer.put( host.getIP(), oldBootVerList );
                }else{
                    oldBootVerList = (BootVerList)oldBootVer.get( host.getIP() ) ;
                }
            }else{
                // 进行网络启动的是其他主机或是指定的网卡������
                DestAgent da = getSelectedMC( bootMac );
                if( da != null ){
                    contained = oldBootVer.containsKey( bootMac );
                    if( !contained ){
                        oldBootVerList = view.getBootVerForDestAgent( da.getDst_agent_id() );
                        oldBootVer.put( bootMac,oldBootVerList  );
                    }else{
                        oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                    }
                }else{
                    contained = oldBootVer.containsKey( bootMac );
                    if( !contained ){
                        oldBootVerList = view.getBootVerForDefault( host.getID() );
                        oldBootVer.put( bootMac,oldBootVerList );
                    }else{
                        oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                    }
                }
            }
            
            if( bindList == null ){
                // 正在准备快照版本
                ProgressDialog initDiag = new ProgressDialog( 
                    view,
                    SanBootView.res.getString("View.pdiagTitle.getSnapVer"),
                    SanBootView.res.getString("View.pdiagTip.getSnapVer")
                );
                
                GetRstVersion getRstVer = new GetRstVersion( initDiag,view,host.getID(),true );
                getRstVer.start();
                initDiag.mySetSize();
                initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                initDiag.setVisible( true );
                
                bindList = getRstVer.getBindList();
            }
            selectSnapPane.setupTable( bindList, oldBootVerList.bootVerList );
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title3") );
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane( selectSnapPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title3").trim() ) == 0 ){
            selectSnapPane.fireEditingStopMsg();
            
            if( !this.isSwitchDisk ){
                if( !selectSnapPane.toRecoverOSDisk() ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("FailoverWizardDialog.error.notRecoverCDisk")
                    );
                    return;
                }
            }
            
            if( ( netBootedHost == null ) ||( netBootedHost.getID() != host.getID() ) ){
                if( !selectSnapPane.restoreAllDisk() ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("FailoverWizardDialog.error.mustRstAllDisk")
                    );
                    return;
                }
            }
            
            if( targetSrvName.equals("") ){
                targetSrvName = view.initor.mdb.getHostName();
                if( targetSrvName.equals("") ){
SanBootView.log.error( getClass().getName(),"target server name is null." );                    
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("InitBootHostWizardDialog.log.getHostNameFailed")
                    );
                    return;
                }
            }
            
            // 为所选的快照生成view
            ProgressDialog initDiag = new ProgressDialog( 
                view,
                SanBootView.res.getString("View.pdiagTitle.selRstVer"),
                SanBootView.res.getString("View.pdiagTip.selRstVer")
            );
            
            DhcpClientInfo dhcpCltInfo = setDhcpPane.getDhcpSetInfo();
            if( !host.isISCSIHBABoot() ){
                start_ip = setDhcpPane.isAutoSetup()? dhcpCltInfo.ip : dhcpCltInfo.ip_3rd;
            }else{
                start_ip = selectNetBootModePane.getBootIPForIscsiHBA();
            }
            CrtView crtView = new CrtView( 
                this,initDiag,selectSnapPane.getSelectedSnap1().toArray(),
                viewMap,view,bootMac,host,
                start_ip,targetSrvName,
                ( netBootedHost != null ) && ( host.getID() == netBootedHost.getID() ),
                this.isSwitchDisk?true:false
            );
            crtView.start();
            initDiag.mySetSize();
            initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
            initDiag.setVisible( true );
            
            if( crtView.allFinish ){
                this.osTid = crtView.getOSTid();
                this.selVer_info = crtView.getSelVersionInfo();
                this.delOsTidLunMap = crtView.isShouldRmOsTidLunMap();
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title5") );
                removePaneFromContentPane( selectSnapPane );
                if( !this.isSwitchDisk ){
                    taskConfPane.setOsTidOnUI( this.osTid );
                }
                addPaneOntoContentPane( taskConfPane );
                refreshCenterPane();
                return;
            }else{
                this.osTid = crtView.getOSTid();
                this.delOsTidLunMap = crtView.isShouldRmOsTidLunMap();
                return;
            }
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title5").trim() ) == 0 ){
            if( !this.isSwitchDisk ){
                if( !taskConfPane.isFinishJob( TaskConfigForFailOverPane.CONF_CHGE_BIOS_ROW  ) ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("FailoverWizardDialog.error.notFinishChgBIOS")
                    );
                    return;
                }
            }
            
            if( taskConfPane.isAllFinished() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.allFinished")
                );
                return;
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title6") );
            removePaneFromContentPane( taskConfPane );
            setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton( false );
            enableBackButton( false );
            enableCancelButton( false );
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
            addPaneOntoContentPane( runPane );
            refreshCenterPane();
            
            beginDRRecover();
            
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title6").trim() ) == 0 ){
            if( allFinished ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("FailoverWizardDialog.error.drRecoverOK")
                );
            }else{
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("FailoverWizardDialog.error.needReDrRecover")
                );
            }
            dispose();
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("FailoverWizardDialog.tit").trim() ) == 0 ){
            if( isFirstTimeForSwitchDisk ){
                this.setupServiceTable();
                netBootedHost = host;
                isFirstTimeForSwitchDisk = false;
            }

            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2") );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( this.selectServPane );
            refreshCenterPane();
            return;
        }

        if( getTipTitle().compareTo( SanBootView.res.getString("FailoverWizardDialog.title").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title0") );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( seleDRReoverMode );
            refreshCenterPane();
            return;
        }else{
            return;
        }
    }
    
    @Override public void cancelButtonProcess(){
        if( (this.osTid != -1) && delOsTidLunMap ){
           // 不去掉“ostid”的lunmap,否则要网络启动GUI所在的主机时，由于
           // 要重启机器，所以GUI的failover过程被分成两段，会出现os不能
           // 登陆的问题（lunmap被删除了）
           // view.initor.mdb.delLunMap( osTid, host.getIP(), "255.255.255.255", "rw" );
        }
        this.dispose();
    }
    
    private void beginDRRecover(){
        Thread initThread = new Thread( new RecoveringBootHost( this ) );
        initThread.start();
    }
      
    boolean allFinished = false; // 表明所有task都成功完成了
    String errMsg;
    @Override public void writeLogBuf( String errMsg,int which ){
        if( isWrFirst ){
            logBuf.append( runPane.getTabStr( which ) + replaceLine( errMsg ) );
            isWrFirst = false;
        }else{
            logBuf.append( ResourceCenter.NEWLINE_STRING + runPane.getTabStr( which ) + replaceLine( errMsg ) );
        }
    }
    
    public void realDRRecover(){
        String ip,iscsiVar,disk,servName,key,crttime,drvLetter;
        int i,j,k,size,size1,size2,port,tid,tid1,retryCnt1,snapid,viewid;
        boolean isOk,excepErr,isStopAllBaseServ;
        GetAgentInfo getAgentInfo = null;
        Service service;
        BindOfVolMapandSnap binder;
        BindOfSnapAndView bindsv;
        VolumeMap selVolMap;
        SystemPartitionForWin part;
        Vector stopServList = new Vector();
        Vector tmpVect = new Vector();
        ArrayList snapList;
        Object item;
        boolean stopServStepOK;
        boolean loadInfoStepOK;
        boolean assignDriverStepOK;
        boolean assignDriverStepWarning;
        boolean startServStepOK;
        boolean rebootStepOK;
        DestAgent newDa = null;
        
SanBootView.log.info( getClass().getName()," @@#################  Migration System from local disk to iSCSI Begin ###################@@ ");
        if( this.isSwitchDisk ){
            ip   = host.getIP();
            port = host.getPort();
        }else{
            if( !host.isISCSIHBABoot() ){
                DhcpClientInfo  dhcpInfo = setDhcpPane.getDhcpSetInfo();
                if( setDhcpPane.isAutoSetup() ){
                    ip   = dhcpInfo.ip;
                    port = host.getPort();
                }else{
                    ip   = dhcpInfo.ip_3rd;
                    port = host.getPort();
                }
            }else{
                ip   = host.getIP();
                port = host.getPort();
            }
        }

        // 1. connect client 
        runPane.setCurTabPane( RunningTaskForDRPane.CONNECT_AGENT_ROW );
        runPane.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
        );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent Begin ###################@@ "); 

        isOk = false;
        excepErr = false;
        
        Thread connectThread = new Thread( process );
        connectThread.start();
        
        while ( !isOk ){
            try{
                // sleep 4 sec.
                try{
                    Thread.sleep( 4*1000 );
                }catch(InterruptedException e){}
                
                // 获取主机信息,
                getAgentInfo = new GetAgentInfo( 
                    ResourceCenter.getCmd( ResourceCenter.CMD_GET_HOST_INFO1 ) + ip + " " + port+" ib_get_osinfo.exe",
                    view.getSocket()
                );
                isOk = getAgentInfo.getAgentInfo();
            }catch( Exception ex ){
                ex.printStackTrace();
                        
                setOver( true );
                  
                isOk = true;
                excepErr = true;
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                );
                errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_GET_HOST_INFO ) + " : " + getAgentInfo.getErrMsg(); 
                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.CONNECT_AGENT_ROW );
                writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );
            }
        }
        
         // 发生网络方面的异常,退出
        if( excepErr ){
            allFinished = false;
            recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");            
            return ;
        }else{
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.connectHostOK"), 
                RunningTaskForDRPane.CONNECT_AGENT_ROW
            );
        }
        
        // 2. check whether C startup from network
        isOk = view.initor.mdb.isStartupfromSAN( ip, port, "C" );
        if( isOk ){
            if( view.initor.mdb.isStartupFromSAN() ){
                // 判断当前是否已经网络启动，同时当前C盘的target id是否与用户所选的view或volume的target id一样，
                // 如果不一样，用新target启动客户端会出现蓝屏（无响应）
                if( host.isLargerThanVista() || host.isIBoot() || host.isISCSIHBABoot() ){
                    osTid = view.initor.mdb.getTargetByLetter( ip,port,"C:" );
                }else{
                    view.initor.mdb.getOsVolTargetIDOfIBoot( ip );
                    osTid = view.initor.mdb.getOsVolTid();
                }
                if( osTid == -1 ){ // 没有得到当前的os target id,就用以前保存的����
                    if( oldBootVerList.osBootVer != null ){
                        osTid = oldBootVerList.osBootVer.getTid();
                        if( osTid <=0 ){
SanBootView.log.warning(getClass().getName(),"Can't get os target id from MDB.") ;
                            // 提示用户当心
                            int ret = JOptionPane.showConfirmDialog(
                                view,
                                SanBootView.res.getString("FailoverWizardDialog.confirm1"),
                                SanBootView.res.getString("common.confirm"),  //"Confirm",
                                JOptionPane.OK_CANCEL_OPTION
                            );
                            if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                                setOver( true );
                                runPane.setTaskStatus(
                                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                                );
                                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.cancelNetBoot");
                                runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );

                                // 用户取消本次操作,退出
                                allFinished = false;
                                recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                                 
                                return;
                            }
                        }
                    }else{
SanBootView.log.warning(getClass().getName(),"Can't get os target id from current system and MDB.") ;                    
                        // 提示用户当心
                        int ret = JOptionPane.showConfirmDialog(
                            view,
                            SanBootView.res.getString("FailoverWizardDialog.confirm1"),
                            SanBootView.res.getString("common.confirm"),  //"Confirm",
                            JOptionPane.OK_CANCEL_OPTION
                        );
                        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                            setOver( true );
                            runPane.setTaskStatus(
                                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                            );
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.cancelNetBoot");
                            runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW );
                            writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );
                            
                            // 用户取消本次操作,退出
                            allFinished = false;
                            recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                                     
                            return;
                        }
                    }
                }
                
                if( osTid > 0 ){
                    Object osSnap = selectSnapPane.getOSSnapVer();
                    if( osSnap instanceof VolumeMapWrapper ){ // 用户直接选择了target volume
                        tid = ((VolumeMapWrapper)osSnap).volMap.getVolTargetID();
                    }else if( osSnap instanceof ViewWrapper ){ // 选择了已有的view
                        tid = ((ViewWrapper)osSnap).view.getTargetID();
                    }else if( osSnap instanceof CloneDiskWrapper ){
                        tid = ((CloneDiskWrapper)osSnap).cloneDisk.getTarget_id();
                    }else{ // 选择了snapwrapper
                        if( ((BindOfSnapAndView)viewMap.get( "C:\\" )) == null)  // add -hwh 2013.10.30 网启时，切换数据盘
                            tid = osTid;
                        else
                            tid = ((BindOfSnapAndView)viewMap.get( "C:\\" )).view.getTargetID();
                    }
System.out.println(" real netboot os tid:  "+ osTid +" selected os tid: "+ tid );                   
                    if( osTid != tid ){
                        setOver( true );
                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                        );
                        errMsg = SanBootView.res.getString("FailoverWizardDialog.log.mismatchedOSVer");
                        runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW );
                        writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );

                        // os版本不一致，不能网络启动,退出
                        allFinished = false;
                        recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                        
                        return;
                    }
                }       
                
                setOver( true );
                
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                );
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.startupFromSAN"), 
                    RunningTaskForDRPane.CONNECT_AGENT_ROW
                );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                 
            }else{
                if( !this.isSwitchDisk ){
                    setOver( true );
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                    );
                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.notStartupFromSAN");
                    runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW );
                    writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );

                    // 从本地盘启动,退出
                    allFinished = false;
                    recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                 
                    return;
                }else{
                    setOver( true );
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                    );
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailbackWizardDialog.log.startupFromLocalDisk"),
                        RunningTaskForDRPane.CONNECT_AGENT_ROW
                    );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");
                }
            }
        }else{
            setOver( true );
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
            );
            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.getStartupInfo") +
                      SanBootView.res.getString("common.failed");
            runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.CONNECT_AGENT_ROW );
            writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );
            
            // 无法得到系统启动的方式(local disk or network),退出
            allFinished = false;
            recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");             
            return;
        }
        
        // 3. stop services
SanBootView.log.info( getClass().getName()," @@#################  Stop service Begin ###################@@ ");          
        stopServStepOK = true; 
        runPane.setCurTabPane( RunningTaskForDRPane.STOP_SERV_ROW );
        if( taskConfPane.isFinishJob( TaskConfigForFailOverPane.CONF_STOP_SERV_ROW ) ){
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskForDRPane.STOP_SERV_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForDRPane.STOP_SERV_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskForDRPane.STOP_SERV_ROW , 2
            );
            
            // 由于启停服务的时间不好确定，故而一律将超时时间设置为10 hours
            view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT ); 
            
            if( isAutoDR ){
                isStopAllBaseServ = host.isStopAllBaseServ();
                if( isStopAllBaseServ ){
                    // stop all service in GUI table
                    servList = selectServPane.getServiceInfo();
                }else{
                    // stop services in MDB
                    servList = view.initor.mdb.getAllServMapOnClntID( host.getID() );
                }

                size = servList.size();
                for( i=0; i<size; i++ ){
                    item = servList.elementAt( i ); 
                    stopServList.addElement( item ); // 记录停止了哪些服务
                    
                    if( item instanceof Service ){
                        servName = ((Service)item).getServName();
                    }else{
                        servName = ((ServiceMap)item).getServName();
                    }
                    
                    retryCnt1 = 0;
                    while( retryCnt1 < 3 ){                       
                        isOk = view.initor.mdb.doStartService( ip,port,"stop",servName );
                        if( isOk ){
                            break;
                        }else{
                            retryCnt1++;
                        }
                    }
                    
                    if( isOk ){
                        runPane.setLogOnTabpane(
                            SanBootView.res.getString("FailoverWizardDialog.log.stopService") +" [ "+ servName +" ] "+
                                SanBootView.res.getString("common.ok"), 
                            RunningTaskForDRPane.STOP_SERV_ROW
                        );
                    }else{
                        errMsg = SanBootView.res.getString("FailoverWizardDialog.log.stopService") +" [ "+ servName +" ] "+
                                  SanBootView.res.getString("common.failed"); 
                        runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.STOP_SERV_ROW );
                        writeLogBuf( errMsg, RunningTaskForDRPane.STOP_SERV_ROW  );
                        stopServStepOK = false;
                    }
                }
            }else{
                isStopAllBaseServ = selectServPane.isStopAllService(); 
                boolean todo = false;
                servList = selectServPane.getServiceInfo();
                size = servList.size();
                for( i=0; i<size; i++ ){
                    service = (Service)servList.elementAt( i );

                    todo = false;
                    if( isStopAllBaseServ ){
                        todo = true;
                    }else{
                        if( service.iSeled() ){
                            todo = true;
                        }
                    }

                    if( todo ){
                        stopServList.addElement( service ); // 记录停止了哪些服务

                        retryCnt1 = 0;
                        while( retryCnt1 < 3 ){
                            isOk = view.initor.mdb.doStartService( ip,port,"stop",service.getServName() );
                            if( isOk ){
                                break;
                            }else{
                                retryCnt1++;
                            }
                        }
                        
                        if( isOk ){
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("FailoverWizardDialog.log.stopService") +" [ "+service.getServName()+" ] "+
                                    SanBootView.res.getString("common.ok"), 
                                RunningTaskForDRPane.STOP_SERV_ROW
                            );
                        }else{
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.stopService") +" [ "+service.getServName()+" ] "+
                                      SanBootView.res.getString("common.failed");
                            runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.STOP_SERV_ROW );
                            writeLogBuf( errMsg, RunningTaskForDRPane.STOP_SERV_ROW  );
                            stopServStepOK = false;
                        }
                    }
                }
            }
            
            view.initor.mdb.restoreOldTimeOut();
                                       
            if( stopServStepOK ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.STOP_SERV_ROW , 2
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.STOP_SERV_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Stop service End ###################@@ ");            
        
        // 4. load info
        loadInfoStepOK = true;
        if( !this.isSwitchDisk ){
            runPane.setCurTabPane( RunningTaskForDRPane.LOAD_INFO_ROW );
SanBootView.log.info( getClass().getName()," @@#################  Load info Begin ###################@@ "); 

            if( taskConfPane.isFinishJob( TaskConfigForFailOverPane.CONF_LOAD_INFO_ROW ) ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                );
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                    RunningTaskForDRPane.LOAD_INFO_ROW
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                );

                if( !host.isISCSIHBABoot() ){
                    String ipConf = host.getID() + ".conf";
                    isOk = view.initor.mdb.sendNetConf( ip, port, ipConf );
                    if( isOk ){
                        isOk = view.initor.mdb.loadInfo( ip,port,ipConf );
                        if( isOk ){
                            runPane.setTaskStatus(
                                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                            );
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("FailoverWizardDialog.log.loadInfo") +
                                    SanBootView.res.getString("common.ok"),
                                RunningTaskForDRPane.LOAD_INFO_ROW
                            );
                        }else{
                            loadInfoStepOK = false;

                            runPane.setTaskStatus(
                                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                            );
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.loadInfo") +
                                      SanBootView.res.getString("common.failed");
                            runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.LOAD_INFO_ROW );
                            writeLogBuf( errMsg, RunningTaskForDRPane.LOAD_INFO_ROW  );
                        }
                    }else{
                        loadInfoStepOK = false;

                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                        );
                        errMsg = SanBootView.res.getString("FailoverWizardDialog.log.sendInfo") +
                                  SanBootView.res.getString("common.failed");
                        runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.LOAD_INFO_ROW );
                        writeLogBuf( errMsg, RunningTaskForDRPane.LOAD_INFO_ROW  );
                    }
                }else{
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                    );
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailoverWizardDialog.log.notneedloadinfo"),
                        RunningTaskForDRPane.LOAD_INFO_ROW
                    );
                }
            }
SanBootView.log.info( getClass().getName()," @@#################  Load info End ###################@@ ");
        }

        // 5. assigne drivers
        assignDriverStepOK = true;
        assignDriverStepWarning = false;
        runPane.setCurTabPane( RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
SanBootView.log.info( getClass().getName()," @@#################  Assign drives Begin ###################@@ ");   

        if( taskConfPane.isFinishJob( TaskConfigForFailOverPane.CONF_ASSIGN_DRIVER_ROW ) ){
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForDRPane.ASSIGN_DRIVER_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
            );
            
            // 9-disk.conf(存放初始化时本地磁盘信息)
            isOk = view.initor.mdb.getSystemPartFromMDB( 
                ResourceCenter.CLT_IP_CONF +"/"+host.getID()+ResourceCenter.CONF_NORMAL_DISK,
                ResourceCenter.CMD_TYPE_MTPP 
            );
            if( isOk ){
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.getPartition1") +
                        SanBootView.res.getString("common.ok"), 
                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
                );
                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.getPartition");
                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                
                // 无法得到original partion info,退出
                allFinished = false;
                recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Assign drives End ###################@@ ");                
                return;
            }
            
            // 获取初始化时保存的分区表
            Vector oldList = view.initor.mdb.getSysPartByCatConf();
            
            // 获取当前的 persistent target
            isOk = view.initor.mdb.getPersistentTarget( ip, port );
            if( isOk ){
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.getPersistentTarget") +
                        SanBootView.res.getString("common.ok"), 
                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
                );
                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.getPersistentTarget") +
                          SanBootView.res.getString("common.failed");
                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                
                // 无法得到current used partion info,退出
                allFinished = false;
                recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Assign drives End ###################@@ ");                
                return;
            }
            persistentTgtList = view.initor.mdb.getPersistentTgtList();
            
            // 获取用户所选的恢复版本
            snapList = selectSnapPane.getSelectedSnap();
            
            // 为所有的target vol分配盘符( 除了OS所在的target vol )
            size = snapList.size();
            for( i=0; i<size; i++ ){
                binder = (BindOfVolMapandSnap)snapList.get( i );
                
                if( binder.snap instanceof VolumeMapWrapper ){ // 用户直接选择了target volume
                    tid = ((VolumeMapWrapper)binder.snap).volMap.getVolTargetID();
                }else if( binder.snap instanceof ViewWrapper ){ // 选择了已有的view
                    tid = ((ViewWrapper)binder.snap).view.getTargetID();
                }else if( binder.snap instanceof CloneDiskWrapper ){
                    tid = ((CloneDiskWrapper)binder.snap).cloneDisk.getTarget_id();
                }else{ // 选择了snapwrapper
                    tid = ((BindOfSnapAndView)viewMap.get( binder.getVolMap().getVolDiskLabel() )).view.getTargetID();
                }
                
                iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + tid;
                newBootVerList.add( new Integer( tid ) );  // �保存下来�������
                
                size1 = oldList.size();
                tmpVect.removeAllElements();
                for( j=0; j<size1; j++ ){
                    part = (SystemPartitionForWin)oldList.elementAt( j );                    
                    tid1 = part.getTargetID();
                    
                    if( binder.getVolMap().getVolDiskLabel().toUpperCase().equals( part.getDiskLabel().toUpperCase() ) ){
                        if( !binder.getVolMap().getVolDiskLabel().toUpperCase().equals("C:\\") ){
                            tmpVect.addElement( new Integer(j) );
                            continue;
                        }else{
                            // 对于oldList中盘符为C的本地盘，在下面的"为所有未恢复的本地盘分配盘符"中
                            // 将会umount掉该盘(因为，有时网络启动后，会给该盘分配一个新盘符)
                        }
                    }
                    
                    if( tid1 != -1 ){
                        if( tid == tid1 ){
                            tmpVect.addElement( new Integer(j) );
                        }
                    }
                }
                // 真正从oldList中去掉这些
                size2 = tmpVect.size();
                for( k=size2-1; k>=0; k-- ){
                    oldList.removeElementAt( ( (Integer)tmpVect.elementAt( k ) ).intValue() );
                }
                
                // assign new driver 
                if( binder.getVolMap().getVolDiskLabel().equals("C:\\") ){
                    continue; // OS 所在的C盘，不需要assign driver
                }
                
                // add lunmap for tid
                isOk = view.initor.mdb.addLunMap( tid, ip, "255.255.255.255", "rw", "", "", "", "" );
                if( isOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " " +
                            SanBootView.res.getString("common.ok") ,
                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                    );
                }else{
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " " +
                              SanBootView.res.getString("common.failed") ;
                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                    assignDriverStepOK = false;
                    continue;
                }
                
                drvLetter = binder.getVolMap().getVolDiskLabel().substring( 0,1 );
                isOk = view.initor.mdb.assignDriver( ip,port, 
                        view.initor.getTxIP(ip), ResourceCenter.ISCSI_LOGIN_PORT+"", iscsiVar, 
                        drvLetter
                );
                
                if( isOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+iscsiVar+" ] "+
                            SanBootView.res.getString("common.ok"), 
                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                    );
                    
                    // 先logout再login,可以保证卷的label能正确在windows explorer中显示出来
                    if( doLogoutTarget( ip,port, RunningTaskForDRPane.ASSIGN_DRIVER_ROW, iscsiVar,drvLetter ) ){
                        if( doLoginTarget( ip,port,RunningTaskForDRPane.ASSIGN_DRIVER_ROW, iscsiVar  ) ){
                            if( !hasThisPersistentTarget( tid ) && !this.isSwitchDisk ){
                                // Add PersitentTarget for target vol
                                isOk = view.initor.mdb.addPersistentTarget( ip,port,iscsiVar );
                                if( isOk ){
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("FailoverWizardDialog.log.addPersistentTarget") +" [ "+iscsiVar+" ] "+
                                            SanBootView.res.getString("common.ok"), 
                                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                    );    
                                }else{
                                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.addPersistentTarget") +" [ "+iscsiVar+" ] "+
                                              SanBootView.res.getString("common.failed");
                                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                    assignDriverStepOK = false;
                                }
                            }
                        }else{
                            assignDriverStepOK = false;
                        }
                    }else{ // logout失败，也不影响系统使用，只是卷的label在windows exploer中不一定能正常显示
                        if( !hasThisPersistentTarget( tid ) && !this.isSwitchDisk ){
                            // Add PersitentTarget for target vol
                            isOk = view.initor.mdb.addPersistentTarget( ip,port,iscsiVar );
                            if( isOk ){
                                runPane.setLogOnTabpane(
                                    SanBootView.res.getString("FailoverWizardDialog.log.addPersistentTarget") +" [ "+iscsiVar+" ] "+
                                        SanBootView.res.getString("common.ok"), 
                                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                );    
                            }else{
                                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.addPersistentTarget") +" [ "+iscsiVar+" ] "+
                                          SanBootView.res.getString("common.failed");
                                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                assignDriverStepOK = false;
                            }
                        }
                    }
                }else{
                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+iscsiVar+" ] "+
                              SanBootView.res.getString("common.failed") + " " + view.initor.mdb.getErrorMessage();
                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                    assignDriverStepOK = false;
                }
            }

            if( !this.isSwitchDisk ){
                // 去掉所有其他不需要的 persistent target
                size = persistentTgtList.size();
                for( i=0; i<size; i++ ){
                    Integer perInt= (Integer)persistentTgtList.get(i);
                    if( hasThisPersistentTarget1( perInt.intValue() ) ){
                        // remove PersitentTarget for target vol
                        String persistent = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" +perInt.intValue();
                        isOk = view.initor.mdb.delPersistentTarget( ip,port,persistent );
                        if( isOk ){
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("FailoverWizardDialog.log.delPersistentTarget") +" [ "+persistent+" ] "+
                                    SanBootView.res.getString("common.ok"),
                                RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                            );
                        }else{
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.delPersistentTarget") +" [ "+persistent+" ] "+
                                      SanBootView.res.getString("common.failed");
                            runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                            writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                            assignDriverStepOK = false;
                        }
                    }
                }

                // 将当前不需要的target的lunmap去掉
                size = oldBootVerList.bootVerList.size();
                if( size > 0 ){
                    for( i=0; i<size; i++ ){
                        BindOfDiskLabelAndTid binder1 = (BindOfDiskLabelAndTid)oldBootVerList.bootVerList.get(i);
                        tid = binder1.getTid();
                        if( isRealTgt( tid ) ) continue; // 不去掉real target volume的lunmap,不管它是否被选择恢复

                        if( !chkLunMap( tid ) ){
                            view.initor.mdb.delLunMap( tid, ip,"255.255.255.255", "rw" );
                        }
                    }

                    view.initor.mdb.listTargetDisk( ip, port );
                }

                // 为所有未恢复的本地盘分配盘符(如果出错，则不报告错误，因为在其他机器上或MAC上可能没有这些本地盘)
                size = oldList.size();
                for( i=0; i<size; i++ ){
                    part = (SystemPartitionForWin)oldList.elementAt( i );
                    tid1 = part.getTargetID();
                    disk = part.getDiskLabel().substring( 0,1 );

                    if( tid1 == -1 ){ // local disk
                        if( part.getDiskLabel().toUpperCase().equals("C:\\") ){
                            // 将原来为本地盘C的分区umount掉（在某些情况下，网络启动后，本地盘C又被分配了一个新盘符
                            //，但是实际上这个盘是没有用的

                            // 执行umount命令��
                            isOk = view.initor.mdb.assignDriver( ip,port, "NULL","NULL",part.volInfo,"0" );
                            if( isOk ){
                                runPane.setLogOnTabpane(
                                    SanBootView.res.getString("FailoverWizardDialog.log.umount") +" "+
                                        SanBootView.res.getString("common.ok"),
                                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                );
                            }else{
                                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.umount") +" "+
                                          SanBootView.res.getString("common.failed") + " " + view.initor.mdb.getErrorMessage();
                                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                assignDriverStepWarning = true;
                                //assignDriverStepOK = false;
                            }

                            continue;
                        }else{
                            isOk = view.initor.mdb.assignDriver( ip,port, "NULL","NULL",part.volInfo,disk );
                        }
                    }else{ // iscsi target volume
                        isOk = view.initor.mdb.assignDriver( ip,port,
                            view.initor.getTxIP(ip), ResourceCenter.ISCSI_LOGIN_PORT+"", part.iscsiVar,disk
                        );
                    }

                    if( isOk ){
                        if( tid1 == -1 ){
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ disk +" ] "+
                                    SanBootView.res.getString("common.ok"),
                                RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                            );
                        }else{
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ part.iscsiVar +" ] "+
                                    SanBootView.res.getString("common.ok"),
                                RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                            );
                        }
                    }else{
                        if( tid1 == -1 ){
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ disk +" ] "+
                                      SanBootView.res.getString("common.failed") + " "+ view.initor.mdb.getErrorMessage();
                            runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                            writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                        }else{
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ part.iscsiVar +" ] "+
                                      SanBootView.res.getString("common.failed") +" "+ view.initor.mdb.getErrorMessage();
                            runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                            writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                        }

                        assignDriverStepWarning = true;
                        //assignDriverStepOK = false;
                    }
                }
            }
            
            // 记录最新的恢复版本(对boothost而言是:修改volumemap中的vol_view_targetid;对destagent而言是修改snapusage)
            SnapUsage su = null;
            int da_id    = -1;
            int rootid   = -1;
            int disk_type = -1;
            String simpleMAC = DhcpClientInfo.getSimpleMac( this.bootMac );
SanBootView.log.debug( getClass().getName()," selected boot mac: "+ bootMac );            
            DestAgent da = getSelectedMC( bootMac ); 
            if( assignDriverStepOK ){
                snapList = selectSnapPane.getSelectedSnap1(); // booted 
                size = snapList.size();
                for( i=0; i<size; i++ ){
                    binder = (BindOfVolMapandSnap)snapList.get(i);
                    selVolMap = binder.getVolMap();
                    key = selVolMap.getVolDiskLabel();
                    disk_type = -1;

                    if( binder.snap instanceof SnapWrapper ){
                        bindsv = (BindOfSnapAndView)viewMap.get( key );
                        if( bindsv != null ){
                            tid = bindsv.view.getTargetID();
                            viewid = bindsv.view.getSnap_local_snapid();
                            snapid = ((SnapWrapper)binder.snap).snap.getSnap_local_snapid();
                            crttime = bindsv.view.getSnap_create_time();
                        }else{
                            tid = -1;
                            crttime = "";
                            snapid = -1;
                            viewid = -1;
                        }
                    }else if( binder.snap instanceof ViewWrapper ){
                        tid =((ViewWrapper)binder.snap).view.getTargetID();
                        crttime = ((ViewWrapper)binder.snap).view.getSnap_create_time();
                        viewid = ((ViewWrapper)binder.snap).view.getSnap_local_snapid();
                        snapid = -1;
                    }else if( binder.snap instanceof CloneDiskWrapper ){
                        tid = ((CloneDiskWrapper)binder.snap).cloneDisk.getTarget_id();
                        crttime = ((CloneDiskWrapper)binder.snap).cloneDisk.getCrt_time();
                        viewid = -2;
                        snapid = -1;
                        disk_type = VolumeMap.DISK_TYPE_CLONE_DISK;
                    }else{ // VolumeMap
                        tid =((VolumeMapWrapper)binder.snap).volMap.getVolTargetID();
                        crttime="";
                        viewid = -1;
                        snapid = -1;
                        disk_type = VolumeMap.DISK_TYPE_VOLUME;
                    }
                    
                    if( ( netBootedHost != null ) && ( host.getID() == netBootedHost.getID() ) ){
                        // 用户从下拉列表中选择了网络启动的物理机器，并且和初始化的原机一样
                        if( binder.isSel ){
                            if( !this.isSwitchDisk ){
                                isOk = view.initor.mdb.modOneVolumeMap1( selVolMap.getVolName(),tid,crttime,disk_type );
                            }else{
                                isOk = view.initor.mdb.modOneVolumeMap5( selVolMap.getVolName(),tid,crttime,disk_type );
                            }
                            if( isOk ){
                                if( !this.isSwitchDisk ){
                                    // 修改 cache中的这个 volMap的 Vol_view_targetid值
                                    selVolMap.setVol_view_targetid( tid );
                                    selVolMap.setLastGoodBootInfo( crttime );
                                    selVolMap.setLast_goog_boot_disk_type( disk_type );
                                }else{
                                    selVolMap.setSwitch_last_good_verison( tid );
                                    selVolMap.setSwitch_last_good_info( crttime );
                                    selVolMap.setSwitch_last_good_disk_type( disk_type );
                                }
                                runPane.setLogOnTabpane(
                                    SanBootView.res.getString("InitBootHostWizardDialog.log.modVolMap") +" "+
                                        selVolMap.getVolName() + " " +
                                        SanBootView.res.getString("common.ok"), 
                                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                );
                            }else{
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modVolMap")+" "+
                                            selVolMap.getVolName() + " " +
                                            SanBootView.res.getString("common.failed");
                                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                assignDriverStepOK = false;
                            }
                        }else{
                            if( !this.isSwitchDisk ){
                                isOk = view.initor.mdb.modOneVolumeMap1( selVolMap.getVolName(), -1,"",disk_type );
                            }else{
                                isOk = view.initor.mdb.modOneVolumeMap5( selVolMap.getVolName(), -1,"",disk_type );
                            }
                            if( isOk ){
                                if( !this.isSwitchDisk ){
                                    // 修改 cache中的这个 volMap的 Vol_view_targetid值
                                    selVolMap.setVol_view_targetid( -1 );
                                    selVolMap.setLastGoodBootInfo("");
                                    selVolMap.setLast_goog_boot_disk_type( disk_type );
                                }else{
                                    selVolMap.setSwitch_last_good_verison( -1 );
                                    selVolMap.setSwitch_last_good_info( "" );
                                    selVolMap.setSwitch_last_good_disk_type( disk_type );
                                }
                                runPane.setLogOnTabpane(
                                    SanBootView.res.getString("InitBootHostWizardDialog.log.modVolMap") +" "+
                                        selVolMap.getVolName() + " " +
                                        SanBootView.res.getString("common.ok"), 
                                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                );
                            }else{
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modVolMap")+" "+
                                            selVolMap.getVolName() + " " +
                                            SanBootView.res.getString("common.failed");
                                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                assignDriverStepOK = false;
                            }
                        }
                    }else{
                        // 用户指定了网卡地址或要进行网络启动的主机和初始化的原机不一样
                        if( da == null ){
                            if( newDa != null ){
                                da_id = newDa.getDst_agent_id();
                            }else{
                                newDa = new DestAgent(
                                            -1,
                                            ip,
                                            port,
                                            host.getOS(),
                                            simpleMAC,
                                            "",
                                            BootHost.PROTECT_TYPE_MTPP
                                        );
                                if( view.initor.mdb.addNBH( newDa ) ){
                                    newDa.setDst_agent_id( view.initor.mdb.getNewId() );
                                    view.initor.mdb.addNBHIntoCache( newDa );
                                    da_id = newDa.getDst_agent_id();
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("FailoverWizardDialog.log.addNBH") +" "+
                                            SanBootView.res.getString("common.ok"), 
                                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                    );
                                }else{
                                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.addNBH")+" "+
                                                SanBootView.res.getString("common.failed");
                                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                    assignDriverStepOK = false;
                                }
                            }
                        }else{
                            da_id = da.getDst_agent_id();
                            if( !da.getIP().equals( ip ) ){
                                if( view.initor.mdb.modNBH( da_id,ip ) ){
                                    da.setDst_agent_ip( ip );
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("FailoverWizardDialog.log.modNBH") +" "+
                                            SanBootView.res.getString("common.ok"), 
                                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                    );
                                }else{
                                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.modNBH")+" "+
                                                SanBootView.res.getString("common.failed");
                                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                    assignDriverStepOK = false;
                                }
                            }
                        }
                        
SanBootView.log.info( getClass().getName()," (add snap-usage)destAgent id: " + da_id );                        
                        if( da_id != -1 ){
                            rootid = selVolMap.getVol_rootid();
                            su = view.initor.mdb.getSnapUsageOnSomething( da_id, rootid, key );
                            if( !binder.isSel ){
                                tid = -1;
                                crttime ="";
                            }
                            
                            if( su == null ){
                                su = new SnapUsage(
                                            -1,
                                            da_id, 
                                            selVolMap.getVol_rootid(),
                                            snapid,
                                            viewid,
                                            key,
                                            tid,
                                            crttime
                                        );
                                if( view.initor.mdb.addMSU( su ) ) {
                                    su.setUsage_id( view.initor.mdb.getNewId() );
                                    view.initor.mdb.addMSUIntoCache( su );
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("FailoverWizardDialog.log.addSU") +" "+
                                            SanBootView.res.getString("common.ok"), 
                                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                    );
                                }else{
                                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.addSU")+" "+
                                                SanBootView.res.getString("common.failed");
                                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                    assignDriverStepOK = false;
                                }
                            }else{
                                if( view.initor.mdb.modMSU( su.getUsage_id(),snapid,viewid,tid,crttime ) ){
                                    su.setSnap_local_id( snapid );
                                    su.setSnap_view_local_id( viewid );
                                    su.setSnapTid( tid );
                                    su.setCrtTime( crttime );
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("FailoverWizardDialog.log.modSU") +" "+
                                            SanBootView.res.getString("common.ok"), 
                                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                    );
                                }else{
                                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.modSU")+" "+
                                                SanBootView.res.getString("common.failed");
                                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                    assignDriverStepOK = false;
                                }
                            }
                        }
                    }        
                }
            }
            
            if( da_id > 0 ) {
                if( setDhcpPane.isAutoSetup() ){
                    view.initor.mdb.delFile( ResourceCenter.CLT_IP_CONF + "/"+ResourceCenter.PREFIX_DST_AGNT + da_id + ResourceCenter.CONF_3RD_DHCP );                          
                }else{
                    String conf = ResourceCenter.CLT_IP_CONF + "/"+ResourceCenter.PREFIX_DST_AGNT + da_id + ResourceCenter.CONF_3RD_DHCP;       
                    saveInfo( conf , "ip:"+setDhcpPane.getDhcpSetInfo().ip_3rd +"  nextsrv:"+ setDhcpPane.getDhcpSetInfo().nextServer_3rd );
                }
            }
            
            if( assignDriverStepOK ){
                if( assignDriverStepWarning ){
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_WARN ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
                    );
                }else{
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
                    );
                }
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Assign drives End ###################@@ ");

        // 6. start services
        startServStepOK = true;
        runPane.setCurTabPane( RunningTaskForDRPane.START_SERV_ROW );
SanBootView.log.info( getClass().getName()," @@#################  Start Service Begin ###################@@ ");    

        if( taskConfPane.isFinishJob( TaskConfigForFailOverPane.CONF_START_SERV_ROW ) ){
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.START_SERV_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForDRPane.START_SERV_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskForDRPane.START_SERV_ROW , 2
            );
            
            // 由于启停服务的时间不好确定，故而一律将超时时间设置为10 hours
            view.initor.mdb.setNewTimeOut( ResourceCenter.MAX_TIMEOUT );                           
            size = stopServList.size();
            for( i=0; i<size; i++ ){
                item = stopServList.elementAt( i );
                
                if( item instanceof Service ){
                    servName = ((Service)item).getServName();
                }else{
                    servName = ((ServiceMap)item).getServName();
                }
                
                retryCnt1 = 0;
                while( retryCnt1 < 3 ){
                    isOk = view.initor.mdb.doStartService( ip,port,"start",servName );
                    if( isOk ){
                        break;
                    }else{
                        retryCnt1++;
                    }
                }
                
                if( isOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailoverWizardDialog.log.startService") +" [ "+ servName +" ] "+
                            SanBootView.res.getString("common.ok"), 
                        RunningTaskForDRPane.START_SERV_ROW
                    );
                }else{
                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.startService") +" [ "+ servName +" ] "+
                              SanBootView.res.getString("common.failed");
                    runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.START_SERV_ROW );
                    writeLogBuf( errMsg, RunningTaskForDRPane.START_SERV_ROW  );
                    startServStepOK = false;
                }
            }
            
            view.initor.mdb.restoreOldTimeOut();
                                    
            if( startServStepOK ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.START_SERV_ROW , 2
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.START_SERV_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Start Service End ###################@@ ");

        rebootStepOK = true;
        if( !this.isSwitchDisk ){
            // 7. reboot host
            runPane.setCurTabPane( RunningTaskForDRPane.REBOOT_ROW );
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskForDRPane.REBOOT_ROW , 2
            );
SanBootView.log.info( getClass().getName()," @@#################  Reboot host begin ###################@@ ");

            if ( seleDRReoverMode.isAutoReboot() ){
                isOk = view.initor.mdb.rebootHost( ip,port );
                if( isOk ){
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.REBOOT_ROW , 2
                    );
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailoverWizardDialog.log.submitRebootOK"),
                        RunningTaskForDRPane.REBOOT_ROW
                    );
                }else{
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.REBOOT_ROW , 2
                    );
                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.submitRebootFailed");
                    runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.REBOOT_ROW );
                    writeLogBuf( errMsg, RunningTaskForDRPane.REBOOT_ROW  );
                    rebootStepOK = false;
                }
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.REBOOT_ROW , 2
                );
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.notreboot"),
                    RunningTaskForDRPane.REBOOT_ROW
                );
            }
SanBootView.log.info( getClass().getName()," @@#################  Reboot host End ###################@@ ");
        }

        // 判断是否全部成功
        allFinished = ( stopServStepOK && loadInfoStepOK && assignDriverStepOK && !assignDriverStepWarning && startServStepOK && rebootStepOK );
        
        // 8. 保存UWS report( 不考虑其是否成功,有可能写入server上的report库中，或者写到了GUI所在的主机上)
        recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Migration system from local disk to iSCSI End ###################@@ ");        
    }
    
    private boolean hasThisPersistentTarget( int tid ){
        Integer persistent;
        
        int size = persistentTgtList.size();
        for( int i=0; i<size; i++ ){
            persistent = (Integer)persistentTgtList.get(i);
            if( persistent.intValue() == tid ){
                persistentTgtList.remove(i);
                return true;
            }
        }
        
        return false;
    }
    
    private boolean hasThisPersistentTarget1( int tid ){
        BindOfDiskLabelAndTid binder;
        
        int size = oldBootVerList.bootVerList.size();
        for( int i=0; i<size; i++ ){
            binder = (BindOfDiskLabelAndTid)oldBootVerList.bootVerList.get( i );
            if( binder.getTid()== tid ){
                return true;
            }
        }
        
        return false;
    }
    
    private boolean chkLunMap( int tid ){
        Integer _tgt;
        
        int size = newBootVerList.size();
        for( int i=0; i<size; i++ ){
            _tgt = (Integer)newBootVerList.get(i);
            if( _tgt.intValue() == tid ){
                return true;
            }
        }
        
        return false;
    }
    
    private boolean isRealTgt( int tid ){
        int size = tgtList.size();
        for( int i=0; i<size; i++ ){
            VolumeMap vol = (VolumeMap)tgtList.elementAt(i);
            if( vol.getVolTargetID() == tid ){
                return true;
            }
        }
        
        return false;
    }

    private String getTaskMsgForSuccess(){
        if( this.selVer_info != null ){
            return this.selVer_info;
        }else{
            return SanBootView.res.getString("FailoverWizardDialog.error.drRecoverOK");
        }
    }

    private String getDhcpIP(){
        boolean useOdyDhcp = !( host.getBootMode() == BootHost.BOOT_MODE_ISCSI_HBA ) && setDhcpPane.isAutoSetup();
        DhcpClientInfo  dhcpInfo = setDhcpPane.getDhcpSetInfo();
        if( useOdyDhcp ){
            return dhcpInfo.ip;
        }else{
            if( !host.isISCSIHBABoot() ){
                return dhcpInfo.ip_3rd;
            }else{
                return selectNetBootModePane.getBootIPForIscsiHBA();
            }
        }
    }

    private void recordUWSRpt( boolean initOk ){
        String msg;
        
        UWSReport rpt = new UWSReport();

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime( date );
        
        int year  = today.get( Calendar.YEAR );
        String stime = year + "";
        int month = today.get( Calendar.MONTH ) + 1;
        if( month<10 ){
            stime+= "0" + month;
        }else{
            stime+=month;
        }
        int day   = today.get( Calendar.DAY_OF_MONTH );
        if( day <10 ){
            stime+= "0" + day;
        }else{
            stime+=day;
        }
        int hour  = today.get(Calendar.HOUR_OF_DAY);
        if( hour <10 ){
            stime+= "0" + hour;
        }else{
            stime+=hour;
        }
        int min   = today.get(Calendar.MINUTE);
        if( min <10 ){
            stime +="0"+min;
        }else{
            stime+=min;
        }
        int sec   = today.get(Calendar.SECOND);
        if( sec <10 ){
            stime+="0"+sec;
        }else{
            stime+=sec;
        }
        
        rpt.setSTime( stime ); 
        rpt.setClntName( host.getName() );

        rpt.setTaskClntId(  host.getID() );
        rpt.setTask_clnt_type(  DestAgent.TYPE_ORI_HOST );
        rpt.setTask_clnt_mac( DhcpClientInfo.getMacStr( this.bootMac ) );
        rpt.setTask_clnt_dhcp_ip( this.getDhcpIP() );

        if( this.isSwitchDisk ){
            rpt.setTType( UWSReport.TASK_TYPE_SWITCH_L2I );
        }else{
            rpt.setTType( UWSReport.TASK_TYPE_L2I );
        }
        rpt.setTResult( initOk? UWSReport.TASK_RESULT_END:UWSReport.TASK_RESULT_FAIL );
        
        msg = logBuf.toString();
        if( msg.getBytes().length > 1014 ){
            byte[] arr = msg.getBytes();
            String newmsg = new String(arr,0,1014 );
            rpt.setTaskMsg( initOk? this.getTaskMsgForSuccess() : newmsg );
        }else{
            rpt.setTaskMsg( initOk? this.getTaskMsgForSuccess() : msg );
        }
        
        String fname = generateUWSRptTmpFile( rpt.prtMe() );
        if( fname != null ){
            if( !view.initor.mdb.addReport( fname ) ){
                // save in local host 
                saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_L2I_RPT + stime );
            }
        }else{
            // save in local host
            saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_L2I_RPT + stime );
        }
    }
    
    private String generateUWSRptTmpFile( String contents ){
        String fname;
        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_USWTMP );
        if( tmpFile == null ){
            return null; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            tmpFile.delete();
            return null;
        }    
        
        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }
    
    public void saveUWSRpt( String contents,String fname ){
        try{
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File( path );
            
            f1.createNewFile();
            
            PrintWriter out = new PrintWriter( new FileWriter(f1),true );
            out.print( contents );
            out.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    private boolean overed = false;
    synchronized boolean isOver(){
        return overed;
    }

    synchronized void setOver(boolean val){
        overed = val;
    }
     
    private int phrase = 0;
    public String getPhraseIcon(){
        String str = "";
        switch( phrase ){
            case 0:
                str = "|";
                break;
            case 1:
                str = "/";
                break;
            case 2:
                str = "--";
                break;
            case 3:
                str = "\\";
                break;
            default:
                str = "|";
                break;
        }

        phrase = (phrase+1)%4;
        return str;
    }

    Runnable setVal = new Runnable(){
        public void run(){
            runPane.setTaskStatus( getPhraseIcon() +"",RunningTaskForDRPane.CONNECT_AGENT_ROW ,2 );
        }
    };
    
    Runnable process = new Runnable(){
        public void run(){
            while( !isOver() ){
                try{
                    SwingUtilities.invokeAndWait( setVal );

                    Thread.sleep(200);
                } catch( Exception e){
                    e.printStackTrace();
                }
            }
        }
    };
    
    public boolean doLoginTarget( String cltIP,int cltPort,int row,String iscsiVar ){
        boolean isOk = view.initor.mdb.loginTarget( cltIP,cltPort,iscsiVar );
        if( !isOk ){
            errMsg =  SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") + " [ "+ iscsiVar +" ]"+
                       SanBootView.res.getString("common.failed");
            runPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),row, 2
            );
        }
        
        return isOk;
    }
    
    public boolean doLogoutTarget( String cltIP,int cltPort,int row,String iscsiVar,String osDrvLetter ){
        boolean isOk = view.initor.mdb.logoutTarget( cltIP,cltPort,iscsiVar,osDrvLetter );
        if( !isOk ){
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + " [ "+ iscsiVar +" ]"+
                       SanBootView.res.getString("common.failed");
            runPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
        }else{
            runPane.setLogOnTabpane(
                SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + " [ "+ iscsiVar +" ]"+
                  SanBootView.res.getString("common.ok") ,
                row
            );
        }
        
        return isOk;
    }
    
    private DestAgent getSelectedMC( String mac ){
        ArrayList list = new ArrayList(1);
        NetCard nc = new NetCard();
        nc.mac = mac;
        list.add( nc );
        return getSelectedMC( list );
    }
    
    private DestAgent getSelectedMC( Object nc ){
        ArrayList list = new ArrayList(1);
        list.add( nc );
        return getSelectedMC( list );
    }
    
    private DestAgent getSelectedMC( ArrayList netCardList ){
        int i,j,size,size1;
        Object nc;
        NetCard wnc;
        UnixNetCard unc;
        String mac;
        DestAgent da;
        
        ArrayList netBootedHostList = view.getNetbootedHostOnHost( host.getTreeNode() );
        size = netCardList.size();
        for( i=0; i<size; i++ ){
            nc = netCardList.get(i);
            if( nc instanceof NetCard ){
                wnc = (NetCard)nc;
                mac = DhcpClientInfo.getSimpleMac( wnc.mac );
            }else{
                unc = (UnixNetCard)nc;
                mac = DhcpClientInfo.getSimpleMac( unc.mac );
            }
            
            size1 = netBootedHostList.size();
SanBootView.log.debug( getClass().getName(),"netbooted host size: "+ size1 +" mac: "+ mac );            
            for( j=0; j<size1; j++ ){
                da = (DestAgent)netBootedHostList.get(j);
                if( da.getDst_agent_mac().equals( mac ) ){
SanBootView.log.debug( getClass().getName(),"11111111111111 "+ da.getDst_agent_ip() );                      
                    return da;
                }
            }
        }
        
        return null;
    }
    
    private boolean saveInfo( String confile,String contents ){        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_IPINFO );
        if( tmpFile == null ){           
            JOptionPane.showMessageDialog(this,SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed") );
            return false; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            JOptionPane.showMessageDialog(this,SanBootView.res.getString("common.errmsg.sendFileFailed") );        
            tmpFile.delete();
            return false;
        }   
           
        tmpFile.delete();
            
        // 将tmpFile move to profile dir
        boolean isOk = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile.getName(), confile      
        );
        
        return isOk;   
    }
}

// Crtview的处理过程可以移到 realDRRecover 中去，除了C盘(和C盘的lunmap)不行
class CrtView extends Thread{
    FailoverWizardDialog diag;
    ProgressDialog pdiag;
    Object[] snaps;
    HashMap map;
    SanBootView view;
    String ip,bootMac,targetSrvName;
    BootHost host;
    int osTid = -1;
    boolean delLunMap = false; //是否要把osTid的lunmap给去掉
    boolean allFinish = true;
    boolean getSessionOk;
    boolean getSessionRealOk = false;
    boolean isNetBootOnLocalHost = true;
    boolean isSkip = false;
    StringBuffer selVer_buf; 
    
    public CrtView( 
        FailoverWizardDialog diag,
        ProgressDialog pdiag,
        Object[] snaps,
        HashMap map,
        SanBootView view,
        String bootMac,
        BootHost host,
        String ip,
        String targetSrvName,
        boolean isNetBootOnLocalHost,
        boolean isSkip
    ){
        this.diag  = diag;
        this.pdiag = pdiag;
        this.snaps = snaps;
        this.map = map;
        this.view = view;
        this.bootMac = bootMac;
        this.host = host;
        this.ip = ip;
        this.targetSrvName = targetSrvName;
        this.isNetBootOnLocalHost = isNetBootOnLocalHost;
        this.isSkip = isSkip;
    }

    Runnable close = new Runnable(){
        public void run(){
            pdiag.dispose();
        }
    };

    @Override public void run(){
        int i,tid,size;
        boolean isOk,checkSnap;
        BindOfVolMapandSnap bindvs,osvs=null;
        BindOfSnapAndView bindsv;
        Snapshot selSnap,tmpsnap;
        View selView,newView;
        VolumeMap selVolMap;
        CloneDisk selCloneDisk;
        String key,letter,viewName,args;
        
        getSessionOk = view.initor.mdb.getIscsiSessionList();
        if( getSessionOk ){
            getSessionRealOk = view.initor.mdb.getIscsiSessionIsReallyOk();
        }
        
        String bootMacForUnix = DhcpClientInfo.getMacStr( bootMac );
        String bootMacForWin  = DhcpClientInfo.getMacStrForWin( bootMac );
        String simpleMac      = NetCard.getSimpleMac( bootMacForWin );
System.out.println(" bootMac: "+ bootMac +" bootMacForUnix: "+ bootMacForUnix + " bootMacForWin: "+ bootMacForWin +" simpleMac: "+simpleMac );
        
        size = snaps.length;
        for( i=0; i<size; i++ ){
            bindvs = (BindOfVolMapandSnap)snaps[i];
            key = bindvs.getVolMap().getVolDiskLabel();
            letter = key.substring( 0,1 );
            if( letter.toUpperCase().equals("C") ){
                osvs = bindvs;
            }
            viewName = ResourceCenter.NET_START_VIEW + letter;
            bindsv = (BindOfSnapAndView)map.get( key );
            
            if( bindvs.snap instanceof SnapWrapper ){
                selSnap = ((SnapWrapper)bindvs.snap).snap; 
                
                // 检查snap number是否合适���
                checkSnap = diag.selectSnapPane.checkSnapNumber( bindvs.getVolMap().getVolDiskLabel(), selSnap.getSnap_root_id(),selSnap.getSnap_local_snapid() );
                if( !checkSnap ){
                    allFinish = false;
                    break;
                }
                
                if( bindvs.isSel ){
                    if( bindsv != null ){ // hashmap中已经有了
                        if( bindsv.snap instanceof Snapshot ){
                            tmpsnap = (Snapshot)bindsv.snap;
                            if( tmpsnap.getSnap_root_id() == selSnap.getSnap_root_id() &&
                                tmpsnap.getSnap_local_snapid() == selSnap.getSnap_local_snapid() ){
                                // 之前已经为该快照生成view了
                            }else{
                                // 之前为该盘生成的view不对应现在所选的快照，删除它，然后再创建一个
                                tid = bindsv.view.getTargetID();
                                delLunMap( tid );
                                view.initor.mdb.delView( bindsv.view ); // 不管结果
                                map.remove( key );
                                
                                isOk = view.initor.mdb.addView( viewName, selSnap.getSnap_root_id(), selSnap.getSnap_local_snapid() );
                                if( !isOk ){
                                    JOptionPane.showMessageDialog(pdiag,
                                        SanBootView.res.getString("FailoverWizardDialog.error.crtView")+" : [ SnapID: "+selSnap.getCreateTimeStr()+" ]"
                                    );
                                    allFinish = false;
                                }else{
                                    newView = view.initor.mdb.getCrtView();
                                    isOk = addLunMap( newView.getTargetID() );
                                    if( !isOk ){
                                        JOptionPane.showMessageDialog(pdiag,
                                            SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                                        );
                                        allFinish = false;
                                        view.initor.mdb.delView( newView );
                                    }else{
                                        bindsv = new BindOfSnapAndView();
                                        bindsv.snap = selSnap;
                                        bindsv.view = newView;
                                        map.put( key, bindsv );
                                    }
                                }
                            }
                        }else{
                            map.remove( key );
                            
                            isOk = view.initor.mdb.addView( viewName, selSnap.getSnap_root_id(), selSnap.getSnap_local_snapid() );
                            if( !isOk ){
                                JOptionPane.showMessageDialog(pdiag,
                                    SanBootView.res.getString("FailoverWizardDialog.error.crtView")+" : [ SnapID: "+selSnap.getCreateTimeStr()+" ]"
                                );
                                allFinish = false;
                            }else{
                                newView = view.initor.mdb.getCrtView();
                                isOk = addLunMap( newView.getTargetID() );
                                if( !isOk ){
                                    JOptionPane.showMessageDialog(pdiag,
                                        SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                                    );
                                    allFinish = false;
                                    view.initor.mdb.delView( newView );
                                }else{
                                    bindsv = new BindOfSnapAndView();
                                    bindsv.snap = selSnap;
                                    bindsv.view = newView;
                                    map.put( key, bindsv );
                                }
                            }
                        }    
                    }else{
                        // 之前没有为该盘生成view,创建一个
                        isOk = view.initor.mdb.addView( viewName, selSnap.getSnap_root_id(), selSnap.getSnap_local_snapid() );
                        if( !isOk ){
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("FailoverWizardDialog.error.crtView")+" : [ SnapID: "+selSnap.getCreateTimeStr()+" ]"
                            );
                            allFinish = false;
                        }else{
                            newView = view.initor.mdb.getCrtView();
                            isOk = addLunMap( newView.getTargetID() );
                            if( !isOk ){
                                JOptionPane.showMessageDialog(pdiag,
                                    SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                                );
                                allFinish = false;
                                view.initor.mdb.delView( newView );
                            }else{
                                bindsv = new BindOfSnapAndView();
                                bindsv.snap = selSnap;
                                bindsv.view = newView;
                                map.put( key, bindsv );
                            }
                        }
                    }
                }else{ //  没有选择恢复该盘，将之前为它创建的view删除（如果有的话）
                    if( bindsv != null ){
                        // 删除这个view
                        if( bindsv.snap instanceof Snapshot ){
                            tid = bindsv.view.getTargetID();
                            if( delLunMap( tid ) && view.initor.mdb.delView( bindsv.view ) ){
                                map.remove( key );
                            }
                        }
                    }
                }
            }else if( bindvs.snap instanceof ViewWrapper ){
                selView = ( (ViewWrapper)bindvs.snap ).view;
                
                // 检查snap number是否合适
                checkSnap = diag.selectSnapPane.checkSnapNumber( bindvs.getVolMap().getVolDiskLabel(),-1,-1 );
                if( !checkSnap ){
                    allFinish = false;
                    break;
                }
                
                if( bindvs.isSel ){    
                    if( bindsv != null ){ // hashmap中已经有了
                        if( bindsv.snap instanceof Snapshot ){
                            // 删除之前创建的这个view
                            tid = bindsv.view.getTargetID();
                            delLunMap( tid );
                            view.initor.mdb.delView( bindsv.view ); // 不管结果
                        }
                        
                        map.remove( key );
                        
                        checkViewUsage( selView.getTargetID() );
                        if( addLunMap( selView.getTargetID() ) ){
                            bindsv = new BindOfSnapAndView();
                            bindsv.snap = selView;
                            bindsv.view = null;
                            map.put( key, bindsv );
                        }else{
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                            );
                            allFinish = false;
                        }
                    }else{
                        checkViewUsage( selView.getTargetID() );
                        if( addLunMap( selView.getTargetID() ) ){
                            bindsv = new BindOfSnapAndView();
                            bindsv.snap = selView;
                            bindsv.view = null;
                            map.put( key, bindsv );
                        }else{
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                            );
                            allFinish = false;
                        }
                    }
                }else{ //  没有选择恢复该盘，将之前为它创建的view删除（如果有的话）
                    if( bindsv != null ){
                        // 删除这个view
                        if( bindsv.snap instanceof Snapshot ){
                            tid = bindsv.view.getTargetID();
                            if( delLunMap( tid ) && view.initor.mdb.delView( bindsv.view ) ){
                                map.remove( key );
                            }
                        }
                    }
                }
            }else if( bindvs.snap instanceof CloneDiskWrapper ){
                selCloneDisk = ((CloneDiskWrapper)bindvs.snap).cloneDisk;

                if( bindvs.isSel ){
                    if( bindsv != null ){ // hashmap中已经有了
                        if( bindsv.snap instanceof Snapshot ){
                            // 删除之前创建的这个view
                            tid = bindsv.view.getTargetID();
                            delLunMap( tid );
                            view.initor.mdb.delView( bindsv.view ); // 不管结果
                        }

                        map.remove( key );
                        checkViewUsage( selCloneDisk.getTarget_id() );

                        bindsv = new BindOfSnapAndView();
                        bindsv.snap = selCloneDisk;
                        bindsv.view = null;
                        map.put( key, bindsv );
                    }else{
                        checkViewUsage( selCloneDisk.getTarget_id() );
                        bindsv = new BindOfSnapAndView();
                        bindsv.snap = selCloneDisk;
                        bindsv.view = null;
                        map.put( key, bindsv );
                    }
                }else{ //  没有选择恢复该盘，将之前为它创建的view删除（如果有的话）
                    if( bindsv != null ){
                        // 删除这个view
                        if( bindsv.snap instanceof Snapshot ){
                            tid = bindsv.view.getTargetID();
                            if( delLunMap(tid) && view.initor.mdb.delView( bindsv.view ) ){
                                map.remove( key );
                            }
                        }
                    }
                }
            }else{ // VolumeMapWrapper
                selVolMap = ((VolumeMapWrapper)bindvs.snap).volMap;
                
                // 检查snap number是否合适��
                checkSnap = diag.selectSnapPane.checkSnapNumber( bindvs.getVolMap().getVolDiskLabel(), -1,-1 );
                if( !checkSnap ){
                    allFinish = false;
                    break;
                }
                
                if( bindvs.isSel ){    
                    if( bindsv != null ){ // hashmap中已经有了
                        if( bindsv.snap instanceof Snapshot ){
                            // 删除之前创建的这个view
                            tid = bindsv.view.getTargetID();
                            delLunMap( tid );
                            view.initor.mdb.delView( bindsv.view ); // 不管结果
                        }
                        
                        map.remove( key );
                        checkViewUsage( selVolMap.getVolTargetID() );
                        
                        bindsv = new BindOfSnapAndView();
                        bindsv.snap = selVolMap;
                        bindsv.view = null;
                        map.put( key, bindsv );
                    }else{
                        checkViewUsage( selVolMap.getVolTargetID() );
                        bindsv = new BindOfSnapAndView();
                        bindsv.snap = selVolMap;
                        bindsv.view = null;
                        map.put( key, bindsv );
                    }
                }else{ //  没有选择恢复该盘，将之前为它创建的view删除（如果有的话）
                    if( bindsv != null ){
                        // 删除这个view
                        if( bindsv.snap instanceof Snapshot ){
                            tid = bindsv.view.getTargetID();
                            if( delLunMap(tid) && view.initor.mdb.delView( bindsv.view ) ){
                                map.remove( key );
                            }
                        }
                    }
                }
            }
        }
        
        // 记录最后一次所选网络启动版本
        if( allFinish ){
            if( !isSkip ){
                setLastSelBootVersion();
            }else{
                setLastSelSwitchVersion();
            }
        }
        
        // 修改iboot启动 target id
        if( allFinish && osvs != null && !isSkip ){
            if( osvs.snap instanceof VolumeMapWrapper ){
                osTid = ((VolumeMapWrapper)osvs.snap).volMap.getVolTargetID();    
            }else if( osvs.snap instanceof SnapWrapper ){
                bindsv = ( BindOfSnapAndView )map.get( osvs.getVolMap().getVolDiskLabel() );
                osTid = bindsv.view.getTargetID();  // 一定在map中有
                delLunMap = true;
            }else if( osvs.snap instanceof CloneDiskWrapper ){
                osTid = ((CloneDiskWrapper)osvs.snap).cloneDisk.getTarget_id();
            }else{ // view
                osTid = ((ViewWrapper)osvs.snap).view.getTargetID();
            }
            
            if( !addLunMapForOS( osTid ) ){ // 必须为C盘事先进行lunmap
                JOptionPane.showMessageDialog(pdiag,
                    SanBootView.res.getString("FailoverWizardDialog.error.addLunmapForOS")
                );
                allFinish = false;
            }else{
                if( host.isEmBoot() ){
                    isOk = view.initor.mdb.listIboot();
                    if( isOk ){
                        if( view.initor.mdb.getFromVectorOnMac( simpleMac ) != null ){
                            isOk = view.initor.mdb.delIboot( simpleMac );
                            isOk = view.initor.mdb.addIboot( simpleMac, view.initor.getTxIP(host.getIP()), osTid );
                        }else{
                            isOk = view.initor.mdb.addIboot( simpleMac, view.initor.getTxIP(host.getIP()), osTid );
                        }

                        if( isOk ){
                            isOk = view.initor.mdb.listIboot();
                            if( isOk ){
                                if( view.initor.mdb.getFromVectorOnMac( simpleMac ) == null ){
SanBootView.log.error( getClass().getName(),"Can't find record from iboot config abount MAC: "+ simpleMac );                   
                                    JOptionPane.showMessageDialog(pdiag,
                                        SanBootView.res.getString("FailoverWizardDialog.log.modBootRec")
                                    );
                                    allFinish = false;
                                }else{
                                    if( !view.initor.mdb.getFromVectorOnMac( simpleMac ).options.equals("000000a0") ){
SanBootView.log.error( getClass().getName(),"iboot option is bad : "+ simpleMac );                                    
                                        JOptionPane.showMessageDialog(pdiag,
                                            SanBootView.res.getString("FailoverWizardDialog.log.modBootRec")
                                        );
                                        allFinish = false;
                                    }
                                }
                            }else{
                                JOptionPane.showMessageDialog(pdiag,
                                    SanBootView.res.getString("FailoverWizardDialog.log.modBootRec")
                                );
                                allFinish = false;
                            }
                        }else{
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("FailoverWizardDialog.log.modBootRec")
                            );
                            allFinish = false;
                        }
                    }else{
                        JOptionPane.showMessageDialog(pdiag,
                            SanBootView.res.getString("FailoverWizardDialog.log.modBootRec")
                        );
                        allFinish = false;
                    }
                }
            }
        }
        
        if( allFinish && !isSkip ){
            boolean useOdyDhcp = !( host.getBootMode() == BootHost.BOOT_MODE_ISCSI_HBA ) && diag.setDhcpPane.isAutoSetup();            
            DhcpClientInfo  dhcpInfo = diag.setDhcpPane.getDhcpSetInfo();
            if( useOdyDhcp ){
                // 先删除这个dhcp conf
                isOk = view.initor.dhcpdb.dhcpOperation(
                    ResourceCenter.BIN_DIR + "dhcp_set.sh delcli -p " + simpleMac
                );
                if( isOk ){
                    try{
                        Thread.sleep( 5000 );// 睡5秒钟，否则连续执行delcli和addcli会造成dhcpd起不来
                    }catch(Exception ex){}
                    
                    boolean hasdns = ( !dhcpInfo.dns.equals("") );
                    boolean hasgw = ( !dhcpInfo.defgw.equals("") );
                    String ibootSrv = dhcpInfo.nextServer;
                    args = "";
                    if( hasdns ){
                        args+=" -d " +dhcpInfo.dns;
                    }
                    if( hasgw ){
                        args+=" -g "+dhcpInfo.defgw;
                    }         
                    args += " -i "+dhcpInfo.ip + " -p " + simpleMac +" -s "+dhcpInfo.subnet + " -x "+ibootSrv + " -ostype windows";
                    if( view.getNetBootMode() == BootHost.BOOT_MODE_IBOOT ){
                        String iboot_dhcp_ip1 ="";
                        if( diag.setDhcpPane.isAutoSetup() ){
                            iboot_dhcp_ip1 = dhcpInfo.ip;
                        }else{
                            iboot_dhcp_ip1 = dhcpInfo.ip_3rd;
                        }
                        view.initor.mdb.addLunMap( osTid, iboot_dhcp_ip1, "255.255.255.255", "rw", "", "", "", "" );
                        String tn = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + osTid;
                        args += " -boottype iboot  -bootserverip " + ibootSrv +" -boottargetid " + tn;
                    }
                    if( view.getNetBootMode() == BootHost.BOOT_MODE_WINDOWSPE){
                        args += " -boottype peboot";
                    }
                    
                    isOk = view.initor.dhcpdb.dhcpOperation(
                        ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args
                    ); 
                    if( isOk ){
                        isOk = view.initor.dhcpdb.getClientFromDhcp();
                        if( isOk ){
                            if( view.initor.dhcpdb.getSelClntOnMac( bootMacForUnix ) == null ){
SanBootView.log.error( getClass().getName(),"Error: not found record in dhcp config about MAC: " + bootMacForUnix );  
                                JOptionPane.showMessageDialog(pdiag,
                                    SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                          SanBootView.res.getString("common.failed")
                                );
                                allFinish = false;
                            }else{
                                if( isNetBootOnLocalHost ){
                                    if( !host.isUseOdyDhcp() ){
                                        host.setUseOdyDhcp();
                                        view.initor.mdb.modOneBootHost2( host.getID(),host.getStopAllBaseServFlag() );
                                    }
                                }else{ // is a destagent
                                    //view.initor.mdb.delFile( ResourceCenter.CLT_IP_CONF + "/"+ResourceCenter.PREFIX_DST_AGNT + da_id + ResourceCenter.CONF_3RD_DHCP );
                                }
                            }
                        }else{
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                      SanBootView.res.getString("common.failed")
                            );
                            allFinish = false;
                        }
                    }else{
                        JOptionPane.showMessageDialog(pdiag,
                            SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                  SanBootView.res.getString("common.failed")
                        );
                        allFinish = false;
                    }
                }else{
                    JOptionPane.showMessageDialog(pdiag,
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                              SanBootView.res.getString("common.failed")
                    );
                    allFinish = false;
                }
            }else{
                // save the 3rd dhcp setup info for original host.             
                if( isNetBootOnLocalHost ){
                    String hostip_3rd  = "";
                    String nextsrv_3rd = "";
                    if( !host.isISCSIHBABoot() ){
                        hostip_3rd  = dhcpInfo.ip_3rd;
                        nextsrv_3rd = dhcpInfo.nextServer_3rd;
                    }else{
                        hostip_3rd  = diag.selectNetBootModePane.getBootIPForIscsiHBA();
                        nextsrv_3rd = view.initor.txIp;  
                    }
                    
                    String conf = ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_3RD_DHCP;
                    saveInfo( conf , "ip:" + hostip_3rd + "  nextsrv:" + nextsrv_3rd );
                    if( host.isUseOdyDhcp() ){
                        host.clearUseOdyDhcp();
                        view.initor.mdb.modOneBootHost2( host.getID(),host.getStopAllBaseServFlag() );
                    }
                }
            }
        }
        
        try{
            SwingUtilities.invokeAndWait( close );
        }catch( Exception ex ){
            ex.printStackTrace();
        }
    }

    // 记录 vol_switch_last_sel_version
    // 对boothost而言是: 修改volumemap中的vol_switch_last_sel_version; 不管destagent
    private void setLastSelSwitchVersion(){
        int i, tid,disk_type=-1;
        String key,crttime;
        BindOfVolMapandSnap binder;
        BindOfSnapAndView bindsv;
        VolumeMap selVolMap;
        boolean isOk;

        if( !isNetBootOnLocalHost ) return;

        for( i=0; i<snaps.length; i++ ){
            binder = (BindOfVolMapandSnap)snaps[i];
            selVolMap = binder.getVolMap();
            key = selVolMap.getVolDiskLabel();
            disk_type = -1;

            if( binder.snap instanceof SnapWrapper ){
                bindsv = (BindOfSnapAndView)map.get( key );
                if( bindsv != null ){
                    tid = bindsv.view.getTargetID();
                    crttime = bindsv.view.getSnap_create_time();
                }else{
                    tid = -1;
                    crttime = "";
                }
            }else if( binder.snap instanceof ViewWrapper ){
                tid =((ViewWrapper)binder.snap).view.getTargetID();
                crttime = ((ViewWrapper)binder.snap).view.getSnap_create_time();
            }else if( binder.snap instanceof CloneDiskWrapper ){
                tid =((CloneDiskWrapper)binder.snap).cloneDisk.getTarget_id();
                crttime = ((CloneDiskWrapper)binder.snap).cloneDisk.getCrt_time();
                disk_type = VolumeMap.DISK_TYPE_CLONE_DISK;
            }else{
                // impossible to com here
                continue;
            }

            // 用户从下拉列表中选择了网络启动的物理机器，并且和初始化的原机一样
            if( binder.isSel ){
                isOk = view.initor.mdb.modOneVolumeMap4( selVolMap.getVolName(),tid,crttime,disk_type );
                if( isOk ){
                    // 修改 cache中的这个 volMap
                    selVolMap.setSwitch_last_sel_version( tid );
                    selVolMap.setSwitch_last_sel_info( crttime );
                    selVolMap.setSwitch_last_sel_disk_type( disk_type );
                }else{
                    JOptionPane.showMessageDialog(pdiag,
                        SanBootView.res.getString("FailoverWizardDialog.error.modLastSelSwitchVer")
                    );
                    allFinish = false;
                }
            }else{
                isOk = view.initor.mdb.modOneVolumeMap4( selVolMap.getVolName(), -1,"",disk_type );
                if( isOk ){
                    // 修改 cache中的这个 volMap
                    selVolMap.setSwitch_last_sel_version( -1 );
                    selVolMap.setSwitch_last_sel_info( "" );
                    selVolMap.setSwitch_last_sel_disk_type( disk_type );
                }else{
                    JOptionPane.showMessageDialog(pdiag,
                        SanBootView.res.getString("FailoverWizardDialog.error.modLastSelSwitchVer")
                    );
                    allFinish = false;
                }
            }
        }
    }

    // 记录last_select_boot_version
    // 对boothost而言是: 修改volumemap中的vol_last_sel_boot_version;不管destagent
    private void setLastSelBootVersion(){
        int i, tid,disk_type=-1;
        String key,crttime;
        BindOfVolMapandSnap binder;
        BindOfSnapAndView bindsv;
        VolumeMap selVolMap;
        boolean isOk,isFirst=true;
        
        if( !isNetBootOnLocalHost ) return;

        selVer_buf = new StringBuffer();

        for( i=0; i<snaps.length; i++ ){
            binder = (BindOfVolMapandSnap)snaps[i];
            selVolMap = binder.getVolMap();
            key = selVolMap.getVolDiskLabel();
            disk_type = -1;

            if( binder.snap instanceof SnapWrapper ){
                bindsv = (BindOfSnapAndView)map.get( key );
                if( bindsv != null ){
                    tid = bindsv.view.getTargetID();
                    crttime = bindsv.view.getSnap_create_time();
                }else{
                    tid = -1;
                    crttime = "";
                }
            }else if( binder.snap instanceof ViewWrapper ){
                tid =((ViewWrapper)binder.snap).view.getTargetID();
                crttime = ((ViewWrapper)binder.snap).view.getSnap_create_time();
            }else if( binder.snap instanceof CloneDiskWrapper ){
                tid =((CloneDiskWrapper)binder.snap).cloneDisk.getTarget_id();
                crttime = ((CloneDiskWrapper)binder.snap).cloneDisk.getCrt_time();
                disk_type = VolumeMap.DISK_TYPE_CLONE_DISK;
            }else{ // Volmap
                tid =((VolumeMapWrapper)binder.snap).volMap.getVolTargetID();
                crttime="";
                disk_type = VolumeMap.DISK_TYPE_VOLUME;
            }

            // 用户从下拉列表中选择了网络启动的物理机器，并且和初始化的原机一样
            if( binder.isSel ){
                isOk = view.initor.mdb.modOneVolumeMap2( selVolMap.getVolName(),"",tid,crttime,disk_type );
                if( isOk ){
                    // 修改 cache中的这个 volMap的 Vol_view_targetid值
                    selVolMap.setVol_last_sel_boot_version( tid );
                    selVolMap.setVol_last_sel_boot_info( crttime );
                    selVolMap.setLast_sel_boot_disk_type( disk_type );
                }else{
                    JOptionPane.showMessageDialog(pdiag,
                        SanBootView.res.getString("FailoverWizardDialog.error.modLastSelBootVer")
                    );
                    allFinish = false;
                }
            }else{
                tid = -1;
                isOk = view.initor.mdb.modOneVolumeMap2( selVolMap.getVolName(), "",-1,"",disk_type );
                if( isOk ){
                    // 修改 cache中的这个 volMap的 Vol_view_targetid值
                    selVolMap.setVol_last_sel_boot_version( -1 );
                    selVolMap.setVol_last_sel_boot_info("");
                    selVolMap.setLast_sel_boot_disk_type( disk_type );
                }else{
                    JOptionPane.showMessageDialog(pdiag,
                        SanBootView.res.getString("FailoverWizardDialog.error.modLastSelBootVer")
                    );
                    allFinish = false;
                }
            }

            // 记录selected version for sdhm
            if( isFirst ){
                this.selVer_buf.append( selVolMap.getVolDiskLabel().substring(0,1) + "-?" + tid );
                isFirst = false;
            }else{
                this.selVer_buf.append( "-?" + selVolMap.getVolDiskLabel().substring(0,1) + "-?" + tid );
            }
        }
    }
    
    private boolean saveInfo( String confile,String contents ){        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_IPINFO );
        if( tmpFile == null ){           
            JOptionPane.showMessageDialog(pdiag,SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed") );
            return false; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            JOptionPane.showMessageDialog(pdiag,SanBootView.res.getString("common.errmsg.sendFileFailed") );        
            tmpFile.delete();
            return false;
        }   
           
        tmpFile.delete();
            
        // 将tmpFile move to profile dir
        boolean isOk = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile.getName(), confile      
        );
        
        return isOk;   
    }
    
    public int getOSTid(){
        return osTid;
    }
    
    public boolean isShouldRmOsTidLunMap(){
        return delLunMap;
    }

    public String getSelVersionInfo(){
        if( this.selVer_buf != null ){
            return selVer_buf.toString();
        }else{
            return "";
        }
    }
    
    private void checkViewUsage( int tid ){
        if( !this.isSkip ){ // 网络盘切换时，不做checkViewUsage
            if( getSessionOk ){
                ISCSISessionObj session = view.initor.mdb.isExistActSessionOnTid( tid,ip );
                if( session != null ){
                    JOptionPane.showMessageDialog(pdiag,
                        SanBootView.res.getString("FailoverWizardDialog.error.existActiveSession") + tid
                    );
                    allFinish = false;
                }else{
                    if( !getSessionRealOk ){
                        if( !makeSureViewUsage( tid ) ){
                            allFinish = false;
                        }
                    }
                }
            }else{
                if( !makeSureViewUsage( tid ) ){
                    allFinish = false;
                }
            }
        }
    }
    
    private boolean makeSureViewUsage( int tid ){
        int ret = JOptionPane.showConfirmDialog(
            view,
            SanBootView.res.getString("FailoverWizardDialog.confirm2") +" [ " + tid + " ] " +
                SanBootView.res.getString("FailoverWizardDialog.confirm3"),
            SanBootView.res.getString("common.confirm"),  //"Confirm",
            JOptionPane.OK_CANCEL_OPTION
        );
        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
            return false;
        }else{
            return true;
        }
    }
    
    private boolean addLunMapForOS( int tid ){
        return view.initor.mdb.addLunMap( tid, ip, "255.255.255.255", "rw", "", "", "", "" );
    }
    
    private boolean addLunMap( int tid ){
        // 必须在realDRRecover中做，否则用户点击了cancel键，就会在agent的initiator中出现不必要的tgt disk
        return true;
        //return view.initor.mdb.addLunMap( tid, ip, "255.255.255.255", "rw", "", "", "", "" );
    }

    private boolean delLunMap( int tid ){
        // 必须在realDRRecover中做，否则用户点击了cancel键，就会在agent的initiator中出现不必要的tgt disk
        return true;
        //return view.initor.mdb.delLunMap( tid, ip,"255.255.255.255", "rw" );
    }
}
