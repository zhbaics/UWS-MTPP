/*
 * InitBootHostWizardDialog.java
 *
 * Created on 2006/12/29,PM 9:51
 */
package guisanboot.ui;

import javax.swing.*;
import javax.swing.tree.*;
import java.util.*;
import java.io.*;
import java.util.regex.Pattern;

import guisanboot.data.*;
import guisanboot.datadup.cmd.RunBackup;
import guisanboot.res.*;
import guisanboot.datadup.data.BackupClient;
import guisanboot.datadup.data.UniProBackup;
import guisanboot.datadup.data.UniProDrive;
import guisanboot.datadup.data.UniProHeader;
import guisanboot.datadup.data.UniProIBoot;
import guisanboot.datadup.data.UniProfile;
import guisanboot.datadup.ui.DuplicationStrategyPane;
import guisanboot.datadup.ui.GetDataDupProcess;
import guisanboot.datadup.ui.viewobj.ChiefProfile;
import guisanboot.datadup.ui.EditProfileDialog;
import guisanboot.op.init.SelectNetBootModePane;
import guisanboot.unlimitedIncMj.entity.ChiefCloneDiskList;
import guisanboot.unlimitedIncMj.entity.ChiefLocalUnLimitedIncMirrorVolList;
import guisanboot.unlimitedIncMj.model.table.CloneDisk;
import mylib.UI.*;
import mylib.tool.Check;


/**
 *
 * @author Administrator
 * Windows客户端逻辑初始化向导
 */
public class InitBootHostWizardDialog extends WizardDialogSample implements RecordUWSRptable, InitHostable {

    SelectBootHostPane selectHostPane;
    SelectProtectedSysVolPane selectSysVolPane;
    SelectServicePane selectServPane;
    SelectNetBootModePane selectNetBootModePane;
    SelectNetCardPane selectNetCardPane;
    SetDhcpPane setDhcpPane;
    DuplicationStrategyPane dupStrgyPane;
    RunningTaskPane runningTaskPane;
    private Hashtable partOnClnt = new Hashtable();
    private Hashtable cardOnClnt = new Hashtable();
    private Hashtable servOnClnt = new Hashtable();
    private Hashtable bmodOnClnt = new Hashtable();
    private Hashtable dhcpOnClnt = new Hashtable();
    private Hashtable profOnClnt = new Hashtable();
    private Hashtable ncCache = new Hashtable();
    SanBootView view;
    private String partitionContent;
    private String diskDetailInfo;
    GetPartitionOnClnt getPart;
    boolean hasEnoughSpace;

    private static String txIP;

    /**
     * Creates new form InitBootHostWizardDialog
     */
    public InitBootHostWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public InitBootHostWizardDialog(SanBootView view, BootHost selHost, boolean hasEnoughSpace) {
        super(view);
        myInit(view, selHost, hasEnoughSpace);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InitBootHostWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }

    ////GEN-BEGIN:variables
    ////GEN-END:variables
    private void myInit(SanBootView _view, BootHost selHost, boolean hasEnoughSpace) {
        view = _view;
        this.hasEnoughSpace = hasEnoughSpace;

        setupLanguage1();
        enableBackButton(false);

        setWizardTipText(
                SanBootView.res.getString("WizardDialogSample.wizardText"),
                SanBootView.res.getString("InitBootHostWizardDialog.wizardText1"));

        setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title"));

        selectHostPane = new SelectBootHostPane(view, 0, selHost);
        selectHostPane.setWizardDialogSample(this);
        selectSysVolPane = new SelectProtectedSysVolPane(view);
        selectSysVolPane.setWizardDialogSample(this);
        selectSysVolPane.setHasEnoughSpaceFlag(this.hasEnoughSpace);
        selectServPane = new SelectServicePane(view);
        selectNetBootModePane = new SelectNetBootModePane(view);
        selectNetCardPane = new SelectNetCardPane(view);
        selectNetCardPane.setWizardDialogSample(this);
        setDhcpPane = new SetDhcpPane(view, "windows");
        dupStrgyPane = new DuplicationStrategyPane(view);
        dupStrgyPane.setupTextTipInfo(SanBootView.res.getString("InitBootHostWizardDialog.tip4"));
        dupStrgyPane.setWizardDialogSample(this);
        dupStrgyPane.setSelectProtectedFS(selectSysVolPane);
        runningTaskPane = new RunningTaskPane(view, 1);

        view.removeAllFromBindedTab();
        view.removeAllFromUnSelTab();
    }

    private void setupLanguage1() {
        setTitle(SanBootView.res.getString("InitBootHostWizardDialog.title"));
    }

    @Override
    public void backButtonProcess() {
        Vector servInfo;
        ArrayList netCardInfo, profInfo;
        String ip;
        BindOfService bindServ;
        InfoFromProtectPane info, oldInfo;
        Object[] bootModeInfo;

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title1").trim()) == 0) {
            enableBackButton(false);
            removeCenterPane();
            addImagePaneOntoCenterPane();
            addWizardTipTextPane();
            setWizardTipText(
                    SanBootView.res.getString("WizardDialogSample.wizardText"),
                    SanBootView.res.getString("InitBootHostWizardDialog.wizardText1"));
            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title"));
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title2").trim()) == 0) {
            selectSysVolPane.fireEditingStopMsg();

            ip = selectHostPane.getIP();
            oldInfo = (InfoFromProtectPane) partOnClnt.get(new String(ip));
            info = new InfoFromProtectPane();
            info.startNet = oldInfo.startNet;
            info.isCopyOS = selectSysVolPane.isCopyOS();
            info.isOnlyModRegister = selectSysVolPane.isOnlyModRegister();
            info.isDonothing = selectSysVolPane.isDonothing();
            info.volList = selectSysVolPane.getVolInfo();

            partOnClnt.remove(new String(ip));
            partOnClnt.put(new String(ip), info);

            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title1"));
            removePaneFromContentPane(selectSysVolPane);
            addPaneOntoContentPane(selectHostPane);
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title3").trim()) == 0) {
            selectServPane.fireEditingStopMsg();

            ip = selectHostPane.getIP();
            bindServ = new BindOfService();
            servInfo = selectServPane.getServiceInfo();
            bindServ.stopAllService = selectServPane.isStopAllService();
            bindServ.servList = servInfo;

            servOnClnt.remove(new String(ip));
            servOnClnt.put(new String(ip), bindServ);

            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title2"));
            removePaneFromContentPane(selectServPane);
            addPaneOntoContentPane(selectSysVolPane);
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode").trim()) == 0) {
            bootModeInfo = selectNetBootModePane.getBootModeInfo();
            ip = selectHostPane.getIP();
            bmodOnClnt.remove(new String(ip));
            bmodOnClnt.put(new String(ip), bootModeInfo);

            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title3"));
            removePaneFromContentPane(selectNetBootModePane);
            addPaneOntoContentPane(selectServPane);
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title4").trim()) == 0) {
            selectNetCardPane.fireEditingStopMsg();

            netCardInfo = selectNetCardPane.getNetCardInfo();
            ip = selectHostPane.getIP();
            cardOnClnt.remove(new String(ip));
            cardOnClnt.put(new String(ip), netCardInfo);

            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode"));
            selectNetCardPane.removeListener();
            removePaneFromContentPane(selectNetCardPane);
            addPaneOntoContentPane(selectNetBootModePane);
            refreshCenterPane();
            return;
        }

            if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title5").trim()) == 0) {
            ip = selectHostPane.getIP();
            InfoFromDhcpSetupPane dhcpSetPane = new InfoFromDhcpSetupPane();
            dhcpSetPane.isUseOdyDhcp = setDhcpPane.isAutoSetup();
            dhcpSetPane.dhcpClntInfo = setDhcpPane.getDhcpSetInfo();
            dhcpOnClnt.remove(new String(ip));
            dhcpOnClnt.put(new String(ip), dhcpSetPane);
            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title4"));
            removePaneFromContentPane(setDhcpPane);
            addPaneOntoContentPane(selectNetCardPane);
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title6").trim()) == 0) {
            dupStrgyPane.fireEditingStopMsg();

            profInfo = dupStrgyPane.getProfileInfoFromTab();
            ip = selectHostPane.getIP();
            profOnClnt.remove(new String(ip));
            profOnClnt.put(new String(ip), profInfo);

            if (!selectNetBootModePane.isSelectIScsiHBAMode()) {
                setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title5"));
                addPaneOntoContentPane(setDhcpPane);
            } else {
                setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode"));
                addPaneOntoContentPane(selectNetBootModePane);
            }
            removePaneFromContentPane(dupStrgyPane);
            refreshCenterPane();
            return;
        }
    }

    private boolean modifyHost(BootHost selHost, String ip, int port) {
        BackupClient selClnt = view.initor.mdb.getBkClntOnUUID(selHost.getUUID());
        BootHost newHost = new BootHost(
                selHost.getID(),
                getAgentInfo.getHostName(),
                ip,
                getAgentInfo.getMachine(),
                port,
                port,
                getAgentInfo.getOSName(),
                selHost.getStatus(),
                uuid, // uuid
                selHost.getInitFlag(),
                selHost.getAutoDRFlag(),
                selHost.getAutoRebootFlag(),
                selHost.getStopAllBaseServFlag(),
                selHost.getBootMac(),
                selHost.getBootMode(),
                selHost.getProtectType());

        boolean isOK = view.initor.mdb.modOneBootHost(newHost);
        if (isOK) {
            // 修改d2d client
            if (!changeD2DClient(selClnt, ip, port)) {
                SanBootView.log.error(getClass().getName(), " Modify d2d client failed: " + ip + "/" + port);
                JOptionPane.showMessageDialog(view,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_MOD_BOOT_HOST) + " : "
                        + view.initor.mdb.getErrorMessage());
                return false;
            }

            // 用新值替换旧值.
            selHost.setName(newHost.getName());
            selHost.setIP(newHost.getIP());
            selHost.setMachine(newHost.getMachine());
            selHost.setPort(newHost.getPort());
            selHost.setMtppPort(newHost.getMtppPort());
            selHost.setOS(newHost.getOS());
            selHost.setStatus(newHost.getStatus());
            selHost.setUUID(newHost.getUUID());
        } else {
            JOptionPane.showMessageDialog(view,
                    ResourceCenter.getCmdString(ResourceCenter.CMD_MOD_BOOT_HOST) + " : "
                    + view.initor.mdb.getErrorMessage());
        }

        return isOK;
    }

    private boolean changeD2DClient(BackupClient selClnt, String ip, int port) {
        if (selClnt != null) {
            BackupClient newClnt = new BackupClient(
                    selClnt.getID(),
                    getAgentInfo.getHostName(),
                    ip,
                    getAgentInfo.getMachine(),
                    port,
                    getAgentInfo.getOSName(),
                    selClnt.getStatus(),
                    uuid,
                    selClnt.getAcctID());

            boolean isOK = view.initor.mdb.ModOneClient(newClnt);
            if (isOK) {
                // 用新值替换旧值.
                selClnt.setHostName(newClnt.getHostName());
                selClnt.setIP(newClnt.getIP());
                selClnt.setMachineType(newClnt.getMachineType());
                selClnt.setPort(newClnt.getPort());
                selClnt.setOsType(newClnt.getOsType());
                selClnt.setStatus(newClnt.getStatus());
                selClnt.setUUID(newClnt.getUUID());
            }
            return isOK;
        }
        {
            // 只有在需要的地方才增加对应的bk client
        }

        return true;
    }

    private BootHost getSelectHost(String uuid) {
        if (!uuid.equals("")) {
            return view.initor.mdb.getHostFromCacheOnUUID(uuid);
        } else {
            return null;
        }
    }

    // diskList包含了所有的disk,不仅仅是空闲disk(2010.3.16)
    private boolean isValidRootId(int rootid, ArrayList diskList) {
        Volume vol;
        int i, size;
        size = diskList.size();
        for (i = 0; i < size; i++) {
            vol = (Volume) diskList.get(i);
            if (vol.getSnap_root_id() == rootid) {
                return true;
            }
        }
        return false;
    }

    private boolean modifyLunMap(int hostId, String ip) {
        BindofVolAndSnap bind;
        Object volObj;
        ArrayList snapList;
        int i, j, size, size1, tid;
        boolean isOK;

        ProgressDialog pdiag = new ProgressDialog(
                view,
                SanBootView.res.getString("View.pdiagTitle.modifyHost1"),
                SanBootView.res.getString("View.pdiagTip.modifyHost1"));

        GetRstVersion getRstVer = new GetRstVersion(pdiag, view, hostId, true);
        getRstVer.start();
        pdiag.mySetSize();
        pdiag.setLocation(view.getCenterPoint(pdiag.getDefWidth(), pdiag.getDefHeight()));
        pdiag.setVisible(true);

        Vector bindList = getRstVer.getBindList();
        size = bindList.size();
        for (i = 0; i < size; i++) {
            bind = (BindofVolAndSnap) bindList.elementAt(i);
            snapList = bind.getSnapList();
            volObj = bind.getVolObj();
            if (volObj instanceof VolumeMap) {
                size1 = snapList.size();
                for (j = 0; j < size1; j++) {
                    Object obj = snapList.get(j);
                    if (obj instanceof ViewWrapper) {
                        ViewWrapper vw = (ViewWrapper) obj;
                        tid = vw.view.getSnap_target_id();
                    } else if (obj instanceof VolumeMapWrapper) {
                        VolumeMapWrapper vm = (VolumeMapWrapper) obj;
                        tid = vm.volMap.getVolTargetID();
                    } else if (obj instanceof MirrorDiskInfoWrapper) {
                        tid = -1;
                    } else { // SnapWrapper   
                        tid = -1;
                    }

                    if (tid != -1) {
                        isOK = view.initor.mdb.addLunMap(tid, ip, "255.255.255.255", "rw", "", "", "", "");
                        if (!isOK) {
                            JOptionPane.showMessageDialog(view,
                                    SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " "
                                    + SanBootView.res.getString("common.failed"));
                            return false;
                        }
                    }
                }
            }
        }

        return true;
    }
    GetAgentInfo getAgentInfo;
    String uuid;
    BootHost ahost = null;
    
    /**
     * 客户端逻辑初始化向导下一步动能
     */

    @Override
    public void nextButtonProcess() {
        boolean isOk, contained, stopAllService, startNet;
        Vector partList, volList, servList, subnetList, ibootSrvList;
        ArrayList netCardList, profList;
        int i, j, size, indx, port;
        VolumeMap volMap;
        Volume vol;
        Service service;
        ServiceMap servMap;
        SystemPartitionForWin part;
        BackupClient bkClnt;
        long cid;
        BindOfPartandVol binder;
        BindOfService bindServ;
        InfoFromProtectPane info;
        DhcpClientInfo dhcpClntInfo;
        InfoFromDhcpSetupPane dhcpSetPane;
        String ip, oldmac = "", mac = "", ip_3rd = "", nextsrv_3rd = "", ip_hba = "";
        GetInitInfoThread getInitInfo;
        Object[] bootModeInfo;

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title1").trim()) == 0) {
            if (!selectHostPane.checkClntInfoValidity()) {
                selectHostPane.setFocusOnTextField1();
                return;
            }

            ip = selectHostPane.getIP();
            port = selectHostPane.getMtppPort();

            // Collect host info before initing it
            ProgressDialog initDiag = new ProgressDialog(
                    view,
                    SanBootView.res.getString("View.pdiagTitle.getInitInfo"),
                    SanBootView.res.getString("View.pdiagTip.getInitInfo"));
            getInitInfo = new GetInitInfoThread(
                    initDiag, ip, port, true, view, this.getFirstFlag());
            getInitInfo.start();
            initDiag.mySetSize();
            initDiag.setLocation(view.getCenterPoint(initDiag.getDefWidth(), initDiag.getDefHeight()));
            initDiag.setVisible(true);

            if (!getInitInfo.getAgtInfoIsOK()) {
                return;
            }
            getAgentInfo = getInitInfo.getAgentInfoCmdObj();
            uuid = getInitInfo.getUUID();

            // 必须采用uuid来唯一识别host（2010.7.15）
            ahost = getSelectHost(uuid);

            // 检查host信息是否有不一致的地方, 如有不一致就修改
            if (ahost != null) { // MDB中已经存在该clnt
                SanBootView.log.debug(getClass().getName(), " ######### re-init exist host: " + ip + " / " + port);

                if (ahost.isCMDPProtect()) {
                    JOptionPane.showMessageDialog(view,
                            SanBootView.res.getString("MenuAndBtnCenter.error.isProtectedByPP"));
                    return;
                }

                if (!ahost.isWinHost()) {
                    SanBootView.log.error(getClass().getName(), " ##### host is not windows. uuid: " + uuid + " ip: " + ip);
                    JOptionPane.showMessageDialog(view,
                            SanBootView.res.getString("MenuAndBtnCenter.error.badConsistance"));
                    return;
                }

                // 检查平台是否冲突
                if (!getAgentInfo.isWin()) {
                    JOptionPane.showMessageDialog(view,
                            SanBootView.res.getString("MenuAndBtnCenter.error.mismatchedOS"));
                    return;
                } else {
                    System.out.println(" winplat: " + ahost.getWinPlatForm() + " osre: " + getAgentInfo.getOSRelease());
                    if (!ahost.getWinPlatForm().equals(getAgentInfo.getOSRelease())) {
                        JOptionPane.showMessageDialog(view,
                                SanBootView.res.getString("MenuAndBtnCenter.error.mismatchedOS"));
                        return;
                    }
                }

                // cmdp和mtpp agent是不会冲突的，因为连接agent的协议都不一样（ /sbin/clnt_cmd 和 ibootcmd ）

                if (!BootHost.isSameHost1(getAgentInfo.getHostName(), ahost.getName(), getAgentInfo.getOSName(), ahost.getOS(),
                        getAgentInfo.getMachine(), ahost.getMachine(), uuid, ahost.getUUID(), ip, ahost.getIP(), port, ahost.getMtppPort())) {
                    SanBootView.log.warning(getClass().getName(), "host info mismatched: " + ip + "/" + port);
                    // 将host的信息修改为最新获取的
                    if (!modifyHost(ahost, ip, port)) {
                        return;
                    } else {
                        // dhcp和profile的修改先不管

                        // 收集该机器上所有相关的vol,snap,view等,以便修改lunmap
                        if (!modifyLunMap(ahost.getID(), ip)) {
                            return;
                        }
                    }
                } else {
                    SanBootView.log.debug(getClass().getName(), "re-init host isn't changed anything: " + ip);
                }
            } else {
                SanBootView.log.debug(getClass().getName(), " ######### init new host: " + ip + " / " + port);
            }

            if (first) { //第一次先获取所有的卷(不管孤立还是不孤立)
                if (!getInitInfo.getOrphanVolIsOK()) {
                    return;
                } else {
                    ArrayList alist = getInitInfo.getOrphanVolList();
                    size = alist.size();
                    SanBootView.log.debug(getClass().getName(), "disk num: " + size);
                    for (i = 0; i < size; i++) {
                        vol = (Volume) alist.get(i);
                        view.addVolumeToUnSelTabForTID(vol.getTargetID(), vol);
                    }

                    Vector list = view.initor.mdb.getAllVolMaps();
                    size = list.size();
                    SanBootView.log.debug(getClass().getName(), "VolMap num: " + size);
                    for (j = 0; j < size; j++) {
                        volMap = (VolumeMap) list.elementAt(j);

                        // 检查volmap是否合法（判断rootid是否有效）
                        if (!isValidRootId(volMap.getVol_rootid(), alist)) {
                            continue;
                        }

                        int tid = volMap.getVolTargetID();
                        if (view.hasThisVolInUnSelTab(tid)) { // 说明volMap不是windows的volmap，就是unix的tgt volmap
                            SanBootView.log.debug(getClass().getName(), "  volmap object is in unsel hash table: " + tid + " pick it into selected hash table.");
                            vol = view.getVolumeFromUnSelTab(tid);
                            view.addVolumeToBindedTabForTID(tid, vol);  // add to binded hashtable
                            view.removeVolumeFromUnSelTabForTID(tid); //  remove from unselected hashtable
                        } else { //volMap只能是unix的vg或lv volmap
                            if (volMap.getVolDesc().equals("VG")) {
                                indx = volMap.getVolName().indexOf("_", 3);
                                try {
                                    tid = Integer.parseInt(volMap.getVolName().substring(indx + 1));
                                } catch (Exception ex) {
                                    tid = -1;
                                }
                            } else {
                                indx = volMap.getVolDesc().indexOf("_", 3);
                                try {
                                    tid = Integer.parseInt(volMap.getVolDesc().substring(indx + 1));
                                } catch (Exception ex) {
                                    tid = -1;
                                }
                            }

                            if (view.hasThisVolInUnSelTab(tid)) {
                                SanBootView.log.debug(getClass().getName(), " volmap object(vg or lv) is in unsel hash table: " + tid + "  pick it into selected hash table.");
                                vol = view.getVolumeFromUnSelTab(tid);
                                view.addVolumeToBindedTabForTID(tid, vol);  // add to binded hashtable
                                view.removeVolumeFromUnSelTabForTID(tid); //  remove from unselected hashtable
                            }
                        }
                    }

                    ArrayList mdiList = view.initor.mdb.getAllMDI();
                    size = mdiList.size();
                    SanBootView.log.debug(getClass().getName(), "mdi num: " + size);
                    for (j = 0; j < size; j++) {
                        MirrorDiskInfo mdi = (MirrorDiskInfo) mdiList.get(j);

                        // 检查mdi是否与主机关联
                        if (mdi.getTargetID() <= 0) {
                            continue;
                        }

                        int tid = mdi.getTargetID();
                        if (view.hasThisVolInUnSelTab(tid)) { // 说明该mdi正在关联着
                            SanBootView.log.debug(getClass().getName(), "  volmap object is in unsel hash table: " + tid + " pick it into selected hash table.");
                            vol = view.getVolumeFromUnSelTab(tid);
                            view.addVolumeToBindedTabForTID(tid, vol);  // add to binded hashtable
                            view.removeVolumeFromUnSelTabForTID(tid); //  remove from unselected hashtable
                        }
                    }

                    view.printBindedTabContents();
                }
                setFirstFlag(false);
            }

            contained = partOnClnt.containsKey(new String(ip));
            if (!contained) {
                if (!getInitInfo.getSystemPartIsOK()) {
                    SanBootView.log.error(getClass().getName(), "failed to get system partition.");
                    return;
                }
                partitionContent = getInitInfo.getSystemPartContents();

                if (!getInitInfo.getDiskPartForWinIsOK()) {
                    SanBootView.log.error(getClass().getName(), "failed to get disk partition.");
                    return;
                }
                diskDetailInfo = getInitInfo.getDiskDetailInfo();

                if (!getInitInfo.isStartupFromSAN()) {
                    SanBootView.log.error(getClass().getName(), "failed to judge whether startup from localdisk.");
                    return;
                }
                startNet = getInitInfo.isStartFromNet();

                partList = getInitInfo.getSysPartList();
                size = partList.size();
                volList = new Vector();
                for (i = 0; i < size; i++) {
                    part = (SystemPartitionForWin) partList.elementAt(i);
                    binder = new BindOfPartandVol();
                    binder.part = part;

                    // 找出该client上已经创建好了的目标卷
                    if (ahost != null) {
                        volMap = view.initor.mdb.generalGetVolMapFromVecOnClntandLabel(ahost.getID(), part.getDiskLabel());
                        if (volMap != null) {
                            binder.vol = view.getVolumeFromBindedTab(volMap.getVolTargetID());
                            if (binder.vol != null) {
                                binder.isProtected = true;
                                binder.action = 1;
                                binder.isRealVol = true;
                                SanBootView.log.debug(getClass().getName(), "===========: " + volMap.getVolTargetID());

                                SanBootView.log.debug(getClass().getName(), "===========: " + binder.vol.getCapStr1());
                                binder.volSize = binder.vol.getCapStr1();
                                binder.maxSnap = volMap.getMaxSnapNum() + "";
                                binder.desc = volMap.getVolDesc();
                            } else {
                                binder.volName = getDefaultVolName(part.getDiskLabel(), ip);
                            }
                        } else {
                            binder.volName = getDefaultVolName(part.getDiskLabel(), ip);
                        }
                    } else {
                        binder.volName = getDefaultVolName(part.getDiskLabel(), ip);
                    }

                    // 存储空间不足了，只能选择空闲卷
                    if (!this.hasEnoughSpace) {
                        binder.action = 1;  // 1 表示选择已有的空闲卷
                    }

                    if (binder.action == 0) {
                        binder.isFormatted = true;
                    }
                    volList.addElement(binder);
                }

                info = new InfoFromProtectPane();
                info.volList = volList;
                info.startNet = startNet;
                partOnClnt.put(new String(ip), info);
                selectSysVolPane.setupTable(volList);
                selectSysVolPane.setCurVolUsage(volList);
                selectSysVolPane.setActionMode(info.isCopyOS, info.isOnlyModRegister, info.isDonothing);

                if (startNet) {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("InitBootHostWizardDialog.error.bootFromNet"));
                    return;
                }

            } else {
                Object val = partOnClnt.get(new String(ip));
                info = (InfoFromProtectPane) val;

                if (info.startNet) {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("InitBootHostWizardDialog.error.bootFromNet"));
                    return;
                }

                selectSysVolPane.setupTable(info.volList);
                selectSysVolPane.setActionMode(info.isCopyOS, info.isOnlyModRegister, info.isDonothing);
            }

            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title2"));
            removePaneFromContentPane(selectHostPane);
            addPaneOntoContentPane(selectSysVolPane);
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title2").trim()) == 0) {
            selectSysVolPane.fireEditingStopMsg();

            //取消逻辑保护方式对于系统盘必须要保护的要求
//            if( !selectSysVolPane.hasProtectOSDisk() ){
//                JOptionPane.showMessageDialog( this,
//                    SanBootView.res.getString("InitBootHostWizardDialog.error.mustProtectOS")
//                );
//                return ;
//            }
            //判断有无system的license
            if( selectSysVolPane.hasProtectOSDisk() ){
                if( !selectSysVolPane.hasSystemLicense()){
                    JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitBootHostWizardDialog.error.noSystemLicense")
                );
                return ;
                }
            }


            if (!selectSysVolPane.checkVolInfoValidity()) {
                return;
            }

            if (!selectSysVolPane.isLessThanUsedSize()) {
                int ret = JOptionPane.showConfirmDialog(
                        view,
                        SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVal1"),
                        SanBootView.res.getString("common.confirm"), //"Confirm",
                        JOptionPane.OK_CANCEL_OPTION);
                if ((ret == JOptionPane.CANCEL_OPTION) || (ret == JOptionPane.CLOSED_OPTION)) {
                    return;
                }
            }

            ip = selectHostPane.getIP();
            port = selectHostPane.getMtppPort();

            contained = servOnClnt.containsKey(new String(ip));
            if (!contained) {
                isOk = view.initor.mdb.getOSService(ip, port, "services_process.exe list");
                if (!isOk) {
                    JOptionPane.showMessageDialog(this,
                            ResourceCenter.getCmdString(ResourceCenter.CMD_GET_OS_SERVICE) + " : "
                            + view.initor.mdb.getErrorMessage());
                    return;
                }

                setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title3"));
                servList = view.initor.mdb.getOSService();

                stopAllService = false;
                //ahost = view.initor.mdb.getHostFromVecOnIP( ip );
                if (ahost != null) {
                    SanBootView.log.debug(getClass().getName(), " host !=null 0000000000000000000000");
                    if (!ahost.isStopAllBaseServ()) {
                        SanBootView.log.debug(getClass().getName(), " host not stop all service 1111111111111111111111");
                        stopAllService = false;

                        size = servList.size();
                        for (i = 0; i < size; i++) {
                            service = (Service) servList.elementAt(i);
                            // 找出该client上已经登记了的服务
                            servMap = view.initor.mdb.getServiceMap(ahost.getID(), service.getServName(), service.getServDesc());
                            if (servMap != null) {
                                service.setSeled(true);
                            }
                        }
                    } else {
                        stopAllService = true;
                    }
                } else {
                    SanBootView.log.debug(getClass().getName(), " host ==null 0000000000000000000000");
                }

                bindServ = new BindOfService();
                bindServ.stopAllService = stopAllService;
                bindServ.servList = servList;
                if (stopAllService) {
                    selectServPane.setStopAllService(true);
                    selectServPane.clickJRadioBtn1();
                } else {
                    selectServPane.setStopPartialService(true);
                    selectServPane.clickJRadioBtn2();
                }

                servOnClnt.put(new String(ip), bindServ);
                selectServPane.setupServiceTable(servList);

            } else { // from cache
                setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title3"));
                Object val = servOnClnt.get(new String(ip));
                bindServ = (BindOfService) val;
                if (bindServ.stopAllService) {
                    selectServPane.setStopAllService(true);
                    selectServPane.clickJRadioBtn1();
                } else {
                    selectServPane.setStopPartialService(true);
                    selectServPane.clickJRadioBtn2();
                }
                selectServPane.setupServiceTable(bindServ.servList);
            }

            removePaneFromContentPane(selectSysVolPane);
            addPaneOntoContentPane(selectServPane);
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title3").trim()) == 0) {
            ip = selectHostPane.getIP();
            port = selectHostPane.getMtppPort();

            contained = bmodOnClnt.containsKey(new String(ip));
            if (!contained) {
                //ahost = view.initor.mdb.getHostFromVecOnIP( ip );
                if (ahost != null) {
                    if (ahost.isEmBoot()) {
                        bmodOnClnt.put(new String(ip), new Object[]{new Integer(BootHost.BOOT_MODE_EM)});
                        selectNetBootModePane.setEmBootMode(true);
                        selectNetBootModePane.clickJRadioBtn1();
                    } else if (ahost.isIBoot()) {
                        bmodOnClnt.put(new String(ip), new Object[]{new Integer(BootHost.BOOT_MODE_IBOOT)});
                        selectNetBootModePane.setIBootMode(true);
                        selectNetBootModePane.clickJRadioBtn2();
                    } else {
                        // get the 3rd dhcp info
                        isOk = view.initor.mdb.get3rdDhcpInfo(ResourceCenter.CLT_IP_CONF + "/" + ahost.getID() + ResourceCenter.CONF_3RD_DHCP);
                        if (isOk) {
                            ip_hba = view.initor.mdb.getIpFrom3rdDhcpInfo();
                        }
                        bmodOnClnt.put(new String(ip), new Object[]{new Integer(BootHost.BOOT_MODE_ISCSI_HBA)});
                        selectNetBootModePane.setIScsiHBAMode(true);
                        selectNetBootModePane.clickJRadioBtn3();
                        selectNetBootModePane.setBootIPForIscsiHBA(ip_hba);
                    }
                } else {
                    if (!isVistaOs(this.getAgentInfo.getOSRelease())) {
                        bmodOnClnt.put(new String(ip), new Object[]{new Integer(BootHost.BOOT_MODE_EM)});
                        selectNetBootModePane.setEmBootMode(true);
                    } else {
                        bmodOnClnt.put(new String(ip), new Object[]{new Integer(BootHost.BOOT_MODE_IBOOT)});
                        selectNetBootModePane.setIBootMode(true);
                    }
                }
            } else {
                Object val = bmodOnClnt.get(new String(ip));
                bootModeInfo = (Object[]) val;
                if (bootModeInfo.length == 1) {
                    int mode = ((Integer) bootModeInfo[0]).intValue();
                    if (mode == BootHost.BOOT_MODE_EM) {
                        selectNetBootModePane.setEmBootMode(true);
                    } else {
                        selectNetBootModePane.setIBootMode(true);
                    }
                    selectNetBootModePane.clickJRadioBtn1();
                } else {
                    selectNetBootModePane.setIScsiHBAMode(true);
                    selectNetBootModePane.clickJRadioBtn3();
                    selectNetBootModePane.setBootIPForIscsiHBA(bootModeInfo[1].toString());
                }
            }

            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode"));
            removePaneFromContentPane(selectServPane);
            addPaneOntoContentPane(selectNetBootModePane);
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode").trim()) == 0) {
            if (selectNetBootModePane.isSelectIScsiHBAMode()) {
                if (!selectNetBootModePane.checkInput()) {
                    return;
                }

                ip = selectHostPane.getIP();
                port = selectHostPane.getMtppPort();

                ArrayList ncList = getNetCardList(ip, port);
                if (ncList == null) {
                    return;
                }

                if (isIPConfilict(ncList, selectNetBootModePane.getBootIPForIscsiHBA())) {
                    return;
                }

                contained = profOnClnt.containsKey(new String(ip));
                if (!contained) {
                    if (ahost != null) {
                        bkClnt = view.initor.mdb.getBkClntOnUUID(ahost.getUUID());
                        if (bkClnt != null) {
                            cid = bkClnt.getID();
                        } else {
                            cid = -1;
                        }
                    } else {
                        cid = -1;
                    }
                    profList = view.initor.mdb.getAllProfileOnClntID(cid);
                    dupStrgyPane.setupTable(profList);
                    dupStrgyPane.setOldProfList(profList);
                } else {
                    Object val = profOnClnt.get(new String(ip));
                    profList = (ArrayList) val;
                    dupStrgyPane.setupTable(profList);
                }

                mac = "";
                String aWinDir = view.initor.mdb.getWinDir(ip, port);
                if (aWinDir.equals("")) {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundWindir"));
                    return;
                }

                if (ahost != null) {
                    dupStrgyPane.setIPAndPort(ip, port, port, ahost.getName(), ahost.getMachine(), ahost.getOS(), ahost.getUUID(), mac, aWinDir, txIP);
                } else {
                    dupStrgyPane.setIPAndPort(ip, port, port, getAgentInfo.getHostName(), getAgentInfo.getMachine(), getAgentInfo.getOSName(), uuid, mac, aWinDir, txIP);
                }

                setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title6"));
                removePaneFromContentPane(selectNetBootModePane);
                addPaneOntoContentPane(dupStrgyPane);
                refreshCenterPane();
                return;
            } else {  // select soft boot mode
                ip = selectHostPane.getIP();
                port = selectHostPane.getMtppPort();

                contained = cardOnClnt.containsKey(new String(ip));
                if (!contained) {
                    isOk = view.initor.mdb.getIPInfoFromClnt(ip, port, "00-00-00-00-00-00");
                    if (!isOk) {
                        JOptionPane.showMessageDialog(this,
                                ResourceCenter.getCmdString(ResourceCenter.CMD_GET_NETCARD) + " : "
                                + view.initor.mdb.getErrorMessage());
                        return;
                    }

                    netCardList = view.initor.mdb.getAllNetCardinfo();
                    cardOnClnt.put(new String(ip), netCardList);

                    //ahost = view.initor.mdb.getHostFromVecOnIP( ip );
                    if (ahost != null) {
                        isOk = view.initor.mdb.getNetInfoFromMDB(ResourceCenter.CLT_IP_CONF + "/" + ahost.getID() + ResourceCenter.CONF_IP);
                        if (isOk) {
                            oldmac = view.initor.mdb.getBootMac();
                        }
                    }

                    selectNetCardPane.setupNetCardTable(netCardList);
                    selectNetCardPane.setupGigaNetCard(oldmac);
                } else {
                    Object val = cardOnClnt.get(new String(ip));
                    netCardList = (ArrayList) val;
                    selectNetCardPane.setupNetCardTable(netCardList);
                }
                selectNetCardPane.addListener();

                setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title4"));
                removePaneFromContentPane(selectNetBootModePane);
                addPaneOntoContentPane(selectNetCardPane);
                refreshCenterPane();
                return;
            }
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title4").trim()) == 0) {
            selectNetCardPane.fireEditingStopMsg();

            if (!selectNetCardPane.hasSelectedNetCard()) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("InitBootHostWizardDialog.error.notSelCard"));
                return;
            }

            ip = selectHostPane.getIP();
            port = selectHostPane.getMtppPort();

            contained = dhcpOnClnt.containsKey(new String(ip));
            if (!contained) {
                boolean isUseOdyDhcp = true;
                dhcpClntInfo = null;

                // 首先判断该主机是否使用了uws服务器上的dhcp服务
                //ahost = view.initor.mdb.getHostFromVecOnIP( ip );
                // 如果主机不存在,则认为它使用了UWS服务器上的dhcp服务
                if (ahost != null) {
                    isUseOdyDhcp = ahost.isUseOdyDhcp();

                    // get the 3rd dhcp info
                    isOk = view.initor.mdb.get3rdDhcpInfo(ResourceCenter.CLT_IP_CONF + "/" + ahost.getID() + ResourceCenter.CONF_3RD_DHCP);
                    if (isOk) {
                        ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                        nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                    }
                    if (ip_3rd.equals("")) {
                        ip_3rd = ip;
                    }
                    if (nextsrv_3rd.equals("")) {
                        nextsrv_3rd = view.initor.getTxIP(ip);
                    }
                } else {
                    ip_3rd = ip;
                    nextsrv_3rd = view.initor.getTxIP(ip);
                }

                if (view.initor.dhcpdb.isLoginOK()) {
                    // 获取boot netcard mac's dhcp config
                    if (ahost != null) {
                        isOk = view.initor.mdb.getNetInfoFromMDB(ResourceCenter.CLT_IP_CONF + "/" + ahost.getID() + ".conf");
                        if (isOk) {
                            oldmac = view.initor.mdb.getBootMac();
                            if (!oldmac.equals("")) {
                                dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac(NetCard.getUnixMac(oldmac));
                            }
                        }
                    }

                    // 获取UWS服务器上的subnet列表
                    subnetList = view.initor.dhcpdb.getSubnetListFromDhcp();
                    ibootSrvList = view.initor.dhcpdb.getIbootSrvListFromDhcp();
                } else {
                    // dhcp server不可用( 无法登陆它,可能没有关于它的配置信息,或者配置信息有误 )
                    subnetList = new Vector();
                    ibootSrvList = new Vector();
                }

                setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title5"));
                NetCard card = (NetCard) selectNetCardPane.getSelectNetCard();
                if( isVistaOs(this.getAgentInfo.getOSRelease()) ){
                    isOk = view.initor.mdb.bindViewMac(ip, port, card.mac, BootHost.PROTECT_TYPE_MTPP);
//                    if( !isOk ){
//                        JOptionPane.showMessageDialog(this,
//                            SanBootView.res.getString("InitBootHostWizardDialog.error.notbindviewmac"));
//                        return;
//                    }
                }
                setDhcpPane.initDhcpSetupPane(ibootSrvList, subnetList, card.mac, isUseOdyDhcp, dhcpClntInfo, ip, ip_3rd, nextsrv_3rd);
            } else {
                setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title5"));
                Object val = dhcpOnClnt.get(new String(ip));
                dhcpSetPane = (InfoFromDhcpSetupPane) val;
                NetCard card = (NetCard) selectNetCardPane.getSelectNetCard();
                setDhcpPane.setDhcpSetInfo(dhcpSetPane.isUseOdyDhcp, dhcpSetPane.dhcpClntInfo, card.mac);
            }

            removePaneFromContentPane(selectNetCardPane);
            addPaneOntoContentPane(setDhcpPane);
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title5").trim()) == 0) {
            if (!setDhcpPane.checkDhcpInfoValidity()) {
                return;
            }

            ip = selectHostPane.getIP();
            port = selectHostPane.getMtppPort();

            txIP = setDhcpPane.getDhcpSetInfo().getNextServer();      //set iboot server ip
          
            contained = profOnClnt.containsKey(new String(ip));
            if (!contained) {
                if (ahost != null) {
                    bkClnt = view.initor.mdb.getBkClntOnUUID(ahost.getUUID());
                    if (bkClnt != null) {
                        cid = bkClnt.getID();
                    } else {
                        cid = -1;
                    }
                } else {
                    cid = -1;
                }
                profList = view.initor.mdb.getAllProfileOnClntID(cid);
                dupStrgyPane.setupTable(profList);
                dupStrgyPane.setOldProfList(profList);
            } else {
                Object val = profOnClnt.get(new String(ip));
                profList = (ArrayList) val;
                dupStrgyPane.setupTable(profList);
            }

            NetCard card = (NetCard) selectNetCardPane.getSelectNetCard();
            mac = NetCard.getSimpleMac(card.mac).toLowerCase();

            String aWinDir = view.initor.mdb.getWinDir(ip, port);
            if (aWinDir.equals("")) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundWindir"));
                return;
            }

            if (ahost != null) {
                dupStrgyPane.setIPAndPort(ip, port, port, ahost.getName(), ahost.getMachine(), ahost.getOS(), ahost.getUUID(), mac, aWinDir, txIP);
            } else {
                dupStrgyPane.setIPAndPort(ip, port, port, getAgentInfo.getHostName(), getAgentInfo.getMachine(), getAgentInfo.getOSName(), uuid, mac, aWinDir, txIP);
            }

            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title6"));
            removePaneFromContentPane(setDhcpPane);
            addPaneOntoContentPane(dupStrgyPane);
            refreshCenterPane();
            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title6").trim()) == 0) {
            dupStrgyPane.fireEditingStopMsg();

//            if( !dupStrgyPane.checkProfile() ){
//                return;
//            }

            int ret = JOptionPane.showConfirmDialog(
                    view,
                    SanBootView.res.getString("InitBootHostWizardDialog.confirm4"),
                    SanBootView.res.getString("common.confirm"), //"Confirm",
                    JOptionPane.OK_CANCEL_OPTION);
            if ((ret == JOptionPane.CANCEL_OPTION) || (ret == JOptionPane.CLOSED_OPTION)) {
                return;
            }

            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title7"));
            removePaneFromContentPane(dupStrgyPane);
            setTextOnNextButton(SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton(false);
            enableBackButton(false);
            enableCancelButton(false);
            setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
            if (!selectNetBootModePane.isSelectIScsiHBAMode()) {
                runningTaskPane.ctrDhcpCb(setDhcpPane.isManualSetup(), ((NetCard) selectNetCardPane.getSelectNetCard()).mac);
            } else {
                runningTaskPane.clearDhcptip();
            }
            addPaneOntoContentPane(runningTaskPane);
            refreshCenterPane();

            beginInitClient();

            return;
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title7").trim()) == 0) {
            if (allFinished) {
                if (!selectNetBootModePane.isSelectIScsiHBAMode()) {
                    if (setDhcpPane.isManualSetup()) {
                        if (runningTaskPane.isDoneDHCP()) {
                            JOptionPane.showMessageDialog(this,
                                    SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK"));
                            updateGUI();
                            dispose();
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    SanBootView.res.getString("InitNWinHostWizardDialog.error.notDoneManualJob"));
                            return;
                        }
                    } else {
                        JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK"));
                        updateGUI();
                        dispose();
                    }
                } else {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("InitNWinHostWizardDialog.error.initOK"));
                    updateGUI();
                    dispose();
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("InitBootHostWizardDialog.error.needReInit"));
                updateGUI();
                dispose();
            }
        }

        if (getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.title").trim()) == 0) {
            setTipTextOnTopPane(SanBootView.res.getString("InitBootHostWizardDialog.title1"));
            enableBackButton(true);
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane(selectHostPane);
            selectHostPane.setFocusOnTextField1();
            refreshCenterPane();
            return;
        } else {
            return;
        }
    }

    private void beginInitClient() {
        Thread initThread = new Thread(new InitializingBootHost(this));
        initThread.start();
    }

    public void updateGUI() {
        if (!hasAddBootHost) { //没有增加client
            updateOldHostOnTree();
        } else {
            if (isAddHostOk) { //增加client成功
                initNewHostOnTree();
            } else { //失败
                // do nothing
            }
        }
    }

    private void updateOldHostOnTree() {
        int i, size;
        VolumeMap vol;
        BrowserTreeNode volMapNode;

        BrowserTreeNode chiefHostNode = view.getChiefNodeOnRoot(ResourceCenter.TYPE_CHIEF_HOST_INDEX);
        if (chiefHostNode == null) {
            return;
        }

        BrowserTreeNode hostNode = view.getHostNodeOnChiefHostNode(chiefHostNode, host.getID());
        if (hostNode == null) {
            return;
        }
        hostNode.setUserObject(host); // host的属性也许变化了

        BrowserTreeNode chiefHostVolNode = view.getChiefHostVolNodeOnHostNode(hostNode);
        if (chiefHostVolNode == null) {
            return;
        }

        // 先删除
        chiefHostVolNode.removeAllChildren();

        // 最新的volmap belonged to this host
        Vector volMapList = view.initor.mdb.getVolMapOnClntID(host.getID());
        size = volMapList.size();
        for (i = 0; i < size; i++) {
            vol = (VolumeMap) volMapList.elementAt(i);

            volMapNode = new BrowserTreeNode(vol, false);
            vol.setTreeNode(volMapNode);
            vol.setFatherNode(chiefHostVolNode);

            // 准备lunmap list node
            ChiefLunMap chiefLm = new ChiefLunMap();
            BrowserTreeNode chiefLmNode = new BrowserTreeNode(chiefLm, true);
            chiefLm.setTreeNode(chiefLmNode);
            chiefLm.setFatherNode(volMapNode);
            volMapNode.add(chiefLmNode);

            // 准备snapshot list node
            ChiefSnapshot chiefSnap = new ChiefSnapshot();
            BrowserTreeNode chiefSnapNode = new BrowserTreeNode(chiefSnap, false);
            chiefSnap.setTreeNode(chiefSnapNode);
            chiefSnap.setFatherNode(volMapNode);
            volMapNode.add(chiefSnapNode);

            // 准备mj list node
            ChiefMirrorJobList chiefMjList = new ChiefMirrorJobList();
            BrowserTreeNode chiefMjNode = new BrowserTreeNode(chiefMjList, false);
            chiefMjList.setTreeNode(chiefMjNode);
            chiefMjList.setFatherNode(volMapNode);
            volMapNode.add(chiefMjNode);

            // unlimited incremental mirror vol list
            ChiefLocalUnLimitedIncMirrorVolList chiefUIMVolList = new ChiefLocalUnLimitedIncMirrorVolList();
            BrowserTreeNode chiefUIMVolNode = new BrowserTreeNode(chiefUIMVolList, false);
            chiefUIMVolList.setTreeNode(chiefUIMVolNode);
            chiefUIMVolList.setFatherNode(volMapNode);
            volMapNode.add(chiefUIMVolNode);

            // clone disk list
            ChiefCloneDiskList chiefCloneDiskList = new ChiefCloneDiskList();
            BrowserTreeNode chiefCloneDiskNode = new BrowserTreeNode(chiefCloneDiskList, false);
            chiefCloneDiskList.setTreeNode(chiefCloneDiskNode);
            chiefCloneDiskList.setFatherNode(volMapNode);
            volMapNode.add(chiefCloneDiskNode);

            chiefHostVolNode.add(volMapNode);
        }

        view.reloadTreeNode(chiefHostVolNode);

        view.setCurNode(chiefHostNode);
        view.setCurBrowserEventType(Browser.TREE_SELECTED_EVENT);
        ProcessEventOnChiefHost peOnChiefHost = new ProcessEventOnChiefHost(view);
        TreePath path = new TreePath(chiefHostNode.getPath());
        peOnChiefHost.processTreeSelection(path);
        peOnChiefHost.controlMenuAndBtnForTreeEvent();
    }

    private void initNewHostOnTree() {
        int i, size;
        VolumeMap vol;

        BrowserTreeNode chiefHostNode = view.getChiefNodeOnRoot(ResourceCenter.TYPE_CHIEF_HOST_INDEX);

        BrowserTreeNode hostNode = new BrowserTreeNode(host, false);
        host.setTreeNode(hostNode);
        host.setFatherNode(chiefHostNode);
        chiefHostNode.add(hostNode);

        ChiefHostVolume chiefHostVol = new ChiefHostVolume();
        BrowserTreeNode chiefHVolNode = new BrowserTreeNode(chiefHostVol, false);
        chiefHostVol.setTreeNode(chiefHVolNode);
        chiefHostVol.setFatherNode(hostNode);

        ChiefProfile chiefProf = new ChiefProfile();
        BrowserTreeNode chiefProfNode = new BrowserTreeNode(chiefProf, false);
        chiefProf.setTreeNode(chiefProfNode);
        chiefProf.setFatherNode(hostNode);

        ChiefNetBootHost chiefNBootHost = new ChiefNetBootHost();
        BrowserTreeNode chiefNBHNode = new BrowserTreeNode(chiefNBootHost, false);
        chiefNBootHost.setTreeNode(chiefNBHNode);
        chiefNBootHost.setFatherNode(hostNode);

        hostNode.add(chiefHVolNode);
        hostNode.add(chiefProfNode);
        hostNode.add(chiefNBHNode);

        Vector volMapList = view.initor.mdb.getVolMapOnClntID(host.getID());
        size = volMapList.size();
        for (i = 0; i < size; i++) {
            vol = (VolumeMap) volMapList.elementAt(i);

            BrowserTreeNode volNode = new BrowserTreeNode(vol, false);
            vol.setTreeNode(volNode);
            vol.setFatherNode(chiefHVolNode);

            // 准备lunmap list node
            ChiefLunMap chiefLm = new ChiefLunMap();
            BrowserTreeNode chiefLmNode = new BrowserTreeNode(chiefLm, true);
            chiefLm.setTreeNode(chiefLmNode);
            chiefLm.setFatherNode(volNode);
            volNode.add(chiefLmNode);

            // 准备snapshot list node
            ChiefSnapshot chiefSnap = new ChiefSnapshot();
            BrowserTreeNode chiefSnapNode = new BrowserTreeNode(chiefSnap, false);
            chiefSnap.setTreeNode(chiefSnapNode);
            chiefSnap.setFatherNode(volNode);
            volNode.add(chiefSnapNode);

            // 准备mj list node
            ChiefMirrorJobList chiefMjList = new ChiefMirrorJobList();
            BrowserTreeNode chiefMjNode = new BrowserTreeNode(chiefMjList, false);
            chiefMjList.setTreeNode(chiefMjNode);
            chiefMjList.setFatherNode(volNode);
            volNode.add(chiefMjNode);

            // unlimited incremental mirror vol list
            ChiefLocalUnLimitedIncMirrorVolList chiefUIMVolList = new ChiefLocalUnLimitedIncMirrorVolList();
            BrowserTreeNode chiefUIMVolNode = new BrowserTreeNode(chiefUIMVolList, false);
            chiefUIMVolList.setTreeNode(chiefUIMVolNode);
            chiefUIMVolList.setFatherNode(volNode);
            volNode.add(chiefUIMVolNode);

            // clone disk list
            ChiefCloneDiskList chiefCloneDiskList = new ChiefCloneDiskList();
            BrowserTreeNode chiefCloneDiskNode = new BrowserTreeNode(chiefCloneDiskList, false);
            chiefCloneDiskList.setTreeNode(chiefCloneDiskNode);
            chiefCloneDiskList.setFatherNode(volNode);
            volNode.add(chiefCloneDiskNode);

            chiefHVolNode.add(volNode);
        }

        view.reloadTreeNode(chiefHostNode);

        view.setCurNode(chiefHostNode);
        view.setCurBrowserEventType(Browser.TREE_SELECTED_EVENT);
        ProcessEventOnChiefHost peOnChiefHost = new ProcessEventOnChiefHost(view);
        TreePath path = new TreePath(chiefHostNode.getPath());
        peOnChiefHost.processTreeSelection(path);
        peOnChiefHost.controlMenuAndBtnForTreeEvent();
    }

    public void setInitLog() {
    }

    public void setProcess() {
    }
    // 如果下面两个中有一个为false，则不能进行数据复制
    boolean crtVolStepOK = true;
    boolean formatVolStepOK = true;
    // 下面这些记录了os volume创建和格式化的状态，保留这些状态，也许将来有用
    boolean hasCrtOSDisk = false;  // 表明os vol是创建产生的
    boolean isCrtOSDiskOk = false;  // 表明os vol创建成功
    boolean hasLoginOSDisk = false; // 表明要login os vol
    boolean isLoginOSDiskOk = false; // 表明 os vol login成功
    boolean isFormatOSDiskOk = false; // 表明os vol格式化成功
    boolean addPortal = false, listTargets = false;
    BindOfPartandVol OSBinder = null;
    String iscsiVarForOSDisk = "";
    String targetSrvName = "";
    boolean allFinished = false;    // 表明所有task都成功完成了
    boolean hasAddBootHost = false; //是否增加了新client
    boolean isAddHostOk = true;     // 增加host是否成功
    BootHost host = null;// 要初始化的客户端

    public String getInitHostName() {
        return host.getName();
    }
    String errMsg;

    @Override
    public void writeLogBuf(String errMsg, int which) {
        if (isWrFirst) {
            logBuf.append(runningTaskPane.getTabStr(which) + replaceLine(errMsg));
            isWrFirst = false;
        } else {
            logBuf.append(ResourceCenter.NEWLINE_STRING + runningTaskPane.getTabStr(which) + replaceLine(errMsg));
        }
    }

    public void putIntoLogBuf(String errMsg, int which) {
        writeLogBuf(errMsg, which);
    }

    public void initBootHost() {
        Vector volInfo, lmList;
        BindOfPartandVol binder;
        int i, j, crtSize, size, size1, targetID, port, tid, bksize, bkNum;
        boolean isOk, mayLogout;
        double volSize;
        String volName, ip, iscsiVar, driver, args;
        LunMap lm;
        Volume osVol;
        boolean getInfoStepOK;
        boolean saveInfoStepOK;
        NetCard netCard;

        SanBootView.log.info(getClass().getName(), " @@#################  Init Windows Host Begin ###################@@ ");

        ip = selectHostPane.getIP();
        port = selectHostPane.getMtppPort();

        // 1. create volume
        crtVolStepOK = true;
        runningTaskPane.setCurTabPane(RunningTaskPane.CRT_VOL_ROW);

        volInfo = selectSysVolPane.getVolInfo();
        Vector crtList = new Vector();
        Vector selList = new Vector();
        Vector formatList = new Vector();

        size = volInfo.size();
        for (i = 0; i < size; i++) {
            binder = (BindOfPartandVol) volInfo.elementAt(i);
            if (binder.isProtected) {
                if (binder.action == 0) {
                    crtList.addElement(binder);
                }

                if (binder.action == 1) {
                    selList.addElement(binder);
                }

                if (binder.isFormatted) {
                    formatList.addElement(binder);  // 有可能含有刚刚创建好的target volume
                }
            }
        }

        SanBootView.log.info(getClass().getName(), " @@#################  Create Volume Begin ###################@@ ");
        crtSize = crtList.size();
        if (crtSize > 0) {
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_RUNNING), RunningTaskPane.CRT_VOL_ROW, 2);

            for (i = 0; i < crtSize; i++) {
                binder = (BindOfPartandVol) crtList.elementAt(i);

                if (binder.part.getDiskLabel().substring(0, 1).toUpperCase().equals("C")) {
                    // 表明OS volume 是创建出来的������
                    hasCrtOSDisk = true;
                }

                try {
                    volSize = Double.parseDouble(binder.volSize);
                } catch (Exception ex) {
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.invalidSize") + " [ " + binder.volName + " : " + binder.volSize + " ]";
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.CRT_VOL_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.CRT_VOL_ROW);
                    crtVolStepOK = false;
                    continue;
                }

                bksize = (1 << binder.blkSize);
                bkNum = (int) ((volSize * 1024 * 1024 * 1024 + bksize - 1) / bksize);

                isOk = view.initor.mdb.addOrphVol(binder.volName, binder.blkSize, bkNum, binder.poolid);
                if (isOk) {
                    runningTaskPane.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.crtVol") + " [ " + binder.volName + " ]" + " "
                            + SanBootView.res.getString("common.ok"),
                            RunningTaskPane.CRT_VOL_ROW);
                    binder.targetID = view.initor.mdb.getNewId();
                    binder.rootID = view.initor.mdb.getRootID();

                    if (binder.part.getDiskLabel().substring(0, 1).equals("C")) {
                        // 表明OS disk创建成功了
                        isCrtOSDiskOk = true;
                        OSBinder = binder;
                    }

                    tid = binder.targetID;
                    isOk = view.initor.mdb.addLunMap(tid, ip, "255.255.255.255", "rw", "", "", "", "");
                    if (isOk) {
                        runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " "
                                + SanBootView.res.getString("common.ok"),
                                RunningTaskPane.CRT_VOL_ROW);
                    } else {
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " "
                                + SanBootView.res.getString("common.failed");
                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.CRT_VOL_ROW);
                        writeLogBuf(errMsg, RunningTaskPane.CRT_VOL_ROW);
                        crtVolStepOK = false;
                    }

                } else {
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.crtVol") + " [ " + binder.volName + " ]" + " "
                            + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.CRT_VOL_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.CRT_VOL_ROW);
                    crtVolStepOK = false;
                }
            }

            if (crtVolStepOK) {
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_END), RunningTaskPane.CRT_VOL_ROW, 2);
            } else {
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.CRT_VOL_ROW, 2);
            }
        } else {
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_END), RunningTaskPane.CRT_VOL_ROW, 2);
            runningTaskPane.setLogOnTabpane(
                    SanBootView.res.getString("InitBootHostWizardDialog.log.crtNothing"),
                    RunningTaskPane.CRT_VOL_ROW);
        }
        SanBootView.log.info(getClass().getName(), " @@#################  Create Volume End ###################@@ ");

        // 1.5 add lun-map for all selected existed volume
        size = selList.size();
        boolean hasIp = false;
        SanBootView.log.info(getClass().getName(), "seled vol num: " + size);
        for (i = 0; i < size; i++) {
            binder = (BindOfPartandVol) selList.elementAt(i);
            tid = binder.vol.getTargetID();
            SanBootView.log.info(getClass().getName(), "seled vol tid: " + tid);

            hasIp = false;

            // 首先删除老的、没用的lunmap,不管是否成功删除
            isOk = view.initor.mdb.getLunMapForTID(tid);
            if (isOk) {
                lmList = view.initor.mdb.getAllLunMapForTid();
                size1 = lmList.size();
                for (j = 0; j < size1; j++) {
                    lm = (LunMap) lmList.elementAt(j);
                    if (!lm.getIP().equals(ip)) {
                        view.initor.mdb.delLunMap(tid, lm.getIP(), lm.getMask(), lm.getAccessMode());
                    } else {
                        hasIp = true;
                    }
                }
            }

            if (!hasIp) {
                isOk = view.initor.mdb.addLunMap(tid, ip, "255.255.255.255", "rw", "", "", "", "");
                if (isOk) {
                    runningTaskPane.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " "
                            + SanBootView.res.getString("common.ok"),
                            RunningTaskPane.CRT_VOL_ROW);
                } else {
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " "
                            + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.CRT_VOL_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.CRT_VOL_ROW);
                    crtVolStepOK = false;
                }
            }
        }

        // 2. format volume
        formatVolStepOK = true;
        runningTaskPane.setCurTabPane(RunningTaskPane.FORMAT_VOL_ROW);
        SanBootView.log.info(getClass().getName(), " @@#################  Format Volume Begin ###################@@ ");

        size = formatList.size();
        if (size > 0) {
            targetSrvName = view.initor.mdb.getHostName();
            int index = ip.lastIndexOf(".");
            String lastItemOfIP = ip.substring(index + 1);

            if (targetSrvName.equals("")) {
                SanBootView.log.error(getClass().getName(), " target server name is null.");
                formatVolStepOK = false;
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.getHostNameFailed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.FORMAT_VOL_ROW, 2);
            } else {
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_RUNNING), RunningTaskPane.FORMAT_VOL_ROW, 2);

                // add portal
//                addPortal = view.initor.mdb.addPortal(ip, port, view.initor.getTxIP(ip), ResourceCenter.ISCSI_LOGIN_PORT);
                addPortal = view.initor.mdb.addPortal(ip, port, getTxIP(), ResourceCenter.ISCSI_LOGIN_PORT);
                if (!addPortal) {
                    formatVolStepOK = false;
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addPortal") + " [ " + getTxIP() + "," + ResourceCenter.ISCSI_LOGIN_PORT + " ] "
                            + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                    runningTaskPane.setTaskStatus(
                            InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.FORMAT_VOL_ROW, 2);
                } else {
                    // 刷新 target disk; 如果失败，则clnt无法看见target vol,也就无法进行格式化了
                    listTargets = view.initor.mdb.listTargetDisk(ip, port);
                    if (!listTargets) {
                        formatVolStepOK = false;
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.refreshTargets")
                                + SanBootView.res.getString("common.failed");
                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                        writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                        runningTaskPane.setTaskStatus(
                                InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.FORMAT_VOL_ROW, 2);
                    } else {
                        // 真正开始 format target vol
                        for (i = 0; i < size; i++) {
                            binder = (BindOfPartandVol) formatList.elementAt(i);

                            if (binder.isRealVol) { // GUI上选中了"孤立卷"
                                volName = binder.vol.getSnap_name();
                                targetID = binder.vol.getTargetID();
                                iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + targetID;
                                SanBootView.log.info(getClass().getName(), "targetid: " + targetID + "  original dev size: " + binder.part.size + "  iscsi vol size: " + binder.volSize);

                                // 记录C盘所在的volume是否要login
                                osVol = selectSysVolPane.getSelectOSDiskVol();
                                if (osVol != null) {
                                    if (osVol.getTargetID() == targetID) {
                                        hasLoginOSDisk = true;
                                    }
                                }

                                if (view.initor.mdb.hasThisTargetDisk(iscsiVar)) {
                                    // login this target volume
                                    if (view.initor.mdb.loginTarget(
                                            ip,
                                            port,
                                            iscsiVar)) {
                                        runningTaskPane.setLogOnTabpane(
                                                SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") + " [ " + iscsiVar + " ]"
                                                + SanBootView.res.getString("common.ok"),
                                                RunningTaskPane.FORMAT_VOL_ROW);

                                        // 记录C盘所在的volume是否成功login
                                        osVol = selectSysVolPane.getSelectOSDiskVol();
                                        if (osVol != null) {
                                            if (osVol.getTargetID() == targetID) {
                                                isLoginOSDiskOk = true;
                                                iscsiVarForOSDisk = iscsiVar;
                                            }
                                        }

                                        // 由于iscsi卷的大小不能确定，所以format的时间不好确定，
                                        // 故而一律将超时时间设置为10 hours
                                        view.initor.mdb.setNewTimeOut(ResourceCenter.MAX_TIMEOUT);
                                        isOk = view.initor.mdb.formatVol(
                                                ip,
                                                port,
                                                iscsiVar,
                                                binder.part.fsType,
                                                ResourceCenter.VOL_LABEL_PREFIX + lastItemOfIP + "-" + binder.part.getDiskLabel().substring(0, 1),
                                                binder.part.isActivePart() ? "Active" : "InActive");
                                        view.initor.mdb.restoreOldTimeOut();

                                        if (isOk) {
                                            runningTaskPane.setLogOnTabpane(
                                                    SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ]" + " "
                                                    + SanBootView.res.getString("common.ok"),
                                                    RunningTaskPane.FORMAT_VOL_ROW);

                                            // 记录C盘所在的volume是否成功format
                                            mayLogout = false;
                                            osVol = selectSysVolPane.getSelectOSDiskVol();
                                            if (osVol != null) {
                                                if (osVol.getTargetID() == targetID) {
                                                    isFormatOSDiskOk = true;
                                                    mayLogout = true;
                                                } else {
                                                    mayLogout = true;
                                                }
                                            } else {
                                                mayLogout = true;
                                            }

                                            if (mayLogout) {
                                                driver = view.initor.mdb.getTargetDriver(
                                                        ip,
                                                        port,
                                                        iscsiVar);

                                                if (driver.equals("")) {
                                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundDriver") + "[ " + iscsiVar + " ]";
                                                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                    writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                    formatVolStepOK = false;
                                                } else {
                                                    // 注销失败不算严重错误，不置formatVolStepOK为false
                                                    isOk = view.initor.mdb.logoutTarget(ip, port, iscsiVar, driver.substring(0, 2));
                                                    if (isOk) {
                                                        runningTaskPane.setLogOnTabpane(
                                                                SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar + " ]" + " "
                                                                + SanBootView.res.getString("common.ok"),
                                                                RunningTaskPane.FORMAT_VOL_ROW);
                                                    } else {
                                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar + " ]" + " "
                                                                + SanBootView.res.getString("common.failed");
                                                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                        writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                    }
                                                }
                                            }
                                        } else {
                                            if (binder.part.fsType.toUpperCase().startsWith("FAT")) {
                                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ]" + " "
                                                        + SanBootView.res.getString("common.failed") + " [ " + SanBootView.res.getString("InitBootHostWizardDialog.log.tooLargeFsSize") + " ]";
                                                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                            } else {
                                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ]" + " "
                                                        + SanBootView.res.getString("common.failed");
                                                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                            }
                                            formatVolStepOK = false;
                                        }
                                    } else {
                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") + " [ " + iscsiVar + " ]"
                                                + SanBootView.res.getString("common.failed");
                                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                        writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                        formatVolStepOK = false;
                                    }
                                } else {
                                    SanBootView.log.error(getClass().getName(), "Error: not found target from iSCSI Initiator: " + iscsiVar);
                                    // 没有发现target disk
                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundTDisk") + " [ " + iscsiVar + " ]";
                                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                    writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                    formatVolStepOK = false;
                                }
                            } else { // format new created volume
                                volName = binder.volName;
                                targetID = binder.targetID;
                                iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + targetID;
                                SanBootView.log.info(getClass().getName(), "targetid: " + targetID + "  original dev size: " + binder.part.size + "  iscsi vol size: " + binder.volSize);

                                // 记录C盘所在的volume是否要login
                                if (OSBinder != null) {
                                    if (OSBinder.targetID == targetID) {
                                        hasLoginOSDisk = true;
                                    }
                                }

                                if (view.initor.mdb.hasThisTargetDisk(iscsiVar)) {
                                    // login this target volume
                                    if (view.initor.mdb.loginTarget(
                                            ip,
                                            port,
                                            iscsiVar)) {
                                        runningTaskPane.setLogOnTabpane(
                                                SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") + " [ " + iscsiVar + " ]"
                                                + SanBootView.res.getString("common.ok"),
                                                RunningTaskPane.FORMAT_VOL_ROW);

                                        // 记录C盘所在的volume是否成功login
                                        if (OSBinder != null) {
                                            if (OSBinder.targetID == targetID) {
                                                isLoginOSDiskOk = true;
                                                iscsiVarForOSDisk = iscsiVar;
                                            }
                                        }

                                        view.initor.mdb.setNewTimeOut(ResourceCenter.MAX_TIMEOUT);
                                        isOk = view.initor.mdb.formatVol(
                                                ip,
                                                port,
                                                iscsiVar,
                                                binder.part.fsType,
                                                ResourceCenter.VOL_LABEL_PREFIX + lastItemOfIP + "-" + binder.part.getDiskLabel().substring(0, 1),
                                                binder.part.isActivePart() ? "Active" : "InActive");
                                        view.initor.mdb.restoreOldTimeOut();

                                        if (isOk) {
                                            runningTaskPane.setLogOnTabpane(
                                                    SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ]" + " "
                                                    + SanBootView.res.getString("common.ok"),
                                                    RunningTaskPane.FORMAT_VOL_ROW);

                                            // 记录C盘所在的volume是否成功format
                                            mayLogout = false;
                                            if (OSBinder != null) {
                                                if (OSBinder.targetID == targetID) {
                                                    isFormatOSDiskOk = true;
                                                    mayLogout = true;
                                                } else {
                                                    mayLogout = true;
                                                }
                                            } else {
                                                mayLogout = true;
                                            }

                                            if (mayLogout) {
                                                driver = view.initor.mdb.getTargetDriver(
                                                        ip,
                                                        port,
                                                        iscsiVar);

                                                if (driver.equals("")) {
                                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundDriver") + "[ " + iscsiVar + " ]";
                                                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                    writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                    formatVolStepOK = false;
                                                } else {
                                                    // 注销失败不算严重错误，不置formatVolStepOK为false
                                                    isOk = view.initor.mdb.logoutTarget(ip, port, iscsiVar, driver.substring(0, 2));
                                                    if (isOk) {
                                                        runningTaskPane.setLogOnTabpane(
                                                                SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar + " ]" + " "
                                                                + SanBootView.res.getString("common.ok"),
                                                                RunningTaskPane.FORMAT_VOL_ROW);
                                                    } else {
                                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + "[ " + iscsiVar + " ]" + " "
                                                                + SanBootView.res.getString("common.failed");
                                                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                        writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                    }
                                                }
                                            }

                                        } else {
                                            if (binder.part.fsType.toUpperCase().startsWith("FAT")) {
                                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ]" + " "
                                                        + SanBootView.res.getString("common.failed") + " [ " + SanBootView.res.getString("InitBootHostWizardDialog.log.tooLargeFsSize") + " ]";
                                                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                            } else {
                                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.formatVol") + "[ " + volName + " ]" + " "
                                                        + SanBootView.res.getString("common.failed");
                                                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                                writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                            }

                                            formatVolStepOK = false;
                                        }
                                    } else {
                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") + " [ " + iscsiVar + " ]"
                                                + SanBootView.res.getString("common.failed");
                                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                        writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                        formatVolStepOK = false;
                                    }
                                } else {
                                    SanBootView.log.error(getClass().getName(), "Error: not found target from iSCSI Initiator: " + iscsiVar);
                                    // 没有发现target disk
                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notFoundTDisk") + " [ " + iscsiVar + " ]";
                                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                    writeLogBuf(errMsg, RunningTaskPane.FORMAT_VOL_ROW);
                                    formatVolStepOK = false;
                                }
                            }
                        }

                        if (formatVolStepOK) {
                            runningTaskPane.setTaskStatus(
                                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_END), RunningTaskPane.FORMAT_VOL_ROW, 2);
                        } else {
                            runningTaskPane.setTaskStatus(
                                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.FORMAT_VOL_ROW, 2);
                        }
                    }
                }
            }
        } else {
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_END), RunningTaskPane.FORMAT_VOL_ROW, 2);
            runningTaskPane.setLogOnTabpane(
                    SanBootView.res.getString("InitBootHostWizardDialog.log.formatNothing"),
                    RunningTaskPane.FORMAT_VOL_ROW);
        }
        SanBootView.log.info(getClass().getName(), " @@#################  Format Volume End ###################@@ ");

        // 3. get other info.
        getInfoStepOK = true;
        runningTaskPane.setCurTabPane(RunningTaskPane.GET_INFO_ROW);
        runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_RUNNING), RunningTaskPane.GET_INFO_ROW, 2);
        SanBootView.log.info(getClass().getName(), " @@#################  Get other info Begin ###################@@ ");

        if (!selectNetBootModePane.isSelectIScsiHBAMode()) {
            netCard = (NetCard) selectNetCardPane.getSelectNetCard(); // 肯定有
        } else {
            netCard = new NetCard("00-00-00-00-00-00");
        }

        isOk = view.initor.mdb.getIPInfoFromClnt(ip, port, netCard.mac);
        if (isOk) {
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_END), RunningTaskPane.GET_INFO_ROW, 2);
            runningTaskPane.setLogOnTabpane(
                    SanBootView.res.getString("InitBootHostWizardDialog.log.getIpInfo") + " "
                    + SanBootView.res.getString("common.ok"),
                    RunningTaskPane.GET_INFO_ROW);

            runningTaskPane.setLogOnTabpane(
                    view.initor.mdb.getIpContents(),
                    RunningTaskPane.GET_INFO_ROW);
        } else {
            getInfoStepOK = false;

            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.GET_INFO_ROW, 2);
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.getIpInfo")
                    + SanBootView.res.getString("common.failed");
            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.GET_INFO_ROW);
            writeLogBuf(errMsg, RunningTaskPane.GET_INFO_ROW);
        }
        SanBootView.log.info(getClass().getName(), " @@#################  Get other info END ###################@@ ");

        // 4. copy OS and save info  
        boolean autoDRReover = false;
        boolean autoReboot = false;
        boolean stopBaseServ = selectServPane.isStopAllService();
        boolean useOdyDhcp = (!selectNetBootModePane.isSelectIScsiHBAMode()) && setDhcpPane.isAutoSetup();

        saveInfoStepOK = true;
        boolean isOkForCrtVolMapFromCrtList = true;
        boolean isOkForCrtVolMapFromSelList = true;
        boolean isOkForSaveIp = true;
        boolean isOkForSavePartition = true;
        boolean isOkForSavePartition1 = true;
        boolean isOkForSaveServer = true;
        boolean isOkForSaveServer1 = true;
        boolean isOkForSaveDhcpInfo = false;
        boolean isOkForSaveIbootInfo = false;
        boolean isOkForSaveService = true;
        boolean isCopyOS = true;
        boolean isOkForModHostInfo = true;
        SanBootView.log.info(getClass().getName(), " @@#################  Copy OS Begin ###################@@ ");

        host = this.getSelectHost(uuid);
        if (host != null) {// MDB中已经存在该clnt
            hasAddBootHost = false;
            isAddHostOk = true; // 为了与下面的"增加host分支"相匹配

            // 4.1 begin to copy OS 
            runningTaskPane.setCurTabPane(RunningTaskPane.COPY_OS_ROW);
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_RUNNING), RunningTaskPane.COPY_OS_ROW, 2);
        } else { // host 不在 MDB中
            hasAddBootHost = true;
            isAddHostOk = true;  // 增加host是否成功

            // 4.1 copy OS 
            runningTaskPane.setCurTabPane(RunningTaskPane.COPY_OS_ROW);
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_RUNNING), RunningTaskPane.COPY_OS_ROW, 2);

            // 首先增加host
            host = new BootHost(
                    -1,
                    getAgentInfo.getHostName(),
                    ip,
                    getAgentInfo.getMachine(),
                    port,
                    port,
                    getAgentInfo.getOSName(),
                    "Online",
                    uuid,
                    0, // inited ?( 稍后根据情况还要修改 )
                    autoDRReover ? 1 : 0, // auto dr ?
                    autoReboot ? 1 : 0, // auto reboot?
                    stopBaseServ ? 1 : 0, // stop all base server?
                    netCard.mac,
                    selectNetBootModePane.getBootMode(),
                    BootHost.PROTECT_TYPE_MTPP);

            isOk = view.initor.mdb.addOneBootHost(host);
            if (isOk) {
                host.setID(view.initor.mdb.getNewId());
                view.initor.mdb.addBootHostToVector(host);
            } else {
                isAddHostOk = false;

                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addHost")
                        + SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
            }
        }

        if (isAddHostOk) {
            // create volMap from crtList and selList. copyOS function need these volMaps.
            Vector oldVolMapList = view.initor.mdb.getVolMapOnClntID(host.getID());
            isOkForCrtVolMapFromCrtList = createVolMapFromCrtList(crtList, host.getID());
            isOkForCrtVolMapFromSelList = createVolMapFromSelList1(selList, oldVolMapList, host.getID());

            if (isOkForCrtVolMapFromCrtList && isOkForCrtVolMapFromSelList) {
                isCopyOS = copyOS();
            } else {
                isCopyOS = false;
            }

            if (isCopyOS) {
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_END), RunningTaskPane.COPY_OS_ROW, 2);
            } else {
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
            }
        }
        SanBootView.log.info(getClass().getName(), " @@#################  Copy OS End ###################@@ ");

        runningTaskPane.setCurTabPane(RunningTaskPane.SAVE_INFO_ROW);
        runningTaskPane.setTaskStatus(
                InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_RUNNING), RunningTaskPane.SAVE_INFO_ROW, 2);
        SanBootView.log.info(getClass().getName(), " @@#################  Save info Begin ###################@@ ");

        if (isAddHostOk) {
            // 4.3 保存dhcp config
            DhcpClientInfo dhcpInfo = setDhcpPane.getDhcpSetInfo();
            if (useOdyDhcp) {
                // 先删除这个dhcp conf
                DhcpClientInfo olddhcpInfo = setDhcpPane.getOldDhcpClntInfo();
                String simpleMac = "";
                if (olddhcpInfo != null) {
                    SanBootView.log.info(getClass().getName(), " find old dhcp info: " + olddhcpInfo.mac);
                    simpleMac = NetCard.getSimpleMac1(olddhcpInfo.mac);
                } else {
                    simpleMac = NetCard.getSimpleMac(netCard.mac);
                    SanBootView.log.warning(getClass().getName(), " old dhcp info is null, new mac: " + simpleMac);
                }
                isOk = view.initor.dhcpdb.dhcpOperation(
                        ResourceCenter.BIN_DIR + "dhcp_set.sh delcli -p " + simpleMac);
                if (isOk) {
                    targetSrvName = view.initor.mdb.getHostName();
                    if (targetSrvName.equals("")) {
                        SanBootView.log.error(getClass().getName(), " Error: target server name is null.");
                        errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostNameFailed");
                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                        writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                    } else {
                        try {
                            Thread.sleep(5000); // 睡5秒钟，否则连续执行delcli和addcli会造成dhcpd起不来
                        } catch (Exception ex) {
                        }

                        boolean hasdns = (!dhcpInfo.dns.equals(""));
                        boolean hasgw = (!dhcpInfo.defgw.equals(""));
                        String ibootSrv = dhcpInfo.nextServer;
                        args = "";
                        if (hasdns) {
                            args += " -d " + dhcpInfo.dns;
                        }
                        if (hasgw) {
                            args += " -g " + dhcpInfo.defgw;
                        }
                        args += " -i " + dhcpInfo.ip + " -p " + NetCard.getSimpleMac(netCard.mac) + " -s " + dhcpInfo.subnet + " -x " + ibootSrv + " -ostype windows";

                        if (this.selectNetBootModePane.isSelectIBootMode()) {
                            int tid2;
                            if (hasCrtOSDisk) { // os volume 是创建产生的
                                tid2 = OSBinder.targetID;
                            } else { // os volume使用已经存在的volume
                                Volume volume = selectSysVolPane.getSelectOSDiskVol();
                                tid2 = volume.getTargetID();
                            }

                            String iboot_dhcp_ip1 = "";
                            DhcpClientInfo curDhcpInfo = setDhcpPane.getDhcpSetInfo();
                            if (setDhcpPane.isAutoSetup()) {
                                iboot_dhcp_ip1 = curDhcpInfo.ip;
                            } else {
                                iboot_dhcp_ip1 = curDhcpInfo.ip_3rd;
                            }
                            view.initor.mdb.addLunMap(tid2, iboot_dhcp_ip1, "255.255.255.255", "rw", "", "", "", "");
                            String tn = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + tid2;
                            args += " -boottype iboot  -bootserverip " + ibootSrv + " -boottargetid " + tn;
                        }
                        isOk = view.initor.dhcpdb.dhcpOperation(
                                ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args);
                        if (isOk) {
                            isOk = view.initor.dhcpdb.getClientFromDhcp();
                            if (isOk) {
                                if (view.initor.dhcpdb.getSelClntOnMac(NetCard.getUnixMac(netCard.mac)) != null) {
                                    isOkForSaveDhcpInfo = true;
                                    runningTaskPane.setLogOnTabpane(
                                            SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf") + " "
                                            + SanBootView.res.getString("common.ok"),
                                            RunningTaskPane.SAVE_INFO_ROW);
                                } else {
                                    SanBootView.log.error(getClass().getName(), "Error: not found record in dhcp config about MAC: " + netCard.mac);
                                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf") + " "
                                            + SanBootView.res.getString("common.failed");
                                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                    writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                }
                            } else {
                                errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf") + " "
                                        + SanBootView.res.getString("common.failed");
                                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                            }
                        } else {
                            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf") + " "
                                    + SanBootView.res.getString("common.failed");
                            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                            writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                        }
                    }
                } else {
                    errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf") + " "
                            + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                }
            } else {
                // save the 3rd dhcp setup info.   
                String hostip_3rd = "";
                String nextsrv_3rd = "";
                if (!selectNetBootModePane.isSelectIScsiHBAMode()) {
                    hostip_3rd = dhcpInfo.ip_3rd;
                    nextsrv_3rd = dhcpInfo.nextServer_3rd;
                } else {
                    hostip_3rd = selectNetBootModePane.getBootIPForIscsiHBA();
                    nextsrv_3rd = view.initor.txIp;
                }

                isOkForSaveDhcpInfo = saveInfo(ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_3RD_DHCP, "ip:" + hostip_3rd + "  nextsrv:" + nextsrv_3rd);
                String tipStr = SanBootView.res.getString("InitBootHostWizardDialog.log.save3rdDhcpInfo");
                if (selectNetBootModePane.isSelectIScsiHBAMode()) {
                    tipStr = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIscsiHBAInfo");
                }
                if (isOkForSaveDhcpInfo) {
                    runningTaskPane.setLogOnTabpane(tipStr + " " + SanBootView.res.getString("common.ok"),
                            RunningTaskPane.SAVE_INFO_ROW);
                } else {
                    errMsg = tipStr + " " + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                }
            }

// 初始化时不做iboot的设置，全部统一到灾难恢复（网络启动）的向导中做,
// 但这样做是否妥当，还需考虑(2008/3/30)

            // 4.4 iboot option setup
            int tid1;
            boolean needAddIboot = true;
            if (hasCrtOSDisk) {
                if (!isCrtOSDiskOk) {
                    needAddIboot = false;
                }
            }

            if (needAddIboot && selectNetBootModePane.isSelectEmBootMode()) {
                if (hasCrtOSDisk) { // os volume 是创建产生的
                    tid1 = OSBinder.targetID;
                } else { // os volume使用已经存在的volume
                    Volume volume = selectSysVolPane.getSelectOSDiskVol();
                    if (volume != null) {
                        tid1 = volume.getTargetID();
                    } else {
                        tid1 = -1;
                        isOkForSaveIbootInfo = true;
                    }
                }
                if (tid1 != -1) {
                    DhcpClientInfo olddhcpInfo = setDhcpPane.getOldDhcpClntInfo();
                    String simpleMac = "";
                    if (olddhcpInfo != null) {
                        SanBootView.log.info(getClass().getName(), " (iboot setup)find old dhcp info: " + olddhcpInfo.mac);
                        simpleMac = NetCard.getSimpleMac1(olddhcpInfo.mac);
                    } else {
                        simpleMac = NetCard.getSimpleMac(netCard.mac);
                        SanBootView.log.warning(getClass().getName(), " (iboot setup)old dhcp info is null, new mac: " + simpleMac);
                    }

                    // add lunmap on ip assigned by dhcp setup for os target(Don't care result.)
                    String iboot_dhcp_ip = "";
                    DhcpClientInfo curDhcpInfo = setDhcpPane.getDhcpSetInfo();
                    if (setDhcpPane.isAutoSetup()) {
                        iboot_dhcp_ip = curDhcpInfo.ip;
                    } else {
                        iboot_dhcp_ip = curDhcpInfo.ip_3rd;
                    }
                    isOk = view.initor.mdb.addLunMap(tid1, iboot_dhcp_ip, "255.255.255.255", "rw", "", "", "", "");

                    // find suitable initiator ip according to dhcp setup
                    String iboot_next_server = "";
                    if (setDhcpPane.isAutoSetup()) {
                        iboot_next_server = curDhcpInfo.nextServer;
                    } else {
                        iboot_next_server = curDhcpInfo.nextServer_3rd;
                    }

                    isOk = view.initor.mdb.listIboot();
                    if (isOk) {
                        if (view.initor.mdb.getFromVectorOnMac(NetCard.getSimpleMac(netCard.mac)) != null) {
                            //isOk = view.initor.mdb.modIboot( NetCard.getSimpleMac( netCard.mac ), IBootObj.IBOOT_PORTALIP, view.initor.getTxIP() );
                            isOk = view.initor.mdb.modIboot(NetCard.getSimpleMac(netCard.mac), IBootObj.IBOOT_PORTALIP, iboot_next_server);
                            if (isOk) {
                                targetSrvName = view.initor.mdb.getHostName();
                                if (targetSrvName.equals("")) {
                                    SanBootView.log.error(getClass().getName(), " Error: target server name is null.");
                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf") + " "
                                            + SanBootView.res.getString("common.failed");
                                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                    writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                } else {
                                    String tgtName = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + tid1;
                                    isOk = view.initor.mdb.modIboot(NetCard.getSimpleMac(netCard.mac), IBootObj.IBOOT_TGTNAME, tgtName);
                                    if (isOk) {
                                        isOkForSaveIbootInfo = true;
                                        runningTaskPane.setLogOnTabpane(
                                                SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf") + " "
                                                + SanBootView.res.getString("common.ok"),
                                                RunningTaskPane.SAVE_INFO_ROW);
                                    } else {
                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf") + " "
                                                + SanBootView.res.getString("common.failed");
                                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                        writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                    }
                                }
                            } else {
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf") + " "
                                        + SanBootView.res.getString("common.failed");
                                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                            }
                        } else {
                            //isOk = view.initor.mdb.addIboot( NetCard.getSimpleMac( netCard.mac ), view.initor.getTxIP(), tid1 );
                            isOk = view.initor.mdb.addIboot(NetCard.getSimpleMac(netCard.mac), iboot_next_server, tid1);
                            if (isOk) {
                                isOk = view.initor.mdb.listIboot();
                                if (isOk) {
                                    if (view.initor.mdb.getFromVectorOnMac(NetCard.getSimpleMac(netCard.mac)) != null) {
                                        isOkForSaveIbootInfo = true;
                                        runningTaskPane.setLogOnTabpane(
                                                SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf") + " "
                                                + SanBootView.res.getString("common.ok"),
                                                RunningTaskPane.SAVE_INFO_ROW);
                                    } else {
                                        SanBootView.log.error(getClass().getName(), "Error: not found record abount MAC: " + netCard.mac);
                                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf") + " "
                                                + SanBootView.res.getString("common.failed");
                                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                        writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                    }
                                } else {
                                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf") + " "
                                            + SanBootView.res.getString("common.failed");
                                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                    writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                }
                            } else {
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf") + " "
                                        + SanBootView.res.getString("common.failed");
                                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                                writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                            }
                        }
                    } else {
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIbootConf") + " "
                                + SanBootView.res.getString("common.failed");
                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                        writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                    }
                }
            } else {
                isOkForSaveIbootInfo = true;
            }

            // 4.5 保存ip info
            if (getInfoStepOK) {
                SanBootView.log.debug(getClass().getName(), "ip contents: " + view.initor.mdb.getIpContents());
                isOkForSaveIp = saveInfo(ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ".conf", view.initor.mdb.getIpContents());
                if (isOkForSaveIp) {
                    runningTaskPane.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.saveIPConf") + " "
                            + SanBootView.res.getString("common.ok"),
                            RunningTaskPane.SAVE_INFO_ROW);
                } else {
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveIPConf") + " "
                            + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                }
            }

            // 4.6 save partition info
            isOkForSavePartition = saveInfo(ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_NORMAL_DISK, partitionContent);

            // 4.7 save disk partition info
            isOkForSavePartition1 = saveInfo(ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_OLDDISK, diskDetailInfo);
            if (isOkForSavePartition1 && isOkForSavePartition) {
                runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo") + " "
                        + SanBootView.res.getString("common.ok"),
                        RunningTaskPane.SAVE_INFO_ROW);
            } else {
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo") + " "
                        + SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
            }

            isOkForSaveService = saveInfo(ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_SERVICE, view.initor.mdb.getOSServiceContents());
            if (isOkForSaveService) {
                runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitBootHostWizardDialog.log.saveServiceInfo") + " "
                        + SanBootView.res.getString("common.ok"),
                        RunningTaskPane.SAVE_INFO_ROW);
            } else {
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.saveServiceInfo") + " "
                        + SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
            }

            // 4.8 保存/修改 service
            if (selectServPane.isStopAllService()) {
                isOkForSaveServer = addServiceList(host.getID(), selectServPane.getServiceInfo());
            } else {
                Vector oldServList = view.initor.mdb.getAllServMapOnClntID(host.getID());
                isOkForSaveServer1 = addServiceList1(host.getID(), selectServPane.getServiceInfo(), oldServList);
            }

            // 发送netbootinfo 到所有相关的dest uws server上,不关心其是否成功
            sendNetbootInfoToDestUWS();

            // 4.9 修改 boot host
            saveInfoStepOK = (isOkForSaveDhcpInfo && isOkForSaveIbootInfo && isOkForSaveIp && isOkForSavePartition && isOkForSavePartition1 && isOkForSaveServer && isOkForSaveServer1 && isOkForSaveService);
            boolean initOK = (crtVolStepOK && formatVolStepOK && getInfoStepOK && isCopyOS && saveInfoStepOK);

            // 修改主机信息
            if (stopBaseServ) {
                host.setStopAllBaseServ();
            } else {
                host.clearStopAllBaseServ();
            }
            if (useOdyDhcp) {
                host.setUseOdyDhcp();
            } else {
                host.clearUseOdyDhcp();
            }
            isOkForModHostInfo = view.initor.mdb.modOneBootHost1(
                    host.getID(),
                    initOK ? 1 : 0, // 除了修改主机信息后，所有的都成功了
                    autoDRReover ? 1 : 0,
                    autoReboot ? 1 : 0,
                    host.getStopAllBaseServFlag(),
                    netCard.mac,
                    selectNetBootModePane.getBootMode());
            if (!isOkForModHostInfo) {
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modHost")
                        + SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
            } else {
                // modify host in cache
                host.setInitFlag(initOK ? 1 : 0);
                host.setAutoDRFlag(autoDRReover ? 1 : 0);
                host.setAutoRebootFlag(autoReboot ? 1 : 0);
                host.setBootMode(selectNetBootModePane.getBootMode());
            }

            if (isOkForModHostInfo && saveInfoStepOK) { // 只判断save_info步骤是否成功
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_END), RunningTaskPane.SAVE_INFO_ROW, 2);
            } else {
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.SAVE_INFO_ROW, 2);
            }

            allFinished = isOkForModHostInfo && initOK;
        } else {
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.SAVE_INFO_ROW, 2);
            // errMsg使用增加主机时的错误.
            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
            writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);

            allFinished = false; // add host failed,so allFinished = false
        }

        // 4.10 保存UWS report( 不考虑其是否成功,有可能写入server上的report库中，或者写到了GUI所在的主机上)
        recordUWSRpt(allFinished);

        SanBootView.log.info(getClass().getName(), " @@#################  Save info End ###################@@ ");
        SanBootView.log.info(getClass().getName(), " @@#################  Init Windows host End ###################@@ ");
    }

    // 复制 C 盘时要检查是否为active的（由文剑完成）
    private boolean copyOS() {
        boolean isOk;
        int i, j, size, cnt = 0, size1;
        UniProfile prof;
        UniProBackup backup;
        UniProHeader header;
        UniProIBoot iboot;
        UniProDrive drive1;
        File tmpFile;
        String bkSrc, profName, bootMac;

        // 首先获取 iscsi target server的名字
        targetSrvName = view.initor.mdb.getHostName();
        if (targetSrvName.equals("")) {
            SanBootView.log.error(getClass().getName(), " Error: target server name is null.");
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostNameFailed");
            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
            writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
            return false;
        }

        String aWindir = view.initor.mdb.getWinDir(host.getIP(), host.getMtppPort());
        if (aWindir.equals("")) {
            SanBootView.log.error(getClass().getName(), " Error: Not found window directory.");
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.notFoundWindir");
            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
            writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
            return false;
        }

        if (!selectNetBootModePane.isSelectIScsiHBAMode()) {
            NetCard netCard = (NetCard) selectNetCardPane.getSelectNetCard(); // 肯定有
            bootMac = netCard.mac;
        } else {
            bootMac = "";
        }

        ArrayList profList = dupStrgyPane.getProfileInfoFromTab();
        size = profList.size();
        for (i = 0; i < size; i++) {
            prof = (UniProfile) profList.get(i);
            backup = prof.getUniProBackup();
            header = prof.getUniProHeader();
            drive1 = prof.getUniProDrive1();
            iboot = prof.getUniProIBoot();
            bkSrc = backup.getSrc();
            profName = prof.toString();

            if (!prof.isSel) {
                cnt++;
            }

            // 生成src-dest-mapper
            getMpListForWin(bkSrc);
            String src_dest_map = getDestDevPathForWin(true);
            if (src_dest_map == null) {
                SanBootView.log.error(getClass().getName(), " Error: getting src_dest_mapper for profile failed.");
                errMsg += " : " + profName;
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
                return false;
            } else {
                header.setSource_dest_reference(src_dest_map);
            }

            // 生成 drive-1部分
            String path = getDestDevPathForWin(false);
            if (path == null) {
                SanBootView.log.error(getClass().getName(), " Error: getting dest_path for profile failed.");
                errMsg += " : " + profName;
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
                return false;
            } else {
                drive1.setPath(path);
            }

            // update iboot user info
            iboot.setUws_username(view.initor.user);
            iboot.setUws_passwd(view.initor.passwd);
            iboot.setUws_port(view.initor.port + "");
            iboot.setUws_ip(getTxIP());
            //iboot.setUws_ip(view.initor.txIp);

            // 生成iboot_aft_cmd
            iboot.cleanIboot_bf_cmd();
            iboot.cleanIboot_af_cmd();
            String windir = "/C:/" + aWindir;
            if (EditProfileDialog.isOsDupForWin(backup.getSrc(), backup.getExcludeFromBak(), windir)) {
                int tid = getOsTidForWin();
                if (tid <= 0) {
                    SanBootView.log.error(getClass().getName(), " Error: Can't get os volume's target id.");
                    errMsg += " : " + profName;
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                    runningTaskPane.setTaskStatus(
                            InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
                    return false;
                }

                iboot.setOsTid(tid);

                Object[] val = InitBootHostWizardDialog.generateIboot_cmd(
                        selectNetBootModePane.getBootMode(),
                        host,
                        tid,
                        bootMac,
                        view.initor.getTxIP(host.getIP()));
                ArrayList bef = (ArrayList) val[0];
                ArrayList aft = (ArrayList) val[1];
                size1 = bef.size();
                for (j = 0; j < size1; j++) {
                    iboot.addIboot_bf_cmd((String) bef.get(j));
                }
                size1 = aft.size();
                for (j = 0; j < size1; j++) {
                    System.out.println("================> iboot_aft_cmd : " + aft.get(j));
                    iboot.addIboot_af_cmd((String) aft.get(j));
                }

                if (host.isWin2000()) {
                    SanBootView.log.info(getClass().getName(), " after data-duplication process for win2000. ");
                    String[] ret = InitBootHostWizardDialog.w2k_process(bootMac, tid);
                    for (j = 0; j < ret.length; j++) {
                        iboot.addIboot_bf_cmd(ret[j]);
                    }
                }
            }

            // 记录mgid/maxsnap/tid的对应关系
            String mgInfo = getMgInfoForWin();
            if (mgInfo == null) {
                SanBootView.log.error(getClass().getName(), " Error: getting <mgid/maxsnap/tid> relationship failed.");
                errMsg += " : " + profName;
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
                return false;
            } else {
                iboot.setMgid_info(mgInfo);
            }

            tmpFile = view.initor.mdb.createTmpFile(ResourceCenter.PREFIX, ResourceCenter.SUFFIX_PROF);
            if (tmpFile == null) {
                SanBootView.log.error(getClass().getName(), " Error: can't generate local temp file.");
                errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
                return false;
            }

            // 发送profile的内容
            System.out.println("profile content: \n" + prof.prtMe());

            if (!view.initor.mdb.sendFileToServer(tmpFile.getName(), prof.prtMe())) {
                SanBootView.log.error(getClass().getName(), " Error: send file from gui_console to server failed.");
                errMsg = SanBootView.res.getString("common.errmsg.sendFileFailed") + " : "
                        + view.initor.mdb.getErrorMessage();
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
                tmpFile.delete();
                return false;
            }
            tmpFile.delete();

            // 将tmpFile move to profile dir
            isOk = view.initor.mdb.moveFile(
                    ResourceCenter.TMP_DIR + tmpFile.getName(),
                    prof.getProfileName());
            if (!isOk) {
                SanBootView.log.error(getClass().getName(), " Error: mv profile file failed.");
                errMsg = ResourceCenter.getCmdString(ResourceCenter.CMD_ADD_PROFILE) + ": "
                        + SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                runningTaskPane.setTaskStatus(
                        InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
                return false;
            }
        }

        if (cnt == size) {
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_END), RunningTaskPane.COPY_OS_ROW, 2);
            runningTaskPane.setLogOnTabpane(
                    SanBootView.res.getString("InitNWinHostWizardDialog.log.notNeedCopy"),
                    RunningTaskPane.COPY_OS_ROW);
            return true;
        }

        if (!crtVolStepOK || !formatVolStepOK) {
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.notCopy");
            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
            writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);

            return false;
        }

        // 开始复制
        return doCopyOS();
    }

    private boolean doCopyOS() {
        int i, size;
        UniProfile prof;
        RunBackup dup = null;
        String profName, simpleName;
        BackupClient bkClnt;
        ArrayList goodProf;
        boolean hasCommitFail = false;

        bkClnt = view.initor.mdb.getBkClntOnUUID(host.getUUID());
        if (bkClnt == null) {
            SanBootView.log.error(getClass().getName(), " Error: Can't find d2d client from MDB : UUID: " + host.getUUID());
            errMsg = SanBootView.res.getString("InitNWinHostWizardDialog.log.noneD2DClnt");
            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
            writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
            runningTaskPane.setTaskStatus(
                    InitTask.getTaskStatusStr(InitTask.INIT_TASK_STA_FAIL), RunningTaskPane.COPY_OS_ROW, 2);
            return false;
        }

        ArrayList profList = dupStrgyPane.getProfileInfoFromTab();
        size = profList.size();
        goodProf = new ArrayList(size);
        for (i = 0; i < size; i++) {
            prof = (UniProfile) profList.get(i);
            if (!prof.isSel) {
                continue;
            }

            profName = prof.getProfileName();
            simpleName = prof.toString();
            SanBootView.log.info(getClass().getName(), "data-dup profile: \n" + prof.prtMe());

            try {
                dup = new RunBackup(
                        ResourceCenter.getCmd(ResourceCenter.CMD_DATA_DUP)
                        + profName
                        + " -clnt="
                        + bkClnt.getID(),
                        view.getSocket());

                SanBootView.log.info(getClass().getName(), " data-duplication cmd: " + dup.getCmdLine());

                dup.run();
            } catch (Exception ex) {
                dup.setExceptionErrMsg(ex);
                dup.setExceptionRetCode(ex);
            }

            SanBootView.log.info(getClass().getName(), " data-duplication cmd retcode: " + dup.getRetCode());

            if (!dup.isOk()) {
                SanBootView.log.error(getClass().getName(), " data-duplication cmd errmsg: " + dup.getErrMsg());
                hasCommitFail = true;
                errMsg = simpleName + " : " + SanBootView.res.getString("InitNWinHostWizardDialog.log.dupCmdFail");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
            } else {
                goodProf.add(prof);
            }
        }

        if (hasCommitFail) {
            runningTaskPane.setLogOnTabpane("===========================================", RunningTaskPane.COPY_OS_ROW);
        }

        // 开始监控
        String prefix = runningTaskPane.getCopyLogOnTabpane(RunningTaskPane.COPY_OS_ROW);
        GetDataDupProcess getProcessThread = new GetDataDupProcess(
                view,
                runningTaskPane,
                goodProf,
                hasCommitFail,
                prefix,
                RunningTaskPane.COPY_OS_ROW);
        getProcessThread.start();

        boolean isFinished = false;
        while (!isFinished) {
            isFinished = getProcessThread.isToEnd();

            try {
                Thread.sleep(4 * 1000);
            } catch (Exception ex) {
            }
        }

        return getProcessThread.getLastResult();
    }

    public static Object[] generateIboot_cmd(int mode, BootHost host, int tid, String bootMac, String srv_ip) {
        ArrayList bef = new ArrayList();
        ArrayList aft = new ArrayList();
        StringBuffer iboot_cmd_buf = new StringBuffer();

        if (!host.isWin2000()) {
            bef.add("");
        }

        if ((mode == BootHost.BOOT_MODE_EM) || ((mode == BootHost.BOOT_MODE_IBOOT) && !host.isWin2003())) { // emboot mode 
            if (!host.isLargerThanVista()) {  // for wenjian's test on 2009-2-3
                iboot_cmd_buf.append("<UWS_PLUGIN_PATH>/excutecmd.exe ");
                iboot_cmd_buf.append("\"<UWS_PLUGIN_PATH>/startbootreg.exe\" 480 ");
                iboot_cmd_buf.append("\"<TARGET_ROOT_PATH=");
                iboot_cmd_buf.append(tid);
                iboot_cmd_buf.append("><UWS_WINDOWS_PATH>");
                iboot_cmd_buf.append("\" iSCSI ");
                iboot_cmd_buf.append(bootMac);
            } else {  // for wenjian's test on 2009-2-3
                //add-hwh 2013-10-25
//                iboot_cmd_buf.append("<UWS_PLUGIN_PATH>/excutecmd.exe ");
//                iboot_cmd_buf.append("\"<UWS_PLUGIN_PATH>/startbootreg.exe\" 480 ");
//                iboot_cmd_buf.append("\"<TARGET_ROOT_PATH=");
//                iboot_cmd_buf.append(tid);
//                iboot_cmd_buf.append("><UWS_WINDOWS_PATH>");
//                iboot_cmd_buf.append("\" iSCSI ");
//                iboot_cmd_buf.append(bootMac);
//                aft.add(iboot_cmd_buf.toString());
//                iboot_cmd_buf = new StringBuffer();
                
                iboot_cmd_buf.append("<UWS_PLUGIN_PATH>/ib_bcdedit_boot.exe ");
                iboot_cmd_buf.append("<TARGET_ROOT_PATH=");
                iboot_cmd_buf.append(tid);
                iboot_cmd_buf.append(">");
            }
        } else if (mode == BootHost.BOOT_MODE_IBOOT) { // iboot mode
            iboot_cmd_buf.append("<UWS_PLUGIN_PATH>/excutecmd.exe ");
            iboot_cmd_buf.append("\"<UWS_PLUGIN_PATH>/setreg.bat\" 480 ");
            iboot_cmd_buf.append("\"<TARGET_ROOT_PATH=");
            iboot_cmd_buf.append(tid);
            iboot_cmd_buf.append("><UWS_WINDOWS_PATH>");
            iboot_cmd_buf.append("\" iSCSI ");
            iboot_cmd_buf.append(bootMac);
        } else {  // iSCSI HBA 
            iboot_cmd_buf.append("<UWS_PLUGIN_PATH>/ib_hba_reg.exe ");
            iboot_cmd_buf.append("<TARGET_ROOT_PATH=");
            iboot_cmd_buf.append(tid);
            iboot_cmd_buf.append(">");
        }
        aft.add(iboot_cmd_buf.toString());

        iboot_cmd_buf = new StringBuffer();
        iboot_cmd_buf.append("<UWS_PLUGIN_PATH>/update_server_sch.exe -m <TARGET_ROOT_PATH=" + tid + "> <UWS_PARAM> ");
        iboot_cmd_buf.append(" -uuid " + host.getUUID());
        aft.add(iboot_cmd_buf.toString());

        Object[] ret = new Object[2];
        ret[0] = bef;
        ret[1] = aft;
        return ret;
    }

    public static String[] w2k_process(String mac, int tid) {
        /*
         * String[] ret = new String[2]; ret[0] =
         * "<UWS_PLUGIN_PATH>/ib_del_ody_junction.exe";
         *
         * StringBuffer buf = new StringBuffer(); buf.append(
         * "<UWS_PLUGIN_PATH>/excutecmd.exe " ); buf.append(
         * "\"<UWS_PLUGIN_PATH>/startsyscopy.exe\" 72000 " ); buf.append( mac );
         * buf.append( " <TARGET_ROOT_PATH=" ); buf.append( tid ); buf.append(
         * ">" ); ret[1] = buf.toString();
         */

        // for wenjian's test on 2009-2-3
        String[] ret = new String[0];
        return ret;
    }
    private Hashtable winSrcList = new Hashtable();

    private void getMpListForWin(String bkSrc) {
        String src, driver;
        Object val;
        int ch, key;

        winSrcList.clear();
        String[] lines = Pattern.compile(";").split(bkSrc, -1);

        for (int i = 0; i < lines.length; i++) {
            src = lines[i];
            if (src.equals("")) {
                continue;
            }

            try {
                // 全部统一成大写的
                src = src.toUpperCase();
                ch = src.charAt(0);
                if (ch == '/' || ch == '\\') {
                    src = src.substring(1);
                }
                driver = src.substring(0, 1);
                key = (int) driver.charAt(0);
            } catch (Exception ex) {
                continue;
            }

            val = winSrcList.get(new Integer(key));
            if (val == null) {
                winSrcList.put(new Integer(key), driver);
            }
        }
    }

    private String getDestDevPathForWin(boolean withLabel) {
        VolumeMap lv;
        String src, drivepath = "";
        boolean isFirst = true;

        errMsg = "";

        // 获取srcClnt上的卷信息
        Vector volMapList = view.initor.mdb.getVolMapOnClntID(host.getID());
        SanBootView.log.debug(getClass().getName(), " mp size:" + winSrcList.size());

        if (winSrcList.size() <= 0) {
            errMsg = SanBootView.res.getString("EditProfileDialog.error.getMp");
            drivepath = null;
            return drivepath;
        }

        Enumeration list = winSrcList.elements();
        while (list.hasMoreElements()) {
            src = (String) list.nextElement();
            src += ":\\";
            SanBootView.log.debug(getClass().getName(), " =====>: " + src);

            lv = getRealLVOnClntIDAndMP(volMapList, src);
            if (lv == null) {
                // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
                SanBootView.log.error(getClass().getName(), "\nLV is null in MDB: " + src);
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : " + src;
                drivepath = null;
                break;
            } else {
                if (isFirst) {
                    if (!withLabel) {
                        /*
                        drivepath = ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP()) + ":" + ResourceCenter.ISCSI_LOGIN_PORT + "@"
                                + ResourceCenter.ISCSI_PREFIX + this.targetSrvName + ":" + lv.getVolTargetID(); */
                        drivepath = ResourceCenter.TARGET_TYPE + getTxIP() + ":" + ResourceCenter.ISCSI_LOGIN_PORT + "@"
                                + ResourceCenter.ISCSI_PREFIX + this.targetSrvName + ":" + lv.getVolTargetID();
                    } else {
                        drivepath = src + "-?" + ResourceCenter.TARGET_TYPE + getTxIP() + ":" + ResourceCenter.ISCSI_LOGIN_PORT + "@"
                                + ResourceCenter.ISCSI_PREFIX + this.targetSrvName + ":" + lv.getVolTargetID();
                    }
                    isFirst = false;
                } else {
                    if (!withLabel) {
                        drivepath += "-?" + ResourceCenter.TARGET_TYPE + getTxIP() + ":" + ResourceCenter.ISCSI_LOGIN_PORT + "@"
                                + ResourceCenter.ISCSI_PREFIX + this.targetSrvName + ":" + lv.getVolTargetID();
                    } else {
                        drivepath += "-?" + src + "-?" + ResourceCenter.TARGET_TYPE + getTxIP() + ":" + ResourceCenter.ISCSI_LOGIN_PORT + "@"
                                + ResourceCenter.ISCSI_PREFIX + this.targetSrvName + ":" + lv.getVolTargetID();
                    }
                }
            }
        }

        return drivepath;
    }

    public VolumeMap getRealLVOnClntIDAndMP(Vector list, String mp) {
        VolumeMap lv;

        int size = list.size();
        for (int i = 0; i < size; i++) {
            lv = (VolumeMap) list.elementAt(i);
//SanBootView.log.debug(getClass().getName(),"lv label; " + lv.getVolDiskLabel() );           
            if (lv.getVolDiskLabel().toUpperCase().equals(mp)) {
                return lv;
            }
        }

        return null;
    }

    private int getOsTidForWin() {
        int tid = -1;
        VolumeMap volMap;

        errMsg = "";
        Vector volMapList = view.initor.mdb.getVolMapOnClntID(host.getID());
        int size = volMapList.size();
        for (int i = 0; i < size; i++) {
            volMap = (VolumeMap) volMapList.elementAt(i);
            if (volMap.getVolDiskLabel().toUpperCase().equals("C:\\")) {
                tid = volMap.getVolTargetID();
                break;
            }
        }

        if (tid == -1) {
            SanBootView.log.error(getClass().getName(), "\nVG or Target is null,exit.");
            errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : C:\\";
        }
        return tid;
    }

    private String getMgInfoForWin() {
        VolumeMap lv;
        MirrorGrp mg;
        int mgid;
        String mgInfo = "";

        errMsg = "";

        // 获取srcClnt上的卷信息
        Vector volMapList = view.initor.mdb.getVolMapOnClntID(host.getID());
        SanBootView.log.debug(getClass().getName(), " mp size:" + winSrcList.size());

        Enumeration list = winSrcList.elements();
        while (list.hasMoreElements()) {
            String src = (String) list.nextElement();
            SanBootView.log.debug(getClass().getName(), " =====>: " + src + ":\\");

            lv = getRealLVOnClntIDAndMP(volMapList, src + ":\\");
            if (lv == null) {
                // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
                SanBootView.log.error(getClass().getName(), "\nLV is null in MDB: " + src + ":\\");
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : " + src + ":\\";
                mgInfo = null;
                break;
            } else {
                mg = view.initor.mdb.getMGFromVectorOnRootID(lv.getVol_rootid());
                if (mg == null) {
                    mgid = -1;
                } else {
                    mgid = mg.getMg_id();
                }

                mgInfo += lv.getVolTargetID() + "-?" + lv.getMaxSnapNum() + "-?" + mgid + ";";
            }
        }

        return mgInfo;
    }

    private String getDefaultVolName(String disklabel, String ip) {
        try {
//            int indx = ip.lastIndexOf(".");
//            String lastElement = ip.substring(indx + 1);
            byte ch = (byte) disklabel.charAt(0);
            String drv = new String(new byte[]{ch});
            return drv + ip;
        } catch (Exception ex) {
            return "";
        }
    }

    private void sendNetbootInfoToDestUWS() {
        int rootid;
        boolean needSend = true;
        if (hasCrtOSDisk) {
            if (!isCrtOSDiskOk) {
                needSend = false;
            }
        }

        if (needSend) {
            if (hasCrtOSDisk) { // os volume 是创建产生的
                rootid = OSBinder.rootID;
            } else { // os volume使用已经存在的volume
                Volume volume = selectSysVolPane.getSelectOSDiskVol();
                if (volume != null) {
                    rootid = volume.getSnap_root_id();
                } else {
                    rootid = -1;
                }
            }

            if (rootid != -1) {
                view.initor.mdb.sendNetbootInfoToDestUWS(rootid, host);
            }
        }
    }

    private ArrayList getNetCardList(String ip, int port) {
        boolean isOk;
        ArrayList netCardList;

        Object val = ncCache.get(ip);
        if (val == null) {
            isOk = view.initor.mdb.getIPInfoFromClnt(ip, port, "00-00-00-00-00-00");
            if (!isOk) {
                JOptionPane.showMessageDialog(
                        this,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_GET_NETCARD) + " : "
                        + view.initor.mdb.getErrorMessage());
                return null;
            } else {
                netCardList = view.initor.mdb.getAllNetCardinfo();
                ncCache.put(new String(ip), netCardList);
                return netCardList;
            }
        } else {
            return (ArrayList) val;
        }
    }

    private boolean isIPConfilict(ArrayList ncList, String ip) {
        NetCard nc;
        BindIPAndMask ipPeer;
        Vector ipList;
        int i, j, size, size1;

        size = ncList.size();
        for (i = 0; i < size; i++) {
            nc = (NetCard) ncList.get(i);
            ipList = nc.getIPList();
            size1 = ipList.size();
            for (j = 0; j < size1; j++) {
                ipPeer = (BindIPAndMask) ipList.elementAt(j);
                if (ipPeer.ip.equals(ip)) {
                    JOptionPane.showMessageDialog(this, SanBootView.res.getString("InitBootHostWizardDialog.error.conflictIP"));
                    return true;
                }
            }
        }

        return false;
    }

    private boolean addServiceList1(int cltID, Vector selList, Vector oldServList) {
        Service service;
        ServiceMap servMap, servMap1;
        int size1, i, j;

        boolean taskOk = true;

        int size = selList.size();
        for (i = 0; i < size; i++) {
            service = (Service) selList.elementAt(i);

            if (!service.iSeled()) { // not selected this service ON GUI
                continue;
            }

            // not in MDB
            if (view.initor.mdb.getServiceMap(cltID, service.getServName(), service.getServDesc()) == null) {
                servMap = new ServiceMap(
                        -1, cltID, service.getServName(), service.getServDesc());

                if (view.initor.mdb.addServMap(servMap)) {
                    servMap.setServID(view.initor.mdb.getNewId());
                    view.initor.mdb.insertOneServMapIntoVect(servMap);

                    runningTaskPane.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.addServMap") + " [ " + service.getServName() + " ] "
                            + SanBootView.res.getString("common.ok"),
                            RunningTaskPane.SAVE_INFO_ROW);
                } else {
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addServMap") + " [ " + service.getServName() + " ] "
                            + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                    taskOk = false;
                }
            } else {
                // 将该服务从oldServList中删除，因为用户选择了它
                size1 = oldServList.size();
                for (j = 0; j < size1; j++) {
                    servMap1 = (ServiceMap) oldServList.elementAt(j);
                    if (servMap1.getServName().equals(service.getServName())
                            && servMap1.getServDesc().equals(service.getServDesc())) {
                        oldServList.removeElementAt(j);
                        break;
                    }
                }
            }
        }

        size = oldServList.size();
        for (i = 0; i < size; i++) {
            servMap = (ServiceMap) oldServList.elementAt(i);

            if (view.initor.mdb.delServMap(servMap.getServID())) {
                view.initor.mdb.removeOneServMapFromVect(servMap);

                runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitBootHostWizardDialog.log.delServMap") + " [ " + servMap.getServName() + " ] "
                        + SanBootView.res.getString("common.ok"),
                        RunningTaskPane.SAVE_INFO_ROW);
            } else {
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.delServMap") + " [ " + servMap.getServName() + " ] "
                        + SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                taskOk = false;
            }
        }

        return taskOk;
    }

    private boolean addServiceList(int cltID, Vector allBaseServ) {
        Service service;
        ServiceMap servMap;

        boolean taskOk = true;

        int size = allBaseServ.size();
        for (int i = 0; i < size; i++) {
            service = (Service) allBaseServ.elementAt(i);
            if (view.initor.mdb.getServiceMap(cltID, service.getServName(), service.getServDesc()) == null) {
                servMap = new ServiceMap(
                        -1, cltID, service.getServName(), service.getServDesc());

                if (view.initor.mdb.addServMap(servMap)) {
                    servMap.setServID(view.initor.mdb.getNewId());
                    view.initor.mdb.insertOneServMapIntoVect(servMap);

                    runningTaskPane.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.addServMap") + " [ " + service.getServName() + " ] "
                            + SanBootView.res.getString("common.ok"),
                            RunningTaskPane.SAVE_INFO_ROW);
                } else {
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addServMap") + " [ " + service.getServName() + " ] "
                            + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
                    taskOk = false;
                }
            }
        }

        return taskOk;
    }

    private boolean createVolMapFromSelList1(Vector selList, Vector oldVolMapList, int cltID) {
        BindOfPartandVol binder;
        VolumeMap volMap;
        LunMap lm;
        Vector lmList;
        String desc;
        int i, j, size1, maxSnap;
        boolean isOk, founded;

        boolean taskOk = true;

        int size = selList.size();
        if (size > 0) {
            for (i = 0; i < size; i++) {
                binder = (BindOfPartandVol) selList.elementAt(i);

                try {
                    maxSnap = Integer.parseInt(binder.maxSnap);
                } catch (Exception ex) {
                    maxSnap = 0;
                    // impossible
                }

                desc = binder.desc;

                size1 = oldVolMapList.size();
                founded = false;
                for (j = 0; j < size1; j++) {
                    volMap = (VolumeMap) oldVolMapList.elementAt(j);
                    if (binder.vol.getTargetID() == volMap.getVolTargetID()) {
                        founded = true;

                        // 修改这个volMap
                        if (volMap.getMaxSnapNum() != maxSnap || !volMap.getVolDesc().equals(desc)) {
                            isOk = view.initor.mdb.modOneVolumeMap(volMap.getVolName(), maxSnap, desc);
                            if (isOk) {
                                // 修改 cache中的这个 volMap的 maxsnap值
                                volMap.setMaxSnapNum(maxSnap);
                                volMap.setVolDesc(desc);

                                runningTaskPane.setLogOnTabpane(
                                        SanBootView.res.getString("InitBootHostWizardDialog.log.modVolMap") + " " + binder.vol.getSnap_name() + " "
                                        + SanBootView.res.getString("common.ok"),
                                        RunningTaskPane.COPY_OS_ROW);
                            } else {
                                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modVolMap") + " " + binder.vol.getSnap_name() + " "
                                        + SanBootView.res.getString("common.failed");
                                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                                taskOk = false;
                            }
                        }

                        // 从删除oldVolMapList中删除这个volmap
                        oldVolMapList.removeElementAt(j);

                        break;
                    }
                }

                if (!founded) {
                    volMap = new VolumeMap(
                            binder.vol.getSnap_name(),
                            cltID,
                            binder.part.getDiskLabel(),
                            binder.vol.getTargetID(),
                            maxSnap,
                            binder.desc,
                            binder.vol.getSnap_root_id(),
                            BootHost.PROTECT_TYPE_MTPP);

                    isOk = view.initor.mdb.AddOneVolumeMap(volMap);
                    if (isOk) {
                        view.initor.mdb.insertOneVolMapIntoVec(volMap);

                        //修改volmap对应的UIM-vol
                        if (!modUIMVolOnVolMap(cltID, binder.vol.getSnap_root_id(), 0)) {
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modUIMVol") + " " + binder.vol.getSnap_name() + " "
                                    + SanBootView.res.getString("common.failed");
                            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                            writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                            taskOk = false;
                        }

                        //修改volmap对应的clonedisk
                        if (!modCloneDiskOnVolMap(binder.vol.getSnap_root_id(), cltID, 0)) {
                            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modCloneDisk") + " " + binder.vol.getSnap_name() + " "
                                    + SanBootView.res.getString("common.failed");
                            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                            writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                            taskOk = false;
                        }

                        runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitBootHostWizardDialog.log.addVolMap") + " " + binder.vol.getSnap_name() + " "
                                + SanBootView.res.getString("common.ok"),
                                RunningTaskPane.COPY_OS_ROW);
                    } else {
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addVolMap") + " " + binder.vol.getSnap_name() + " "
                                + SanBootView.res.getString("common.failed");
                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                        writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                        taskOk = false;
                    }
                }
            }
        }

        //删除所有的old volmap
        size = oldVolMapList.size();
        for (i = 0; i < size; i++) {
            volMap = (VolumeMap) oldVolMapList.elementAt(i);
            isOk = view.initor.mdb.delVolumeMap(volMap);
            if (isOk) {
                view.initor.mdb.removeVolMapFromVector(volMap);

                //修改volmap对应的UIM-vol
                if (!modUIMVolOnVolMap(cltID, volMap.getVol_rootid(), 1)) {
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modUIMVol") + " " + volMap.getVolName() + " "
                            + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                    taskOk = false;
                }

                //修改volmap对应的clonedisk
                if (!modCloneDiskOnVolMap(volMap.getVol_rootid(), cltID, 1)) {
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.modCloneDisk") + " " + volMap.getVolName() + " "
                            + SanBootView.res.getString("common.failed");
                    runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                    writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                    taskOk = false;
                }

                runningTaskPane.setLogOnTabpane(
                        SanBootView.res.getString("InitBootHostWizardDialog.log.delVolMap") + " " + volMap.getVolName() + " "
                        + SanBootView.res.getString("common.ok"),
                        RunningTaskPane.COPY_OS_ROW);
            } else {
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.delVolMap") + " " + volMap.getVolName() + " "
                        + SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                taskOk = false;
            }

            // del lunmap
            isOk = view.initor.mdb.getLunMapForTID(volMap.getVolTargetID());
            if (isOk) {
                lmList = view.initor.mdb.getAllLunMapForTid();
                size1 = lmList.size();
                for (j = 0; j < size1; j++) {
                    lm = (LunMap) lmList.elementAt(j);
                    isOk = view.initor.mdb.delLunMap(volMap.getVolTargetID(), lm.getIP(), lm.getMask(), lm.getAccessMode());
                    if (isOk) {
                        runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitBootHostWizardDialog.log.delLunMap") + " " + volMap.getVolTargetID() + " " + lm.getIP() + " " + lm.getMask() + " " + lm.getAccessMode() + " "
                                + SanBootView.res.getString("common.ok"),
                                RunningTaskPane.COPY_OS_ROW);
                    } else {
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.delLunMap") + " " + volMap.getVolTargetID() + " " + lm.getIP() + " " + lm.getMask() + " " + lm.getAccessMode() + " "
                                + SanBootView.res.getString("common.failed");
                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                        writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                        taskOk = false;
                    }
                }
            } else {
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.getLunMap") + " " + volMap.getVolName() + " "
                        + SanBootView.res.getString("common.failed");
                runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                taskOk = false;
            }
        }

        return taskOk;
    }

    private boolean modCloneDiskOnVolMap(int rootid, int clntID, int mode) {
        CloneDisk cd;
        boolean aIsOk;

        if (mode == 0) {
            aIsOk = view.initor.mdb.getCloneDiskList(-1, CloneDisk.IS_FREEVOL, rootid);
        } else {
            aIsOk = view.initor.mdb.getCloneDiskList(clntID, CloneDisk.IS_BOOTHOST, rootid);
        }
        if (aIsOk) {
            ArrayList list = view.initor.mdb.getCloneDiskList();
            int size = list.size();
            for (int i = 0; i < size; i++) {
                cd = (CloneDisk) list.get(i);

                if (mode == 0) {
                    // 修改clonedisk的属性，使之归于boothost的范畴
                    if (!view.initor.mdb.modCloneDisk("", 0, 0, "", cd.getId(), clntID, CloneDisk.IS_BOOTHOST)) {
                        errMsg = ResourceCenter.getCmdString(ResourceCenter.CMD_MOD_CLONE_DISK) + " : " + view.initor.mdb.getErrorMessage();
                        return false;
                    }
                } else {
                    // 修改clonedisk的属性，使之归于空闲卷的范畴
                    if (!view.initor.mdb.modCloneDisk("", 0, 0, "", cd.getId(), -1, CloneDisk.IS_FREEVOL)) {
                        errMsg = ResourceCenter.getCmdString(ResourceCenter.CMD_MOD_CLONE_DISK) + " : " + view.initor.mdb.getErrorMessage();
                        return false;
                    }
                }
            }
        } else {
            errMsg = ResourceCenter.getCmdString(ResourceCenter.CMD_GET_CLONE_DISK) + " : " + view.initor.mdb.getErrorMessage();
        }

        return aIsOk;
    }

    private boolean modUIMVolOnVolMap(int cltID, int rootid, int mode) {
        ArrayList list;

        if (mode == 0) {
            list = view.initor.mdb.getMDIFromCacheOnHostIDandRootID(-1, rootid);
        } else {
            list = view.initor.mdb.getMDIFromCacheOnHostIDandRootID(cltID, rootid);
        }
        int size = list.size();
        for (int i = 0; i < size; i++) {
            MirrorDiskInfo mdi = (MirrorDiskInfo) list.get(i);

            if (mode == 0) {
                // 修改uim-vol的属性，使之归于boothost的范畴
                if (!view.initor.mdb.modMDI("", 0, 0, "", mdi.getSnap_rootid(), cltID)) {
                    errMsg = ResourceCenter.getCmdString(ResourceCenter.CMD_MOD_MIRROR_DISK) + " : " + view.initor.mdb.getErrorMessage();
                    return false;
                }
            } else {
                // 修改uim-vol的属性，使之归于空闲卷的范畴
                if (!view.initor.mdb.modMDI("", 0, 0, "", mdi.getSnap_rootid(), -1)) {
                    errMsg = ResourceCenter.getCmdString(ResourceCenter.CMD_MOD_MIRROR_DISK) + " : " + view.initor.mdb.getErrorMessage();
                    return false;
                }
            }
        }

        return true;
    }

    private boolean saveInfo(String confile, String contents) {
        File tmpFile = view.initor.mdb.createTmpFile(ResourceCenter.PREFIX, ResourceCenter.SUFFIX_IPINFO);
        if (tmpFile == null) {
            errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
            writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
            return false;
        }

        if (contents.equals("")) {
            SanBootView.log.warning(getClass().getName(), "Content to send is null.");
            // if contents is null, must assign a string with some white spaces to it, or sendFileToServer will fail. 
            contents = "                        ";
        }

        // 发送profile的内容
        if (!view.initor.mdb.sendFileToServer(tmpFile.getName(), contents)) {
            errMsg = SanBootView.res.getString("common.errmsg.sendFileFailed");
            runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.SAVE_INFO_ROW);
            writeLogBuf(errMsg, RunningTaskPane.SAVE_INFO_ROW);
            tmpFile.delete();
            return false;
        }

        tmpFile.delete();

        // tmpFile move to profile dir
        boolean isOk = view.initor.mdb.moveFile(
                ResourceCenter.TMP_DIR + tmpFile.getName(), confile);

        return isOk;
    }

    private boolean createVolMapFromCrtList(Vector crtList, int cltID) {
        BindOfPartandVol binder;
        VolumeMap volMap;
        int maxSnap;
        boolean isOk;

        boolean taskOk = true;

        int size = crtList.size();
        if (size > 0) {
            for (int i = 0; i < size; i++) {
                binder = (BindOfPartandVol) crtList.elementAt(i);
                if (binder.targetID > 0) {// 刚刚创建成功
                    try {
                        maxSnap = Integer.parseInt(binder.maxSnap);
                    } catch (Exception ex) {
                        maxSnap = 0;
                        // impossible
                    }

                    volMap = new VolumeMap(
                            binder.volName,
                            cltID,
                            binder.part.getDiskLabel(),
                            binder.targetID,
                            maxSnap,
                            binder.desc,
                            binder.rootID,
                            BootHost.PROTECT_TYPE_MTPP);

                    isOk = view.initor.mdb.AddOneVolumeMap(volMap);
                    if (isOk) {
                        view.initor.mdb.insertOneVolMapIntoVec(volMap);

                        runningTaskPane.setLogOnTabpane(
                                SanBootView.res.getString("InitBootHostWizardDialog.log.addVolMap") + " " + binder.volName + " "
                                + SanBootView.res.getString("common.ok"),
                                RunningTaskPane.COPY_OS_ROW);
                    } else {
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.addVolMap") + " " + binder.volName + " "
                                + SanBootView.res.getString("common.failed");
                        runningTaskPane.setLogOnTabpane(errMsg, RunningTaskPane.COPY_OS_ROW);
                        writeLogBuf(errMsg, RunningTaskPane.COPY_OS_ROW);
                        taskOk = false;
                    }
                }
            } // end for 
        }

        return taskOk;
    }

    private void recordUWSRpt(boolean initOk) {
        String msg;

        UWSReport rpt = new UWSReport();

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime(date);

        int year = today.get(Calendar.YEAR);
        String stime = year + "";
        int month = today.get(Calendar.MONTH) + 1;
        if (month < 10) {
            stime += "0" + month;
        } else {
            stime += month;
        }
        int day = today.get(Calendar.DAY_OF_MONTH);
        if (day < 10) {
            stime += "0" + day;
        } else {
            stime += day;
        }
        int hour = today.get(Calendar.HOUR_OF_DAY);
        if (hour < 10) {
            stime += "0" + hour;
        } else {
            stime += hour;
        }
        int min = today.get(Calendar.MINUTE);
        if (min < 10) {
            stime += "0" + min;
        } else {
            stime += min;
        }
        int sec = today.get(Calendar.SECOND);
        if (sec < 10) {
            stime += "0" + sec;
        } else {
            stime += sec;
        }

        rpt.setSTime(stime);
        rpt.setClntName(getInitHostName());

        rpt.setTaskClntId(host.getID());
        rpt.setTask_clnt_type(DestAgent.TYPE_ORI_HOST);

        rpt.setTType(UWSReport.TASK_TYPE_INIT);
        rpt.setTResult(initOk ? UWSReport.TASK_RESULT_END : UWSReport.TASK_RESULT_FAIL);

        msg = logBuf.toString();
        if (msg.getBytes().length > 1014) {
            byte[] arr = msg.getBytes();
            String newmsg = new String(arr, 0, 1014);
            rpt.setTaskMsg(initOk ? Check.getStringByGBK(SanBootView.res.getString("InitBootHostWizardDialog.error.initOK")) : newmsg);
        } else {
            rpt.setTaskMsg(initOk ? Check.getStringByGBK(SanBootView.res.getString("InitBootHostWizardDialog.error.initOK")) : msg);
        }

        String fname = generateUWSRptTmpFile(rpt.prtMe());
        if (fname != null) {
            if (!view.initor.mdb.addReport(fname)) {
                // save in local host 
                saveUWSRpt(rpt.prtMe(), ResourceCenter.UWS_INIT_RPT + stime);
            }
        } else {
            // save in local host
            saveUWSRpt(rpt.prtMe(), ResourceCenter.UWS_INIT_RPT + stime);
        }
    }

    private String generateUWSRptTmpFile(String contents) {
        String fname;

        File tmpFile = view.initor.mdb.createTmpFile(ResourceCenter.PREFIX, ResourceCenter.SUFFIX_USWTMP);
        if (tmpFile == null) {
            return null;
        }

        // 发送profile的内容
        if (!view.initor.mdb.sendFileToServer(tmpFile.getName(), contents)) {
            tmpFile.delete();
            return null;
        }

        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }

    private void saveUWSRpt(String contents, String fname) {
        try {
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File(path);

            f1.createNewFile();

            PrintWriter out = new PrintWriter(new FileWriter(f1), true);
            out.print(contents);
            out.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    private boolean overed = false;

    synchronized boolean isOver() {
        return overed;
    }

    synchronized void setOver(boolean val) {
        overed = val;
    }
    private int phrase = 0;

    public String getPhraseIcon() {
        String str = "";
        switch (phrase) {
            case 0:
                str = "|";
                break;
            case 1:
                str = "/";
                break;
            case 2:
                str = "--";
                break;
            case 3:
                str = "\\";
                break;
            default:
                str = "|";
                break;
        }

        phrase = (phrase + 1) % 4;
        return str;
    }
    Runnable setVal = new Runnable() {

        public void run() {
            runningTaskPane.setTaskStatus(getPhraseIcon() + "", RunningTaskPane.COPY_OS_ROW, 2);
        }
    };
    Runnable process = new Runnable() {

        public void run() {
            while (!isOver()) {
                try {
                    SwingUtilities.invokeAndWait(setVal);

                    Thread.sleep(200);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    };

    public boolean isVistaOs(String osRelease) {
        boolean ret = false;
        if (osRelease != null) {
            String temp = osRelease.toLowerCase();
            if (temp.contains("2000") || temp.contains("2003") || temp.contains("xp")) {
                ret = false;
            } else {
                ret = true;
            }
        }
        return ret;
    }

    public static String getTxIP() {
        return txIP;
    }

    public static void setTxIP(String txIP) {
        InitBootHostWizardDialog.txIP = txIP;
    }


}
class GetInitInfoThread extends Thread {

    ProgressDialog pdiag;
    String ip;
    int port;
    boolean isGetAgtInfo;
    boolean isOK = true;
    SanBootView view;
    boolean isFirst;
    private boolean getAgtInfo = false;
    private boolean getOrphanVol = false;
    private boolean getSystemPart = false;
    private boolean getDiskPartForWin = false;
    private boolean isStartupfromSAN = false;
    private GetFreePhyVol getOrVol;
    private String partitionContent;
    private Vector sysPartList;
    private String diskDetailInfo;
    private GetAgentInfo getAgentInfo;
    private String uuid;
    private boolean startNet = false;
    Runnable close = new Runnable() {

        public void run() {
            pdiag.dispose();
        }
    };

    public GetInitInfoThread(ProgressDialog pdiag, String ip, int port, boolean isGetAgtInfo, SanBootView view, boolean isFirst) {
        this.pdiag = pdiag;
        this.ip = ip;
        this.port = port;
        this.isGetAgtInfo = isGetAgtInfo;
        this.view = view;
        this.isFirst = isFirst;
    }

    @Override
    public void run() {
        boolean isOk;

        if (isGetAgtInfo) {
            try {
                getAgentInfo = new GetAgentInfo(
                        ResourceCenter.getCmd(ResourceCenter.CMD_GET_HOST_INFO1) + ip + " " + port + " ib_get_osinfo.exe",
                        view.getSocket());
                isOk = getAgentInfo.getAgentInfo();
                if (isOk) {
                    if (!getAgentInfo.getOSName().toUpperCase().startsWith("WIN")) {
                        JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("InitBootHostWizardDialog.error.notWinHost"));
                        isOK = false;
                    } else {
                        view.initor.mdb.getHostUUID(ip, port, true);
                        if (view.initor.mdb.getUUID().equals("")) {
                            SanBootView.log.error(getClass().getName(), "Client's UUID is none: " + ip);
                            JOptionPane.showMessageDialog(pdiag,
                                    SanBootView.res.getString("InitNWinHostWizardDialog.log.getHostInfo")
                                    + SanBootView.res.getString("common.failed"));
                            isOK = false;
                        } else {
                            uuid = view.initor.mdb.getUUID();

                            // 判断是否存在相同的uuid（当网络启动在另外一台机器上后，源盘恢复后该机器的uuid就和源机器一样了）
                            // 下面的判断方法不对,还需要更多的依据（2008/10./31）
                            //if( view.initor.mdb.getHostFromCacheOnUUID( uuid ) != null ){
                            if (false) {
                                JOptionPane.showMessageDialog(view,
                                        SanBootView.res.getString("MenuAndBtnCenter.error.sameUUID"));
                                isOK = false;
                            } else {
                                isOK = true;
                                getAgtInfo = true;
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(pdiag,
                            SanBootView.res.getString("InitBootHostWizardDialog.log.getHostInfo")
                            + SanBootView.res.getString("common.failed"));
                    isOK = false;
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(pdiag,
                        SanBootView.res.getString("InitBootHostWizardDialog.log.getHostInfo")
                        + SanBootView.res.getString("common.failed"));
                isOK = false;
            }
        } else {
            getAgtInfo = true;
        }

        if (isFirst) {
            if (isOK) {
                try {
                    getOrVol = new GetFreePhyVol(
                            ResourceCenter.getCmd(
                            ResourceCenter.CMD_GET_VOL),
                            view.getSocket(),
                            view);
                    getOrVol.setAddCacheFlag(true);
                    // 获取所有的disk,不仅是free disk
                    getOrVol.setFilterFlag(false);

                    isOk = getOrVol.realDo();
                    if (!isOk) {
                        JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("InitBootHostWizardDialog.error.getOrphanVol"));
                        isOK = false;
                    } else {
                        getOrphanVol = true;
                    }
                } catch (Exception exp) {
                    JOptionPane.showMessageDialog(pdiag,
                            SanBootView.res.getString("InitBootHostWizardDialog.error.getOrphanVol"));
                    isOK = false;
                }
            }
        }

        if (isOK) {
            isOk = view.initor.mdb.getSystemPart(ip, port, "ib_get_partition_info.exe");
            if (!isOk) {
                JOptionPane.showMessageDialog(pdiag,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_GET_PARTITION) + " : "
                        + view.initor.mdb.getErrorMessage());
                isOK = false;
            } else {
                partitionContent = view.initor.mdb.getSysPartContentsFromCmd();
                sysPartList = view.initor.mdb.getSysPart();
                if (partitionContent.equals("")) {
                    SanBootView.log.error(this.getClass().getName(), "There is no valid local volume( no file system )");
                    JOptionPane.showMessageDialog(pdiag,
                            SanBootView.res.getString("InitBootHostWizardDialog.error.volInfoIsNull"));
                    getSystemPart = false;
                } else {
                    getSystemPart = true;
                }
            }
        }

        if (isOK) {
            isOk = view.initor.mdb.getDiskPartForWin(ip, port, "ib_save_partition.exe -list_local");
            if (!isOk) {
                JOptionPane.showMessageDialog(pdiag,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_GET_PARTITION) + " : "
                        + view.initor.mdb.getErrorMessage());
                isOK = false;
            } else {
                diskDetailInfo = view.initor.mdb.getDiskPartForWin();
                if (diskDetailInfo.equals("")) {
                    SanBootView.log.error(getClass().getName(), "Can't get disk partition info,so will not auto-restore-partition later. But we will tolerate this error.");
                    diskDetailInfo = "Can't get disk partition when initiating the client.";
                }
                getDiskPartForWin = true;
            }
        }

        if (isOK) {
            isOk = view.initor.mdb.isStartupfromSAN(ip, port, "C");
            if (isOk) {
                startNet = view.initor.mdb.isStartupFromSAN();
                isStartupfromSAN = true;
            } else {
                JOptionPane.showMessageDialog(pdiag,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_IS_STARTUP_FROM_NET) + " : "
                        + view.initor.mdb.getErrorMessage());
                isOK = false;
            }
        }

        try {
            SwingUtilities.invokeAndWait(close);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public boolean isOK() {
        return isOK;
    }

    public boolean getAgtInfoIsOK() {
        return getAgtInfo;
    }

    public GetAgentInfo getAgentInfoCmdObj() {
        return getAgentInfo;
    }

    public String getUUID() {
        return uuid;
    }

    public boolean getOrphanVolIsOK() {
        return getOrphanVol;
    }

    public boolean getSystemPartIsOK() {
        return getSystemPart;
    }

    public boolean getDiskPartForWinIsOK() {
        return getDiskPartForWin;
    }

    public boolean isStartupFromSAN() {
        return isStartupfromSAN;
    }

    public ArrayList getOrphanVolList() {
        if (getOrVol != null) {
            //return getOrVol.getAllVolFromCache();
            return getOrVol.getAllVolAndFreeDiskFromCache();
        } else {
            return new ArrayList();
        }
    }

    public String getSystemPartContents() {
        return partitionContent;
    }

    public Vector getSysPartList() {
        return sysPartList;
    }

    public String getDiskDetailInfo() {
        return diskDetailInfo;
    }

    public boolean isStartFromNet() {
        return startNet;
    }


}
