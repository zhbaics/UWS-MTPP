/*
 * DhcpDialog.java
 *
 * Created on 2007/12/11, 8:06 PM
 */

package guisanboot.ui;

import guisanboot.data.*;
import guisanboot.res.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.border.TitledBorder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumnModel;
import mylib.UI.BrowserTableCellRenderer;
import mylib.tool.*;


public class DhcpDialog extends javax.swing.JDialog implements SlowerLaunch{
    
    /** Creates new form DhcpDialog */
    public DhcpDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public DhcpDialog( SanBootView view ){
        this( view,true );
        myInit( view );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel28 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel13 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel16 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel20 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel22.setPreferredSize(new java.awt.Dimension(10, 30));
        jPanel4.add(jPanel22, java.awt.BorderLayout.SOUTH);

        jPanel23.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("global option"));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("DNS :");
        jLabel2.setMaximumSize(new java.awt.Dimension(120, 16));
        jLabel2.setMinimumSize(new java.awt.Dimension(120, 16));
        jLabel2.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel8.add(jLabel2, gridBagConstraints);

        jTextField2.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel8.add(jTextField2, gridBagConstraints);

        jLabel3.setText("DefGW:");
        jLabel3.setMaximumSize(new java.awt.Dimension(120, 16));
        jLabel3.setMinimumSize(new java.awt.Dimension(120, 16));
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel8.add(jLabel3, gridBagConstraints);

        jTextField3.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 0, 0);
        jPanel8.add(jTextField3, gridBagConstraints);

        jLabel4.setText("Default StartOS :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel8.add(jLabel4, gridBagConstraints);

        jComboBox1.setPreferredSize(new java.awt.Dimension(90, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 0, 0);
        jPanel8.add(jComboBox1, gridBagConstraints);

        jButton2.setText("Change");
        jButton2.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel8.add(jButton2, gridBagConstraints);

        jPanel23.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));
        jPanel9.setPreferredSize(new java.awt.Dimension(120, 190));
        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel24.setPreferredSize(new java.awt.Dimension(200, 110));
        jPanel24.setLayout(new java.awt.GridBagLayout());

        jTextField1.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel24.add(jTextField1, gridBagConstraints);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("IP :");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel24.add(jLabel1, gridBagConstraints);

        jLabel5.setText("Port :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel24.add(jLabel5, gridBagConstraints);

        jTextField4.setPreferredSize(new java.awt.Dimension(95, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel24.add(jTextField4, gridBagConstraints);

        jLabel6.setText("Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel24.add(jLabel6, gridBagConstraints);

        jButton12.setText("Start");
        jButton12.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 15, 0, 0);
        jPanel24.add(jButton12, gridBagConstraints);

        jLabel7.setText("Password :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 0, 0);
        jPanel24.add(jLabel7, gridBagConstraints);

        jPasswordField1.setPreferredSize(new java.awt.Dimension(6, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel24.add(jPasswordField1, gridBagConstraints);

        jButton13.setText("Fresh Data");
        jButton13.setPreferredSize(new java.awt.Dimension(95, 24));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel24.add(jButton13, gridBagConstraints);

        jButton14.setText("Restore Default");
        jButton14.setPreferredSize(new java.awt.Dimension(87, 24));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 0, 0);
        jPanel24.add(jButton14, gridBagConstraints);

        jLabel8.setText("Account : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel24.add(jLabel8, gridBagConstraints);

        jTextField5.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        jPanel24.add(jTextField5, gridBagConstraints);

        jPanel9.add(jPanel24, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setBorder(null);

        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel9.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel28.setPreferredSize(new java.awt.Dimension(10, 2));
        jPanel9.add(jPanel28, java.awt.BorderLayout.NORTH);

        jPanel23.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel23, java.awt.BorderLayout.CENTER);

        jPanel27.setPreferredSize(new java.awt.Dimension(40, 10));
        jPanel4.add(jPanel27, java.awt.BorderLayout.WEST);

        jPanel25.setPreferredSize(new java.awt.Dimension(40, 10));
        jPanel4.add(jPanel25, java.awt.BorderLayout.EAST);

        jPanel29.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel4.add(jPanel29, java.awt.BorderLayout.NORTH);

        jTabbedPane1.addTab("General", jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.BorderLayout());
        jPanel12.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 5));

        jButton3.setText("Add");
        jButton3.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton3);

        jButton4.setText("Mod");
        jButton4.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton4);

        jButton9.setText("Del");
        jButton9.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton9);

        jPanel10.add(jPanel13, java.awt.BorderLayout.SOUTH);

        jPanel5.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel11.setPreferredSize(new java.awt.Dimension(10, 50));
        jPanel5.add(jPanel11, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Subnet", jPanel5);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel15.setLayout(new java.awt.BorderLayout());
        jPanel15.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel14.add(jPanel15, java.awt.BorderLayout.CENTER);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 5));

        jButton5.setText("Add");
        jButton5.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton5);

        jButton6.setText("Mod");
        jButton6.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton6);

        jButton10.setText("Del");
        jButton10.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton10);

        jPanel14.add(jPanel16, java.awt.BorderLayout.SOUTH);

        jPanel6.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanel17.setPreferredSize(new java.awt.Dimension(10, 50));
        jPanel6.add(jPanel17, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("IBoot Server", jPanel6);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel19.setLayout(new java.awt.BorderLayout());
        jPanel19.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanel18.add(jPanel19, java.awt.BorderLayout.CENTER);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 5));

        jButton7.setText("Add");
        jButton7.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel20.add(jButton7);

        jButton8.setText("Mod");
        jButton8.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel20.add(jButton8);

        jButton11.setText("Del");
        jButton11.setPreferredSize(new java.awt.Dimension(79, 24));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel20.add(jButton11);

        jPanel18.add(jPanel20, java.awt.BorderLayout.SOUTH);

        jPanel7.add(jPanel18, java.awt.BorderLayout.CENTER);

        jPanel21.setPreferredSize(new java.awt.Dimension(10, 50));
        jPanel7.add(jPanel21, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Client", jPanel7);

        jPanel1.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jSeparator1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 1, 5, 1));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 35, 5));

        jButton1.setText("Close");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jPanel3.add(jPanel2, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        restore_default_conf();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        changeGlobalOpt();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        closeBtn();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        refreshDhcpInfo();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        delClnt();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        modClnt();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        addClnt();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        delIbootSrv();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        modIbootSrv();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        addIbootSrv();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        delSubnet();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        modSubnet();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        addSubnet();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        startOrStopDhcp();
    }//GEN-LAST:event_jButton12ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DhcpDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
    
    SanBootView view;
    GeneralEditableTable subNetTab   = new GeneralEditableTable();
    GeneralEditableTable ibootSrvTab = new GeneralEditableTable();
    GeneralEditableTable clntTab     = new GeneralEditableTable();
    int selOnSubnet = -1;
    int selOnIbootSrv = -1;
    int selOnClnt = -1;
    
    private final int DO_ADD = 0;
    private final int DO_MOD = 1;
    
    int whatSubnet  = -1;
    int whatIbotSrv = -1;
    int whatClnt    = -1;
    //Audit audit = null;
    
    private void myInit( SanBootView _view ){
        view = _view;
        
        jTextArea1.append( "   "+SanBootView.res.getString("DhcpDialog.label.desc"));
        setupOSComboBox();
        
        jScrollPane2.getViewport().add( subNetTab,null );
        jScrollPane2.getViewport().setBackground( Color.white );
        
        jScrollPane3.getViewport().add( ibootSrvTab,null );
        jScrollPane3.getViewport().setBackground( Color.white );
        
        jScrollPane4.getViewport().add( clntTab,null );
        jScrollPane4.getViewport().setBackground( Color.white );
        
        subNetTab.addMouseListener( new MouseListener(){
            public void mouseClicked( MouseEvent e ){
                if( e.getClickCount() >=2 ){
                    modSubnet();
                }
            }
            public void mousePressed(MouseEvent e){}
            public void mouseReleased(MouseEvent e){}
            public void mouseEntered(MouseEvent e){}
            public void mouseExited(MouseEvent e){}
        });
        
        ibootSrvTab.addMouseListener( new MouseListener(){
            public void mouseClicked( MouseEvent e ){
                if( e.getClickCount() >=2 ){
                    modIbootSrv();
                }
            }
            public void mousePressed(MouseEvent e){}
            public void mouseReleased(MouseEvent e){}
            public void mouseEntered(MouseEvent e){}
            public void mouseExited(MouseEvent e){}
        });
        
        clntTab.addMouseListener( new MouseListener(){
            public void mouseClicked( MouseEvent e ){
                if( e.getClickCount() >=2 ){
                    modClnt();
                }
            }
            public void mousePressed(MouseEvent e){}
            public void mouseReleased(MouseEvent e){}
            public void mouseEntered(MouseEvent e){}
            public void mouseExited(MouseEvent e){}
        });
        Font font = new Font("serif",Font.BOLD,14 );
        jLabel6.setFont( font );
        regKeyboardAction();
        setupLanguage();
        
        jPasswordField1.addKeyListener(new java.awt.event.KeyAdapter(){
            @Override public void keyPressed( KeyEvent e ){
                if( e.getKeyCode() == KeyEvent.VK_ENTER ){
                    refreshDhcpInfo();
                }
            }
        });
        
        //audit = view.audit.registerAuditRecord( 0, MenuAndBtnCenterForMainUi.FUNC_DHCP );
    }
    
    private void regKeyboardAction(){
        jTextField1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField4.requestFocusInWindow();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
        
        jTextField4.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField5.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            //JComponent.WHEN_IN_FOCUSED_WINDOW
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
        
        jTextField5.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jPasswordField1.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            //JComponent.WHEN_IN_FOCUSED_WINDOW
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
    }
    
    private void setupLanguage(){
        this.setTitle( SanBootView.res.getString("DhcpDialog.title"));
        jButton1.setText( SanBootView.res.getString("common.button.close"));
        jButton2.setText( SanBootView.res.getString("common.button.change"));
        jButton3.setText( SanBootView.res.getString("common.button.add"));
        jButton4.setText( SanBootView.res.getString("common.button.mod"));
        jButton5.setText( SanBootView.res.getString("common.button.add"));
        jButton6.setText( SanBootView.res.getString("common.button.mod"));
        jButton7.setText( SanBootView.res.getString("common.button.add"));
        jButton8.setText( SanBootView.res.getString("common.button.mod"));
        jButton9.setText( SanBootView.res.getString("common.button.del"));
        jButton10.setText( SanBootView.res.getString("common.button.del"));
        jButton11.setText( SanBootView.res.getString("common.button.del"));
        jButton13.setText( SanBootView.res.getString("DhcpDialog.button.refresh"));
        jButton14.setText( SanBootView.res.getString("DhcpDialog.button.restore"));
        
        ((TitledBorder)jPanel9.getBorder()).setTitle(
            SanBootView.res.getString("DhcpDialog.borderTitle.desc")
        );
        ((TitledBorder)jPanel8.getBorder()).setTitle(
            SanBootView.res.getString("DhcpDialog.borderTitle.opt")
        );
        int index = jTabbedPane1.indexOfComponent( jPanel4 );
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("DhcpDialog.label.option")
        );
        index = jTabbedPane1.indexOfComponent( jPanel5 );
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("DhcpDialog.label.subnet")
        );
        index = jTabbedPane1.indexOfComponent( jPanel6 );
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("DhcpDialog.label.ibootserver")
        );
        index = jTabbedPane1.indexOfComponent( jPanel7 );
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("DhcpDialog.label.clnt")
        );
        
        jLabel1.setText(SanBootView.res.getString("DhcpDialog.label.ip"));
        jLabel2.setText(SanBootView.res.getString("DhcpDialog.label.dns"));
        jLabel3.setText(SanBootView.res.getString("DhcpDialog.label.defgw"));
        jLabel4.setText(SanBootView.res.getString("DhcpDialog.label.defStartOS"));
        jLabel5.setText(SanBootView.res.getString("DhcpDialog.label.port"));
        jLabel6.setText(SanBootView.res.getString("DhcpDialog.label.status"));
        jLabel7.setText(SanBootView.res.getString("DhcpDialog.label.passwd"));
        jLabel8.setText(SanBootView.res.getString("DhcpDialog.label.acct"));
    }
    
    void enableButton( boolean val ){
        jButton2.setEnabled( val );
        jButton3.setEnabled( val );
        jButton4.setEnabled( val );
        jButton5.setEnabled( val );
        jButton6.setEnabled( val );
        jButton7.setEnabled( val );
        jButton8.setEnabled( val );
        jButton9.setEnabled( val );
        jButton10.setEnabled( val );
        jButton11.setEnabled( val );
        jButton12.setEnabled( val );
        jButton14.setEnabled( val );
    }
    
    void setupOSComboBox(){
        jComboBox1.addItem( ResourceCenter.OS_WIN );
        jComboBox1.addItem( ResourceCenter.OS_LINUX );
    }
    
    private void setupClntTable(){
        int i;
        Object[][] data;

        Vector list = view.initor.dhcpdb.getAllClient(); 
        int num = list.size();

        data = new Object[2+num][5]; //name,desc
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 5;      // col num
        
        data[1][0] = SanBootView.res.getString("DhcpDialog.table.clnt.mac");
        data[1][1] = SanBootView.res.getString("DhcpDialog.table.clnt.ip");
        data[1][2] = SanBootView.res.getString("DhcpDialog.table.clnt.ibootSrv");
        data[1][3] = SanBootView.res.getString("DhcpDialog.table.clnt.subnet");
        data[1][4] = SanBootView.res.getString("DhcpDialog.table.clnt.boottype");
        
        for( i=0; i<num; i++ ){
            DhcpClientInfo clnt = (DhcpClientInfo)list.elementAt(i);
            
            data[2+i][0] = clnt;
            data[2+i][1] = clnt.ip;
            data[2+i][2] = clnt.nextServer;
            data[2+i][3] = clnt.subnet;
            data[2+i][4] = clnt.boottype;
        }

        clntTab.setTableModel( data );
        clntTab.setDefaultLook();
        clntTab.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );

        TableColumnModel tableColumnModel = clntTab.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 140 );
        tableColumnModel.getColumn(1).setWidth( 100 );
        tableColumnModel.getColumn(2).setWidth( 100 );
        tableColumnModel.getColumn(3).setWidth( 100 );
        tableColumnModel.getColumn(4).setWidth( 70 );
        
        for( i=0;i<colNum;i++ )
            clntTab.sizeColumnsToFit(i);

        clntTab.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        clntTab.getTableHeader().setReorderingAllowed(false);
    }
    
    private void setupSubnetTable(){
        int i;
        Object[][] data;
        
        Vector list = view.initor.dhcpdb.getSubnetListFromDhcp();
        int num = list.size();
        
        data = new Object[2+num][6]; //name,desc
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 6;      // col num
        
        data[1][0] = SanBootView.res.getString("DhcpDialog.table.subnet.netip");
        data[1][1] = SanBootView.res.getString("DhcpDialog.table.subnet.mask");
        data[1][2] = SanBootView.res.getString("DhcpDialog.table.subnet.start");
        data[1][3] = SanBootView.res.getString("DhcpDialog.table.subnet.end");
        data[1][4] = SanBootView.res.getString("DhcpDialog.table.subnet.reserved");
        data[1][5] = SanBootView.res.getString("DhcpDialog.table.subnet.allowUnknown");
        
        for( i=0; i<num; i++ ){
            SubNetInDHCPConf subnet = (SubNetInDHCPConf)list.elementAt(i);
            
            data[2+i][0] = subnet;
            data[2+i][1] = subnet.netmask;
            data[2+i][2] = subnet.start;
            data[2+i][3] = subnet.end;
            data[2+i][4] = subnet.getLeaseTimeInDay()+"";
            data[2+i][5] = subnet.allUnknonClnt?"YES":"NO";
        }

        subNetTab.setTableModel( data );
        subNetTab.setDefaultLook();
        subNetTab.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );

        TableColumnModel tableColumnModel = subNetTab.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 100 );
        tableColumnModel.getColumn(1).setWidth( 100 );
        tableColumnModel.getColumn(2).setWidth( 100 );
        tableColumnModel.getColumn(3).setWidth( 100 );
        tableColumnModel.getColumn(4).setWidth( 75 );
        tableColumnModel.getColumn(5).setWidth( 120 );
        for( i=0;i<colNum;i++ )
            subNetTab.sizeColumnsToFit(i);

        subNetTab.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        subNetTab.getTableHeader().setReorderingAllowed(false);
    }
    
    private void setupIbootServTable(){
        int i;
        Object[][] data;

        Vector list = view.initor.dhcpdb.getIbootSrvListFromDhcp();
        int num = list.size();
        
        data = new Object[2+num][2]; //name,desc
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 2;      // col num
        
        data[1][0] = SanBootView.res.getString("DhcpDialog.table.ibootsrv.ip");
        data[1][1] = SanBootView.res.getString("DhcpDialog.table.ibootsrv.default");
        
        for( i=0; i<num; i++ ){
            DhcpIBootSrv ibootSrv = (DhcpIBootSrv)list.elementAt(i);
            
            data[2+i][0] = ibootSrv;
            data[2+i][1] = ibootSrv.isDefaultServer()?"YES":"NO";
        }

        ibootSrvTab.setTableModel( data );
        ibootSrvTab.setDefaultLook();
        ibootSrvTab.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );

        TableColumnModel tableColumnModel = ibootSrvTab.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }
        
        tableColumnModel.getColumn(0).setWidth( 150 );
        tableColumnModel.getColumn(1).setWidth( 240 );
        for( i=0;i<colNum;i++ )
            ibootSrvTab.sizeColumnsToFit(i);

        ibootSrvTab.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        ibootSrvTab.getTableHeader().setReorderingAllowed(false);
    }
    
    void setupGlobalOpt(){
        jTextField1.setText( view.initor.dhcpIp );
        jTextField1.requestFocus();
        jTextField4.setText( view.initor.dhcp_port+"" );
        jTextField5.setText( view.initor.dhcp_acct );
        jPasswordField1.setText( view.initor.dhcp_passwd );
//        boolean isDhcpStart = view.initor.dhcpdb.isDHCPStart();
        Boolean isDhcpStart= view.initor.mdb.getDhcpStatus();
        jLabel6.setText( SanBootView.res.getString("DhcpDialog.label.status") + 
                ( isDhcpStart?
                    SanBootView.res.getString("DhcpDialog.label.start"):
                    SanBootView.res.getString("DhcpDialog.label.stop")
                )         
        );
        if( isDhcpStart ){
            this.jButton12.setText( SanBootView.res.getString("DhcpDialog.button.stop"));
        }else{
            this.jButton12.setText( SanBootView.res.getString("DhcpDialog.button.start"));
        }
        
        DhcpGlobalOpt opt = view.initor.dhcpdb.getGlobalOpt();
        if( opt != null ){
            jTextField2.setText( opt.getDNS() );
            jTextField3.setText( opt.getDefGw() );
            if( opt.getDefStartOS().toUpperCase().startsWith("WIN") ){
                jComboBox1.setSelectedItem( ResourceCenter.OS_WIN );
            }else if( opt.getDefStartOS().toUpperCase().startsWith("LIN") ){
                jComboBox1.setSelectedItem( ResourceCenter.OS_LINUX);
            }else{
                jComboBox1.setSelectedItem( ResourceCenter.OS_WIN );
            }
        }
    }
    
    void setupGlobalOpt1(){     
//        boolean isDhcpStart = view.initor.dhcpdb.isDHCPStart();
        Boolean isDhcpStart= view.initor.mdb.getDhcpStatus();
        jLabel6.setText( SanBootView.res.getString("DhcpDialog.label.status") +
                ( isDhcpStart?
                    SanBootView.res.getString("DhcpDialog.label.start"):
                    SanBootView.res.getString("DhcpDialog.label.stop")
                )         
        );
        if( isDhcpStart ){
            jButton12.setText( SanBootView.res.getString("DhcpDialog.button.stop"));
        }else{
            jButton12.setText( SanBootView.res.getString("DhcpDialog.button.start"));
        }
        
        DhcpGlobalOpt opt = view.initor.dhcpdb.getGlobalOpt();
        if( opt != null ){
            jTextField2.setText( opt.getDNS() );
            jTextField3.setText( opt.getDefGw() );
            if( opt.getDefStartOS().toUpperCase().startsWith("WIN") ){
                jComboBox1.setSelectedItem( ResourceCenter.OS_WIN );
            }else if( opt.getDefStartOS().toUpperCase().startsWith("LIN") ){
                jComboBox1.setSelectedItem( ResourceCenter.OS_LINUX);
            }else{
                jComboBox1.setSelectedItem( ResourceCenter.OS_WIN );
            }
        }
    }
    
    String _ip;
    int port;
    String acct;
    String passwd;
    private boolean checkDhcpServerInfo(){
        _ip = jTextField1.getText().trim();
        if( _ip.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DhcpDialog.errMsg.noneIP")
            );
            return false;
        }

        if( !Check.ipCheck( _ip ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DhcpDialog.errMsg.invalidIP")
            );
            return false;
        }
        
        String _port = jTextField4.getText().trim();
        if( _port.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DhcpDialog.errMsg.nonePort")
            );
            return false;
        }

        if( !Check.digitCheck( _port ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DhcpDialog.errMsg.invalidPort")
            );
            return false;
        }

        port = -1;
        try{
            port = Integer.parseInt( _port );
        }catch(Exception ex){}
        
        if( port <1 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DhcpDialog.errMsg.badPort")
            );
            return false;
        }
        
        if( port >65535 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DhcpDialog.errMsg.badPort")
            );
            return false;
        }
        
        acct = jTextField5.getText().trim();
        if( acct.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DhcpDialog.errMsg.noneAcct")
            );
            return false;
        }
        
        passwd = new String( jPasswordField1.getPassword() );
        if( passwd.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DhcpDialog.errMsg.nonePasswd")
            );
            return false;
        }
        
        return true;
    }
    
    public boolean init1(){
        cnt++;
        setupGlobalOpt1();
        
        cnt++;
        setupSubnetTable();
        
        cnt++;
        setupIbootServTable();
        
        cnt++;
        setupClntTable();
        
        return true;
    }
    
    public boolean init(){
        cnt++;
        status = SanBootView.res.getString("common.loadstatus.global");
        setupGlobalOpt();
        
        cnt++;
        status = SanBootView.res.getString("common.loadstatus.subnet");
        setupSubnetTable();
        
        cnt++;
        status = SanBootView.res.getString("common.loadstatus.ibootsrv");
        setupIbootServTable();
        
        cnt++;
        status = SanBootView.res.getString("common.loadstatus.clnt");
        setupClntTable();
        
        enableButton( view.initor.dhcpdb.isLoginOK()  );
      
        return true;
    }
    
    String status ="";
    public String getLoadingStatus(){
        return status;
    }
    int cnt = 0;
    public int getLoadingProcessVal(){
        return (cnt*100)/4;
    }
    public String getInitErrMsg(){
        return "";
    }
    public boolean isCrtVG(){
        return true;
    }
    public String getSrvIP(){
        return "";
    }
    
    void refreshDhcpInfo(){
        boolean isOk = checkDhcpServerInfo();
        if( !isOk ) return;
        
        if( view.initor.dhcpdb.isLoginOK() ){
            view.initor.dhcpdb.logout();
        }
        
        // 图形化的显示初始化过程
        InitProgramDialog initDiag = new InitProgramDialog( 
            view,
            SanBootView.res.getString("DhcpDialog.initTitle"),
            SanBootView.res.getString("DhcpDialog.initLabel")
        );
        FreshDhcpInfoThread freshDhcp = new FreshDhcpInfoThread( this, view, _ip,port, acct,passwd );
        
        Thread initThread = new Thread( new LaunchSomething( initDiag,freshDhcp ) );
        initThread.start();
        int width  = 300+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 120+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        initDiag.setSize( width, height );
        initDiag.setLocation( view.getCenterPoint(width,height) ); 
        initDiag.setVisible( true );
                /**
         * save dhcp server information
         */
        if( !this.checkDhcpServerInfo() ) return;
        if( !saveDhcpConf( _ip, port, acct, passwd ) ){
            JOptionPane.showMessageDialog(this,
                errMsg
            );
            return;
        }else{
            view.initor.dhcpIp = _ip;
            view.initor.dhcp_port = port;
            view.initor.dhcp_acct = acct;
            view.initor.dhcp_passwd = passwd;
        }
    }
    
    private void startOrStopDhcp(){
        boolean isStart;
        
        String text = jButton12.getText();
        String cmdLine = ResourceCenter.BIN_DIR ;
        if( text.equals( SanBootView.res.getString("DhcpDialog.button.start") ) ){
            cmdLine += "dhcp_set.sh start";
            
            // 检查dhcpenable file是否存在
//            boolean isExist = view.initor.dhcpdb.viewFileContents("/etc/sysconfig/customdrv/dhcpenable");
//            if( isExist )return;
            
//            view.initor.dhcpdb.touchFile( "/etc/sysconfig/customdrv/dhcpenable" );
            
            isStart = true;
        }else{
//            view.initor.dhcpdb.delFile("/etc/sysconfig/customdrv/dhcpenable");
            
            cmdLine += "dhcp_set.sh stop";
            isStart = false;
        }
        
        boolean isOk = view.initor.dhcpdb.dhcpOperation( cmdLine );
        if( isOk ){
            if( isStart ){
                //audit.setEventDesc( "Start DHCP server successfully." );
                //view.audit.addAuditRecord( audit );
                
                jLabel6.setText( SanBootView.res.getString("DhcpDialog.label.status") + 
                    SanBootView.res.getString("DhcpDialog.label.start")       
                );
                jButton12.setText( SanBootView.res.getString("DhcpDialog.button.stop"));
            }else{
                //audit.setEventDesc( "Stop DHCP server successfully." );
                //view.audit.addAuditRecord( audit );
                
                jLabel6.setText( SanBootView.res.getString("DhcpDialog.label.status") + 
                    SanBootView.res.getString("DhcpDialog.label.stop")       
                );
                jButton12.setText( SanBootView.res.getString("DhcpDialog.button.start"));
            }
        }else{
            if( isStart ){
                //audit.setEventDesc( "Failed to start DHCP server." );
                //view.audit.addAuditRecord( audit );
            
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_START_DHCP ) +" : "+
                        view.initor.dhcpdb.getErrorMessage()
                );
            }else{
                //audit.setEventDesc( "Failed to stop DHCP server." );
                //view.audit.addAuditRecord( audit );
            
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_STOP_DHCP ) +" : "+
                        view.initor.dhcpdb.getErrorMessage()
                );
            }
        }
    }
    
    void addSubnet(){
        whatSubnet = DO_ADD;
        EditSubnetDialog diag = new EditSubnetDialog( view, this,null,-1 ); 
        int width  = 360+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 205+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        diag.setSize( width, height );
        diag.setLocation( view.getCenterPoint(width,height) ); 
        diag.setVisible( true );
        
        Object[] ret = diag.getValues();
        if( ret == null )return;
        
        SubNetInDHCPConf conf = new SubNetInDHCPConf(
            (String)ret[0],
            (String)ret[1],
            (String)ret[2],
            (String)ret[3],
            ((Integer)ret[4]).intValue()*24*60*60,
            ((Boolean)ret[5]).booleanValue()
        );
        int allow = conf.allUnknonClnt?1:0;
        boolean isOk = view.initor.dhcpdb.dhcpOperation(
            ResourceCenter.BIN_DIR + "dhcp_set.sh addsubnet -s "+conf.subnet +" -n "+conf.netmask +" -r "+ conf.start +" "+conf.end + " -a "+allow +" -lease "+conf.def_lease_time
        );
        
        if( isOk ){
            //audit.setEventDesc( "Add subnet: [ "+conf.subnet+"/"+conf.netmask+" ] successfully." );
            //view.audit.addAuditRecord( audit );
            
            view.initor.dhcpdb.addSubnet( conf );
            setupSubnetTable();
        }else{
            //audit.setEventDesc( "Failed to add subnet: [ " + conf.subnet+"/"+conf.netmask+" ]" );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.addSubnetfail")
            );
        }
    }
    
    void modSubnet(){
        int[] rows = subNetTab.getSelectedRows();
        if( rows == null || rows.length <=0 ) return;
        
        int subCol = subNetTab.getColumn(
            SanBootView.res.getString("DhcpDialog.table.subnet.netip")
        ).getModelIndex();
        AbstractTableModel tableModel = (AbstractTableModel)subNetTab.getModel();
        selOnSubnet = rows[0];
        whatSubnet = DO_MOD;
        SubNetInDHCPConf subnet = (SubNetInDHCPConf)tableModel.getValueAt( rows[0], subCol );
        
        EditSubnetDialog diag = new EditSubnetDialog( view,this,subnet,rows[0] ); 
        int width  = 360+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 205+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        diag.setSize( width, height );
        diag.setLocation( view.getCenterPoint(width,height) ); 
        diag.setVisible( true );
        
        Object[] ret = diag.getValues();
        if( ret == null )return;
        
        SubNetInDHCPConf conf = new SubNetInDHCPConf(
            (String)ret[0],
            (String)ret[1],
            (String)ret[2],
            (String)ret[3],
            ((Integer)ret[4]).intValue()*24*60*60,
            ((Boolean)ret[5]).booleanValue()
        );
        int allow = conf.allUnknonClnt?1:0;
        
        boolean isOk = view.initor.dhcpdb.dhcpOperation(
            ResourceCenter.BIN_DIR + "dhcp_set.sh addsubnet -s "+conf.subnet +" -n "+conf.netmask +" -r "+ conf.start +" "+conf.end + " -a "+allow +" -lease "+conf.def_lease_time
        );
        if( isOk ){
            //audit.setEventDesc( "Modify subnet: [ " + conf.subnet+"/"+conf.netmask+ " ] successfully."  );
            //view.audit.addAuditRecord( audit );
            
            view.initor.dhcpdb.delSubnet( subnet );
            view.initor.dhcpdb.addSubnet( conf );
            setupSubnetTable();
        }else{
            //audit.setEventDesc( "Failed to modify subnet: [ " + conf.subnet+"/"+conf.netmask+ " ]"  );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.modSubnetfail")
            );
        }
    }
    
    public List getAllSubnetOnTab(){
        List ret;
        SubNetInDHCPConf subnet;
        
        int subCol = subNetTab.getColumn(
            SanBootView.res.getString("DhcpDialog.table.subnet.netip")
        ).getModelIndex();
        AbstractTableModel tableModel = (AbstractTableModel)subNetTab.getModel();
        int rowCnt = tableModel.getRowCount();
        if( whatSubnet == DO_ADD ){
            ret = new ArrayList( rowCnt );
        }else{
            ret = new ArrayList( rowCnt-1 );
        }
        for( int i=0; i<rowCnt;i++ ){
            if( whatSubnet == DO_ADD ){
                subnet = (SubNetInDHCPConf)tableModel.getValueAt( i, subCol );
                ret.add( subnet );
            }else{
                if( i != this.selOnSubnet ){
                    subnet = (SubNetInDHCPConf)tableModel.getValueAt( i, subCol );
                    ret.add( subnet );
                }
            }  
        }
        
        return ret;
    }
    
    void delSubnet(){
        int[] rows = subNetTab.getSelectedRows();
        if( rows == null || rows.length <=0 ) return;
        
        int subCol = subNetTab.getColumn(
            SanBootView.res.getString("DhcpDialog.table.subnet.netip")
        ).getModelIndex();
        AbstractTableModel tableModel = (AbstractTableModel)subNetTab.getModel();
        SubNetInDHCPConf conf = (SubNetInDHCPConf)tableModel.getValueAt( rows[0], subCol );
        
        boolean isOk = view.initor.dhcpdb.dhcpOperation(
            ResourceCenter.BIN_DIR + "dhcp_set.sh delsubnet -s "+conf.subnet + " -r " + conf.start + " " + conf.end
        );
        
        if( isOk ){
            //audit.setEventDesc( "Delete subnet : [ " + conf.subnet+"/"+conf.netmask+ " ] successfully." );
            //view.audit.addAuditRecord( audit );
            
            view.initor.dhcpdb.delSubnet( conf ); 
            setupSubnetTable();
        }else{
            //audit.setEventDesc( "Failed to delete subnet: [" + conf.subnet+"/"+conf.netmask+ " ]" );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.delSubnetfail")
            );
        }
    }
    
    public boolean isSameIbootSrv( String ip ){
        List ret;
        DhcpIBootSrv ibootSrv;
        
        int ibootSrvCol = ibootSrvTab.getColumn(
            SanBootView.res.getString("DhcpDialog.table.ibootsrv.ip")
        ).getModelIndex();
        AbstractTableModel tableModel = (AbstractTableModel)ibootSrvTab.getModel();
        int rowCnt = tableModel.getRowCount();
        if( this.whatIbotSrv == DO_ADD ){
            ret = new ArrayList( rowCnt );
        }else{
            ret = new ArrayList( rowCnt-1 );
        }
        for( int i=0; i<rowCnt;i++ ){
            if( whatIbotSrv == DO_ADD ){
                ibootSrv = (DhcpIBootSrv)tableModel.getValueAt( i, ibootSrvCol );
                if( ibootSrv.ip.equals( ip ) ){
                    return true;
                }
            }else{
                if( i != this.selOnIbootSrv ){
                    ibootSrv = (DhcpIBootSrv)tableModel.getValueAt( i, ibootSrvCol );
                    if( ibootSrv.ip.equals( ip ) ){
                        return true;
                    }
                }
            }  
        }
        
        return false;
    }
    
    public boolean isSameClnt( String mac ){
        List ret;
        DhcpClientInfo clnt;
        
        int macCol = clntTab.getColumn(
            SanBootView.res.getString("DhcpDialog.table.clnt.mac")
        ).getModelIndex();
        AbstractTableModel tableModel = (AbstractTableModel)clntTab.getModel();
        int rowCnt = tableModel.getRowCount();
        if( this.whatClnt == DO_ADD ){
            ret = new ArrayList( rowCnt );
        }else{
            ret = new ArrayList( rowCnt-1 );
        }
        for( int i=0; i<rowCnt;i++ ){
            if( whatClnt == DO_ADD ){
                clnt = (DhcpClientInfo)tableModel.getValueAt( i, macCol );
                if( clnt.mac.toUpperCase().equals( mac.toUpperCase() ) ){
                    return true;
                }
            }else{
                if( i != this.selOnClnt ){
                    clnt = (DhcpClientInfo)tableModel.getValueAt( i, macCol );
                    if( clnt.mac.toUpperCase().equals( mac.toUpperCase() ) ){
                        return true;
                    }
                }
            }  
        }
        
        return false;
    }
    
    void addIbootSrv(){
        whatIbotSrv = DO_ADD;
        EditIbootSrvDialog diag = new EditIbootSrvDialog( view, this,null,-1 ); 
        int width  = 300+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 185+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        diag.setSize( width, height );
        diag.setLocation( view.getCenterPoint(width,height) ); 
        diag.setVisible( true );
        
        Object[] ret = diag.getValues();
        if( ret == null )return;
        
        DhcpIBootSrv conf = new DhcpIBootSrv(
            (String)ret[0],
            (String)ret[1]
        );
        boolean isOk = view.initor.dhcpdb.dhcpOperation(
            ResourceCenter.BIN_DIR + "dhcp_set.sh setnextserver -i "+conf.ip +" -default "+conf.defServer
        );
        
        if( conf.defServer.equals("1") ){
            // 将原来的“默认网络启动服务器”标志删除
            view.initor.dhcpdb.clearDefFlag();
        }
        
        if( isOk ){
            //audit.setEventDesc( "Add netboot server: "+ conf.ip +" successfully." );
            //view.audit.addAuditRecord( audit );
            
            view.initor.dhcpdb.addIBootSrv( conf );
            setupIbootServTable();
        }else{
            //audit.setEventDesc( "Failed to add netboot server: "+ conf.ip );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.addIBootSrvFail")
            );
        }
    }
    
    void modIbootSrv(){
        int[] rows = ibootSrvTab.getSelectedRows();
        if( rows == null || rows.length <=0 ) return;
        
        int ipCol = ibootSrvTab.getColumn(
            SanBootView.res.getString("DhcpDialog.table.ibootsrv.ip")
        ).getModelIndex();
        AbstractTableModel tableModel = (AbstractTableModel)ibootSrvTab.getModel();
        selOnIbootSrv = rows[0];
        whatIbotSrv = DO_MOD;
        DhcpIBootSrv ibootSrv = (DhcpIBootSrv)tableModel.getValueAt( rows[0], ipCol );
        
        EditIbootSrvDialog diag = new EditIbootSrvDialog( view, this,ibootSrv,rows[0] );  
        int width  = 300+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 185+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        diag.setSize( width, height );
        diag.setLocation( view.getCenterPoint(width,height) ); 
        diag.setVisible( true );
        
        Object[] ret = diag.getValues();
        if( ret == null )return;
        
        DhcpIBootSrv conf = new DhcpIBootSrv(
            (String)ret[0],
            (String)ret[1]
        );
        boolean isOk = view.initor.dhcpdb.dhcpOperation(
            ResourceCenter.BIN_DIR + "dhcp_set.sh setnextserver -i "+conf.ip +" -oldip " + ibootSrv.ip + " -default "+conf.defServer
        );
        
        if( conf.defServer.equals("1") ){
            // 将原来的“默认网络启动服务器”标志删除
            view.initor.dhcpdb.clearDefFlag();
        }
        
        if( isOk ){
            //audit.setEventDesc( "Modify netboot server: " + conf.ip + " successfully." );
            //view.audit.addAuditRecord( audit );
            
            view.initor.dhcpdb.delIBootSrv( ibootSrv );
            view.initor.dhcpdb.addIBootSrv( conf );
            setupIbootServTable();
        }else{
            //audit.setEventDesc( "Failed to modify netboot server: "+conf.ip );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.modIBootSrvFail")
            );
        }
    }
    void delIbootSrv(){
        int[] rows = ibootSrvTab.getSelectedRows();
        if( rows == null || rows.length <=0 ) return;
        
        int ipCol = ibootSrvTab.getColumn(
            SanBootView.res.getString("DhcpDialog.table.ibootsrv.ip")
        ).getModelIndex();
        AbstractTableModel tableModel = (AbstractTableModel)ibootSrvTab.getModel();
        DhcpIBootSrv conf = (DhcpIBootSrv)tableModel.getValueAt( rows[0], ipCol );
        
        if( conf.isDefaultServer() ){
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.lastDefIbootSrv")
            );
            return;
        }
        
        boolean isOk = view.initor.dhcpdb.dhcpOperation(
            ResourceCenter.BIN_DIR + "dhcp_set.sh setnextserver -oldip "+conf.ip
        );
        
        if( isOk ){
            //audit.setEventDesc( "Delete netboot server: " + conf.ip + " successfully." );
            //view.audit.addAuditRecord( audit );
            
            view.initor.dhcpdb.delIBootSrv( conf ); 
            setupIbootServTable();
        }else{
            //audit.setEventDesc( "Failed to delete netboot server: "+ conf.ip );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.delIbootSrvfail")
            );
        }
    }
    void addClnt(){
        whatClnt = DO_ADD;
        EditClientDialog diag = new EditClientDialog( view, this,null,-1 ); 
        int width  = 310+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 245+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        diag.setSize( width, height );
        diag.setLocation( view.getCenterPoint( width,height ) ); 
        diag.setVisible( true );
        
        Object[] ret = diag.getValues();
        if( ret == null )return;
        
        DhcpClientInfo conf = new DhcpClientInfo(
            (String)ret[0],
            (String)ret[1],
            (String)ret[2],
            (String)ret[3],
            (String)ret[4],
            (String)ret[5],
            (String)ret[6],
            (String)ret[7]
        );
        
        String args="";
        if( !conf.dns.equals("") ){
            args+=" -d " +conf.dns;
        }
        if( !conf.defgw.equals("") ){
            args+=" -g " + conf.defgw;
        }
        
        args += " -i "+conf.ip + " -p " +DhcpClientInfo.getSimpleMac( conf.mac ) +" -s "+conf.subnet+ " -x "+conf.nextServer + " -ostype "+conf.getOSType();
        
        String targetSrvName = view.initor.mdb.getHostName();
        if( targetSrvName.equals("") ){
SanBootView.log.error( this.getClass().getName(),"get swu server name failed.");            
            //audit.setEventDesc( "Failed to add dhcp client: [ "+ conf.ip + "/"+ DhcpClientInfo.getSimpleMac( conf.mac ) + " ]" );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.addClntFail")
            );
            return;
        }
        
        if( !conf.os_tid.equals("") ){
            String tn = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + conf.os_tid;
            args += " -boottype iboot  -bootserverip " + conf.nextServer +" -boottargetid " + tn;
        }
        
        boolean isOk = view.initor.dhcpdb.dhcpOperation(
            ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args
        );
        
        if( isOk ){
            //audit.setEventDesc( "Add dhcp client: [ " + conf.ip + "/" + DhcpClientInfo.getSimpleMac( conf.mac )+ " ] successfully." );
            //view.audit.addAuditRecord( audit );
            
            view.initor.dhcpdb.addClnt( conf );
            this.setupClntTable();
        }else{
            //audit.setEventDesc( "Failed to add dhcp client: [ "+ conf.ip + "/"+ DhcpClientInfo.getSimpleMac( conf.mac ) + " ]" );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.addClntFail")
            );
        }
    }
    void modClnt(){
        int[] rows = clntTab.getSelectedRows();
        if( rows == null || rows.length <=0 ) return;
        
        int macCol = clntTab.getColumn(
            SanBootView.res.getString("DhcpDialog.table.clnt.mac")
        ).getModelIndex();
        AbstractTableModel tableModel = (AbstractTableModel)clntTab.getModel();
        selOnClnt = rows[0];
        whatClnt = DO_MOD;
        DhcpClientInfo clnt = (DhcpClientInfo)tableModel.getValueAt( rows[0], macCol );
            
        EditClientDialog diag = new EditClientDialog( view, this,clnt,rows[0] );  
        int width  = 310+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 245+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        diag.setSize( width, height );
        diag.setLocation( view.getCenterPoint(width,height) ); 
        diag.setVisible( true );
        
        Object[] ret = diag.getValues();
        if( ret == null )return;
        
        DhcpClientInfo conf = new DhcpClientInfo(
            (String)ret[0],
            (String)ret[1],
            (String)ret[2],
            (String)ret[3],
            (String)ret[4],
            (String)ret[5],
            (String)ret[6],
            (String)ret[7]
        );
        
        boolean isOk = view.initor.dhcpdb.dhcpOperation(
            ResourceCenter.BIN_DIR + "dhcp_set.sh delcli -p " + DhcpClientInfo.getSimpleMac( clnt.mac )
        );
        if( isOk ){            
            String args="";
            if( !conf.dns.equals("") ){
                args+=" -d " +conf.dns;
            }
            if( !conf.defgw.equals("") ){
                args+=" -g " + conf.defgw;
            }        
            args += " -i "+conf.ip + " -p " +DhcpClientInfo.getSimpleMac( conf.mac ) +" -s "+conf.subnet+ " -x "+conf.nextServer + " -ostype "+conf.getOSType();
            
            String targetSrvName = view.initor.mdb.getHostName();
            if( targetSrvName.equals("") ){
SanBootView.log.error( this.getClass().getName(),"get swu server name failed.");            
                //audit.setEventDesc( "Failed to add dhcp client: [ "+ conf.ip + "/"+ DhcpClientInfo.getSimpleMac( conf.mac ) + " ]" );
                //view.audit.addAuditRecord( audit );

                JOptionPane.showMessageDialog( this, 
                    SanBootView.res.getString("EditSubnetDialog.errMsg.addClntFail")
                );
                return;
            }

            if( !conf.os_tid.equals("") ){
                String tn = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + conf.os_tid;
                args += " -boottype iboot  -bootserverip " + conf.nextServer +" -boottargetid " + tn;
            }
            
            isOk = view.initor.dhcpdb.dhcpOperation(
                ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args
            );
            
            if( isOk ){
                //audit.setEventDesc( "Modify dhcp client:[ " + conf.ip +"/" + DhcpClientInfo.getSimpleMac( conf.mac ) + " ] successfully." );
                //view.audit.addAuditRecord( audit );
                
                view.initor.dhcpdb.removeClnt( clnt );
                view.initor.dhcpdb.addClnt( conf );
                this.setupClntTable();
            }else{
                //audit.setEventDesc( "Failed to modify dhcp client: [ "+ conf.ip + "/"+DhcpClientInfo.getSimpleMac( conf.mac )+" ]" );
                //view.audit.addAuditRecord( audit );
                
                JOptionPane.showMessageDialog( this, 
                    SanBootView.res.getString("EditSubnetDialog.errMsg.addClntFail")
                );
            }
        }else{
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.delClntfail")
            );
        }
    }
    void delClnt(){
        int[] rows = clntTab.getSelectedRows();
        if( rows == null || rows.length <=0 ) return;
        
        int macCol = clntTab.getColumn(
            SanBootView.res.getString("DhcpDialog.table.clnt.mac")
        ).getModelIndex();
        AbstractTableModel tableModel = (AbstractTableModel)clntTab.getModel();
        DhcpClientInfo conf = (DhcpClientInfo)tableModel.getValueAt( rows[0], macCol );
        
        String mac1 = DhcpClientInfo.getSimpleMac( conf.mac );
        
        boolean isOk = view.initor.dhcpdb.dhcpOperation(
            ResourceCenter.BIN_DIR + "dhcp_set.sh delcli -p " + mac1
        );
        
        if( isOk ){
            //audit.setEventDesc( "Delete dhcp client: [ " + conf.ip +"/"+ mac1+ " ] successfully." );
            //view.audit.addAuditRecord( audit );
                
            view.initor.dhcpdb.removeClnt( conf );
            setupClntTable();
        }else{
            //audit.setEventDesc( "Failed to delete dhcp client: [ " + conf.ip + "/" + mac1 + " ]" );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog( this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.delClntfail")
            );
        }
    }
    
    void closeBtn(){
        boolean isOk = this.checkDhcpServerInfo();
        if( !isOk ) return;
        
        if( !saveDhcpConf( _ip, port, acct, passwd ) ){
            JOptionPane.showMessageDialog(this,
                errMsg
            );
            return;
        }else{
            view.initor.dhcpIp = _ip;
            view.initor.dhcp_port = port;
            view.initor.dhcp_acct = acct;
            view.initor.dhcp_passwd = passwd;
        }
        
        this.dispose();
    }
    
    String errMsg="";
    boolean saveDhcpConf( String ip,int port,String user,String pass ){
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_PROF ); 
        if( tmpFile == null ){
            errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
            return false;
        }
        
        DHCPOpt dhcp = view.initor.mdb.getCurrentDhcp( view.initor.uws.getServerIp() );
        if( dhcp != null ){
            view.initor.mdb.removeOneDhcp( dhcp );
        }

        DHCPOpt newDHCP = new DHCPOpt( view.initor.uws.getServerIp(),ip,port+"",user,pass );
        view.initor.mdb.addOneDhcp( newDHCP );

        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),view.initor.mdb.prtAllDhcp() ) ){
            errMsg =  SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                view.initor.mdb.getErrorMessage();
            return false;
        }

        // 将tmpFile move to profile dir
        if( !view.initor.mdb.moveFile( ResourceCenter.TMP_DIR + tmpFile.getName(), ResourceCenter.CLT_IP_CONF+ResourceCenter.DHCP_CONF_FILE ) ) {
             errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_MOD_DHCP)+
                ": "+
                SanBootView.res.getString("common.failed");
             return false;
        }
        
        return true;
    }
    
    void changeGlobalOpt(){
        String cmdLine = ResourceCenter.BIN_DIR +"dhcp_set.sh global ";
        
        String dns = jTextField2.getText().trim();
        if( !dns.equals("") ){
            if( !Check.ipCheck( dns ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("DhcpDialog.errMsg.invalidDnsIP")
                );
                return;
            }
            cmdLine +=" -d "+dns;
        }
        
        String defgw = jTextField3.getText().trim();
        if( !defgw.equals("") ){
            if( !Check.ipCheck( defgw ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("DhcpDialog.errMsg.invalidDefgwIP")
                );
                return;
            }
            cmdLine +=" -g "+defgw;
        }
        
        String defos = (String)jComboBox1.getSelectedItem();
        if( defos.toUpperCase().startsWith("WIN") ){
            defos = "windows";
        }else{
            defos = "linux";
        }
        cmdLine += " -defos " +defos;
        
        boolean isOk = view.initor.dhcpdb.dhcpOperation( cmdLine );
        if( isOk ){
            //audit.setEventDesc( "Modify dhcp global option successfully." );
            //view.audit.addAuditRecord( audit );
            
            view.initor.dhcpdb.setGlobalDns(dns);
            view.initor.dhcpdb.setGlobalDefgw( defgw );
            view.initor.dhcpdb.setGlobalDefos( defos );
            
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DhcpDialog.errMsg.chgOptOk")
            );
        }else{
            //audit.setEventDesc( "Failed to modify dhcp global option." );
            //view.audit.addAuditRecord( audit );
            
            JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_DHCP_CHG_OPT ) +" : "+
                    view.initor.dhcpdb.getErrorMessage()
            );    
        }
    }
    
    private void restore_default_conf(){ 
        String ip = jTextField1.getText().trim();
        int ret = JOptionPane.showConfirmDialog(
            view,
            SanBootView.res.getString("DhcpDialog.confirm1") + " " + ip + " " + SanBootView.res.getString("DhcpDialog.confirm2"),
            SanBootView.res.getString("common.confirm"),  //"Confirm",
            JOptionPane.OK_CANCEL_OPTION
        );
        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
            return;
        }
        
        GenerateDhcpDefConf thread = new GenerateDhcpDefConf(
            view
        );
        view.startupProcessDiag( 
            SanBootView.res.getString("View.pdiagTitle.generateDhcpConf"),
            SanBootView.res.getString("View.pdiagTip.generateDhcpConf"),
            thread
        );
        
        if( thread.isOk() ){
            //audit.setEventDesc( "Restore default configuration successfully." );
            //view.audit.addAuditRecord( audit );
            
            refreshDhcpInfo();
        }else{
            //audit.setEventDesc( "Failed to restore default configuration." );
            //view.audit.addAuditRecord( audit );
        }
    }
}

class GenerateDhcpDefConf  extends BasicGetSomethingThread { 
    public GenerateDhcpDefConf(
        SanBootView view
    ){
        super( view );
    }
    
    public boolean realRun(){
        String ipStr,maskStr,subnetStr;
        InetAddress mask = null,ip = null,max=null;
        
        boolean ok = view.initor.dhcpdb.getUWSIf();
        if( ok ){
            IFConfObj ifObj = view.initor.dhcpdb.getIF( "eth0" );
            if( ifObj == null ){
                ifObj = view.initor.dhcpdb.getFirstIF();
                if( ifObj == null ){
                    errMsg = SanBootView.res.getString("DhcpDialog.errMsg.noIf");
                    return false;
                }
            }
            
            ipStr = ifObj.getIp();
            maskStr = ifObj.getMask();
            
            try{
                ip = InetAddress.getByName( ipStr );
            }catch(Exception ex){
                errMsg = SanBootView.res.getString("EditSubnetDialog.errMsg.invalidHostIP") + " : " + ipStr;
                return false;
            }
            
            try{
                mask = InetAddress.getByName( maskStr );
            }catch(Exception ex){
                errMsg = SanBootView.res.getString("EditSubnetDialog.errMsg.invalidMask") + " : " + maskStr;
                return false;
            }
            
            if( !InetCidr.isValidMask( mask ) ){ 
                errMsg = SanBootView.res.getString("EditSubnetDialog.errMsg.invalidMask") + " : " + maskStr;
                return false;
            }
            
            try{
                max = InetAddress.getByName( "255.255.255.255" );
            }catch(Exception ex){
            }
            
            Object[] ret = Check.ipCal( ip,mask );
            subnetStr = (String)ret[0];
            InetAddress begAr = (InetAddress)ret[1];
            InetAddress endAr = (InetAddress)ret[2];
            
            /*
            InetCidr maxCidr = new InetCidr( max,max,false );
            long maxEle = maxCidr.getAddrLong();
            InetCidr maskCidr = new InetCidr( mask,mask,false );
            long maskEle = maskCidr.getAddrLong();
            long rest = maxEle - maskEle;
            
            InetCidr subnetCidr = new InetCidr( ip,mask,false );
            InetAddress ele = subnetCidr.getAddr();   
SanBootView.log.debug(getClass().getName(), " subnet: "+ele.getHostAddress() );
            subnetStr = ele.getHostAddress();
            
            long begin = subnetCidr.getAddrLong() + 1;
            InetAddress begAr = Util.long2InetAddress( begin );
SanBootView.log.debug(getClass().getName(), " begin: "+ begAr.getHostAddress()  );
            
            long end = subnetCidr.getAddrLong() + rest - 1;
            InetAddress endAr = Util.long2InetAddress( end );
SanBootView.log.debug(getClass().getName(), " end: "+ endAr.getHostAddress()  );              
            */
            
            // 生成一个临时的dhcpd.conf文件
            StringBuffer buf = new StringBuffer();
            buf.append("#bootp\n");
            buf.append("allow booting;\n");
            buf.append("allow bootp;\n");
            buf.append("ddns-update-style ad-hoc;\n");
            buf.append("ddns-update-style interim;\n");
            buf.append("ignore client-updates;\n");
            buf.append("option space iboot;\n");
            buf.append("option iboot-encap-opts code 175 = encapsulate iboot;\n");
            buf.append("option iboot.bus-id code 177 = string;\n");
            buf.append("if not exists iboot.bus-id {\n" );
            buf.append("        filename = \"bootstrap\";\n}\n\n");
            buf.append("#next-server " + ipStr + ";\n" );
            buf.append("subnet "+subnetStr + " netmask "+ maskStr +"{\n" );
            buf.append("        range " + begAr.getHostAddress() +" "+endAr.getHostAddress() +";\n");
            buf.append("        default-lease-time  86400;\n");
            //buf.append("        max-lease-time 172800;\n");
            buf.append("        max-lease-time 86400;\n");
            buf.append("        deny unknown-clients;\n");
            buf.append("}\n");
            
            ok = saveInfo( "/etc/sysconfig/dhcpd.conf", buf.toString() );
            if( ok ){
                // 不管结果
                String base = ResourceCenter.BIN_DIR;
                String cmdLine = base + "dhcp_set.sh stop";    
                view.initor.dhcpdb.dhcpOperation( cmdLine );
                cmdLine = base + "dhcp_set.sh start";
                ok = view.initor.dhcpdb.dhcpOperation( cmdLine );
                if( !ok ){
                    errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_START_DHCP ) +" : "+
                        view.initor.dhcpdb.getErrorMessage();
                }
            }
        }else{
            errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_GET_UWS_IF ) + " : " + view.initor.dhcpdb.getErrorMessage();
        }
        
        return ok;
    }
    
    private boolean saveInfo( String confile,String contents ){        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.PREFIX );
        if( tmpFile == null ){
            errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
            return false; 
        }
        
        if( contents.equals("") ){
SanBootView.log.warning(getClass().getName(),"Content to send is null.");            
            // if contents is null, must assign a string with some white spaces to it, or sendFileToServer will fail. 
            contents = "                        ";
        }
        
        // 发送profile的内容
        if( !view.initor.dhcpdb.sendFileToServer( tmpFile.getName(),contents ) ){
            errMsg =  SanBootView.res.getString("common.errmsg.sendFileFailed");
            tmpFile.delete();
            return false;
        }    
        
        tmpFile.delete();
            
        // 将tmpFile move to profile dir
        boolean aIsOk = view.initor.dhcpdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile.getName(), confile      
        );
        
        return aIsOk;   
    }
}