/*
 * RestoreOriginalDiskWizardDialog.java
 *
 * Created on 2006/12/29,�AM 9:51
 */

package guisanboot.ui;

import javax.swing.*;
import java.util.*;
import java.io.*;
import guisanboot.data.*;
import guisanboot.datadup.data.*;
import guisanboot.datadup.cmd.RunBackup;
import guisanboot.datadup.ui.GetDataDupProcess;
import guisanboot.res.*;

/**
 *
 * @author  Administrator
 */
public class RestoreOriginalDiskWizardDialog extends WizardDialogSample implements RecordUWSRptable,RestoreOrigiDiskable,RestoreOriginalDiskInterface{
    ActModePaneForRestWinOrgDisk actModePane;
    DefineRstRelationshipPane definePane;
    SelectRestoreDiskPane selectRestDiskPane;
    InputSnapshotCmdPane inputSnapCmdPane;
    RunningTaskForRestoreLocalDisk runPane;
    
    String fWindir;
    SanBootView view;
    DestAgent host = null;
    String targetSrvName;
    boolean needModUUID;
    boolean isSwitchDisk;   // 是否进行网络盘切换对应的源盘恢复

    Vector volList = null;
    Vector partList = null;
    ArrayList oldDiskPartList = null;
    ArrayList newDiskPartList = null;
    HashMap rstMapperList = null;
    
    /** Creates new form RestoreOriginalDiskWizardDialog */
    public RestoreOriginalDiskWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public RestoreOriginalDiskWizardDialog(
            String windir,SanBootView view,DestAgent host,
            String targetSrvName,boolean needModUUID,
            boolean isSwitchDisk
    ){
        super( view );
        myInit( windir,view,host,targetSrvName,needModUUID,isSwitchDisk );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitBootHostWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    ////GEN-BEGIN:variables
    ////GEN-END:variables
    
    private void myInit( String windir,SanBootView _view,DestAgent _host,
            String _targetSrvName,boolean needModUUID,boolean isSwitchDisk ){
        fWindir = windir;
        view = _view;
        host = _host;
        targetSrvName = _targetSrvName;
        this.needModUUID = needModUUID;
        this.isSwitchDisk = isSwitchDisk;
        
        setupLanguage1();
        enableBackButton( false );
        
        setWizardTipText( 
            SanBootView.res.getString( "WizardDialogSample.wizardText"),
            SanBootView.res.getString( "RestoreOriginalDiskWizardDialog.wizardText1" ) 
        );
        
        setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
        
        actModePane = new ActModePaneForRestWinOrgDisk( view );
        definePane = new DefineRstRelationshipPane( view );
        selectRestDiskPane = new SelectRestoreDiskPane( view,host,this ); 
        inputSnapCmdPane = new InputSnapshotCmdPane( view );
        runPane = new RunningTaskForRestoreLocalDisk( view,host ); 
    }
    
    private void setupLanguage1(){
        setTitle( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
    }
    
    @Override public void backButtonProcess(){ 
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1").trim() ) == 0 ){
            enableBackButton( false );
            removeCenterPane();
            addImagePaneOntoCenterPane();
            addWizardTipTextPane();
            setWizardTipText(
                SanBootView.res.getString("WizardDialogSample.wizardText"),
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.wizardText1")
            );
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2").trim() ) == 0 ){     
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1") );
            removePaneFromContentPane( definePane );
            addPaneOntoContentPane( actModePane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3").trim() ) == 0 ){
            removePaneFromContentPane( selectRestDiskPane );
            if( useOldRstMap ){
                enableBackButton( false );
                removeCenterPane();
                addImagePaneOntoCenterPane();
                addWizardTipTextPane();
                setWizardTipText(
                    SanBootView.res.getString("WizardDialogSample.wizardText"),
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.wizardText1")
                );
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title") );
                refreshCenterPane();
                return;
            }else{
                if( actModePane.isAutoRst() ){
                    setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2") );
                    addPaneOntoContentPane( definePane );
                }else{
                    setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1") );
                    addPaneOntoContentPane(  actModePane );
                }
            }
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4").trim() ) == 0 ){     
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
            removePaneFromContentPane( inputSnapCmdPane );
            addPaneOntoContentPane( selectRestDiskPane );
            refreshCenterPane();
            return;
        }
    }
    
    boolean isFirst = true;
    boolean isFirst1 = true;
    boolean useOldRstMap = false;
    JPanel pane = null;
    String title = null;
    @Override public void nextButtonProcess(){
        boolean isOk;
        int ret;
        Vector rstList1;
        Hashtable rstList;
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1").trim() ) == 0 ){      
            if( actModePane.isAutoRst() ){ // 自动分区及格式化
                if( oldDiskPartList == null ){
                    isOk = view.initor.mdb.getOldDiskPartitionTableForWin( host.getOldDiskConfAbsPath() ); 
                    if( isOk ){
                        oldDiskPartList = view.initor.mdb.getAllOldDiskPartList();
                        if( oldDiskPartList.size() == 0 ){
                            oldDiskPartList = null;
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getOldDiskInfo")
                            );
                            return;
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getOldDiskInfo")+" : "+
                                view.initor.mdb.getErrorMessage()
                        );
                        return;
                    }
                }
                
                if( newDiskPartList == null ){
                    isOk = view.initor.mdb.getNewDiskPartitionTableForWin( host.getIP(),host.getPort(),"ib_save_partition.exe -list_local" );
                    if( isOk ){
                        newDiskPartList = view.initor.mdb.getAllNewDiskPartList();
                        if( newDiskPartList.size() == 0 ){
                            newDiskPartList = null;
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getNewDiskInfo")
                            );
                            return;
                        }
                    }else{
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getNewDiskInfo")+" : "+
                                view.initor.mdb.getErrorMessage()
                        );
                        return;
                    }
                }
                
                if( isFirst ){
                    definePane.setupTable( oldDiskPartList,newDiskPartList );
                    isFirst = false;
                }
                removePaneFromContentPane( actModePane );
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2") );
                addPaneOntoContentPane( definePane );
            }else{ // manually create partitions
                removePaneFromContentPane( actModePane );
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
                addPaneOntoContentPane( selectRestDiskPane );
            }
            
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title2").trim() ) == 0 ){
            definePane.fireEditingStopMsg();
            
            if( !definePane.hasRestoreDisk() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRstDisk")
                );
                return ;
            }
            
            // 不检查是否恢复了含有操作系统分区的旧磁盘
            
            if( !definePane.checkVolInfoValidity() ){
                return;
            }
            
            if( definePane.hasNoSeledDisk() ){
                ret = JOptionPane.showConfirmDialog(
                    view,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.confirm1"),
                    SanBootView.res.getString("common.confirm"),  //"Confirm",
                    JOptionPane.OK_CANCEL_OPTION
                );
                if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                    return;
                }
            } 
            
            ret = JOptionPane.showConfirmDialog(
                view,
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.confirm2"),
                SanBootView.res.getString("common.confirm"),  //"Confirm",
                JOptionPane.OK_CANCEL_OPTION
            );
            if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                return;
            }
            
            // 开始分区并格式化新磁盘
            InitProgramDialog initDiag = new InitProgramDialog( 
                view,
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTitle.rst"),
                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTip.rst")
            );
            
            RestoreNewDiskThread rstNewDisk = new RestoreNewDiskThread( this, view,definePane.getDiskInfo(),host ); 
            Thread initThread = new Thread( new LaunchSomething( initDiag,rstNewDisk ) );
            initThread.start();
            
            int width  = 300+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 120+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            initDiag.setSize( width, height );
            initDiag.setLocation( view.getCenterPoint(width,height) ); 
            initDiag.setVisible( true );
            
            if( !rstNewDisk.isSuccessfully() ){
                return;
            }
            
            removePaneFromContentPane( definePane );
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3") );
            HashMap map = rstNewDisk.getRstMapper();
            selectRestDiskPane.updateDest( map );  // 更新 dest 列
            addPaneOntoContentPane( selectRestDiskPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3").trim() ) == 0 ){      
            selectRestDiskPane.fireEditingStopMsg();
            
            if( !this.isSwitchDisk ){
                if( !selectRestDiskPane.isOSDiskSelected() ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noneOSDisk")
                    );
                    return ;
                }
            }
            
            if( !selectRestDiskPane.hasRestoredDisk() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRestoredDisk")
                );
                return ;
            }
            
            if( !selectRestDiskPane.checkVolInfoValidity() ){
                return;
            }
            
            if( selectRestDiskPane.isInputSnapCmd() ){
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4") );
                removePaneFromContentPane( selectRestDiskPane );
                rstList = selectRestDiskPane.getSelectedVolume();
                inputSnapCmdPane.updateGUI( rstList );
                addPaneOntoContentPane( inputSnapCmdPane );
                refreshCenterPane();
                return;
            }else{
                setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5") );
                removePaneFromContentPane( selectRestDiskPane );
                setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
                enableNextButton( false );
                enableBackButton( false );
                enableCancelButton( false );
                setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
                rstList = selectRestDiskPane.getSelectedVolume();
                runPane.updateGUI( rstList );
                addPaneOntoContentPane( runPane );
                refreshCenterPane();
                
                beginRestoring();
                return;
            }
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title4").trim() ) == 0 ){    
            inputSnapCmdPane.fireEditingStopMsg();
            
            setTipTextOnTopPane( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5") );
            removePaneFromContentPane( inputSnapCmdPane );
            setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton( false );
            enableBackButton( false );
            enableCancelButton( false );
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
            rstList1 = inputSnapCmdPane.getTasks();
            runPane.updateGUI1( rstList1 );
            addPaneOntoContentPane( runPane );
            refreshCenterPane();
            
            beginRestoring();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title5").trim() ) == 0 ){
            if( allFinished ){
                if( this.isSwitchDisk ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") + "\n" +
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.todo1")
                    );
                }else{
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") + "\n" +
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.todo")
                    );
                }
            }else{
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.needReRestore")
                );
            }
            dispose();
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title").trim() ) == 0 ){  
            if( partList == null ){
                // 图形化展示初始操作
                ProgressDialog initDiag = new ProgressDialog( 
                    view,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTitle.prepare"),
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTip.prepare")
                );
                PrepareWork prepare = new PrepareWork( initDiag,this,view,host );
                prepare.start();
                initDiag.mySetSize();
                initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                initDiag.setVisible( true );
                
                this.partList = prepare.getPartList();
                if( partList == null ){
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_GET_PARTITION )+" : "+
                            view.initor.mdb.getErrorMessage()
                    );
                    return;
                }
                
                this.rstMapperList = prepare.getRstMap();
                this.volList = prepare.getVolList();
                if( volList.size() > 0 ){
                    selectRestDiskPane.setInputSnapCmdFlag( true );
                    selectRestDiskPane.setupTable( this.volList );
                    // 更新 dest 列��
                    selectRestDiskPane.updateDest( this.rstMapperList );
                    
                    if( rstMapperList.size() >0 ){
                        ret = JOptionPane.showConfirmDialog(
                            view,
                            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.confirm3"),
                            SanBootView.res.getString("common.confirm"),  //"Confirm",
                            JOptionPane.OK_CANCEL_OPTION
                        );
                        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                            // 用户要修改恢复关系
                            title = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1");
                            pane = actModePane;
                        }else{ // 用户同意继续使用原有恢复关系
                            // 按上次源盘恢复时保存的恢复关系将本地目的盘mount起来
                            ProgressDialog mntDiag = new ProgressDialog( 
                                view,
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTitle.mntoldfs"),
                                SanBootView.res.getString("RestoreOriginalDiskWizardDialog.pdiagTip.mntoldfs")
                            );
                            MountOldDrive mntThread = new MountOldDrive( mntDiag,this,rstMapperList );
                            mntThread.start();
                            mntDiag.mySetSize();
                            mntDiag.setLocation( view.getCenterPoint( mntDiag.getDefWidth(),mntDiag.getDefHeight() ) );
                            mntDiag.setVisible( true );
                            
                            useOldRstMap = true;
                            title = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title3");
                            pane = selectRestDiskPane;
                        }
                    }else{
                        title = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.title1");
                        pane = actModePane;
                    }
                }else{
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRestoredDisk")
                    );
                    return ;
                }
            }
            
            if( volList.size() == 0 ){ // impossible to happen                
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.noRestoredDisk")
                );
                return ;
            }
            
            setTipTextOnTopPane( title );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( pane );
            if( isFirst1 ){
                if( pane instanceof ActModePaneForRestWinOrgDisk ){
                    ((ActModePaneForRestWinOrgDisk)pane).setAutoRst( true );
                }
                isFirst1 = false;
            }
            refreshCenterPane();
            return;
        }else{
            return;
        }
    }
    
    public void setProcess(){    
    }
     
    private void beginRestoring(){
        Thread initThread = new Thread( new RestoreLocalDisk( this ) );
        initThread.start();
    }
    
    boolean allFinished = true; /// 表明所有task都成功完成了
    String errMsg;
    public void writeLogBuf( String errMsg ){
        if( isWrFirst ){
            logBuf.append( replaceLine( errMsg ) );
            isWrFirst = false;
        }else{
            logBuf.append( ResourceCenter.NEWLINE_STRING + replaceLine( errMsg ) );
        }
    }
    
    public void putIntoLogBuf( String errMsg,int which ){
        writeLogBuf( errMsg );
    }
    
    public void reGetSysPart(){
        // 重新获取最新的系统分区信息
        boolean isOk = view.initor.mdb.getSystemPart( host.getIP(), host.getPort(), "ib_get_partition_info.exe" );
        if( isOk ){
            partList = view.initor.mdb.getSysPart();
        }else{
            // 否则用原来的
        } 
    }

    public boolean reGetVolInfo(){
        return true;
    }
    
    private boolean regOS( boolean isLargeThanVista,String ip,int port,String realWinDir,String osDest ){
        int boot_mode = host.getBootMode();

        int cnt=0;
        boolean isOk = false;
        while( cnt < 3 ){
            // 从target到本地盘复制时,startsyscopy无法正确修改boot.ini,所以需要重新运行修改过的startbootreg.ext
            if( boot_mode == BootHost.BOOT_MODE_EM ){    
                if( !isLargeThanVista ){
                    if( host.is64BitOS() && !this.selectRestDiskPane.getRealOsRestSourceDiskLetter().equals("C") ){
                        // 需要手动修改注册表。2011.4.14
                        // isOk = view.initor.mdb.regOS( ip,port, ResourceCenter.REG_MODE_LOCAL_DISK, realWinDir, "localdisk" );
                        isOk = view.initor.mdb.ib_driver_comp( ip, port, osDest, ResourceCenter.CMD_TYPE_MTPP );
                    }else{
                        isOk = view.initor.mdb.regOS( ip,port, ResourceCenter.REG_MODE_LOCAL_DISK, realWinDir, "localdisk" );
                        if( isOk ){
                            // mtpp agent所有关于修改注册表的地方均不管ib_driver_comp的事情，
                            // 所以需要这里再调一下( 下同 )
                            isOk = view.initor.mdb.ib_driver_comp( ip, port, osDest, ResourceCenter.CMD_TYPE_MTPP );
                        }
                    }
                }else{
                    if( host.is64BitOS() && !this.selectRestDiskPane.getRealOsRestSourceDiskLetter().equals("C") ){
                        // 需要手动修改注册表。2011.4.14
                        // isOk = view.initor.mdb.regOS1( ip, port, realWinDir );
                        isOk = view.initor.mdb.ib_driver_comp( ip, port, osDest, ResourceCenter.CMD_TYPE_MTPP );
                    }else{
                        isOk = view.initor.mdb.regOS1( ip, port, realWinDir,ResourceCenter.CMD_TYPE_MTPP );
                        if( isOk ){
                            isOk = view.initor.mdb.ib_driver_comp( ip, port, osDest, ResourceCenter.CMD_TYPE_MTPP );
                        }
                    }
                }
                if( isOk ){
                    break;
                }else{
                    cnt++;
                }
            }else if( boot_mode == BootHost.BOOT_MODE_IBOOT ){
                isOk = view.initor.mdb.regOS2( ip,port, ResourceCenter.REG_MODE_LOCAL_DISK1,realWinDir,"localdisk" );
                if( isOk ){
                    isOk = view.initor.mdb.ib_driver_comp( ip, port, osDest, ResourceCenter.CMD_TYPE_MTPP );
                }
                if( isOk ){
                    break;
                }else{
                    cnt++;
                }
            }else { // iscsi HBA
                isOk = view.initor.mdb.regOS3( ip,port,realWinDir );
                if( isOk ){
                    isOk = view.initor.mdb.ib_driver_comp( ip, port, osDest, ResourceCenter.CMD_TYPE_MTPP );
                }
                if( isOk ){
                    break;
                }else{
                    cnt++;
                }
            }                
        }
        
        return isOk;
    }

    private boolean handleUUID( int row ){
        boolean isOkForHandleUUID;
        if( this.needModUUID ){
            isOkForHandleUUID = view.initor.mdb.reCrtUUID( host.getDst_agent_ip(), host.getDst_agent_port(),ResourceCenter.CMD_TYPE_MTPP,true );
            if( !isOkForHandleUUID ){
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.reCrtUUID");
SanBootView.log.error( getClass().getName(),"can not re-create uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ]" );
                runPane.setLogOnTabpane( errMsg, row );
                writeLogBuf( errMsg );
            }
        }else{
            view.initor.mdb.getHostUUID( host.getDst_agent_ip(), host.getDst_agent_port(),true );
            String curUUID = view.initor.mdb.getUUID();
            isOkForHandleUUID = !curUUID.equals("");
            if( isOkForHandleUUID ){
                if( !curUUID.equals( host.getHostUUID() ) ){
                    isOkForHandleUUID = view.initor.mdb.setUUID( host.getDst_agent_ip(), host.getDst_agent_port(),host.getHostUUID(),ResourceCenter.CMD_TYPE_MTPP,true );
                    if( !isOkForHandleUUID ){
SanBootView.log.error( getClass().getName(),"can not set uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ] for new-uuid: " + host.getHostUUID() );
                        errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.setUUID");
                        runPane.setLogOnTabpane( errMsg, row );
                        writeLogBuf( errMsg );
                    }
                }
            }else{
SanBootView.log.error( getClass().getName(),"can not get uuid on [ "+ host.getDst_agent_ip() +" / " + host.getDst_agent_port()+" ]" );
                errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.getUUID");
                runPane.setLogOnTabpane( errMsg, row );
                writeLogBuf( errMsg );
            }
        }
        return isOkForHandleUUID;
    }
    
    public void realRestore(){
        int row,num,i,size,size1,j;
        InitTask task;
        boolean isOk,isFinished,copyOS,copyData,getMacOk,getPartInfoOk,savePartInfoOk,saveRstMapOk,umountOk,registerOS;
        boolean isOkForHandleUUID;
        String rstMapStr,dest,name,tmp,mac,osDest="";
        GetDataDupProcess getProcessThread;
        BindOfSrcAndDest binder;
        SystemPartitionForWin part;
        Vector destList;
        UniProfile profile;
        RunBackup rst = null;
        File tmpFile;
        ArrayList profList = new ArrayList();
        boolean hasCommitFail = false;
        
        boolean supportVss     = host.supportVss();
        boolean supportSysCopy = host.supportSysCopy();
        
        num = runPane.getTableRow(); 
        for( row=0; row<num; row++ ){
            task = runPane.getTask( row );  // 肯定有这个任务�϶����������
            
            if( row == num-1 ){ // 保存信息(the last task)
                runPane.setCurTabPane( row );
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), row, 2
                );
                
                getPartInfoOk = view.initor.mdb.getSystemPart( host.getIP(), host.getPort(), "ib_get_partition_info.exe" );
                savePartInfoOk = false;
                if( !getPartInfoOk ){
                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.getPartInfo")+" "+
                              SanBootView.res.getString("common.failed");
                    runPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg );
                }else{
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.getPartInfo")+" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                    
                    // 保存网络启动时的磁盘情况,在"Failback(iSCSI->localdisk)"中要用到该表
                    savePartInfoOk = saveInfo( 
                        host.getNetbootDiskInfo(),
                        view.initor.mdb.getSysPartStrContents(),
                        row
                    );
                    if( savePartInfoOk ){
                        runPane.setLogOnTabpane(
                            SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                                SanBootView.res.getString("common.ok"),
                            row
                        );
                    }else{
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.savePartInfo")+" "+
                                  SanBootView.res.getString("common.failed"); 
                        runPane.setLogOnTabpane( errMsg,row );
                        writeLogBuf( errMsg );
                    }
                    
                    // 将最新的信息保存到partList中；否则还用旧的
                    this.partList = view.initor.mdb.getSysPart();
                }
                
                // 获取恢复mapping表
                rstMapStr = selectRestDiskPane.getRstMappingTable();
                
                // 保存该mapping表, 在"Failback(iSCSI->localdisk)"中要用到该表
                saveRstMapOk = saveInfo( 
                    host.getRstMapFileName(), 
                    rstMapStr, 
                    row
                );
                if( saveRstMapOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.saveRstMapInfo")+" "+
                            SanBootView.res.getString("common.ok"),
                        row
                    );
                }else{
                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.saveRstMapInfo")+" "+
                              SanBootView.res.getString("common.failed"); 
                    runPane.setLogOnTabpane( errMsg,row );
                    writeLogBuf( errMsg );
                }
                
                // 多次修改reg
                String OSDest = selectRestDiskPane.getOSDest();
                registerOS = true;
                if( OSDest != null ){
                    String aWindir = ( host.isLargerThanVista()? OSDest + ":\\": OSDest + ":\\" + fWindir );
                    if( regOS( host.isLargerThanVista(),host.getIP(),host.getPort(), aWindir,OSDest+":" ) ){
                        if( !host.is64BitOS() || this.selectRestDiskPane.getRealOsRestSourceDiskLetter().equals("C") ){
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("InitBootHostWizardDialog.log.regOS1")+" "+
                                        SanBootView.res.getString("common.ok"),
                                row
                            );
                        }else{
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("InitBootHostWizardDialog.log.regOS3")+" "+
                                        SanBootView.res.getString("common.ok"),
                                row
                            );
                        }
                    }else{
                        errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.regOS1")+" "+
                                      SanBootView.res.getString("common.failed");
                        runPane.setLogOnTabpane( errMsg,row );
                        writeLogBuf( errMsg );
                        registerOS = false;
                    }
                }
                
                if( allFinished ){
                    size = partList.size();
                    for( i=0; i<size; i++ ){
SanBootView.log.info( getClass().getName(),"delete adjust-driver-temp-file.");
                        // 删除adjust-driver-temp-file,不管结果
                        part = (SystemPartitionForWin)partList.elementAt( i );
                        view.initor.mdb.delAdjustDriverTmpFile( host.getIP(),host.getPort(),part.getDiskLabel().substring(0,1) );
                    }

                    destList = selectRestDiskPane.getRstSrcDestList();
                    size = destList.size();
                    for( i=0; i<size; i++ ){
SanBootView.log.info( getClass().getName(),"adjust driver using f_2_d method.");                        
                        RestoreMapper map = (RestoreMapper)destList.elementAt(i);
                        // 执行adjust driver cmd,不管结果(将盘符信息保存在各自的临时文件中)
                        view.initor.mdb.adjustDriver( host.getIP(),host.getPort(),map.getDest().getMp() );
                        view.initor.mdb.adjustDriver( host.getIP(),host.getPort(),map.getSrc() );
                    }
                }
                
                // 如果源盘恢复全部成功，则将临时mount起来的本地盘umount掉
                umountOk = true;
                if( allFinished ){
                    destList = selectRestDiskPane.getRstDestList();
                    size = destList.size();
                    size1 = partList.size();
                    for( i=0; i<size; i++ ){
                        dest = (String)destList.elementAt(i);
SanBootView.log.debug(getClass().getName(),  " dest: " + dest );
                        for( j=0; j<size1; j++ ){
                            part = (SystemPartitionForWin)partList.elementAt(j);
SanBootView.log.debug(getClass().getName()," part info: "+part.getDiskLabel() );
                            if( part.getDiskLabel().equals( dest.toUpperCase()+":\\")){
                                // 执行umount命令
                                isOk = view.initor.mdb.assignDriver( host.getIP(),host.getPort(), "NULL","NULL",part.volInfo,"0" );
                                if( isOk ){
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.umount") +dest+" "+
                                            SanBootView.res.getString("common.ok"), 
                                        row
                                    );
                                }else{
                                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.umount") +dest+" "+
                                              SanBootView.res.getString("common.failed") + " "+ view.initor.mdb.getErrorMessage(); 
                                    runPane.setLogOnTabpane( errMsg,row );
                                    writeLogBuf( errMsg );
                                    umountOk = false;
                                }
                        
                                break;
                            }
                        }
                    }
                }
                
                if( getPartInfoOk && savePartInfoOk && saveRstMapOk && umountOk && registerOS ){
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), row, 2
                    );
                    
                    if( allFinished ){
                        allFinished = true;
                    }
                }else{
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                    );
                    allFinished = false;
                }
                
                recordUWSRpt( allFinished, partList );
                
                continue;
            } // the last task finished (i.e.all tasks are finished )
            
            runPane.setCurTabPane( row );
            runPane.setTaskStatus( InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), row, 2 );
            if( supportVss ){ // support windows's VSS snapshot    
                // 复制操作系统时，先复制后检查是否为活动分区
                osDest = "";
                size = task.parm.size();
                for( i=0; i<size; i++ ){
                    binder = (BindOfSrcAndDest)task.parm.elementAt( i );    
                    // 记录 操作系统 所在的盘符
                    if( binder.src.toUpperCase().equals("C:") ){
                        osDest = binder.dest;
                        if( host.isEmBoot() ){
                            binder.os_delegate_letter = this.selectRestDiskPane.getRealOsRestSourceDiskLetter()+":";
                        }
                    }
                }
                
                if( osDest.equals("") ){
                    profile = collectRestInfo( task.parm,task.preSnapCmd,task.postSnapCmd,"" );
                }else{
                    // 含有os的复制,要修改注册表
                    profile = collectRestInfo( task.parm,task.preSnapCmd,task.postSnapCmd, "localdisk" );
                }
                if( profile == null ){
                    runPane.setLogOnTabpane( errMsg, row );
                    writeLogBuf( errMsg );
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                    );
                    allFinished = false;
                }else{
                    tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_RESTORE );
                    if( tmpFile == null ){
                        errMsg =  SanBootView.res.getString( "common.errmsg.crtTmpFileLocallyFailed" );
                        writeLogBuf( errMsg );
                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                        );
                        allFinished = false;
                    }else{
                        name = ResourceCenter.TMP_DIR  + tmpFile.getName();
                        profile.setProfileName( name );
                        profile.setIdentityProfileName();
                        profile.setHeaderProfileName();
SanBootView.log.info(getClass().getName(), " restore profile:\n" + profile.prtMe() );
                        
                        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(), profile.prtMe() ) ){
                            errMsg =  SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                                        view.initor.mdb.getErrorMessage();
                            writeLogBuf( errMsg );
                            runPane.setTaskStatus(
                                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                            );
                            allFinished = false;
                            tmpFile.delete();
                        }else{
                            tmpFile.delete();

                            isOkForHandleUUID = true;
                            if( !osDest.equals("") ){
                                isOkForHandleUUID = handleUUID( row );
                            }

                            if( isOkForHandleUUID ){
                                try{
                                    rst = new RunBackup(
                                        ResourceCenter.getCmd( ResourceCenter.CMD_DATA_ANTI_DUP )+
                                        profile.getProfileName() +
                                        " -clnt=" +
                                        bkClnt.getID(),
                                        view.getSocket()
                                    );
SanBootView.log.info( getClass().getName(), " data-restore cmd: " + rst.getCmdLine() );
                                    rst.run();
                                }catch( Exception ex ){
                                    rst.setExceptionErrMsg( ex);
                                    rst.setExceptionRetCode( ex );
                                }
SanBootView.log.info( getClass().getName(), " data-restore cmd retcode: " + rst.getRetCode() );

                                if( !rst.isOk() ){
SanBootView.log.error( getClass().getName(), " data-restore cmd errmsg: " + rst.getErrMsg() );
                                    allFinished = false;
                                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.dupRstCmdFail");
                                    runPane.setLogOnTabpane( errMsg,row );
                                    writeLogBuf( errMsg  );
                                    runPane.setTaskStatus(
                                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                                    );
                                }else{
                                    // 开始监控
                                    profList.clear();
                                    profList.add( profile );
                                    getProcessThread = new GetDataDupProcess(
                                        view,
                                        runPane,
                                        profList,
                                        task.toString(),
                                        row
                                    );
                                    getProcessThread.start();

                                    isFinished = false;
                                    while( !isFinished ){
                                        isFinished = getProcessThread.isToEnd();
                                        try{
                                            Thread.sleep( 4*1000 );
                                        }catch(Exception ex){
                                        }
                                    }

                                    if ( allFinished ){ // 截至到上一次，任务全部成功
                                        allFinished = getProcessThread.getLastResult();
                                    }

                                    if( getProcessThread.getLastResult() ){
                                        runPane.setTaskStatus(
                                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), row, 2
                                        );
                                    }else{
                                        runPane.setTaskStatus(
                                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                                        );
                                    }
                                }
                            }else{
                                if ( allFinished ){ // 截至到上一次，任务全部成功
                                    allFinished = false;
                                }
                                runPane.setTaskStatus(
                                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                                );
                            }
                        }   
                    }
                }
            }else if( supportSysCopy ){
                // 使用syscopy复制操作系统时，先检查是否为活动分区,后复制（这是syscopy程序的特点）
                // 操作系统的拷贝和普通数据的拷贝必须分开进行;
                // OS用syscopy; 而普通数据盘用普通复制;
                
                profList.clear();
                
                tmp =""; // tmp不为空表示还要恢复普通盘
                osDest = "";
                size = task.parm.size();
                for( i=0; i<size; i++ ){
                    binder = (BindOfSrcAndDest)task.parm.elementAt( i );    
                    // 记录 操作系统 所在的盘符
                    if( binder.src.toUpperCase().equals("C:") ){
                        osDest = binder.dest;
                        if( host.isEmBoot() ){
                            binder.os_delegate_letter = this.selectRestDiskPane.getRealOsRestSourceDiskLetter()+":";
                        }
                    }else{
                        // 真正的命令参数
                        tmp += " -c " + binder.getRealSrc() + " " + binder.dest;
                    }
                }
                
                copyOS = false;
                if( !osDest.equals("") ){ // 需要拷贝操作系统ϵͳ
                    mac ="";
                    getMacOk = false;
                    
                    if( host.getDst_agent_mac().equals("") ){ // 表明源盘恢复是在初始化的原机器上进行的,所以要从保存在服务器上的配制文件中获取mac
                        int boot_mode = getBootMode();
                        if( boot_mode != -1 ){
                            if( boot_mode != BootHost.BOOT_MODE_ISCSI_HBA ){
                                isOk = view.initor.mdb.getNetInfoFromMDB( ResourceCenter.CLT_IP_CONF+"/"+host.getID()+".conf" );
                                if( isOk ){
                                    mac = view.initor.mdb.getBootMac();
                                    if( mac.equals("") ){
SanBootView.log.error( getClass().getName(),"Can't find boot MAC from "+ ResourceCenter.CLT_IP_CONF+"/"+host.getID()+".conf");                                
                                        errMsg = SanBootView.res.getString("FailoverWizardDialog.log.getBootNetFailed") + " : " + view.initor.mdb.getNetInfoErr(); 
                                        runPane.setLogOnTabpane( errMsg,row ) ;
                                        writeLogBuf( errMsg );
                                    }else{
                                        getMacOk = true;
                                    }
                                }else{
                                    errMsg =  SanBootView.res.getString("FailoverWizardDialog.log.getBootNetFailed") + " : " + view.initor.mdb.getNetInfoErr();
                                    runPane.setLogOnTabpane( errMsg,row );
                                    writeLogBuf( errMsg );
                                }
                            }else{
                                mac = "NOT_NEED"; // 方法:collectRestInfo需要这个参数，并且不能为空, 但是不需要为真实网卡地址
                                getMacOk = true;
                            }
                        }else{
                            errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.getbootmode");
                            runPane.setLogOnTabpane( errMsg,row );
                            writeLogBuf( errMsg );
                        }
                    }else{
                        mac = DhcpClientInfo.getMacStrForWin( host.getDst_agent_mac() );
                        getMacOk = true;
                    }
                    
                    if( getMacOk ){    
                        profile = collectRestInfo( task.parm,task.preSnapCmd,task.postSnapCmd,mac );
                        if( profile == null ){
                            runPane.setLogOnTabpane( errMsg, row );
                            writeLogBuf( errMsg );
                            allFinished = false;
                        }else{
                            tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_RESTORE );
                            if( tmpFile == null ){
                                errMsg =  SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
                                writeLogBuf( errMsg );
                                allFinished = false;
                            }else{
                                name = ResourceCenter.TMP_DIR  + tmpFile.getName();    
                                profile.setProfileName( name );
                                profile.setIdentityProfileName();
                                profile.setHeaderProfileName();
SanBootView.log.info(getClass().getName(), " restore profile:\n" + profile.prtMe() );
                                
                                if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),profile.prtMe() ) ){
                                    errMsg =  SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                                                view.initor.mdb.getErrorMessage();
                                    writeLogBuf( errMsg );
                                    allFinished = false;
                                    tmpFile.delete();
                                }else{
                                    tmpFile.delete();
                                    
                                    isOkForHandleUUID = handleUUID( row );
                                    if( isOkForHandleUUID ){
                                        try{
                                            rst = new RunBackup(
                                                ResourceCenter.getCmd( ResourceCenter.CMD_DATA_ANTI_DUP )+
                                                profile.getProfileName() +
                                                " -clnt=" +
                                                bkClnt.getID(),
                                                view.getSocket()
                                            );
SanBootView.log.info( getClass().getName(), " data-restore cmd: " + rst.getCmdLine() );
                                            rst.run();
                                        }catch( Exception ex ){
                                            rst.setExceptionErrMsg( ex);
                                            rst.setExceptionRetCode( ex );
                                        }
SanBootView.log.info( getClass().getName(), " data-restore cmd retcode: " + rst.getRetCode() );

                                        if( !rst.isOk() ){
SanBootView.log.error( getClass().getName(), " data-restore cmd errmsg: " + rst.getErrMsg() );
                                            hasCommitFail = true;
                                            allFinished = false;
                                            errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.dupRstCmdFail");
                                            runPane.setLogOnTabpane( errMsg,row );
                                            writeLogBuf( errMsg  );
                                        }else{
                                            copyOS = true;
                                            profList.add( profile );
                                        }
                                    }else{
                                        // uuid没有处理好
                                        allFinished = false;
                                    }
                                }
                            }
                        }
                    }else{ // 没有得到mac地址
                        allFinished = false;
                    }
                } // copy os data
                
                // 需要拷贝数据盘 (先用syscopy来拷贝OS,然后用普通复制恢复数据盘)
                copyData = false;
                if( !tmp.equals("") ){
System.out.println(" tmp: "+ tmp );          
                    profile = collectRestInfo( task.parm,task.preSnapCmd,task.postSnapCmd,"" );
                    if( profile == null ){
                        runPane.setLogOnTabpane( errMsg, row );
                        writeLogBuf( errMsg );
                        allFinished = false;
                    }else{
                        tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_RESTORE );
                        if( tmpFile == null ){
                            errMsg =  SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
                            writeLogBuf( errMsg );
                            allFinished = false;
                        }else{
                            name = ResourceCenter.TMP_DIR  + tmpFile.getName();    
                            profile.setProfileName( name );
                            profile.setIdentityProfileName();
                            profile.setHeaderProfileName();
SanBootView.log.info(getClass().getName(), " restore profile:\n" + profile.prtMe() );
                            
                            if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),profile.prtMe() ) ){
                                errMsg =  SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                                            view.initor.mdb.getErrorMessage();
                                writeLogBuf( errMsg );
                                allFinished = false;
                                tmpFile.delete();
                            }else{
                                tmpFile.delete();
                                
                                try{
                                    rst = new RunBackup(
                                        ResourceCenter.getCmd( ResourceCenter.CMD_DATA_ANTI_DUP )+  
                                        profile.getProfileName() + 
                                        " -clnt=" + 
                                        bkClnt.getID(), 
                                        view.getSocket()
                                    );
SanBootView.log.info( getClass().getName(), " data-restore cmd: " + rst.getCmdLine() );
                                    rst.run(); 
                                }catch( Exception ex ){
                                    rst.setExceptionErrMsg( ex);
                                    rst.setExceptionRetCode( ex );
                                }
SanBootView.log.info( getClass().getName(), " data-restore cmd retcode: " + rst.getRetCode() );
                                
                                if( !rst.isOk() ){
SanBootView.log.error( getClass().getName(), " data-restore cmd errmsg: " + rst.getErrMsg() );
                                    hasCommitFail = true;
                                    allFinished = false;
                                    errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.dupRstCmdFail");
                                    runPane.setLogOnTabpane( errMsg,row );
                                    writeLogBuf( errMsg  );
                                }else{
                                    copyData = true;
                                    profList.add( profile );
                                }
                            }
                        }
                    }
                } // copy normal data
                
                if( profList.size() == 0 ){ // 某种原因，两个任务均不能提交运行
                    allFinished = false;
                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                    );
                }else{
                    String taskStr="";
                    if( !osDest.equals("") && !tmp.equals("") ){
                        if( copyOS && copyData ){
                            taskStr = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.misc")+"\n";
                        }else{
                            if( copyOS ){
                                taskStr = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.misc2")+"\n";
                            }else{
                                taskStr = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.misc1")+"\n";
                            }
                        }
                    }else{
                        taskStr = task.toString();
                    }
                    
                    // 开始监控
                    if( !osDest.equals("") && !tmp.equals("") ){
                        getProcessThread = new GetDataDupProcess( 
                            view,  
                            runPane, 
                            profList,
                            hasCommitFail,     
                            taskStr,
                            row
                        );
                    }else{
                        getProcessThread = new GetDataDupProcess( 
                            view,  
                            runPane, 
                            profList,
                            taskStr,
                            hasCommitFail,
                            row
                        );
                    }
                    getProcessThread.start();
                    
                    isFinished = false;
                    while( !isFinished ){
                        isFinished = getProcessThread.isToEnd();
                        try{
                            Thread.sleep( 4*1000 );
                        }catch(Exception ex){    
                        }
                    }  
                    
                    if ( allFinished ){ // 截至到上一次，任务全部成功
                        allFinished = getProcessThread.getLastResult();   
                    }
                    
                    if( getProcessThread.getLastResult() ){
                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), row, 2
                        );
                    }else{
                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                        );
                    }
                }
            }else{
                errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.noWayToCopy");
                runPane.setLogOnTabpane( errMsg,row );
                writeLogBuf( errMsg );
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), row, 2
                );
                allFinished = false;
            }
        }
    }
    
    private int getBootMode(){
        int boot_mode = -1;
        if( host.isRealBootHost() ){
            BootHost bhost = view.initor.mdb.getBootHostFromVector( host.getSrc_Agnt_id() );
            if( bhost == null ){
SanBootView.log.error( getClass().getName(),"Can't find boothost which id is "+ host.getSrc_Agnt_id() ); 
            }else{
                boot_mode = bhost.getBootMode();
            }
        }else{
            SourceAgent sa = view.initor.mdb.getSrcAgntFromVectorOnID( host.getSrc_Agnt_id() );
            if( sa == null ){
SanBootView.log.error( getClass().getName(),"Can't find srcagnt which id is "+ host.getSrc_Agnt_id() );                 
            }else{
                boot_mode = sa.getSrc_agnt_boot_mode();
            }
        }
        
        return boot_mode;
    }
    
    BackupClient bkClnt = null;
    public UniProfile collectRestInfo( Vector mpList,String snapBefCmd,String snapPostCmd,String mac ){
        UniProfile profile  = new UniProfile();
        UniProIdentity identity = profile.getUniProIdentity();
        UniProHeader header  = profile.getUniProHeader();
        UniProDrive  drive1  = profile.getUniProDrive1();
        UniProBackup backup  = profile.getUniProBackup();
        UniProIBoot  iboot   = profile.getUniProIBoot();
        
        if( host.isOriginalBootHost() ){
            BootHost bHost = view.initor.mdb.getBootHostFromVector( host.getID() );
            if( bHost == null ){
                errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.missingBHost");
SanBootView.log.error( getClass().getName(),"Missing client,id: "+host.getID() );        
                return null;
            }
            
            if( bkClnt == null ){
                bkClnt = view.initor.mdb.getBkClntOnUUID( bHost.getUUID() );
                if( bkClnt == null ) {
                    errMsg =  SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.missingD2DClnt");
SanBootView.log.error( getClass().getName(),"Missing d2d client,uuid: "+bHost.getUUID() );            
                    return null;
                }
            }
        }else { 
            bkClnt = view.initor.mdb.getBkClntForRestOriDisk( host.getDst_agent_ip(), host.getDst_agent_port() );
            if( bkClnt == null ){
                bkClnt = new BackupClient(
                    BackupClient.FLAG_FOR_RST_ORI_DISK, host.getDst_agent_ip(), BackupClient.FLAG_FOR_RST_ORI_DISK,host.getDst_agent_port(), host.getDst_agent_ostype(), host.getDst_agent_id()
                );
                
                if( view.initor.mdb.addOneClient( bkClnt ) ){
                    bkClnt.setID( view.initor.mdb.getNewId() );
                    view.initor.mdb.addBakClntIntoCache( bkClnt );
                }else{
                    errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_CLIENT ) +": "+ view.initor.mdb.getErrorMessage();
SanBootView.log.error( getClass().getName(),"add d2d client for restoring original disk failed." );    
                    return null;
                }
            }
SanBootView.log.info( getClass().getName()," ready to restore original disk using this ip: "+ host.getDst_agent_ip() );            
        }
        
        int size = mpList.size();
        String src = "";
        String target="";
        String osDest="";
        boolean aIsFirst = true;
        if( !host.isWin2000() ){
            for( int i=0; i<size; i++ ){
                BindOfSrcAndDest binder = (BindOfSrcAndDest)mpList.elementAt( i );
                // 记录 操作系统 所在的盘符
                if( binder.src.toUpperCase().equals("C:") ){
                    osDest = binder.dest;
                }
                src += binder.getRealSrc() + ";";
                if( aIsFirst ){
                    target = binder.getRealSrc()+"-?"+binder.dest;
                    aIsFirst = false;
                }else{
                    target += "-?"+binder.getRealSrc()+"-?"+binder.dest;
                }
            }
        }else{
            for( int i=0; i<size; i++ ){
                BindOfSrcAndDest binder = (BindOfSrcAndDest)mpList.elementAt( i );
                
                // 记录 操作系统 所在的盘符
                if( binder.src.toUpperCase().equals("C:") ){
                    if( !mac.equals("") ){
                        osDest = binder.dest;
                        src = binder.getRealSrc();
                        target = binder.getRealSrc() + "-?" + binder.dest;
                        break;
                    }
                }else{
                    // 真正的命令参数
                    src +=binder.getRealSrc() + ";";
                    
                    if( aIsFirst ){
                        target = binder.getRealSrc() + "-?" + binder.dest;
                        aIsFirst = false;
                    }else{
                        target += "-?"+binder.getRealSrc()+"-?"+binder.dest;
                    }
                }  
            }
        }
        
        // 生成 identity 部分
        identity.setClntID( bkClnt.getID()+"" );
        identity.setAction("restore-file");
        identity.setTarget( target );
        
        // 生成 header 部分
        header.setAct("restore-file"); 
        header.setSnapPreCmd( snapBefCmd );
        header.setSnapPostCmd( snapPostCmd ); 
        
        getMpListForWin( mpList );
        String src_dest_map = getDestDevPathForWin( true );
        if( src_dest_map == null ){
            return null;
        }else{
            header.setSource_dest_reference( src_dest_map );
        }

        // 生成 drive-1部分
        String path = getDestDevPathForWin( false );
        if( path == null ){
            return null;
        }else{
            drive1.setPath( path );
        }
        
        // 生成 Backup部分
        backup.setSrc( src );
        backup.setSrcType( "4" );
        backup.setTarget( target );
        backup.setKillPreCmd( "1" );
        backup.setBlkIncRstMode( "0" );
        backup.setPhyIncJudgeTimeFlag( "0" );
        
        /*  //for wenjian's test on 2009-2-5
        if( !host.isWin2000() ){
            backup.setBakWithSnapFlag( "1" );
        }else{
            backup.setBakWithSnapFlag( "0" );
        }
        */ //for wenjian's test on 2009-2-5
        backup.setBakWithSnapFlag( "0" );
        
        // 生成iboot部分
        iboot.cleanIboot_af_cmd();
        iboot.cleanIboot_bf_cmd();
        if( !mac.equals("") && !osDest.equals("") ){
            String windir = ":\\"+fWindir;    
            Object[] val = RestoreOriginalDiskWizardDialog.generateIboot_cmd( osDest,windir,mac,host.isWin2000() );
            ArrayList bef = (ArrayList)val[0];
            ArrayList aft = (ArrayList)val[1];
            size = bef.size();
            for( int i=0;i<size;i++ ){
                iboot.addIboot_bf_cmd( (String)bef.get(i) );
            }
            size = aft.size();
            for( int j=0;j<size;j++ ){
                iboot.addIboot_af_cmd( (String)aft.get(j) );
            }
        }
        
        iboot.setUws_username( view.initor.user );
        iboot.setUws_passwd( view.initor.passwd );
        iboot.setUws_ip( view.initor.getTxIP(bkClnt.getIP()) );
        iboot.setUws_port( view.initor.port+"" );
        
        return profile;
    }
    
    public static Object[] generateIboot_cmd( String osDest,String windir,String mac,boolean isWin2k ){
        StringBuffer iboot_cmd_buf;
        
        ArrayList<String> bef = new ArrayList<String>();
        ArrayList<String> aft = new ArrayList<String>();
        
        if( isWin2k ){
           
            // for wenjian's test on 2009-2-4
            
            /*
            // delete wenjian's windows mount point
            bef.add( "<UWS_PLUGIN_PATH>/ib_del_ody_junction.exe" );
            
            iboot_cmd_buf = new StringBuffer();
            iboot_cmd_buf.append("<UWS_PLUGIN_PATH>/excutecmd.exe ");
            iboot_cmd_buf.append( "\"<UWS_PLUGIN_PATH>/startsyscopy.exe\" 72000 " );
            iboot_cmd_buf.append( mac );
            iboot_cmd_buf.append( " " );
            iboot_cmd_buf.append( osDest.substring( 0,2 ) );
            iboot_cmd_buf.append( " -r");
            bef.add( iboot_cmd_buf.toString() );
             */
        }else{
            bef.add("");
        }
        
        // 将ody_iboot.bat和ib_ip_auto_set.conf删除,不检查结果
        iboot_cmd_buf = new StringBuffer();
        iboot_cmd_buf.append( "<UWS_PLUGIN_PATH>/modify_2_local.exe -m " + osDest.substring( 0,2 ) );
        aft.add( iboot_cmd_buf.toString() );
        
        
        // 修改注册表移到了最后一步,不再profile中完成。
        
        /*
        // 修改注册表
        // 先改成网络的
        iboot_cmd_buf = new StringBuffer();
        iboot_cmd_buf.append( "<UWS_PLUGIN_PATH>/excutecmd.exe " );
        iboot_cmd_buf.append( "\"<UWS_PLUGIN_PATH>/startbootreg.exe\" 480 " );
        iboot_cmd_buf.append( osDest.substring( 0,1 ) );
        iboot_cmd_buf.append( windir );
        iboot_cmd_buf.append( " iSCSI " );
        iboot_cmd_buf.append( mac );
        aft.add( iboot_cmd_buf.toString() );
        
        // 再改成本地的，这样增加"修改注册表的成功机率"
        iboot_cmd_buf = new StringBuffer();
        iboot_cmd_buf.append( "<UWS_PLUGIN_PATH>/excutecmd.exe " );
        iboot_cmd_buf.append( "\"<UWS_PLUGIN_PATH>/startbootreg.exe\" 480 " );        
        iboot_cmd_buf.append( osDest.substring( 0,1 ) );
        iboot_cmd_buf.append( windir );
        iboot_cmd_buf.append( " Local localdisk" );
        aft.add( iboot_cmd_buf.toString() );
        */
        
        Object[] ret = new Object[2];
        ret[0] = bef;
        ret[1] = aft;
        return ret;
    }
    
    Hashtable winSrcList = new Hashtable();
    private void getMpListForWin( Vector mpList ){ 
        BindOfFSAndDevNo binder;
        BindOfSrcAndDest binder1;
        
        winSrcList.clear();
        int size = mpList.size();
        for( int i=0; i<size; i++ ){
            binder1 = (BindOfSrcAndDest)mpList.elementAt( i );
            binder = new BindOfFSAndDevNo();
            binder.mp = binder1.src;
            binder.real_mp = binder1.getRealSrc();
            winSrcList.put( binder1.src, binder );
        }
    }
    
    private String getDestDevPathForWin( boolean withLabel ){ 
        VolumeMap lv = null;
        MirrorDiskInfo md = null;
        BindOfFSAndDevNo binder;
        String drivepath="",src,realSrc;
        boolean aIsFirst = true;
        int tid;
        
        errMsg = "";
        
        // 获取srcClnt上的卷信息
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
        ArrayList diskInfoList = view.initor.mdb.getMDIFromCacheOnSrcAgntID( host.getID() );
        
SanBootView.log.debug( getClass().getName()," mp size:" + winSrcList.size() );
        
        if( winSrcList.size() <=0 ){
            errMsg = SanBootView.res.getString("EditProfileDialog.error.getMp");
            drivepath = null;
            return drivepath;
        }
        
        Enumeration list  = winSrcList.elements();
        while( list.hasMoreElements() ){
            binder = (BindOfFSAndDevNo)list.nextElement();
            src = binder.mp + "\\";
            // mtpp agent需要如下的格式，虽然这个格式中的target是错误的。
            realSrc = binder.real_mp +"\\";
SanBootView.log.debug(getClass().getName(), " =====>: " + src);

            if( host.isRealBootHost() ){
                lv = getRealLVOnClntIDAndMP( volMapList,src );
                if( lv == null ){
                    // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + src );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ src;
                    drivepath = null;
                    break;
                }else{
                    tid = lv.getVolTargetID();
                }
            }else{
                md = getRealLVOnClntIDAndMP( diskInfoList, src );
                if( md == null ){
                    // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
SanBootView.log.error( getClass().getName(), "\nMirrorDisk is null in MDB: " + src );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ src;
                    drivepath = null;
                    break;
                }else{
                    //tid = md.
                    tid = 32908; // 随便赋个值就行
                }
            }

            if( aIsFirst ){
                if( !withLabel ){
                    drivepath = ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                            ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":" + tid;
                }else{
                    drivepath = realSrc+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                        ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+ tid ;
                }
                aIsFirst = false;
            }else{
                if( !withLabel ){
                    drivepath+="-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                        ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":" + tid;
                }else{
                    drivepath+="-?"+realSrc+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                        ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+ tid ;
                }
            }            
        }
        
        return drivepath;
    }
    
    public VolumeMap getRealLVOnClntIDAndMP( Vector list,String mp ){
        VolumeMap lv;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            lv = (VolumeMap)list.elementAt(i);
            if( lv.getVolDiskLabel().toUpperCase().equals( mp ) ){
                return lv;
            }
        }
        
        return null;
    }
    
    public MirrorDiskInfo getRealLVOnClntIDAndMP( ArrayList list,String mp ){
        MirrorDiskInfo md;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            md = (MirrorDiskInfo)list.get( i );
            if( md.getSrc_agent_mp().toUpperCase().equals( mp ) ){
                return md;
            }
        }
        
        return null;
    }
    
    public String autoMountVol( HashMap rstMapperList ){
        /*
        DestDevice dest;
        String mp;
        boolean isOk,isFirst=true;
               
        StringBuffer errMsg = new StringBuffer();
        String ip = host.getIP();
        int port = host.getPort();
        
        Set set = rstMapperList.keySet(); 
        Iterator iterator = set.iterator();
        while( iterator.hasNext() ){
            RestoreMapper maper = (RestoreMapper)rstMapperList.get( iterator.next() );
            dest = maper.getDest();
            mp = dest.getMp();
            
            isOk = view.initor.mdb.mntDriver( ip, port,dest.getVolName(), mp );
            if( !isOk ){
                if( isFirst ){
                    errMsg.append( SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.mntDisk")+" : \n" + mp );
                    isFirst = false;
                }else{
                    errMsg.append(" , " + mp );
                }
            }
        }
        
        return errMsg.toString();
         */
        
        String ip = host.getIP();
        int port  = host.getPort();
        view.initor.mdb.adjustDriver( ip,port, "" ); // 不管结果
        return "";
    }
    
    public RetValObj sizeIsMatched( String src,String dest ){
        int i,size;
        long free,occupied;
        RetValObj ret = new RetValObj();
        SystemPartitionForWin part,srcPart=null,destPart=null;
        
SanBootView.log.info(getClass().getName(), "compare size: src==> "+ src+ " dest==> "+dest );
        size = partList.size();
        for( i=0; i<size; i++ ){
            part = (SystemPartitionForWin)partList.elementAt(i);
SanBootView.log.info(getClass().getName(), " partition: "+part.getDiskLabel() );
            if( part.getDiskLabel().equals( src.toUpperCase() ) ){
                srcPart = part;
            }else if( part.getDiskLabel().equals( dest.toUpperCase() ) ){
                destPart = part;
            }
        }
        
        if( srcPart!=null && destPart!=null ){
            occupied = srcPart.getOccupiedInMega();
SanBootView.log.info(getClass().getName(), "src disk occupied: "+ occupied );     
            if( occupied <0 ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.badOccupied");
                ret.isOk = false;
                return ret;
            }
            
            free = destPart.getAvailableInMega();
SanBootView.log.info(getClass().getName(), "dest disk free: "+ free );    
            if( free <=0 ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.badFree");
                ret.isOk = false;
                return ret;
            }
            
            if( free < occupied ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.tooSmall") + " [ " + free + " < " + occupied + " ]";
                ret.isOk = false;
                return ret;
            }
            
            return ret;
        }else{
            if( srcPart == null ){
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.notFoundSrc");
            }else{
                ret.errMsg = SanBootView.res.getString("RestoreOriginalDiskWizardDialog.log.notFoundDest");
            }
            ret.isOk = false;
            
            return ret;
        }
    }
    
    private boolean saveInfo( String confile,String contents,int row ){        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_DISKINFO );
        if( tmpFile == null ){
            errMsg = SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed");
            runPane.setLogOnTabpane( errMsg,row);
            writeLogBuf( errMsg );
            return false; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            errMsg = SanBootView.res.getString("common.errmsg.sendFileFailed");
            runPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg );
            tmpFile.delete();
            return false;
        }    
           
        tmpFile.delete();
            
        // 将tmpFile move to profile dir
        boolean isOk = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile.getName(), confile      
        );
        
        return isOk;   
    }

    private SystemPartitionForWin getSysPart( Vector sysPartList,String letter ){
        int size = sysPartList.size();
        for( int i=0; i<size; i++ ){
            SystemPartitionForWin part = (SystemPartitionForWin)sysPartList.elementAt( i );
            if( part.isSamePartition( letter ) ) {
                return part;
            }
        }
        return null;
    }

    private String statisticRestoreDataSize( Vector sysPartList ){
        String srcdrive;
        int num,row,i,size;
        boolean aIsFirst = true;

        StringBuffer statis_buf = new StringBuffer();

        num = runPane.getTableRow();
        for( row=0; row<num; row++ ){
            InitTask task = runPane.getTask( row );  // 肯定有这个任务�
            if( row == num-1 ){ // 保存其他信息( the last task )
                continue;
            }else{
                size = task.parm.size();
                for( i=0; i<size; i++ ){
                    BindOfSrcAndDest binder = (BindOfSrcAndDest)task.parm.elementAt( i );
                    srcdrive  = binder.src.substring( 0,1 );

                    SystemPartitionForWin part = this.getSysPart( sysPartList,srcdrive );
                    if( part != null ){
                        if( aIsFirst ){
                            statis_buf.append( srcdrive+"-?"+part.getOccupiedInMega() );
                            aIsFirst = false;
                        }else{
                            statis_buf.append( "-?" + srcdrive+"-?"+part.getOccupiedInMega() );
                        }
                    }
                }
            }
        }
        return statis_buf.toString();
    }
    
    private void recordUWSRpt( boolean initOk,Vector sysPartList ){
        String msg;
        
        UWSReport rpt = new UWSReport();

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime( date );
        
        int year  = today.get( Calendar.YEAR );
        String stime = year + "";
        int month = today.get( Calendar.MONTH ) + 1;
        if( month<10 ){
            stime+= "0" + month;
        }else{
            stime+=month;
        }
        int day   = today.get( Calendar.DAY_OF_MONTH );
        if( day <10 ){
            stime+= "0" + day;
        }else{
            stime+=day;
        }
        int hour  = today.get(Calendar.HOUR_OF_DAY);
        if( hour <10 ){
            stime+= "0" + hour;
        }else{
            stime+=hour;
        }
        int min   = today.get(Calendar.MINUTE);
        if( min <10 ){
            stime +="0"+min;
        }else{
            stime+=min;
        }
        int sec   = today.get(Calendar.SECOND);
        if( sec <10 ){
            stime+="0"+sec;
        }else{
            stime+=sec;
        }
        
        rpt.setSTime( stime ); 
        rpt.setClntName( host.getIP() );

        rpt.setTaskClntId( ( host.getDst_agent_id() > 0 ) ? host.getDst_agent_id() : host.getSrc_Agnt_id()  );
        rpt.setTask_clnt_type( ( host.getDst_agent_id() > 0 ) ? DestAgent.TYPE_DST_AGNT : DestAgent.TYPE_ORI_HOST );
        rpt.setTask_parent_clnt_id( getTaskParentClntID( host ) );
        rpt.setTask_parent_clnt_type( getTaskParentClntType( host ) );
        rpt.setTask_clnt_mac( host.getDst_agent_mac() );

        if( this.isSwitchDisk ){
            rpt.setTType( UWSReport.TASK_TYPE_SWITCH_RECOVER_LOCALDISK );
        }else{
            rpt.setTType( UWSReport.TASK_TYPE_RECOVER_LOCALDISK );
        }
        rpt.setTResult( initOk? UWSReport.TASK_RESULT_END:UWSReport.TASK_RESULT_FAIL );
        
        msg = logBuf.toString();
        if( msg.getBytes().length > 1014 ){
            byte[] arr = msg.getBytes();
            String newmsg = new String( arr,0,1014 );
            //rpt.setTaskMsg( initOk? SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") : newmsg );
            rpt.setTaskMsg( initOk?this.statisticRestoreDataSize( sysPartList ):newmsg );
        }else{
            //rpt.setTaskMsg( initOk? SanBootView.res.getString("RestoreOriginalDiskWizardDialog.error.restoreOK") : msg );
            rpt.setTaskMsg( initOk?this.statisticRestoreDataSize( sysPartList ):msg );
        }
        
        String fname = generateUWSRptTmpFile( rpt.prtMe() );
        if( fname != null ){
            if( !view.initor.mdb.addReport( fname ) ){
                // save in local host 
                saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_RESTL_RPT +stime );
            }
        }else{
            // save in local host
            saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_RESTL_RPT + stime );
        }
    }
    
    private String generateUWSRptTmpFile( String contents ){
        String fname;
        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_USWTMP );
        if( tmpFile == null ){
            return null; 
        }
        
        // 发送profile的内容�
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            tmpFile.delete();
            return null;
        }    
        
        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }
    
    private void saveUWSRpt( String contents,String fname ){
        try{
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File( path );
            
            f1.createNewFile();
            
            PrintWriter out = new PrintWriter( new FileWriter(f1),true );
            out.print( contents );
            out.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    int tabRow=0;
}

class MountOldDrive extends Thread {
    JDialog diag;
    RestoreOriginalDiskWizardDialog pdiag;
    HashMap rstMapperList;
    
    Runnable close = new Runnable(){
        public void run(){
            diag.dispose();
        }
    };
    
    public MountOldDrive( JDialog diag,RestoreOriginalDiskWizardDialog pdiag,HashMap rstMapperList ){
        this.diag = diag;
        this.pdiag = pdiag;
        this.rstMapperList = rstMapperList;
    }
    
    @Override public void run(){
        if( rstMapperList.size()>0 ){
            pdiag.autoMountVol( rstMapperList );  // 不报告错误,由后面的校验来确保mount的分区没有问题
        }
        
        try{
            SwingUtilities.invokeAndWait( close );
        } catch( Exception e){
            e.printStackTrace();
        }
    }
}

class PrepareWork extends Thread {
    JDialog diag;
    RestoreOriginalDiskWizardDialog pdiag;
    SanBootView view;
    DestAgent host;
    Vector partList=null;
    Vector volList = new Vector();
    HashMap rstMapperList;
    
    Runnable close = new Runnable(){
        public void run(){
            diag.dispose();
        }
    };
    
    public PrepareWork( JDialog diag,RestoreOriginalDiskWizardDialog pdiag,SanBootView view,DestAgent host ){
        this.diag = diag;
        this.pdiag = pdiag;
        this.view = view;
        this.host = host;
    }
    
    @Override public void run(){
        int i,size;
        
        while( true ){
            boolean isOk = view.initor.mdb.getSystemPart( host.getIP(), host.getPort(), "ib_get_partition_info.exe" );
            if( isOk ){   
                partList = view.initor.mdb.getSysPart();
            }else{
                break;
            }
            
            isOk = view.initor.mdb.getRstMapper(  host.getRstMapFileName() );
            if( isOk ){
                rstMapperList = view.initor.mdb.getRstMapperList();
            }else{
SanBootView.log.warning( getClass().getName(),"Can't get restore mapper from "+ host.getRstMapFileName() );                
                rstMapperList = new HashMap();
            }
            
            // 找出当前系统中有哪些盘是 iscsi target volume。只有这些盘才能恢复到本地盘
            if( host.isRealBootHost() ){
                Vector volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
                size = volMapList.size();
                for( i=0; i<size; i++ ){
                    VolumeMap volMap = (VolumeMap)volMapList.elementAt(i);
SanBootView.log.debug( getClass().getName(),"host volume(RestoreOriginalDiskWizardDialog::PrepareWork): "+ volMap.getVolDiskLabel().substring( 0,1 ) );                    
                    isOk = view.initor.mdb.isStartupfromSAN( host.getIP(), host.getPort(), volMap.getVolDiskLabel().substring( 0,1 ) );
                    if( isOk ){
                        if( view.initor.mdb.isStartupFromSAN() ){
                            volList.addElement( volMap );
                        }else{
SanBootView.log.debug( getClass().getName(),"(RestoreOriginalDiskWizardDialog::PrepareWork): "+ volMap.getVolDiskLabel().substring( 0,1 ) +" isn't iscsi disk" );                                                
                        }
                    }
                }
            }else{
                // 1个盘可能存在多个snap usage，所以用hashmap进行过滤.(2010.4.6)
                HashMap<String,VolumeMap> map = new HashMap<String,VolumeMap>();
                ArrayList list = view.initor.mdb.getMSUFromCacheOnDstAgntID( host.getDst_agent_id() );
                size = list.size();
                for( i=0; i<size; i++ ){
                    SnapUsage su = (SnapUsage)list.get(i);
                    isOk = view.initor.mdb.isStartupfromSAN( host.getIP(), host.getPort(), su.getExport_mp().substring( 0,1 ) );
                    if( isOk ){
                        if( view.initor.mdb.isStartupFromSAN() ){
                            VolumeMap volMap = new VolumeMap( su.getExport_mp() );
                            map.put( su.getExport_mp(), volMap );
                        }
                    }
                }
                
                Iterator<String> iterator = map.keySet().iterator();
                while( iterator.hasNext() ){
                    VolumeMap volMap = map.get( iterator.next() );
                    volList.addElement( volMap ) ;
                }
            }
            
            break;
        }
        
        try{
            SwingUtilities.invokeAndWait( close );
        } catch( Exception e){
            e.printStackTrace();
        }
    }
    
    public Vector getVolList(){
        return volList;
    }
    
    public HashMap getRstMap(){
        return rstMapperList;
    }
    
    public Vector getPartList(){
        return partList;
    }
}