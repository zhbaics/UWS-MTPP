/*
 * EditSubnetDialog.java
 *
 * Created on 2007/12/14, ���AM�11:36
 */

package guisanboot.ui;

import guisanboot.data.SubNetInDHCPConf;
import guisanboot.res.ResourceCenter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import mylib.tool.Check;
import mylib.tool.InetCidr;

/**
 *
 * @author  Administrator
 */
public class EditSubnetDialog extends javax.swing.JDialog {
    
    /** Creates new form EditSubnetDialog */
    public EditSubnetDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public EditSubnetDialog( SanBootView view,DhcpDialog diag,SubNetInDHCPConf subnet,int selRow ){
        this( view,true );
        myInit( view,diag,subnet,selRow );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Subnet :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel1, gridBagConstraints);

        jTextField1.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jTextField1, gridBagConstraints);

        jLabel2.setText("Net Mask :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextField2.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jTextField2, gridBagConstraints);

        jLabel3.setText("Start Addr :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel3, gridBagConstraints);

        jTextField3.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jTextField3, gridBagConstraints);

        jLabel4.setText("End Addr :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jTextField4.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jTextField4, gridBagConstraints);

        jLabel5.setText("Lease Time[day]:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel5, gridBagConstraints);

        jTextField5.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jTextField5, gridBagConstraints);

        jCheckBox1.setText("Allow to assgin unknown host");
        jCheckBox1.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 0);
        jPanel1.add(jCheckBox1, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.add(jSeparator1, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 1, 5, 1)));
        jButton1.setText("OK");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton2);

        jButton3.setText("IP Calculate");
        jButton3.setPreferredSize(new java.awt.Dimension(100, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton3);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ipCalculate();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        okButton();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        values = null;
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditSubnetDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    ////GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    ////GEN-END:variables
 
    SubNetInDHCPConf subnet;
    SanBootView view;
    DhcpDialog diag;
    int selRow;
    Object[] values;
    
    private void myInit( SanBootView _view,DhcpDialog _diag,SubNetInDHCPConf _subnet,int _selRow){
        view   = _view;
        diag   = _diag;
        subnet = _subnet;
        selRow = _selRow;
        
        if( subnet == null ){
            jTextField5.setText("1");
        }else{
            jTextField1.setText( subnet.subnet );
            jTextField1.setEnabled( false );
            jTextField1.setOpaque( false );
            jTextField2.setText( subnet.netmask );
            jTextField3.setText( subnet.start );
            jTextField4.setText( subnet.end );
            jTextField5.setText( subnet.getLeaseTimeInDay()+"" );
            jCheckBox1.setSelected( subnet.isAllowUnknownHost() );
        }
        
        regKeyboardAction();
        setupLanguage();
    }
    
    void setupLanguage(){
        this.setTitle( SanBootView.res.getString("EditSubnetDialog.title.edit"));
        this.jLabel1.setText( SanBootView.res.getString("EditSubnetDialog.label.subnet"));
        this.jLabel2.setText( SanBootView.res.getString("EditSubnetDialog.label.mask"));
        this.jLabel3.setText( SanBootView.res.getString("EditSubnetDialog.label.start"));
        this.jLabel4.setText( SanBootView.res.getString("EditSubnetDialog.label.end"));
        this.jLabel5.setText( SanBootView.res.getString("EditSubnetDialog.label.lease"));
        this.jCheckBox1.setText( SanBootView.res.getString("EditSubnetDialog.check.allow"));
        jButton1.setText(SanBootView.res.getString("common.button.ok"));
        jButton2.setText( SanBootView.res.getString("common.button.cancel"));
        jButton3.setText( SanBootView.res.getString("EditSubnetDialog.button.ipcalc"));
    }
    
    private void regKeyboardAction(){            
        jTextField1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField2.requestFocusInWindow();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
        
        jTextField2.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField3.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
          
        jTextField3.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField4.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
        
        jTextField4.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField5.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
            
        jTextField5.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jCheckBox1.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
    }
    
    void ipCalculate(){
        String ipStr,maskStr,subnetStr;
        InetAddress mask = null,ip = null,max=null;
        
        ipStr = jTextField1.getText();
        maskStr = jTextField2.getText();
        
        try{
            ip = InetAddress.getByName( ipStr );
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidHostIP") + " : " + ipStr
            );
            return;
        }
        
        try{
            mask = InetAddress.getByName( maskStr );
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidMask") + " : " + maskStr
            );
            return;
        }
        
        if( !InetCidr.isValidMask( mask ) ){
            JOptionPane.showMessageDialog(this, 
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidMask") + " : " + maskStr
            );
            return;
        }

        try{
            max = InetAddress.getByName( "255.255.255.255" );
        }catch(Exception ex){
        }
        
        Object[] ret = Check.ipCal( ip,mask );
        subnetStr = (String)ret[0];
        InetAddress begAr = (InetAddress)ret[1];
        InetAddress endAr = (InetAddress)ret[2];
         
        jTextField1.setText( subnetStr );
        jTextField3.setText( begAr.getHostAddress() );
        jTextField4.setText( endAr.getHostAddress() );
    }
    
    void okButton(){
        InetAddress subnet=null,mask=null,start=null,end=null;
        
        String subnetStr = jTextField1.getText().trim();
        String maskStr = jTextField2.getText().trim();
        String startStr = jTextField3.getText().trim();
        String endStr = jTextField4.getText().trim();
        if( !checkOneSubnet( subnetStr,maskStr, startStr,endStr ) ){
            return;
        }
        
        try{
            subnet = InetAddress.getByName( subnetStr );
            mask = InetAddress.getByName( maskStr );
            start = InetAddress.getByName( startStr );
            end = InetAddress.getByName( endStr );
        }catch(Exception ex){ // impossible to happen;
        }
        
        // 检查是否出现ip分配彼此覆盖的现象
        /**
         * 由于可以多个子网，不要此限制--2013.12.17
        if( !checkSubnetList( subnet, mask,start,end ) ){ // 先检查 start and end ip addr是否有问题
            return;
        }
        **/

        Collections.sort( map1 );
        
        BinderOfSartAndEnd prevBinder=null,curBinder;
        int size = map1.size ();
        for( int i=0; i<size; i++ ){
            if( prevBinder == null ){
                prevBinder = (BinderOfSartAndEnd)map1.get(i);
            }else{
                curBinder = (BinderOfSartAndEnd)map1.get(i);
                if( curBinder.start.getAddrLong() <= prevBinder.end.getAddrLong() ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditSubnetDialog.errMsg.overlap")
                    );
                    return;
                }else{
                    prevBinder = curBinder;
                }
            }
        }
        
        /*
        int size = map.size ();
        Enumeration list  = map.elements (); 
        BinderOfSartAndEnd prevBinder,curBinder;
        boolean overLap;
        while( list.hasMoreElements () ){
            ArrayList aList = (ArrayList)list.nextElement();
            Collections.sort( aList );
            
            prevBinder = null;
            overLap = false;
            int size1 = aList.size();
            for( int i=0; i<size1; i++ ){
                if( prevBinder == null ){
                    prevBinder = (BinderOfSartAndEnd)aList.get(i);
                }else{
                    curBinder = (BinderOfSartAndEnd)aList.get(i);
                    if( curBinder.start.getAddrLong() <= prevBinder.end.getAddrLong() ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("EditSubnetDialog.errMsg.overlap")
                        );
                        overLap = true;
                        break;
                    }else{
                        prevBinder = curBinder;
                    }
                }
            }
            
            if( overLap ){
                break;
            }
        }
        */
        
        String _leasetime = jTextField5.getText().trim();
        if( _leasetime.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.noneLease")
            );
            return;
        }
        
        int leasetime = ResourceCenter.LEASE_TIME_MIN;
        try{
            leasetime = Integer.parseInt( _leasetime );
            if( leasetime < ResourceCenter.LEASE_TIME_MIN || leasetime > ResourceCenter.LEASE_TIME_MAX ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditSubnetDialog.errMsg.invalidLeaseTime")
                );
                return;
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidLeaseTime")
            );
            return;
        }
        
        values = new Object[6];
        values[0] = subnetStr;
        values[1] = maskStr;
        values[2] = startStr;
        values[3] = endStr;
        values[4] = new Integer( leasetime );
        values[5] = new Boolean( jCheckBox1.isSelected() );
        
        this.dispose();
    }
    
    public Object[] getValues(){
        return values;
    }
    
    private boolean checkOneSubnet( String subnetStr,String maskStr,String startStr,String endStr ){
        InetAddress subnet,mask,start,end;
        InetCidr cidr,subnetCidr,startCidr,endCidr;
        
        if( subnetStr.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.noneSubnet")
            );
            return false;
        }
        
        try{
            subnet = InetAddress.getByName( subnetStr );
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidSubnet") +" : "+subnetStr
            );
            return false;
        }
        
        if( maskStr.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.noneMask")
            );
            return false;
        }
        
        if( maskStr.equals("255.255.255.255") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidMask1")
            );
            return false;
        }
        
        try{
            mask = InetAddress.getByName( maskStr );
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidMask") +" : "+maskStr
            );
            return false;
        }
        
        if( !InetCidr.isValidMask( mask ) ){         
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidMask") +" : "+maskStr
            );
            return false;  
        }
        
        subnetCidr = new InetCidr( subnet,mask,false );
        InetAddress ele = subnetCidr.getAddr();   
        if( !ele.equals( subnet ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidSubnet")+" : "+subnetStr
            );
            return false;
        }
        
        if( startStr.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.noneStart")
            );
            return false;
        }
        
        try{
            start = InetAddress.getByName( startStr );              
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidStart") +" : "+startStr
            );
            return false;
        }
        
        cidr = new InetCidr( start ,mask,false );       
        ele = cidr.getAddr();
        if( !ele.equals( subnet ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidStart") +" : "+startStr
            );
            return false;
        }
        startCidr = new InetCidr( start,mask,true );
        if( startCidr.equals( subnetCidr ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidStart") +" : "+startStr
            );
            return false;
        }
        
        if( endStr.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.noneEnd")
            );
            return false;
        }
        
        try{
            end = InetAddress.getByName( endStr );
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidEnd") +" : "+endStr
            );
            return false;
        }
        
        cidr = new InetCidr( end ,mask,false );
        ele = cidr.getAddr();
        if( !ele.equals( subnet ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidEnd") +" : "+endStr
            );
            return false;  
        }
        endCidr = new InetCidr( end,mask,true );
        if( endCidr.equals( subnetCidr ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.invalidEnd")+" : "+endStr
            );
            return false;
        }
        
        int ret = startCidr.compareTo( endCidr );
        if( ret >0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.startGrtEnd")
            );
            return false;
        }
        
        return true;
    }
    
    List map1 = new ArrayList();
    private boolean checkSubnetList( InetAddress newSubnet,InetAddress newMask,InetAddress newStart,InetAddress newEnd ){
        SubNetInDHCPConf conf;
        InetAddress subnet = null,start=null,end=null,mask=null,addr ;
        BinderOfSartAndEnd binder;
        Hashtable map = new Hashtable(); //子网hash
        
        List list = diag.getAllSubnetOnTab();
        int size = list.size();
        map1.clear();
        for( int i=0; i<size; i++ ){
            conf = (SubNetInDHCPConf)list.get(i);
            if( !checkOneSubnet( conf.subnet,conf.netmask,conf.start,conf.end ) ){
                return false;
            }
            
            try{
                subnet = InetAddress.getByName( conf.subnet );
                mask = InetAddress.getByName( conf.netmask );
                start = InetAddress.getByName( conf.start );
                end = InetAddress.getByName( conf.end );
            }catch(Exception ex){ // impossible to happen
            }
            
            // 由于陈连武以子网地址作为主键,所以不能出现相同的子网地址.
            // 一旦他修改了这个问题就可以去掉这段代码
            addr = (InetAddress)map.get( subnet );
            if( addr != null ){              
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditSubnetDialog.errMsg.sameSubnet") +" : "+conf.subnet
                );
                return false;
            }else{
                map.put( subnet, subnet );
            }
            
            binder = new BinderOfSartAndEnd( new InetCidr( start,mask,true ), new InetCidr( end,mask,true ) );
            map1.add( binder );
        }
        
        addr = (InetAddress)map.get( newSubnet );
        if( addr != null ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditSubnetDialog.errMsg.sameSubnet") +" : "+newSubnet.getHostName()
            );
            return false;
        }
        
        binder = new BinderOfSartAndEnd( new InetCidr( newStart,newMask,true ), new InetCidr( newEnd,newMask,true ) );
        map1.add( binder );
        
        return true;
    }
    
    /*
    Hashtable map = new Hashtable();    
    private boolean checkSubnetList( InetAddress newSubnet,InetAddress newMask,InetAddress newStart,InetAddress newEnd ){
        SubNetInDHCPConf conf;
        InetAddress subnet = null,start=null,end=null,mask=null ;
        List subList;
        ArrayList aList;
        BinderOfSartAndEnd binder;
        InetCidr startCidr,endCidr;
        
        List list = diag.getAllSubnetOnTab();
        int size = list.size();
        map.clear();
        for( int i=0; i<size; i++ ){
            conf = (SubNetInDHCPConf)list.get(i);
            if( !checkOneSubnet( conf.subnet,conf.netmask,conf.start,conf.end ) ){
                return false;
            }
            
            try{
                subnet = InetAddress.getByName( conf.subnet );
                mask = InetAddress.getByName( conf.netmask );
            }catch(Exception ex){ // impossible to happen
            }
            
            subList = (List)map.get( subnet );
            if( subList == null ){
                aList = new ArrayList();
                
                try{
                    start = InetAddress.getByName( conf.start );
                    end = InetAddress.getByName( conf.end );
                }catch(Exception ex){// impossible to happen
                }
                
                binder = new BinderOfSartAndEnd( new InetCidr( start,mask,true ), new InetCidr( end,mask,true ) );
                aList.add( binder );
                map.put( subnet, aList );
            }else{ 
                try{
                    start = InetAddress.getByName( conf.start );
                    end = InetAddress.getByName( conf.end );
                }catch(Exception ex){// impossible to happen
                }
                binder = new BinderOfSartAndEnd( new InetCidr( start,mask,true ), new InetCidr( end,mask,true ) );
                subList.add( binder );
            }
        }
        
        subList = (List)map.get( newSubnet );
        if( subList == null ){
            aList = new ArrayList();
            binder = new BinderOfSartAndEnd( new InetCidr( newStart,newMask,true ), new InetCidr( newEnd,newMask,true ) );
            aList.add( binder );
            map.put( subnet, aList );
        }else{
            binder = new BinderOfSartAndEnd( new InetCidr( newStart,newMask,true ), new InetCidr( newEnd,newMask,true ) );
            subList.add( binder );
        }
        
        return true;
    }
     */
}

class BinderOfSartAndEnd implements Comparable {
    InetCidr start;
    InetCidr end;
    
    public BinderOfSartAndEnd( InetCidr _start,InetCidr _end ){
        start = _start;
        end = _end;
    }
    
    public int compareTo( Object _o ){
        BinderOfSartAndEnd o = (BinderOfSartAndEnd)_o;
        return start.compareTo( o.start);
    }
}
