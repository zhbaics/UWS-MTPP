/*
 * FailoverForSrcAgntWizardDialog.java
 *
 * Created on 2008/7/3�, AM 9:51
 */

package guisanboot.ui;

import javax.swing.*;
import java.util.*;
import java.io.*;
import guisanboot.data.*;
import guisanboot.op.init.SelectNetBootModePane;
import guisanboot.res.*;
import guisanboot.unlimitedIncMj.entity.CloneDiskWrapper;
import guisanboot.unlimitedIncMj.model.table.CloneDisk;

/**
 *
 * @author  Administrator
 */
public class FailoverForSrcAgntWizardDialog extends WizardDialogSample implements FailoverInterface {
    SelectDRRecoverModePane seleDRReoverMode;
    SelectHostForNetBootPane selectHostForNetBoot;
    SelectServicePane selectServPane;
    SelectNetBootModePane selectNetBootModePane;
    SelectNetCardPane selectNetCardPane;
    SetDhcpPane setDhcpPane;
    public SelectSnapshotPane selectSnapPane;
    TaskConfigForFailOverPane taskConfPane;
    RunningTaskForDRPane runPane;
    
    SanBootView view;
    SourceAgent host;  // srcagent(远程传来的曾经初始化过的主机)
    boolean mustCheckDiskExist; // 标志：是否检查卷的存在；对于处于“回滚主机列表下”的srcagnt要做这样的检查
    BootHost netBootedHost; // 网络启动所在的宿主机
    SeledHostForNetBoot selHostForNetBoot;
    String rstIP;
    int rstPort;
    
    Vector servList = null;
    Vector bindList = null;
    HashMap viewMap = new HashMap();
    private Hashtable cardOnClnt = new Hashtable();
    private Hashtable dhcpOnClnt = new Hashtable();
    private Hashtable oldBootVer = new Hashtable();
    
    String bootMac=""; // 要进行网络启动的物理主机的网卡
    String targetSrvName="";
    ArrayList tgtList = null;
    ArrayList persistentTgtList = null ; // 当前initiator中的persistent target list
    ArrayList newBootVerList = new ArrayList(); // 当前选定的恢复版本
    BootVerList oldBootVerList; // 上次网络启动的恢复版本( 里面包含版本列表和os的版本 )
    int osTid = -1;
    boolean delOsTidLunMap = false;
    
    /** Creates new form FailoverForSrcAgntWizardDialog */
    public FailoverForSrcAgntWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public FailoverForSrcAgntWizardDialog( SanBootView view,SourceAgent orgHost,boolean mustCheckDiskExist  ){
        super( view );
        myInit( view,orgHost,mustCheckDiskExist );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitBootHostWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    ////GEN-BEGIN:variables
    ////GEN-END:variables
    
    private void myInit( SanBootView _view,SourceAgent _host,boolean _mustCheckDiskExist ){
        view = _view;
        host = _host;
        mustCheckDiskExist = _mustCheckDiskExist;
        
        setupLanguage1();
        enableBackButton( false );
        
        setWizardTipText( 
            SanBootView.res.getString( "WizardDialogSample.wizardText"),
            SanBootView.res.getString( "FailoverWizardDialog.wizardText1" ) 
        );
        
        setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title") );
        
        seleDRReoverMode = new SelectDRRecoverModePane( view );
        seleDRReoverMode.setManualMode( true );
        seleDRReoverMode.setEnabledOnAutoMode( false );
        selectHostForNetBoot = new SelectHostForNetBootPane( view,(BootHost)null );
        selectServPane = new SelectServicePane( view );
        selectNetBootModePane = new SelectNetBootModePane( view );
        selectNetBootModePane.ctrlRadioBtn( false );
        selectNetCardPane = new SelectNetCardPane( view);
        setDhcpPane = new SetDhcpPane( view,"windows" );
        selectSnapPane = new SelectSnapshotPane( view );
        taskConfPane =  new TaskConfigForFailOverPane(view );
        runPane = new RunningTaskForDRPane( view );
    }
    
    private void setupLanguage1(){
        setTitle( SanBootView.res.getString("FailoverWizardDialog.title") );
    }

    @Override public void backButtonProcess(){
        ArrayList netCardInfo;
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title0").trim() ) == 0 ){
            this.enableBackButton( false );
            this.removeCenterPane();
            this.addImagePaneOntoCenterPane();
            this.addWizardTipTextPane();
            this.setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString("FailoverWizardDialog.wizardText1")
            );
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title") );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title1").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title0") );
            removePaneFromContentPane( selectHostForNetBoot );
            addPaneOntoContentPane( seleDRReoverMode );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2").trim() ) == 0 ){     
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title1") );
            removePaneFromContentPane( selectServPane );
            addPaneOntoContentPane(  selectHostForNetBoot );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode").trim() ) == 0 ){           
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2") );
            removePaneFromContentPane( selectNetBootModePane );
            addPaneOntoContentPane( selectServPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2.5").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            netCardInfo = selectNetCardPane.getNetCardInfo();
            selHostForNetBoot = selectHostForNetBoot.getSelectHostToNetBoot();
            if( selHostForNetBoot.mac.equals("") ){
                String rstIP1 = selHostForNetBoot.host.getIP();
                cardOnClnt.remove( new String( rstIP1 ) );
                cardOnClnt.put( new String( rstIP1 ),netCardInfo );
            }
            selectNetCardPane.removeListener();    
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode") );
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane(  selectNetBootModePane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2.6").trim() ) == 0 ){
            selHostForNetBoot = selectHostForNetBoot.getSelectHostToNetBoot();
            InfoFromDhcpSetupPane dhcpSetPane = new InfoFromDhcpSetupPane();
            dhcpSetPane.isUseOdyDhcp = setDhcpPane.isAutoSetup();
            dhcpSetPane.dhcpClntInfo = setDhcpPane.getDhcpSetInfo();
            if( selHostForNetBoot.mac.equals("") ){    
                String rstIP1 = selHostForNetBoot.host.getIP();
                dhcpOnClnt.remove( new String( rstIP1 ) );
                dhcpOnClnt.put( new String(rstIP1), dhcpSetPane );
            }else{
                dhcpOnClnt.remove( new String( selHostForNetBoot.mac ) );
                dhcpOnClnt.put( new String(selHostForNetBoot.mac), dhcpSetPane );
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.5") );
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane( selectNetCardPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title3").trim() ) == 0 ){
            if( (osTid != -1)  && delOsTidLunMap ){
                DhcpClientInfo dhcpCltInfo = setDhcpPane.getDhcpSetInfo();
                String start_ip = setDhcpPane.isAutoSetup()? dhcpCltInfo.ip: dhcpCltInfo.ip_3rd;                              
                // 去掉os view的lunmap,因为有可能用户会cancel掉这次failover操作，这样这个lunmap就不需要了。不管成功与否。
                view.initor.mdb.delLunMap( osTid, start_ip, "255.255.255.255", "rw" );
                osTid = -1;
            }
            
            removePaneFromContentPane( selectSnapPane );          
            if( !selectNetBootModePane.isSelectIScsiHBAMode() ){
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.6") );            
                addPaneOntoContentPane( setDhcpPane );
            }else{
                setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode") );            
                addPaneOntoContentPane( selectNetBootModePane );
            }
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title5").trim() ) == 0 ){
            if( this.isAutoDR ){
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title0") );
                removePaneFromContentPane( taskConfPane );
                addPaneOntoContentPane( seleDRReoverMode );
            }else{
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title3") );
                removePaneFromContentPane( taskConfPane );
                addPaneOntoContentPane( selectSnapPane );
            }
            refreshCenterPane();
            return;
        }
    }
    
    ArrayList ncOnOriginalHost = null;
    private boolean getNCOnOriginalHost(){
        if( ncOnOriginalHost == null ){
            boolean isOk = view.initor.mdb.getIPInfoFromSrv( ResourceCenter.CLT_IP_CONF+"/"+ ResourceCenter.PREFIX_SRC_AGNT + host.getSrc_agnt_id() + ResourceCenter.CONF_IP );
            if( isOk ){
                ncOnOriginalHost = view.initor.mdb.getAllNetCardinfoFromSrv();
            }else{
                JOptionPane.showMessageDialog( 
                    this, 
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                    view.initor.mdb.getErrorMessage() 
                ); 
            }
            return isOk;
        }else{
            return true;
        }
    }
    
    private boolean isIPConfilict( String ip ){
        NetCard nc;
        BindIPAndMask ipPeer;
        Vector ipList;
        int i,j,size,size1;
        
        size = ncOnOriginalHost.size();
        for( i=0; i<size; i++ ){
            nc = (NetCard)ncOnOriginalHost.get( i );
            ipList = nc.getIPList();
            size1 = ipList.size();
            for( j=0; j<size1; j++ ){
                ipPeer = (BindIPAndMask)ipList.elementAt( j );
                if( ipPeer.ip.equals( ip ) ){
                    JOptionPane.showMessageDialog( this,SanBootView.res.getString("InitBootHostWizardDialog.error.conflictIP") );
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private ArrayList getNetCardList( ){
        ArrayList netCardList;
        boolean isOk;
        
        boolean isWin = netBootedHost.isWinHost();
        int hostID = netBootedHost.getID();
        
        if( isWin ){
            isOk = view.initor.mdb.getIPInfoFromSrv( ResourceCenter.CLT_IP_CONF+"/"+ hostID + ResourceCenter.CONF_IP );
        }else{
            isOk = view.initor.mdb.getUnixNetCardFromSrv( ResourceCenter.CLT_IP_CONF+"/"+ hostID + ResourceCenter.CONF_IP  ); 
        }
        
        if( !isOk ){
            if( isWin ){
                isOk = view.initor.mdb.getIPInfoFromClnt( rstIP,rstPort, "00-00-00-00-00-00" );
            }else{
                isOk = view.initor.mdb.getUnixNetCard( rstIP,rstPort, "list_netinfo.sh" ); 
            }
            if( !isOk ){
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                return null;
            }else{
                if( isWin )
                    netCardList = view.initor.mdb.getAllNetCardinfo();
                else
                    netCardList = view.initor.mdb.getUnixNetCard();
            }
        }else{
            if( isWin )
                netCardList = view.initor.mdb.getAllNetCardinfoFromSrv();
            else
                netCardList = view.initor.mdb.getUnixNetCardFromSrv();
            if( netCardList.size() <=0 ){
                if( isWin ){
                    isOk = view.initor.mdb.getIPInfoFromClnt( rstIP,rstPort, "00-00-00-00-00-00" );
                }else{
                    isOk = view.initor.mdb.getUnixNetCard( rstIP,rstPort, "list_netinfo.sh" ); 
                }
                if( !isOk ){
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                            view.initor.mdb.getErrorMessage()
                    );
                    return null;
                }else{
                    if( isWin )
                        netCardList = view.initor.mdb.getAllNetCardinfo();
                    else
                        netCardList = view.initor.mdb.getUnixNetCard();
                }
            }
        }
        
        return netCardList;
    }
    
    boolean isAutoDR = false;
    int OSTargetID = -1;
    boolean isFirstForSelBootMode = true;
    @Override public void nextButtonProcess(){
        boolean isOk,contained,isUseOdyDhcp=true;
        Vector subnetList=null,ibootSrvList=null;
        ArrayList netCardList;
        String oldmac="",ip_3rd="",nextsrv_3rd="",start_ip,ip_hba="";
        DhcpClientInfo dhcpClntInfo=null;
        InfoFromDhcpSetupPane dhcpSetPane;  
        
        if( getTipTitle().compareTo( SanBootView.res.getString("FailoverWizardDialog.title0").trim() ) == 0 ){
            if( servList == null ){ // 不管是否显示"select service pane",先将server table布置好
                // 用服务器上保存的service conf
                isOk = view.initor.mdb.getOSService( ResourceCenter.CLT_IP_CONF+"/"+ ResourceCenter.PREFIX_SRC_AGNT + host.getSrc_agnt_id() + ResourceCenter.CONF_SERVICE );
                if( !isOk ){
                    // 没有得到保存的service conf，那就一个服务也不停
                    servList = new Vector();
                }else{
                    // GUI上显示出来的service是之前保存下来的server
                    servList = view.initor.mdb.getOSService();
                }   
                
                selectServPane.setStopPartialService( true );
                selectServPane.clickJRadioBtn2();
                selectServPane.setupServiceTable( servList );
            }
            
            if( seleDRReoverMode.isAutoMode() ){
                // 无法进行自动恢复，因为不知道要在哪台物理机器上进行恢复，必须用户指定.
            }else{    
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title1") );    
                removePaneFromContentPane( seleDRReoverMode );
                addPaneOntoContentPane( selectHostForNetBoot );
                refreshCenterPane();
                return;
            }
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("FailoverWizardDialog.title1").trim() ) == 0 ){
            if( !selectHostForNetBoot.checkInputValidity() ) return;
            
            selHostForNetBoot = selectHostForNetBoot.getSelectHostToNetBoot();
            if( selHostForNetBoot.mac.equals("") ){
                netBootedHost = selHostForNetBoot.host;
                rstIP = netBootedHost.getIP();
                rstPort = netBootedHost.getPort();    
            }else{
                netBootedHost = null;
                rstIP ="";
                rstPort = -1;
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2") );
            removePaneFromContentPane( selectHostForNetBoot );
            addPaneOntoContentPane( selectServPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2").trim() ) == 0 ){            
            if( isFirstForSelBootMode ){           
                if( host.isEmBoot() ){
                    selectNetBootModePane.setEmBootMode( true );
                    selectNetBootModePane.clickJRadioBtn1();
                }else if( host.isIBoot() ){
                    selectNetBootModePane.setIBootMode( true );
                    selectNetBootModePane.clickJRadioBtn2();
                }else{
                    // get the 3rd dhcp info
                    isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF +"/"+ResourceCenter.PREFIX_SRC_AGNT + host.getSrc_agnt_id() + ResourceCenter.CONF_3RD_DHCP );
                    if( isOk ){
                        ip_hba = view.initor.mdb.getIpFrom3rdDhcpInfo();
                    }
                    selectNetBootModePane.setIScsiHBAMode( true );
                    selectNetBootModePane.clickJRadioBtn3();
                    selectNetBootModePane.setBootIPForIscsiHBA( ip_hba );
                }                
                isFirstForSelBootMode = false;
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode") );
            removePaneFromContentPane( selectServPane );
            addPaneOntoContentPane( selectNetBootModePane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("InitBootHostWizardDialog.selNetBootMode").trim() ) == 0 ){
            if( selectNetBootModePane.isSelectIScsiHBAMode() ){
                if( !selectNetBootModePane.checkInput() ) return;                   
                if( !getNCOnOriginalHost() ) return;                
                if( isIPConfilict( selectNetBootModePane.getBootIPForIscsiHBA() ) ) return;                
                if( tgtList == null ){
                    tgtList = view.initor.mdb.getMDIFromCacheOnSrcAgntID( host.getSrc_agnt_id() );
                }
                
                // 将版本准备好
                SeledHostForNetBoot selNetBootInfo = selectHostForNetBoot.getSelectHostToNetBoot();
                if( selNetBootInfo.host == null ){
                   bootMac = selNetBootInfo.mac;
                }else{
                    ArrayList netCardList1 = this.getNetCardList();
                    if( ( netCardList1 == null) || netCardList1.size() <0 ) return;
                    Object ncObj = netCardList1.get(0);
                    if( ncObj instanceof UnixNetCard ){
                        bootMac = (( UnixNetCard)ncObj).mac;
                    }else{
                        bootMac = ((NetCard)ncObj).mac;
                    }
                }
                
                // 进行网络启动的是其他主机或是指定的网卡�������ָ������
                DestAgent da = getSelectedMC( bootMac );
                if( da != null ){
                    contained = oldBootVer.containsKey( bootMac );
                    if( !contained ){
                        oldBootVerList = view.getBootVerForDestAgent( da.getDst_agent_id() );
                        oldBootVer.put( bootMac,oldBootVerList  );
                    }else{
                        oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                    }
                }else{
                    contained = oldBootVer.containsKey( bootMac );
                    if( !contained ){
                        oldBootVerList = view.getBootVerForDefault( host.getSrc_agnt_id() );
                        oldBootVer.put( bootMac,oldBootVerList );
                    }else{
                        oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                    }
                }                
                
                if( bindList == null ){
                    // 正在准备快照版本
                    ProgressDialog initDiag = new ProgressDialog( 
                        view,
                        SanBootView.res.getString("View.pdiagTitle.getSnapVer"),
                        SanBootView.res.getString("View.pdiagTip.getSnapVer")
                    );
                    
                    GetUnixRstVerForSrcAgent getRstVer = new GetUnixRstVerForSrcAgent( initDiag,view,host,mustCheckDiskExist,false );
                    getRstVer.start();
                    initDiag.mySetSize();
                    initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                    initDiag.setVisible( true );
                    
                    bindList = getRstVer.getBindList();
                }
                
                selectSnapPane.setupTable( bindList, oldBootVerList.bootVerList );
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title3") );
                removePaneFromContentPane( selectNetBootModePane );
                addPaneOntoContentPane( selectSnapPane );
                refreshCenterPane();
                return;
            }else{
                if( netBootedHost == null ){
                    setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.5") );
                    netCardList = new ArrayList();
                    PesudoNetCard pnc = new PesudoNetCard();
                    pnc.isSel = true;
                    pnc.mac = selHostForNetBoot.mac;
                    netCardList.add( pnc );
                    selectNetCardPane.setupNetCardTable( netCardList );
                }else{
                    contained = cardOnClnt.containsKey( new String( rstIP ) );
                    if( !contained ){                       
                        netCardList = this.getNetCardList();
                        setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.5") );
                        cardOnClnt.put( new String(rstIP), netCardList );

                        // 获取当前的iboot list，从中找出netBootedHost曾经确定过的启动网卡
                        DestAgent da = getSelectedMC( netCardList );
                        if( da != null ){
                            oldmac = da.getDst_agent_mac();
                        }else{
                            oldmac = "";
                        }                       
                        selectNetCardPane.setupNetCardTable( netCardList );
                        selectNetCardPane.setupGigaNetCard( oldmac );
                    }else{
                        setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.5") );    
                        Object val = cardOnClnt.get( new String(rstIP) );
                        netCardList = (ArrayList)val;
                        selectNetCardPane.setupNetCardTable( netCardList );
                    }
                    selectNetCardPane.addListener();
                }

                removePaneFromContentPane( selectNetBootModePane );
                addPaneOntoContentPane( selectNetCardPane );
                refreshCenterPane();
                return;                
            }
        }    
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2.5").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            if( !selectNetCardPane.hasSelectedNetCard() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitBootHostWizardDialog.error.notSelCard")
                );
                return;
            }
            
            // 首先获取设置dhcp所需的subnet和ibootsrv列表
            if( subnetList == null || ibootSrvList == null ){
                if( view.initor.dhcpdb.isLoginOK() ){   
                    subnetList = view.initor.dhcpdb.getSubnetListFromDhcp();
                    ibootSrvList = view.initor.dhcpdb.getIbootSrvListFromDhcp();
                }else{
                    // dhcp server不可用( 无法登陆它,可能没有关于它的配置信息,或者配置信息有误 )
                    subnetList = new Vector();
                    ibootSrvList = new Vector();
                }    
            }
            
            if( netBootedHost == null ){
                contained = dhcpOnClnt.containsKey( new String( selHostForNetBoot.mac ) );
                if( !contained ){
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
SanBootView.log.debug( getClass().getName(),"selected netboot MAC: "+ mac ); 
                    start_ip = host.getSrc_agnt_ip();
                    DestAgent da = getSelectedMC( nc );
                    if( da != null ){
                        start_ip = da.getDst_agent_ip();
                        dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac( DhcpClientInfo.getMacStr( mac ) );
                        
                        // get the 3rd dhcp info
                        isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+ResourceCenter.PREFIX_DST_AGNT + da.getDst_agent_id() + ResourceCenter.CONF_3RD_DHCP );
                        if( isOk ){
                            isUseOdyDhcp = false; //due to have the 3rd dhcp info config file on server-side
                            ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                            nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                        }else{
                            isUseOdyDhcp = true;
                        }
                        if( ip_3rd.equals("") )
                            ip_3rd = start_ip;
                        if( nextsrv_3rd.equals("") )
                            nextsrv_3rd= view.initor.getTxIP(start_ip);
                    }else{
                        isUseOdyDhcp = true;
                        ip_3rd = start_ip;
                        nextsrv_3rd = view.initor.getTxIP(start_ip);
                    }
                    
                    setDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,selHostForNetBoot.mac,isUseOdyDhcp,dhcpClntInfo,start_ip,ip_3rd,nextsrv_3rd );
                }else{
                    Object val = dhcpOnClnt.get( new String( selHostForNetBoot.mac ) );
                    dhcpSetPane = (InfoFromDhcpSetupPane)val;
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
                    setDhcpPane.setDhcpSetInfo( dhcpSetPane.isUseOdyDhcp,dhcpSetPane.dhcpClntInfo,mac ); 
                }  
            }else{
                contained = dhcpOnClnt.containsKey( new String( rstIP ) ); 
                if( !contained ){
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
SanBootView.log.debug( getClass().getName(),"selected netboot MAC: "+ mac ); 
                    start_ip = host.getSrc_agnt_ip();
                    DestAgent da = getSelectedMC( nc );
                    if( da != null ){
                        start_ip = da.getDst_agent_ip();
                        dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac( DhcpClientInfo.getMacStr( mac ) );
                        
                        // get the 3rd dhcp info
                        isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+ResourceCenter.PREFIX_DST_AGNT + da.getDst_agent_id() + ResourceCenter.CONF_3RD_DHCP );
                        if( isOk ){
                            isUseOdyDhcp = false; //due to have the 3rd dhcp info config file on server-side
                            ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                            nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                        }else{
                            isUseOdyDhcp = true;
                        }
                        if( ip_3rd.equals("") )
                            ip_3rd = start_ip;
                        if( nextsrv_3rd.equals("") )
                            nextsrv_3rd= view.initor.getTxIP(start_ip);
                    }else{
                        isUseOdyDhcp = true;
                        ip_3rd = start_ip;
                        nextsrv_3rd = view.initor.getTxIP(start_ip);
                    }                
                    
                    setDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,mac,isUseOdyDhcp,dhcpClntInfo,start_ip,ip_3rd,nextsrv_3rd );                                                       
                }else{                    
                    Object val = dhcpOnClnt.get( rstIP );
                    dhcpSetPane = (InfoFromDhcpSetupPane)val;
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
                    setDhcpPane.setDhcpSetInfo( dhcpSetPane.isUseOdyDhcp,dhcpSetPane.dhcpClntInfo,mac ); 
                }
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title2.6") ); 
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane( setDhcpPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title2.6").trim() ) == 0 ){
            if( !setDhcpPane.checkDhcpInfoValidity() ){ 
                return;
            }
            
            Object selNC = selectNetCardPane.getSelectNetCard();
            if( selNC == null ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.notFoundBootMac")
                );
                return;
            }else{
                if( selNC instanceof NetCard ){
                    bootMac = ((NetCard)selNC).mac;
                }else{
                    bootMac = ((UnixNetCard)selNC).mac;
                }
            }
             
            if( tgtList == null ){
                tgtList = view.initor.mdb.getMDIFromCacheOnSrcAgntID( host.getSrc_agnt_id() );
            }
            
            // 进行网络启动的是其他主机或是指定的网卡
            DestAgent da = getSelectedMC( bootMac );
            if( da != null ){
                contained = oldBootVer.containsKey( bootMac );
                if( !contained ){
                    oldBootVerList = view.getBootVerForDestAgent( da.getDst_agent_id() );
                    oldBootVer.put( bootMac,oldBootVerList  );
                }else{
                    oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                }
            }else{
                contained = oldBootVer.containsKey( bootMac );
                if( !contained ){
                    oldBootVerList = view.getBootVerForDefault( host.getSrc_agnt_id() );
                    oldBootVer.put( bootMac,oldBootVerList );
                }else{
                    oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                }
            }
            
            if( bindList == null ){
SanBootView.log.debug(getClass().getName(), " entering get rst ver1 ....................") ;  
                // 正在准备快照版本
                ProgressDialog initDiag = new ProgressDialog( 
                    view,
                    SanBootView.res.getString("View.pdiagTitle.getSnapVer"),
                    SanBootView.res.getString("View.pdiagTip.getSnapVer")
                );
                //GetUnixRstVerForSrcAgent is suitable for windowns and linxu platform
                GetUnixRstVerForSrcAgent getRstVer = new GetUnixRstVerForSrcAgent( initDiag,view,host,mustCheckDiskExist,false );
                getRstVer.start();
                initDiag.mySetSize();
                initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                initDiag.setVisible( true );
                
                bindList = getRstVer.getBindList();
            }
            selectSnapPane.setupTable( bindList, oldBootVerList.bootVerList );
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title3") );
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane( selectSnapPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title3").trim() ) == 0 ){
            selectSnapPane.fireEditingStopMsg();
            
            if( !selectSnapPane.toRecoverOSDisk() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.notRecoverCDisk")
                );
                return;
            }
            
            if( !selectSnapPane.restoreAllDisk() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.mustRstAllDisk")
                );
                return;
            }
            
            if( !selectSnapPane.multiFsToRestore() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.multiFsToRst")
                );
                return;
            }
            
            if( targetSrvName.equals("") ){
                targetSrvName = view.initor.mdb.getHostName();
                if( targetSrvName.equals("") ){
SanBootView.log.error( getClass().getName(),"target server name is null." );                    
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("InitBootHostWizardDialog.log.getHostNameFailed")
                    );
                    return;
                }
            }
            
            // 为所选的快照生成view
            ProgressDialog initDiag = new ProgressDialog( 
                view,
                SanBootView.res.getString("View.pdiagTitle.selRstVer"),
                SanBootView.res.getString("View.pdiagTip.selRstVer")
            );            
            DhcpClientInfo dhcpCltInfo = setDhcpPane.getDhcpSetInfo();            
            if( !host.isISCSIHBABoot() ){
                start_ip = setDhcpPane.isAutoSetup()? dhcpCltInfo.ip: dhcpCltInfo.ip_3rd;
            }else{
                start_ip = selectNetBootModePane.getBootIPForIscsiHBA();
            }

            CrtView1 crtView = new CrtView1( this,initDiag,selectSnapPane.getSelectedSnap().toArray(),
                    viewMap,view,bootMac,host,start_ip,targetSrvName,false,false
            );
            crtView.start();
            initDiag.mySetSize();
            initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
            initDiag.setVisible( true );
            
            if( crtView.allFinish ){
                this.osTid = crtView.getOSTid();
                this.delOsTidLunMap = crtView.isShouldRmOsTidLunMap();
                setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title5") );
                removePaneFromContentPane( selectSnapPane );
                taskConfPane.setOsTidOnUI( this.osTid );
                addPaneOntoContentPane( taskConfPane );
                refreshCenterPane();
                return;
            }else{
                this.osTid = crtView.getOSTid();
                this.delOsTidLunMap = crtView.isShouldRmOsTidLunMap();
                return;
            }
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title5").trim() ) == 0 ){
            if( !taskConfPane.isFinishJob( 0 ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.notFinishChgBIOS")
                );
                return;
            }
            
            if( taskConfPane.isAllFinished() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.allFinished")
                );
                return;
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title6") );
            removePaneFromContentPane( taskConfPane );
            setTextOnNextButton( SanBootView.res.getString("WizardDialogSample.button.finish"));
            enableNextButton( false );
            enableBackButton( false );
            enableCancelButton( false );
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
            addPaneOntoContentPane( runPane );
            refreshCenterPane();
            
            beginDRRecover();
            
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("FailoverWizardDialog.title6").trim() ) == 0 ){
            if( allFinished ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("FailoverWizardDialog.error.drRecoverOK")
                );
            }else{
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("FailoverWizardDialog.error.needReDrRecover")
                );
            }
            dispose();
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("FailoverWizardDialog.title").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("FailoverWizardDialog.title0") );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( seleDRReoverMode );
            refreshCenterPane();
            return;
        }else{
            return;
        }
    }
    
    @Override public void cancelButtonProcess(){
        if( ( this.osTid != -1 ) && delOsTidLunMap ){
            // 不去掉“ostid”的lunmap,否则要网络启动GUI所在的主机时，由于
            // 要重启机器，所以GUI的failover过程被分成两段，会出现os不能
            // 登陆的问题（lunmap被删除了）�
        }
        this.dispose();
    }
    
    public void setProcess(){    
    }
     
    private void beginDRRecover(){
        Thread initThread = new Thread( new RecoveringBootHost( this ) ); 
        initThread.start();
    }
      
    boolean allFinished = false; // 表明所有task都成功完成了
    String errMsg;
    @Override public void writeLogBuf( String errMsg,int which ){
        if( isWrFirst ){
            logBuf.append( runPane.getTabStr( which ) + replaceLine( errMsg ) );
            isWrFirst = false;
        }else{
            logBuf.append( ResourceCenter.NEWLINE_STRING + runPane.getTabStr( which ) + replaceLine( errMsg ) );
        }
    }
    
    public void realDRRecover(){
        String ip,iscsiVar,disk,servName,key,crttime,drvLetter;
        int i,j,k,size,size1,size2,port,tid,tid1,retryCnt1,snapid,viewid;
        boolean isOk,excepErr,isStopAllBaseServ;
        GetAgentInfo getAgentInfo = null;
        Service service;
        BindOfVolMapandSnap binder;
        BindOfSnapAndView bindsv;
        SystemPartitionForWin part;
        Vector stopServList = new Vector();
        Vector tmpVect = new Vector();
        Vector serviceList;
        ArrayList snapList;
        Object item;
        boolean stopServStepOK;
        boolean loadInfoStepOK;
        boolean assignDriverStepOK;
        boolean startServStepOK;
        boolean rebootStepOK;
        DestAgent newDa = null;
        
SanBootView.log.info( getClass().getName()," @@#################  Migration System from local disk to iSCSI Begin ###################@@ ");
        if( !host.isISCSIHBABoot() ){
            DhcpClientInfo  dhcpInfo = setDhcpPane.getDhcpSetInfo();        
            if( setDhcpPane.isAutoSetup() ){            
                ip = dhcpInfo.ip;
                port = host.getSrc_agnt_port();
            }else{            
                ip = dhcpInfo.ip_3rd;
                port = host.getSrc_agnt_port();
            }
        }else{
            ip   = host.getSrc_agnt_ip();
            port = host.getSrc_agnt_port();
        }
        
        // 1. connect client 
        runPane.setCurTabPane( RunningTaskForDRPane.CONNECT_AGENT_ROW );
        runPane.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
        );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent Begin ###################@@ "); 

        isOk = false;
        excepErr = false;
        
        Thread connectThread = new Thread( process );
        connectThread.start();
        
        while ( !isOk ){
            try{
                // sleep 4 sec.
                try{
                    Thread.sleep( 4*1000 );
                }catch(InterruptedException e){}
                
                // 获取主机信息,
                getAgentInfo = new GetAgentInfo(
                    ResourceCenter.getCmd( ResourceCenter.CMD_GET_HOST_INFO1 ) + ip + " " + port+" ib_get_osinfo.exe",
                    view.getSocket()
                );
                isOk = getAgentInfo.getAgentInfo();
            }catch( Exception ex ){
                ex.printStackTrace();
                        
                setOver( true );
                  
                isOk = true;
                excepErr = true;
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                );
                errMsg = ResourceCenter.getCmdString( ResourceCenter.CMD_GET_HOST_INFO ) + " : " + getAgentInfo.getErrMsg(); 
                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.CONNECT_AGENT_ROW );
                writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );
            }
        }
        
        // 发生网络方面的异常,退出
        if( excepErr ){
            allFinished = false;
            recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");            
            return ;
        }else{
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.connectHostOK"), 
                RunningTaskForDRPane.CONNECT_AGENT_ROW
            );
        }
        
        // 2. check whether C startup from network
        isOk = view.initor.mdb.isStartupfromSAN( ip, port, "C" );
        if( isOk ){
            if( view.initor.mdb.isStartupFromSAN() ){
                // 判断当前是否已经网络启动，同时当前C盘的target id是否与用户所选的view或volume的target id一样，
                // 如果不一样，用新target启动客户端会出现蓝屏（无响应）
                if( host.isLargerThanVista() || host.isIBoot() || host.isISCSIHBABoot() ){
                    osTid = view.initor.mdb.getTargetByLetter( ip,port,"C:" );
                }else{
                    view.initor.mdb.getOsVolTargetIDOfIBoot( ip );
                    osTid = view.initor.mdb.getOsVolTid();
                }
SanBootView.log.info(getClass().getName(),"os tid query from netboot host: " + osTid );

                if( osTid == -1 ){ // 没有得到当前的os target id,就用以前保存的
                    if( oldBootVerList.osBootVer != null ){
                        osTid = oldBootVerList.osBootVer.getTid();
                        if( osTid <=0 ){
SanBootView.log.warning(getClass().getName(),"Can't get os target id from MDB.") ;
                            // 提示用户当心
                            int ret = JOptionPane.showConfirmDialog(
                                view,
                                SanBootView.res.getString("FailoverWizardDialog.confirm1"),
                                SanBootView.res.getString("common.confirm"),  //"Confirm",
                                JOptionPane.OK_CANCEL_OPTION
                            );
                            if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                                setOver( true );
                                runPane.setTaskStatus(
                                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                                );
                                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.cancelNetBoot");
                                runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );

                                // 用户取消本次操作,退出
                                allFinished = false;
                                recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                                 
                                return;
                            }
                        }
                    }else{
SanBootView.log.warning(getClass().getName(),"Can't get os target id from current system and MDB.") ;                    
                        // 提示用户当心
                        int ret = JOptionPane.showConfirmDialog(
                            view,
                            SanBootView.res.getString("FailoverWizardDialog.confirm1"),
                            SanBootView.res.getString("common.confirm"),  //"Confirm",
                            JOptionPane.OK_CANCEL_OPTION
                        );
                        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                            setOver( true );
                            runPane.setTaskStatus(
                                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                            );
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.cancelNetBoot");
                            runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW );
                            writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );
                            
                            // 用户取消本次操作,退出
                            allFinished = false;
                            recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                                     
                            return;
                        }
                    }
                }
                
                if( osTid > 0 ){                    
                    Object osSnap = selectSnapPane.getOSSnapVer();
SanBootView.log.debug(getClass().getName(),(osSnap == null)?" osSnap is null":"osSnap is not null" );                    
                    if( osSnap instanceof VolumeMapWrapper ){ // 用户直接选择了target volume
                        tid = ((VolumeMapWrapper)osSnap).volMap.getVolTargetID();
                    }else if( osSnap instanceof ViewWrapper ){ // 选择了已有的view
                        tid = ((ViewWrapper)osSnap).view.getTargetID();
                    }else if( osSnap instanceof MirrorDiskInfoWrapper ){ //用户直接选择了mirror disk
                        tid = ((MirrorDiskInfoWrapper)osSnap).mdi.getTargetID();
                    }else if( osSnap instanceof CloneDiskWrapper ){ //选择了克隆盘
                        tid = ((CloneDiskWrapper)osSnap).cloneDisk.getTarget_id();
                    }else{ // 选择了snapwrapper
                        tid = ((BindOfSnapAndView)viewMap.get( "C:\\" )).view.getTargetID();
                    }
                    
                    if( osTid != tid ){
                        setOver( true );
                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                        );
                        errMsg = SanBootView.res.getString("FailoverWizardDialog.log.mismatchedOSVer");
                        runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW );
                        writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );

                        // os版本不一致，不能网络启动,退出
                        allFinished = false;
                        recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                        
                        return;
                    }
                }       
                
                setOver( true );
                
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                );
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.startupFromSAN"), 
                    RunningTaskForDRPane.CONNECT_AGENT_ROW
                );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                 
            }else{
                setOver( true );
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
                );
                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.notStartupFromSAN");
                runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW );
                writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );
                
                // 从本地盘启动,退出
                allFinished = false;
                recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");                 
                return;
            }
        }else{
            setOver( true );
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.CONNECT_AGENT_ROW , 2
            );
            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.getStartupInfo") +
                      SanBootView.res.getString("common.failed");
            runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.CONNECT_AGENT_ROW );
            writeLogBuf( errMsg, RunningTaskForDRPane.CONNECT_AGENT_ROW  );
            
            // 无法得到系统启动的方式(local disk or network),退出
            allFinished = false;
            recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Connect Agent End ###################@@ ");             
            return;
        }
        
        // 3. stop services
SanBootView.log.info( getClass().getName()," @@#################  Stop service Begin ###################@@ ");          
        stopServStepOK = true; 
        runPane.setCurTabPane( RunningTaskForDRPane.STOP_SERV_ROW );
        if( taskConfPane.isFinishJob( 1 ) ){    
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.STOP_SERV_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForDRPane.STOP_SERV_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForDRPane.STOP_SERV_ROW , 2
            );
            
            if( isAutoDR ){                
            }else{
                isStopAllBaseServ = selectServPane.isStopAllService(); 
                boolean todo = false;
                serviceList = selectServPane.getServiceInfo();
                size = serviceList.size();
                for( i=0; i<size; i++ ){
                    service = (Service)serviceList.elementAt( i );

                    todo = false;
                    if( isStopAllBaseServ ){
                        todo = true;
                    }else{
                        if( service.iSeled() ){
                            todo = true;
                        }
                    }

                    if( todo ){
                        stopServList.addElement( service ); // 记录停止了哪些服务
                        
                        retryCnt1 = 0;
                        while( retryCnt1 < 3 ){
                            isOk = view.initor.mdb.doStartService( ip,port,"stop",service.getServName() );
                            if( isOk ){
                                break;
                            }else{
                                retryCnt1++;
                            }
                        }
                        
                        if( isOk ){
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("FailoverWizardDialog.log.stopService") +" [ "+service.getServName()+" ] "+
                                    SanBootView.res.getString("common.ok"), 
                                RunningTaskForDRPane.STOP_SERV_ROW
                            );
                        }else{
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.stopService") +" [ "+service.getServName()+" ] "+
                                      SanBootView.res.getString("common.failed");
                            runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.STOP_SERV_ROW );
                            writeLogBuf( errMsg, RunningTaskForDRPane.STOP_SERV_ROW  );
                            stopServStepOK = false;
                        }
                    }
                }
            }

            if( stopServStepOK ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.STOP_SERV_ROW , 2
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.STOP_SERV_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Stop service End ###################@@ ");            
        
        // 4. load info
        loadInfoStepOK = true;
        runPane.setCurTabPane( RunningTaskForDRPane.LOAD_INFO_ROW );
SanBootView.log.info( getClass().getName()," @@#################  Load info Begin ###################@@ "); 

        if( taskConfPane.isFinishJob( 2 ) ){
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.LOAD_INFO_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForDRPane.LOAD_INFO_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForDRPane.LOAD_INFO_ROW , 2
            );
            
            if( !host.isISCSIHBABoot() ){
                String ipConf = ResourceCenter.PREFIX_SRC_AGNT + host.getSrc_agnt_id() + ".conf";
                isOk = view.initor.mdb.sendNetConf( ip, port, ipConf );
                if( isOk ){
                    isOk = view.initor.mdb.loadInfo( ip,port,ipConf );
                    if( isOk ){
                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                        );
                        runPane.setLogOnTabpane(
                            SanBootView.res.getString("FailoverWizardDialog.log.loadInfo") +
                                SanBootView.res.getString("common.ok"), 
                            RunningTaskForDRPane.LOAD_INFO_ROW
                        );
                    }else{
                        loadInfoStepOK = false;

                        runPane.setTaskStatus(
                            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                        );
                        errMsg = SanBootView.res.getString("FailoverWizardDialog.log.loadInfo") +
                                  SanBootView.res.getString("common.failed");
                        runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.LOAD_INFO_ROW );
                        writeLogBuf( errMsg, RunningTaskForDRPane.LOAD_INFO_ROW  );
                    }
                }else{
                    loadInfoStepOK = false;

                    runPane.setTaskStatus(
                        InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                    );
                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.sendInfo") +
                              SanBootView.res.getString("common.failed"); 
                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.LOAD_INFO_ROW );
                    writeLogBuf( errMsg, RunningTaskForDRPane.LOAD_INFO_ROW  );
                }
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.LOAD_INFO_ROW , 2
                );
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.notneedloadinfo"),         
                    RunningTaskForDRPane.LOAD_INFO_ROW
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Load info End ###################@@ "); 

        // 5. assigne drivers
        assignDriverStepOK = true;
        runPane.setCurTabPane( RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
SanBootView.log.info( getClass().getName()," @@#################  Assign drives Begin ###################@@ ");   

        if( taskConfPane.isFinishJob( 3 ) ){    
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForDRPane.ASSIGN_DRIVER_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
            );
            
            isOk = view.initor.mdb.getSystemPartFromMDB( 
                ResourceCenter.CLT_IP_CONF +"/"+ResourceCenter.PREFIX_SRC_AGNT+host.getSrc_agnt_id()+ResourceCenter.CONF_NORMAL_DISK,
                ResourceCenter.CMD_TYPE_MTPP
            );
            if( isOk ){
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.getPartition1") +
                        SanBootView.res.getString("common.ok"), 
                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
                );
                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.getPartition");
                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                
                // 无法得到original partion info,退出
                allFinished = false;
                recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Assign drives End ###################@@ ");                
                return;
            }
            
            // 获取初始化时保存的分区表
            Vector oldList = view.initor.mdb.getSysPartByCatConf();
            
            // 获取当前的 persistent target
            isOk = view.initor.mdb.getPersistentTarget( ip, port );
            if( isOk ){
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.getPersistentTarget") +
                        SanBootView.res.getString("common.ok"), 
                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
                );
                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.getPersistentTarget") +
                          SanBootView.res.getString("common.failed");
                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                
                // 无法得到current used partion info,退出
                allFinished = false;
                recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Assign drives End ###################@@ ");                
                return;
            }
            persistentTgtList = view.initor.mdb.getPersistentTgtList();
            
            // 获取用户所选的恢复版本
            snapList = selectSnapPane.getSelectedSnap();
            
            // 为所有的target vol分配盘符( 除了OS所在的target vol )
            size = snapList.size();
            for( i=0; i<size; i++ ){
                binder = (BindOfVolMapandSnap)snapList.get( i );
                if( binder.snap instanceof VolumeMapWrapper ){ // 用户直接选择了target volume
                    tid = ((VolumeMapWrapper)binder.snap).volMap.getVolTargetID();
                }else if( binder.snap instanceof ViewWrapper ){ // 选择了已有的view
                    tid = ((ViewWrapper)binder.snap).view.getTargetID();
                }else if( binder.snap instanceof MirrorDiskInfoWrapper ){ //用户直接选择了mirror disk
                    tid = ((MirrorDiskInfoWrapper)binder.snap).mdi.getTargetID();                  
                }else if( binder.snap instanceof CloneDiskWrapper ){ //选择了克隆盘
                    tid = ((CloneDiskWrapper)binder.snap).cloneDisk.getTarget_id();
                }else{ // 选择了snapwrapper
                    tid = ((BindOfSnapAndView)viewMap.get( binder.getMDI().getSrc_agent_mp() )).view.getTargetID();
                }
                
                iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + tid;
                newBootVerList.add( new Integer( tid ) );  // 保存下来�����
                
                size1 = oldList.size();
                tmpVect.removeAllElements();
                for( j=0; j<size1; j++ ){
                    part = (SystemPartitionForWin)oldList.elementAt( j ); 
                    tid1 = part.getTargetID();
                    
                    if( binder.getMDI().getSrc_agent_mp().toUpperCase().equals( part.getDiskLabel().toUpperCase() ) ){
                        if( !binder.getMDI().getSrc_agent_mp().toUpperCase().equals("C:\\") ){
                            tmpVect.addElement( new Integer(j) );
                            continue;
                        }else{
                            // 对于oldList中盘符为C的本地盘，在下面的"为所有未恢复的本地盘分配盘符"中
                            // 将会umount掉该盘(因为，有时网络启动后，会给该盘分配一个新盘符)
                        }
                    }
                    
                    if( tid1 != -1 ){
                        if( tid == tid1 ){
                            tmpVect.addElement( new Integer(j) );
                        }
                    }
                }
                // 真正从oldList中去掉这些
                size2 = tmpVect.size();
                for( k=size2-1; k>=0; k-- ){
                    oldList.removeElementAt( ( (Integer)tmpVect.elementAt( k ) ).intValue() );
                }
                
                // assign new driver 
                if( binder.getMDI().getSrc_agent_mp().toUpperCase().equals("C:\\") ){
                    continue; // OS 所在的C盘，不需要assign driver
                }
                
                // add lunmap for tid
                isOk = view.initor.mdb.addLunMap( tid, ip, "255.255.255.255", "rw", "", "", "", "" );
                if( isOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " " +
                            SanBootView.res.getString("common.ok") ,
                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                    );
                }else{
                    errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.lunmap") + " [ " + tid + " " + ip + " 255.255.255.255 rw ]" + " " +
                              SanBootView.res.getString("common.failed") ;
                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                    assignDriverStepOK = false;
                    continue;
                }
                
                drvLetter = binder.getMDI().getSrc_agent_mp().substring( 0,1 );
                isOk = view.initor.mdb.assignDriver( ip,port, 
                        view.initor.getTxIP(ip), ResourceCenter.ISCSI_LOGIN_PORT+"", iscsiVar, 
                        drvLetter
                );
                
                if( isOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+iscsiVar+" ] "+
                            SanBootView.res.getString("common.ok"), 
                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                    );
                    
                    // 先logout再login,可以保证卷的label能正确在windows explorer中显示出来
                    if( doLogoutTarget( ip,port, RunningTaskForDRPane.ASSIGN_DRIVER_ROW, iscsiVar,drvLetter ) ){
                        if( doLoginTarget( ip,port,RunningTaskForDRPane.ASSIGN_DRIVER_ROW, iscsiVar ) ){
                            if( !hasThisPersistentTarget( tid ) ){ 
                                // Add PersitentTarget for target vol
                                isOk = view.initor.mdb.addPersistentTarget( ip,port,iscsiVar );
                                if( isOk ){
                                    runPane.setLogOnTabpane(
                                        SanBootView.res.getString("FailoverWizardDialog.log.addPersistentTarget") +" [ "+iscsiVar+" ] "+
                                            SanBootView.res.getString("common.ok"), 
                                        RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                    );    
                                }else{
                                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.addPersistentTarget") +" [ "+iscsiVar+" ] "+
                                              SanBootView.res.getString("common.failed");
                                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                    assignDriverStepOK = false;
                                }
                            }
                        }else{
                            assignDriverStepOK = false;
                        }
                    }else{ // logout失败，也不影响系统使用，只是卷的label在windows exploer中不一定能正常显示
                        if( !hasThisPersistentTarget( tid ) ){ 
                            // Add PersitentTarget for target vol
                            isOk = view.initor.mdb.addPersistentTarget( ip,port,iscsiVar );
                            if( isOk ){
                                runPane.setLogOnTabpane(
                                    SanBootView.res.getString("FailoverWizardDialog.log.addPersistentTarget") +" [ "+iscsiVar+" ] "+
                                        SanBootView.res.getString("common.ok"), 
                                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                );    
                            }else{
                                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.addPersistentTarget") +" [ "+iscsiVar+" ] "+
                                          SanBootView.res.getString("common.failed");
                                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                assignDriverStepOK = false;
                            }
                        }
                    }
                }else{
                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+iscsiVar+" ] "+
                              SanBootView.res.getString("common.failed") + " " + view.initor.mdb.getErrorMessage();
                    runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                    writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                    assignDriverStepOK = false;
                }
            }
            
            // 去掉所有其他不需要的 persistent target
            size = persistentTgtList.size();
            for( i=0; i<size; i++ ){
                Integer perInt= (Integer)persistentTgtList.get(i);
                if( hasThisPersistentTarget1( perInt.intValue() ) ){
                    // remove PersitentTarget for target vol
                    String persistent = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" +perInt.intValue();
                    isOk = view.initor.mdb.delPersistentTarget( ip,port,persistent );
                    if( isOk ){
                        runPane.setLogOnTabpane(
                            SanBootView.res.getString("FailoverWizardDialog.log.delPersistentTarget") +" [ "+persistent+" ] "+
                                SanBootView.res.getString("common.ok"), 
                            RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                        );
                    }else{
                        errMsg = SanBootView.res.getString("FailoverWizardDialog.log.delPersistentTarget") +" [ "+persistent+" ] "+
                                  SanBootView.res.getString("common.failed");
                        runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                        writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                        assignDriverStepOK = false;
                    }
                }
            }
            
           // 将当前不需要的target的lunmap去掉
            size = oldBootVerList.bootVerList.size();
            if( size > 0 ){
                for( i=0; i<size; i++ ){
                    BindOfDiskLabelAndTid binder1 = (BindOfDiskLabelAndTid)oldBootVerList.bootVerList.get(i);
                    tid = binder1.getTid();
                    if( isRealTgt( tid ) ) continue; // 不去掉real target volume的lunmap,不管它是否被选择恢复
                    
                    if( !chkLunMap( tid ) ){
                        view.initor.mdb.delLunMap( tid, ip,"255.255.255.255", "rw" );
                    }
                }
                
                view.initor.mdb.listTargetDisk( ip, port );
            }
            
            // 为所有未恢复的本地盘分配盘符
            size = oldList.size();
            for( i=0; i<size; i++ ){
                part = (SystemPartitionForWin)oldList.elementAt( i );
                tid1 = part.getTargetID();
                disk = part.getDiskLabel().substring( 0,1 );
                
                if( tid1 == -1 ){ // local disk
                    if( part.getDiskLabel().toUpperCase().equals("C:\\") ){
                        // 将原来为本地盘C的分区umount掉（在某些情况下，网络启动后，本地盘C又被分配了一个新盘符
                        //，但是实际上这个盘是没有用的

                        // 执行umount命令�
                        isOk = view.initor.mdb.assignDriver( ip,port, "NULL","NULL",part.volInfo,"0" );
                        if( isOk ){
                            runPane.setLogOnTabpane(
                                SanBootView.res.getString("FailoverWizardDialog.log.umount") +" "+
                                    SanBootView.res.getString("common.ok"), 
                                RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                            );
                        }else{
                            errMsg = SanBootView.res.getString("FailoverWizardDialog.log.umount") +" "+
                                      SanBootView.res.getString("common.failed") + " " + view.initor.mdb.getErrorMessage();
                            runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                            writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                            assignDriverStepOK = false;
                        }
                        
                        continue;
                    }else{
                        isOk = view.initor.mdb.assignDriver( ip,port, "NULL","NULL",part.volInfo,disk );
                    }
                }else{ // iscsi target volume
                    isOk = view.initor.mdb.assignDriver( ip,port, 
                        view.initor.getTxIP(ip), ResourceCenter.ISCSI_LOGIN_PORT+"", part.iscsiVar,disk
                    );
                }
                
                if( isOk ){
                    if( tid1 == -1 ){
                        runPane.setLogOnTabpane(
                            SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ disk +" ] "+
                                SanBootView.res.getString("common.ok"), 
                            RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                        );
                    }else{
                        runPane.setLogOnTabpane(
                            SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ part.iscsiVar +" ] "+
                                SanBootView.res.getString("common.ok"), 
                            RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                        );
                    }
                }else{
                    if( tid1 == -1 ){
                        errMsg = SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ disk +" ] "+ 
                                  SanBootView.res.getString("common.failed") + " "+ view.initor.mdb.getErrorMessage();
                        runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                        writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                    }else{
                        errMsg = SanBootView.res.getString("FailoverWizardDialog.log.assignDriver") +" [ "+ part.iscsiVar +" ] "+
                                  SanBootView.res.getString("common.failed") +" "+ view.initor.mdb.getErrorMessage();
                        runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                        writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                    }

                    assignDriverStepOK = false;
                }
            }
            
            // 记录最新的恢复版本(对boothost而言是:修改volumemap中的vol_view_targetid; 对destagent而言是修改snapusage)
            SnapUsage su = null;
            int da_id = -1;
            int selVol_rootid = -1;
            String simpleMAC = DhcpClientInfo.getSimpleMac( this.bootMac );
SanBootView.log.debug( getClass().getName()," selected boot mac: "+ bootMac );            
            DestAgent da = getSelectedMC( bootMac ); 
            if( assignDriverStepOK ){
                //snapList = selectSnapPane.getSelectedSnap1();
                snapList = selectSnapPane.getSelectedSnap();
                size = snapList.size();
                for( i=0; i<size; i++ ){
                    binder = (BindOfVolMapandSnap)snapList.get(i);
                    key = binder.getMDI().getSrc_agent_mp();
                    selVol_rootid = binder.getMDI().getSnap_rootid();
                    
                    if( binder.snap instanceof SnapWrapper ){
                        bindsv = (BindOfSnapAndView)viewMap.get( key );
                        if( bindsv != null ){
                            tid = bindsv.view.getTargetID();
                            viewid = bindsv.view.getSnap_local_snapid();
                            snapid = ((SnapWrapper)binder.snap).snap.getSnap_local_snapid();
                            crttime = bindsv.view.getSnap_create_time();
                        }else{
                            tid = -1;
                            viewid = -1;
                            snapid = -1;
                            crttime = "";
                        }
                    }else if( binder.snap instanceof ViewWrapper ){
                        tid =((ViewWrapper)binder.snap).view.getTargetID();
                        crttime = ((ViewWrapper)binder.snap).view.getSnap_create_time();
                        viewid = ((ViewWrapper)binder.snap).view.getSnap_local_snapid();
                        snapid = -1;
                    }else if( binder.snap instanceof MirroredSnap ){
                        bindsv = (BindOfSnapAndView)viewMap.get( key );
                        tid = bindsv.view.getTargetID();
                        viewid = bindsv.view.getSnap_local_snapid();
                        snapid = ((MirroredSnap)binder.snap).snap.getSnap_local_snapid();
                        crttime = bindsv.view.getSnap_create_time();
                    }else if( binder.snap instanceof CloneDiskWrapper ){
                        tid = ((CloneDiskWrapper)binder.snap).cloneDisk.getTarget_id();
                        crttime = ((CloneDiskWrapper)binder.snap).cloneDisk.getCrt_time();
                        viewid = -2;
                        snapid = -1;
                    }else if( binder.snap instanceof MirrorDiskInfoWrapper ){
                        tid = ((MirrorDiskInfoWrapper)binder.snap).mdi.getTargetID();
                        crttime ="";
                        viewid = -1;
                        snapid = -1;
                    }else{ // VolumeMapWrapper
                        tid =((VolumeMapWrapper)binder.snap).volMap.getVolTargetID();
                        crttime="";
                        viewid = -1;
                        snapid = -1;
                    }
                    
                    // 用户指定了网卡地址或要进行网络启动的主机和初始化的原机不一样
                    if( da == null ){
                        if( newDa != null ){
                            da_id = newDa.getDst_agent_id();
                        }else{
                            newDa = new DestAgent(
                                        -1,
                                        ip,
                                        port,
                                        host.getSrc_agnt_os(),
                                        simpleMAC,
                                        "",
                                        BootHost.PROTECT_TYPE_MTPP
                                    );
                            if( view.initor.mdb.addNBH( newDa ) ){
                                newDa.setDst_agent_id( view.initor.mdb.getNewId() );
                                view.initor.mdb.addNBHIntoCache( newDa );
                                da_id = newDa.getDst_agent_id();
                                runPane.setLogOnTabpane(
                                    SanBootView.res.getString("FailoverWizardDialog.log.addNBH") +" "+
                                        SanBootView.res.getString("common.ok"), 
                                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                );
                            }else{
                                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.addNBH")+" "+
                                            SanBootView.res.getString("common.failed");
                                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                assignDriverStepOK = false;
                            }
                        }
                    }else{
                        da_id = da.getDst_agent_id();
                    }
SanBootView.log.info( getClass().getName()," (add snap-usage)destAgent id: " + da_id );                        
                    if( da_id != -1 ){
                        su = view.initor.mdb.getSnapUsageOnSomething( da_id, selVol_rootid, key );
                        if( !binder.isSel ){
                            tid = -1;
                            crttime ="";
                        }
                        
                        if( su == null ){
                            su = new SnapUsage(
                                        -1,
                                        da_id, 
                                        selVol_rootid,
                                        snapid,
                                        viewid,
                                        key,
                                        tid,
                                        crttime
                                    );
                            if( view.initor.mdb.addMSU( su ) ) {
                                su.setUsage_id( view.initor.mdb.getNewId() );
                                view.initor.mdb.addMSUIntoCache( su );
                                runPane.setLogOnTabpane(
                                    SanBootView.res.getString("FailoverWizardDialog.log.addSU") +" "+
                                        SanBootView.res.getString("common.ok"), 
                                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                );
                            }else{
                                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.addSU")+" "+
                                            SanBootView.res.getString("common.failed");
                                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                assignDriverStepOK = false;
                            }
                        }else{
                            if( view.initor.mdb.modMSU( su.getUsage_id(),snapid,viewid,tid,crttime ) ){
                                su.setSnap_local_id( snapid );
                                su.setSnap_view_local_id( viewid );
                                su.setSnapTid( tid );
                                su.setCrtTime( crttime );
                                runPane.setLogOnTabpane(
                                    SanBootView.res.getString("FailoverWizardDialog.log.modSU") +" "+
                                        SanBootView.res.getString("common.ok"), 
                                    RunningTaskForDRPane.ASSIGN_DRIVER_ROW
                                );
                            }else{
                                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.modSU")+" "+
                                            SanBootView.res.getString("common.failed");
                                runPane.setLogOnTabpane( errMsg,RunningTaskForDRPane.ASSIGN_DRIVER_ROW );
                                writeLogBuf( errMsg, RunningTaskForDRPane.ASSIGN_DRIVER_ROW  );
                                assignDriverStepOK = false;
                            }
                        }
                    }
                }
            }
            
            if( da_id > 0 ) {
                if( setDhcpPane.isAutoSetup() ){
                    view.initor.mdb.delFile( ResourceCenter.CLT_IP_CONF + "/"+ResourceCenter.PREFIX_DST_AGNT + da_id + ResourceCenter.CONF_3RD_DHCP );                          
                }else{
                    String conf = ResourceCenter.CLT_IP_CONF + "/"+ResourceCenter.PREFIX_DST_AGNT + da_id + ResourceCenter.CONF_3RD_DHCP;       
                    saveInfo( conf , "ip:"+setDhcpPane.getDhcpSetInfo().ip_3rd +"  nextsrv:"+ setDhcpPane.getDhcpSetInfo().nextServer_3rd );
                }
            }
            
            if( assignDriverStepOK ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ), RunningTaskForDRPane.ASSIGN_DRIVER_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Assign drives End ###################@@ ");

        // 6. start services
        startServStepOK = true;
        runPane.setCurTabPane( RunningTaskForDRPane.START_SERV_ROW );
SanBootView.log.info( getClass().getName()," @@#################  Start Service Begin ###################@@ ");    

        if( taskConfPane.isFinishJob( 4 ) ){
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.START_SERV_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notNeedRun"),
                RunningTaskForDRPane.START_SERV_ROW
            );
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING), RunningTaskForDRPane.START_SERV_ROW , 2
            );
            size = stopServList.size();
            for( i=0; i<size; i++ ){
                item = stopServList.elementAt( i );
                
                if( item instanceof Service ){
                    servName = ((Service)item).getServName();
                }else{
                    servName = ((ServiceMap)item).getServName();
                }
                
                retryCnt1 = 0;
                while( retryCnt1 < 3 ){
                    isOk = view.initor.mdb.doStartService( ip,port,"start",servName );
                    if( isOk ){
                        break;
                    }else{
                        retryCnt1++;
                    }
                }
                
                if( isOk ){
                    runPane.setLogOnTabpane(
                        SanBootView.res.getString("FailoverWizardDialog.log.startService") +" [ "+ servName +" ] "+
                            SanBootView.res.getString("common.ok"), 
                        RunningTaskForDRPane.START_SERV_ROW
                    );
                }else{
                    errMsg = SanBootView.res.getString("FailoverWizardDialog.log.startService") +" [ "+ servName +" ] "+
                              SanBootView.res.getString("common.failed");
                    runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.START_SERV_ROW );
                    writeLogBuf( errMsg, RunningTaskForDRPane.START_SERV_ROW  );
                    startServStepOK = false;
                }
            }

            if( startServStepOK ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.START_SERV_ROW , 2
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.START_SERV_ROW , 2
                );
            }
        }
SanBootView.log.info( getClass().getName()," @@#################  Start Service End ###################@@ ");

        // 7. reboot host
        rebootStepOK = true;
        runPane.setCurTabPane( RunningTaskForDRPane.REBOOT_ROW );
        runPane.setTaskStatus(
            InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_RUNNING ), RunningTaskForDRPane.REBOOT_ROW , 2
        );
SanBootView.log.info( getClass().getName()," @@#################  Reboot host begin ###################@@ ");

        if ( seleDRReoverMode.isAutoReboot() ){
            isOk = view.initor.mdb.rebootHost( ip,port );
            if( isOk ){
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.REBOOT_ROW , 2
                );
                runPane.setLogOnTabpane(
                    SanBootView.res.getString("FailoverWizardDialog.log.submitRebootOK"), 
                    RunningTaskForDRPane.REBOOT_ROW
                );
            }else{
                runPane.setTaskStatus(
                    InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL), RunningTaskForDRPane.REBOOT_ROW , 2
                );
                errMsg = SanBootView.res.getString("FailoverWizardDialog.log.submitRebootFailed");
                runPane.setLogOnTabpane( errMsg, RunningTaskForDRPane.REBOOT_ROW );
                writeLogBuf( errMsg, RunningTaskForDRPane.REBOOT_ROW  );
                rebootStepOK = false;
            }
        }else{
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_END), RunningTaskForDRPane.REBOOT_ROW , 2
            );
            runPane.setLogOnTabpane(
                SanBootView.res.getString("FailoverWizardDialog.log.notreboot"), 
                RunningTaskForDRPane.REBOOT_ROW
            );
        }
SanBootView.log.info( getClass().getName()," @@#################  Reboot host End ###################@@ ");

        // 判断是否全部成功
        allFinished = ( stopServStepOK && loadInfoStepOK && assignDriverStepOK && startServStepOK && rebootStepOK );
        
        // 8. 保存UWS report( 不考虑其是否成功,有可能写入server上的report库中，或者写到了GUI所在的主机上)
        recordUWSRpt( allFinished );
SanBootView.log.info( getClass().getName()," @@#################  Migration system from local disk to iSCSI End ###################@@ ");        
    }
    
    private boolean hasThisPersistentTarget( int tid ){
        Integer persistent;
        
        int size = persistentTgtList.size();
        for( int i=0; i<size; i++ ){
            persistent = (Integer)persistentTgtList.get(i);
            if( persistent.intValue() == tid ){
                persistentTgtList.remove(i);
                return true;
            }
        }
        
        return false;
    }
    
    private boolean hasThisPersistentTarget1( int tid ){
        BindOfDiskLabelAndTid binder;
        
        int size = oldBootVerList.bootVerList.size();
        for( int i=0; i<size; i++ ){
            binder = (BindOfDiskLabelAndTid)oldBootVerList.bootVerList.get( i );
            if( binder.getTid()== tid ){
                return true;
            }
        }
        
        return false;
    }
    
    private boolean chkLunMap( int tid ){
        Integer _tgt;
        
        int size = newBootVerList.size();
        for( int i=0; i<size; i++ ){
            _tgt = (Integer)newBootVerList.get(i);
            if( _tgt.intValue() == tid ){
                return true;
            }
        }
        
        return false;
    }
    
    private boolean isRealTgt( int tid ){
        int size = tgtList.size();
        for( int i=0; i<size; i++ ){
            MirrorDiskInfo vol = (MirrorDiskInfo)tgtList.get(i);
            if( vol.getTargetID() == tid ){
                return true;
            }
        }
        
        return false;
    }
    
    // source agent的网启版本信息与boothost的不一样。而且sdhm目前
    // 不需要srcagent的网启版本信息
    private String getTaskMsgForSuccess(){
        return SanBootView.res.getString("FailoverWizardDialog.error.drRecoverOK");
    }

    private String getDhcpIP(){
        boolean useOdyDhcp = !( host.isISCSIHBABoot() ) && setDhcpPane.isAutoSetup();
        DhcpClientInfo  dhcpInfo = setDhcpPane.getDhcpSetInfo();
        if( useOdyDhcp ){
            return dhcpInfo.ip;
        }else{
            if( !host.isISCSIHBABoot() ){
                return dhcpInfo.ip_3rd;
            }else{
                return selectNetBootModePane.getBootIPForIscsiHBA();
            }
        }
    }

    private void recordUWSRpt( boolean initOk ){
        String msg;
        
        UWSReport rpt = new UWSReport();

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime( date );
        
        int year  = today.get( Calendar.YEAR );
        String stime = year + "";
        int month = today.get( Calendar.MONTH ) + 1;
        if( month<10 ){
            stime+= "0" + month;
        }else{
            stime+=month;
        }
        int day   = today.get( Calendar.DAY_OF_MONTH );
        if( day <10 ){
            stime+= "0" + day;
        }else{
            stime+=day;
        }
        int hour  = today.get(Calendar.HOUR_OF_DAY);
        if( hour <10 ){
            stime+= "0" + hour;
        }else{
            stime+=hour;
        }
        int min   = today.get(Calendar.MINUTE);
        if( min <10 ){
            stime +="0"+min;
        }else{
            stime+=min;
        }
        int sec   = today.get(Calendar.SECOND);
        if( sec <10 ){
            stime+="0"+sec;
        }else{
            stime+=sec;
        }
        
        rpt.setSTime( stime ); 
        rpt.setClntName( host.getSrc_agnt_ip() );

        rpt.setTaskClntId(  host.getSrc_agnt_id() );
        rpt.setTask_clnt_type(  DestAgent.TYPE_SRC_AGNT );
        rpt.setTask_clnt_mac( DhcpClientInfo.getMacStr( this.bootMac ) );
        rpt.setTask_clnt_dhcp_ip( this.getDhcpIP() );
        
        rpt.setTType( UWSReport.TASK_TYPE_L2I );
        rpt.setTResult( initOk? UWSReport.TASK_RESULT_END:UWSReport.TASK_RESULT_FAIL );
        
        msg = logBuf.toString();
        if( msg.getBytes().length > 1014 ){
            byte[] arr = msg.getBytes();
            String newmsg = new String(arr,0,1014 );
            rpt.setTaskMsg( initOk? this.getTaskMsgForSuccess() : newmsg );
        }else{
            rpt.setTaskMsg( initOk? this.getTaskMsgForSuccess() : msg );
        }
        
        String fname = generateUWSRptTmpFile( rpt.prtMe() );
        if( fname != null ){
            if( !view.initor.mdb.addReport( fname ) ){
                // save in local host 
                saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_L2I_RPT + stime );
            }
        }else{
            // save in local host
            saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_L2I_RPT + stime );
        }
    }
    
    private String generateUWSRptTmpFile( String contents ){
        String fname;
        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_USWTMP );
        if( tmpFile == null ){
            return null; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            tmpFile.delete();
            return null;
        }    
        
        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }
    
    public void saveUWSRpt( String contents,String fname ){
        try{
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File( path );
            
            f1.createNewFile();
            
            PrintWriter out = new PrintWriter( new FileWriter(f1),true );
            out.print( contents );
            out.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    private boolean overed = false;
    synchronized boolean isOver(){
        return overed;
    }

    synchronized void setOver(boolean val){
        overed = val;
    }
     
    private int phrase = 0;
    public String getPhraseIcon(){
        String str = "";
        switch( phrase ){
            case 0:
                str = "|";
                break;
            case 1:
                str = "/";
                break;
            case 2:
                str = "--";
                break;
            case 3:
                str = "\\";
                break;
            default:
                str = "|";
                break;
        }

        phrase = (phrase+1)%4;
        return str;
    }

    Runnable setVal = new Runnable(){
        public void run(){
            runPane.setTaskStatus( getPhraseIcon() +"",RunningTaskForDRPane.CONNECT_AGENT_ROW ,2 );
        }
    };
    
    Runnable process = new Runnable(){
        public void run(){
            while( !isOver() ){
                try{
                    SwingUtilities.invokeAndWait( setVal );

                    Thread.sleep(200);
                } catch( Exception e){
                    e.printStackTrace();
                }
            }
        }
    };
    
    public boolean doLoginTarget( String cltIP,int cltPort,int row,String iscsiVar ){
        boolean isOk = view.initor.mdb.loginTarget( cltIP,cltPort,iscsiVar );
        if( !isOk ){
            errMsg =  SanBootView.res.getString("InitBootHostWizardDialog.log.loginTarget") + " [ "+ iscsiVar +" ]"+
                       SanBootView.res.getString("common.failed");
            runPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
            runPane.setTaskStatus(
                InitTask.getTaskStatusStr( InitTask.INIT_TASK_STA_FAIL ),row, 2
            );
        }
        
        return isOk;
    }
    
    public boolean doLogoutTarget( String cltIP,int cltPort,int row,String iscsiVar,String osDrvLetter ){
        boolean isOk = view.initor.mdb.logoutTarget( cltIP,cltPort,iscsiVar,osDrvLetter );
        if( !isOk ){
            errMsg = SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + " [ "+ iscsiVar +" ]"+
                       SanBootView.res.getString("common.failed");
            runPane.setLogOnTabpane( errMsg,row );
            writeLogBuf( errMsg, row );
        }else{
            runPane.setLogOnTabpane(
                SanBootView.res.getString("InitBootHostWizardDialog.log.logoutTarget") + " [ "+ iscsiVar +" ]"+
                  SanBootView.res.getString("common.ok") ,
                row
            );
        }
        
        return isOk;
    }
    
    private DestAgent getSelectedMC( String mac ){
        ArrayList<NetCard> list = new ArrayList<NetCard>(1);
        NetCard nc = new NetCard();
        nc.mac = mac;
        list.add( nc );
        return getSelectedMC( list );
    }
    
    private DestAgent getSelectedMC( Object nc ){
        ArrayList<Object> list = new ArrayList<Object>(1);
        list.add( nc );
        return getSelectedMC( list );
    }
    
    private DestAgent getSelectedMC( ArrayList netCardList ){
        int i,j,size,size1;
        Object nc;
        NetCard wnc;
        UnixNetCard unc;
        String mac;
        DestAgent da;
        
        ArrayList netBootedHostList = getNetbootedHostOnSrcAgnt( host.getSrc_agnt_id() );
        size = netCardList.size();
        for( i=0; i<size; i++ ){
            nc = netCardList.get(i);
            if( nc instanceof NetCard ){
                wnc = (NetCard)nc;
                mac = DhcpClientInfo.getSimpleMac( wnc.mac );
            }else{
                unc = (UnixNetCard)nc;
                mac = DhcpClientInfo.getSimpleMac( unc.mac );
            }
            
            size1 = netBootedHostList.size();
SanBootView.log.debug( getClass().getName(),"netbooted host size: "+ size1 +" mac: "+ mac );            
            for( j=0; j<size1; j++ ){
                da = (DestAgent)netBootedHostList.get(j);
                if( da.getDst_agent_mac().equals( mac ) ){
SanBootView.log.debug( getClass().getName(),"11111111111111 "+ da.getDst_agent_ip() );                      
                    return da;
                }
            }
        }
        
        return null;
    }
    
    public ArrayList getNetbootedHostOnSrcAgnt( int srcAgntID ){
        boolean isok = view.initor.mdb.updateMDI();
        if( !isok ){
            return new ArrayList();
        }else{
            ArrayList list = view.initor.mdb.getMDIFromCacheOnSrcAgntID( srcAgntID );
            int size = list.size();
            ArrayList rootidList = new ArrayList( size );
            for( int i=0; i<size; i++ ){
                MirrorDiskInfo mdi = (MirrorDiskInfo)list.get(i); 
                rootidList.add( new Integer( mdi.getSnap_rootid() ) );
            }
            
            ArrayList ret = view.getNetbootedHostOnHost( rootidList );
            return ret;
        }
    }
       
    private boolean saveInfo( String confile,String contents ){        
        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_IPINFO );
        if( tmpFile == null ){           
            JOptionPane.showMessageDialog(this,SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed") );
            return false; 
        }
        
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            JOptionPane.showMessageDialog(this,SanBootView.res.getString("common.errmsg.sendFileFailed") );        
            tmpFile.delete();
            return false;
        }   
           
        tmpFile.delete();
            
        // 将tmpFile move to profile dir
        boolean isOk = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile.getName(), confile      
        );
        
        return isOk;   
    }
}

// Crtview1的处理过程可以移到 realDRRecover 中去，除了C盘(和C盘的lunmap)不行
class CrtView1 extends Thread{
    FailoverForSrcAgntWizardDialog diag;
    ProgressDialog pdiag;
    Object[] snaps;
    HashMap map;
    SanBootView view;
    String ip,bootMac,targetSrvName;
    SourceAgent host;
    int osTid=-1;
    boolean delLunMap = false; // 是否要把osTid的lunmap给去掉
    boolean allFinish = true;
    boolean getSessionOk;
    boolean getSessionRealOk = false;
    boolean isNetBootOnLocalHost = true;
    boolean isSkip = false;
    
    public CrtView1( 
            FailoverForSrcAgntWizardDialog diag,
            ProgressDialog pdiag,
            Object[] snaps,
            HashMap map,
            SanBootView view,
            String bootMac,
            SourceAgent host,
            String ip,
            String targetSrvName,
            boolean isNetBootOnLocalHost,
            boolean isSkip           
    ){
        this.diag  = diag;
        this.pdiag = pdiag;
        this.snaps = snaps;
        this.map = map;
        this.view = view;
        this.bootMac = bootMac;
        this.host = host;
        this.ip = ip;
        this.targetSrvName = targetSrvName;
        this.isNetBootOnLocalHost = isNetBootOnLocalHost;
        this.isSkip = isSkip;
    }
    
    Runnable close = new Runnable(){
        public void run(){
            pdiag.dispose();
        }
    };
    
    @Override public void run(){
        int i,tid,size;
        boolean isOk;
        BindOfVolMapandSnap bindts,osvs=null;
        BindOfSnapAndView bindsv;
        Snapshot selSnap,tmpsnap;
        View selView,newView;
        String key,letter,viewName,args;
        MirrorDiskInfo mdi;
        CloneDisk selCloneDisk;
        
        getSessionOk = view.initor.mdb.getIscsiSessionList();
        if( getSessionOk ){
            getSessionRealOk = view.initor.mdb.getIscsiSessionIsReallyOk();
        }
        
        String bootMacForUnix = DhcpClientInfo.getMacStr( bootMac );
        String bootMacForWin = DhcpClientInfo.getMacStrForWin( bootMac );
        String simpleMac = NetCard.getSimpleMac( bootMacForWin );
System.out.println(" bootMac: "+ bootMac +" bootMacForUnix: "+ bootMacForUnix + " bootMacForWin: "+ bootMacForWin +" simpleMac: "+simpleMac );
        
        size = snaps.length;
        for( i=0; i<size; i++ ){
            bindts = (BindOfVolMapandSnap)snaps[i];
            key = bindts.getMDI().toString();
            
            letter = key.substring( 0,1 );
            if( letter.toUpperCase().equals("C") ){
                osvs = bindts;
            }
            viewName = ResourceCenter.NET_START_VIEW + letter;
            bindsv = (BindOfSnapAndView)map.get( key );

            if( bindts.snap == null ){
                JOptionPane.showMessageDialog( pdiag, SanBootView.res.getString("FailoverWizardDialog.error.verisnull") +" : "+ key );
                this.allFinish = false;
                break;
            }

            if( bindts.snap instanceof SnapWrapper ){
                selSnap = ((SnapWrapper)bindts.snap).snap; 
                
                if( bindts.isSel ){    
                    if( bindsv != null ){ // hashmap中已经有了
                        if( bindsv.snap instanceof Snapshot ){
                            tmpsnap = (Snapshot)bindsv.snap;
                            if( tmpsnap.getSnap_root_id() == selSnap.getSnap_root_id() &&
                                tmpsnap.getSnap_local_snapid() == selSnap.getSnap_local_snapid() ){
                                // 之前已经为该快照生成view了
                            }else{
                                // 之前为该盘生成的view不对应现在所选的快照，删除它，然后再创建一个
                                tid = bindsv.view.getTargetID();
                                delLunMap( tid );
                                view.initor.mdb.delView( bindsv.view ); // 不管结果
                                map.remove( key );
                                
                                isOk = view.initor.mdb.addView( viewName, selSnap.getSnap_root_id(), selSnap.getSnap_local_snapid() );
                                if( !isOk ){
                                    JOptionPane.showMessageDialog(pdiag,
                                        SanBootView.res.getString("FailoverWizardDialog.error.crtView")+" : [ SnapID: "+selSnap.getCreateTimeStr()+" ]"
                                    );
                                    allFinish = false;
                                }else{
                                    newView = view.initor.mdb.getCrtView();
                                    isOk = addLunMap( newView.getTargetID() );
                                    if( !isOk ){
                                        JOptionPane.showMessageDialog(pdiag,
                                            SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                                        );
                                        allFinish = false;
                                        view.initor.mdb.delView( newView );
                                    }else{
                                        bindsv = new BindOfSnapAndView();
                                        bindsv.snap = selSnap;
                                        bindsv.view = newView;
                                        map.put( key, bindsv );
                                    }
                                }
                            }
                        }else{
                            map.remove( key );
                            
                            isOk = view.initor.mdb.addView( viewName, selSnap.getSnap_root_id(), selSnap.getSnap_local_snapid() );
                            if( !isOk ){
                                JOptionPane.showMessageDialog(pdiag,
                                    SanBootView.res.getString("FailoverWizardDialog.error.crtView")+" : [ SnapID: "+selSnap.getCreateTimeStr()+" ]"
                                );
                                allFinish = false;
                            }else{
                                newView = view.initor.mdb.getCrtView();
                                isOk = addLunMap( newView.getTargetID() );
                                if( !isOk ){
                                    JOptionPane.showMessageDialog(pdiag,
                                        SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                                    );
                                    allFinish = false;
                                    view.initor.mdb.delView( newView );
                                }else{
                                    bindsv = new BindOfSnapAndView();
                                    bindsv.snap = selSnap;
                                    bindsv.view = newView;
                                    map.put( key, bindsv );
                                }
                            }
                        }    
                    }else{
                        // 之前没有为该盘生成view,创建一个
                        isOk = view.initor.mdb.addView( viewName, selSnap.getSnap_root_id(), selSnap.getSnap_local_snapid() );
                        if( !isOk ){
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("FailoverWizardDialog.error.crtView")+" : [ SnapID: "+selSnap.getCreateTimeStr()+" ]"
                            );
                            allFinish = false;
                        }else{
                            newView = view.initor.mdb.getCrtView();
                            isOk = addLunMap( newView.getTargetID() );
                            if( !isOk ){
                                JOptionPane.showMessageDialog(pdiag,
                                    SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                                );
                                allFinish = false;
                                view.initor.mdb.delView( newView );
                            }else{
                                bindsv = new BindOfSnapAndView();
                                bindsv.snap = selSnap;
                                bindsv.view = newView;
                                map.put( key, bindsv );
                            }
                        }
                    }
                }else{ //  没有选择恢复该盘，将之前为它创建的view删除（如果有的话）
                    if( bindsv != null ){
                        // 删除这个view
                        if( bindsv.snap instanceof Snapshot ){
                            tid = bindsv.view.getTargetID();
                            if( delLunMap( tid ) && view.initor.mdb.delView( bindsv.view ) ){
                                map.remove( key );
                            }
                        }
                    }
                }
            }else if( bindts.snap instanceof ViewWrapper ){
                selView = ( (ViewWrapper)bindts.snap ).view;
                
                if( bindts.isSel ){    
                    if( bindsv != null ){  // hashmap中已经有了
                        if( bindsv.snap instanceof Snapshot ){
                            // 删除之前创建的这个view
                            tid = bindsv.view.getTargetID();
                            delLunMap( tid );
                            view.initor.mdb.delView( bindsv.view ); // 不管结果
                        }
                        
                        map.remove( key );
                        
                        checkViewUsage( selView.getTargetID() );
                        if( addLunMap( selView.getTargetID() ) ){
                            bindsv = new BindOfSnapAndView();
                            bindsv.snap = selView;
                            bindsv.view = null;
                            map.put( key, bindsv );
                        }else{
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                            );
                            allFinish = false;
                        }
                    }else{
                        checkViewUsage( selView.getTargetID() ); 
                        if( addLunMap( selView.getTargetID() ) ){
                            bindsv = new BindOfSnapAndView();
                            bindsv.snap = selView;
                            bindsv.view = null;
                            map.put( key, bindsv );
                        }else{
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("FailoverWizardDialog.error.addLunmap")
                            );
                            allFinish = false;
                        }
                    }
                }else{ //  没有选择恢复该盘，将之前为它创建的view删除（如果有的话）
                    if( bindsv != null ){
                        // 删除这个view
                        if( bindsv.snap instanceof Snapshot ){
                            tid = bindsv.view.getTargetID();
                            if( delLunMap( tid ) && view.initor.mdb.delView( bindsv.view ) ){
                                map.remove( key );
                            }
                        }
                    }
                }
            }else if( bindts.snap instanceof CloneDiskWrapper ){
                selCloneDisk = ((CloneDiskWrapper)bindts.snap).cloneDisk;

                if( bindts.isSel ){
                    if( bindsv != null ){ // hashmap中已经有了
                        if( bindsv.snap instanceof Snapshot ){
                            // 删除之前创建的这个view
                            //tid = bindsv.view.getTargetID();
                            //delLunMap( tid );
                            view.initor.mdb.delView( bindsv.view ); // 不管结果
                        }

                        map.remove( key );
                        checkViewUsage( selCloneDisk.getTarget_id() );

                        bindsv = new BindOfSnapAndView();
                        bindsv.snap = selCloneDisk;
                        bindsv.view = null;
                        map.put( key, bindsv );
                    }else{
                        checkViewUsage( selCloneDisk.getTarget_id() );
                        bindsv = new BindOfSnapAndView();
                        bindsv.snap = selCloneDisk;
                        bindsv.view = null;
                        map.put( key, bindsv );
                    }
                }else{ //  没有选择恢复该盘，将之前为它创建的view删除（如果有的话）
                    if( bindsv != null ){
                        // 删除这个view
                        if( bindsv.snap instanceof Snapshot ){
                            tid = bindsv.view.getTargetID();
                            if( delLunMap(tid) && view.initor.mdb.delView( bindsv.view ) ){
                                map.remove( key );
                            }
                        }
                    }
                }
            }else{ //  bindts.snap is MirrorDiskInfoWrapper
                mdi = ((MirrorDiskInfoWrapper)bindts.snap).mdi;
                                
                if( bindts.isSel ){    
                    if( bindsv != null ){ // hashmap中已经有了
                        if( bindsv.snap instanceof Snapshot ){
                            // 删除之前创建的这个view
                            //tid = bindsv.view.getTargetID();
                            //delLunMap( tid );
                            view.initor.mdb.delView( bindsv.view ); // 不管结果
                        }
                        
                        map.remove( key );
                        bindsv = new BindOfSnapAndView();
                        bindsv.snap = mdi;
                        bindsv.view = null;
                        map.put( key, bindsv );
                    }else{
                        bindsv = new BindOfSnapAndView();
                        bindsv.snap = mdi;
                        bindsv.view = null;
                        map.put( key, bindsv );
                    }
                }else{ //  没有选择恢复该盘，将之前为它创建的view删除（如果有的话）
                    if( bindsv != null ){
                        // 删除这个view
                        if( bindsv.snap instanceof Snapshot ){
                            tid = bindsv.view.getTargetID();
                            //if( delLunMap(tid) && view.initor.mdb.delView( bindsv.view ) ){
                            if( view.initor.mdb.delView( bindsv.view ) ){
                                map.remove( key );
                            }
                        }
                    }
                }
            }
        }
              
        // 修改iboot启动 target id
        if( allFinish ){ 
            if( osvs.snap instanceof SnapWrapper ){ // snapshot
                bindsv = ( BindOfSnapAndView )map.get( osvs.getMDI().toString() );
                osTid = bindsv.view.getTargetID(); // 一定在map中有
                delLunMap = true;
            }else if( osvs.snap instanceof ViewWrapper ){ // view
                osTid = ((ViewWrapper)osvs.snap).view.getTargetID();
            }else if( osvs.snap instanceof CloneDiskWrapper ){ // clonedisk
                osTid = ((CloneDiskWrapper)osvs.snap).cloneDisk.getTarget_id();
            }else{ // mirrordiskinfo
                osTid = ((MirrorDiskInfoWrapper)osvs.snap).mdi.getTargetID();
            }
            
            if( !addLunMapForOS( osTid ) ){ // 必须为C盘事先进行lunmap
                JOptionPane.showMessageDialog(pdiag,
                    SanBootView.res.getString("FailoverWizardDialog.error.addLunmapForOS")
                );
                allFinish = false;
            }else{
                if( host.isEmBoot() ){
                    isOk = view.initor.mdb.listIboot();
                    if( isOk ){
                        if( view.initor.mdb.getFromVectorOnMac( simpleMac ) != null ){
                            isOk = view.initor.mdb.modIboot( simpleMac,IBootObj.IBOOT_TGTNAME,ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + osTid );
                        }else{
                            isOk = view.initor.mdb.addIboot( simpleMac, view.initor.getTxIP(host.getSrc_agnt_ip()), osTid );
                        }
                        if( isOk ){
                            isOk = view.initor.mdb.listIboot();
                            if( isOk ){
                                if( view.initor.mdb.getFromVectorOnMac( simpleMac ) == null ){
    SanBootView.log.error( getClass().getName(),"Can't find record from iboot config abount MAC: "+ simpleMac );                   
                                    JOptionPane.showMessageDialog(pdiag,
                                        SanBootView.res.getString("FailoverWizardDialog.log.modBootRec")
                                    );
                                    allFinish = false;
                                }
                            }else{
                                JOptionPane.showMessageDialog(pdiag,
                                    SanBootView.res.getString("FailoverWizardDialog.log.modBootRec")
                                );
                                allFinish = false;
                            }
                        }else{
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("FailoverWizardDialog.log.modBootRec")
                            );
                            allFinish = false;
                        }
                    }else{
                        JOptionPane.showMessageDialog(pdiag,
                            SanBootView.res.getString("FailoverWizardDialog.log.modBootRec")
                        );
                        allFinish = false;
                    }
                }
            }
        }
        
        if( allFinish && !isSkip ){
            boolean useOdyDhcp = !( host.isISCSIHBABoot() ) && diag.setDhcpPane.isAutoSetup();    
            DhcpClientInfo  dhcpInfo = diag.setDhcpPane.getDhcpSetInfo();
            if( useOdyDhcp ){
                // 先删除这个dhcp conf
                isOk = view.initor.dhcpdb.dhcpOperation(
                    ResourceCenter.BIN_DIR + "dhcp_set.sh delcli -p " + simpleMac
                );
                if( isOk ){
                    try{
                        Thread.sleep( 5000 ); // 睡5秒钟，否则连续执行delcli和addcli会造成dhcpd起不来
                    }catch(Exception ex){}
                                        
                    boolean hasdns = ( !dhcpInfo.dns.equals("") );
                    boolean hasgw = ( !dhcpInfo.defgw.equals("") );
                    String ibootSrv = dhcpInfo.nextServer;
                    args = "";
                    if( hasdns ){
                        args+=" -d " +dhcpInfo.dns;
                    }
                    if( hasgw ){
                        args+=" -g "+dhcpInfo.defgw;
                    }         
                    args += " -i "+dhcpInfo.ip + " -p " + simpleMac +" -s "+dhcpInfo.subnet + " -x "+ibootSrv + " -ostype windows";
                    
                    if( host.isIBoot() ){                       
                        String iboot_dhcp_ip1 ="";
                        if( diag.setDhcpPane.isAutoSetup() ){
                            iboot_dhcp_ip1 = dhcpInfo.ip;
                        }else{
                            iboot_dhcp_ip1 = dhcpInfo.ip_3rd;
                        }
                        view.initor.mdb.addLunMap( osTid, iboot_dhcp_ip1, "255.255.255.255", "rw", "", "", "", "" );
                        String tn = ResourceCenter.ISCSI_PREFIX + targetSrvName + ":" + osTid;
                        args += " -boottype iboot  -bootserverip " + ibootSrv +" -boottargetid " + tn;
                    }
                    
                    isOk = view.initor.dhcpdb.dhcpOperation(
                        ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args
                    ); 
                    if( isOk ){
                        isOk = view.initor.dhcpdb.getClientFromDhcp();
                        if( isOk ){
                            if( view.initor.dhcpdb.getSelClntOnMac( bootMacForUnix ) == null ){
SanBootView.log.error( getClass().getName(),"Error: not found record in dhcp config about MAC: " + bootMacForUnix );  
                                JOptionPane.showMessageDialog(pdiag,
                                    SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                          SanBootView.res.getString("common.failed")
                                );
                                allFinish = false;
                            }
                        }else{
                            JOptionPane.showMessageDialog(pdiag,
                                SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                      SanBootView.res.getString("common.failed")
                            );
                            allFinish = false;
                        }
                    }else{
                        JOptionPane.showMessageDialog(pdiag,
                            SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                                  SanBootView.res.getString("common.failed")
                        );
                        allFinish = false;
                    }
                }else{
                    JOptionPane.showMessageDialog(pdiag,
                        SanBootView.res.getString("InitNWinHostWizardDialog.log.saveDhcpConf")+" "+
                              SanBootView.res.getString("common.failed")
                    );
                    allFinish = false;
                }
            }
        }
        
        try{
            SwingUtilities.invokeAndWait( close );
        }catch( Exception ex ){
            ex.printStackTrace();
        }
    }
    
    public int getOSTid(){
        return osTid;
    }
    
    public boolean isShouldRmOsTidLunMap(){
        return delLunMap;
    }
    
    private void checkViewUsage( int tid ){
        if( getSessionOk ){
            ISCSISessionObj session = view.initor.mdb.isExistActSessionOnTid( tid,ip );
            if( session != null ){
                JOptionPane.showMessageDialog(pdiag,
                    SanBootView.res.getString("FailoverWizardDialog.error.existActiveSession") + tid
                );
                allFinish = false;
            }else{
                if( !getSessionRealOk ){
                    if( !makeSureViewUsage( tid ) ){
                        allFinish = false;
                    }
                }
            }
        }else{
            if( !makeSureViewUsage( tid ) ){
                allFinish = false;
            }
        }
    }
    
    private boolean makeSureViewUsage( int tid ){
        int ret = JOptionPane.showConfirmDialog(
            view,
            SanBootView.res.getString("FailoverWizardDialog.confirm2") +" [ " + tid + " ] " +
                SanBootView.res.getString("FailoverWizardDialog.confirm3"),
            SanBootView.res.getString("common.confirm"),  //"Confirm",
            JOptionPane.OK_CANCEL_OPTION
        );
        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
            return false;
        }else{
            return true;
        }
    }
    
    private boolean addLunMapForOS( int tid ){
        return view.initor.mdb.addLunMap( tid, ip, "255.255.255.255", "rw", "", "", "", "" );
    }
    
    private boolean addLunMap( int tid ){
        // 必须在realDRRecover中做，否则用户点击了cancel键，就会在agent的initiator中出现不必要的tgt disk
        return true;
        //return view.initor.mdb.addLunMap( tid, ip, "255.255.255.255", "rw", "", "", "", "" );
    }

    private boolean delLunMap( int tid ){
        // 必须在realDRRecover中做，否则用户点击了cancel键，就会在agent的initiator中出现不必要的tgt disk
        return true;
        //return view.initor.mdb.delLunMap( tid, ip,"255.255.255.255", "rw" );
    }
}
