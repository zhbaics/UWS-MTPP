/*
 * SelectUnixNetCardPane.java
 *
 * Created on 2006/12/29,�AM�9:52
 */

package guisanboot.ui;

import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.util.*;
import guisanboot.data.*;
import guisanboot.ui.multiRenderTable.*;

/**
 *
 * @author  Administrator
 */
public class SelectUnixNetCardPane extends javax.swing.JPanel {
    
    /** Creates new form SelectBootHostPane */
    public SelectUnixNetCardPane() {
        initComponents();
    }
    
    public SelectUnixNetCardPane( SanBootView view ){
        this();
        myInit( view );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 70));
        jScrollPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 25));
        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    ////GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    ////GEN-END:variables
    
    Object[] header;
    Object[] label;
    Vector ipListVect = null;
    JTableZ table;
    SanBootView view;
    MyListSelectionListener1 myListener;
    WizardDialogSample wizardDiag;
    
    private void myInit( SanBootView _view ){
        view = _view;
        
        jTextArea1.setText(
            SanBootView.res.getString("InitBootHostWizardDialog.tip5")
        );
    }
    
    public void setupNetCardTable( ArrayList cardList ){
        int i;
        Object[][] cardTableData;
        Vector ipList;
        MyComboBoxEditor[] editorArry;
        MyComboBoxRender[] renderArry;
        
        ipListVect = new Vector();
        int cardNum = cardList.size();
        cardTableData = new Object[cardNum][4]; 
        
        header = new Object[4]; //isSel?,interface,mac
        label = new Object[cardNum]; 
        editorArry = new MyComboBoxEditor[cardNum];
        renderArry = new MyComboBoxRender[cardNum];
        
        header[0] = SanBootView.res.getString("SelectNetCardPane.table.netcard.isSel");
        header[1] = SanBootView.res.getString("SelectNetCardPane.table.netcard.interface");
        header[2] = SanBootView.res.getString("SelectNetCardPane.table.netcard.ip");
        header[3] = SanBootView.res.getString("SelectNetCardPane.table.netcard.mac");
        
        for( i=0; i<cardNum; i++ ){
            UnixNetCard card = (UnixNetCard)cardList.get(i);
            if( card.isSel ){
                cardTableData[i][0] = new Boolean( true );
            }else{
                cardTableData[i][0] = new Boolean( false );
            }
            
            cardTableData[i][1] = card;
            ipList = card.getIPList();
            ipListVect.addElement( ipList );
            editorArry[i] = new MyComboBoxEditor( ipList );
            renderArry[i] = new MyComboBoxRender( card.getDefaultIP() );
            cardTableData[i][2] = ipList.elementAt(0);
            cardTableData[i][3] = card.mac;
            
            label[i]= card.netInterface;
        }
         
        MyDefaultTableModelForTabZ model = new MyDefaultTableModelForTabZ( cardTableData,header,label );
        
        table = new JTableZ( model,view,wizardDiag,editorArry,renderArry );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
          
        table.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        myListener = new MyListSelectionListener1( table );
        
        RowEditorModel rm = new RowEditorModel();
        table.setRowEditorModel(rm);
        
        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 65 );
        tableColumnModel.getColumn(1).setWidth( 135 );
        tableColumnModel.getColumn(2).setWidth( 135 );
        tableColumnModel.getColumn(3).setWidth( 155 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
                
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }
 
    public void setupGigaNetCard( String mac ){
        UnixNetCard card;
        boolean isSetup = false;
                
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();      
        for( int row=0; row<lineNum; row++ ){
            card = (UnixNetCard)model.getValueAt( row, 1 );
            if( card.mac.equals( mac ) ){
                model.setValueAt( new Boolean( true ), row, 0 );
                isSetup = true;
                break;
            }
        }
        
        if( !isSetup ){
            if( lineNum >0 )
                model.setValueAt( new Boolean( true ), 0, 0 );
        }
    }
     
    public void setWizardDialogSample( WizardDialogSample wdiag ){
        wizardDiag = wdiag;
    }
    
    public void addListener(){
        table.getSelectionModel().addListSelectionListener( myListener );
    }
    
    public void removeListener(){
        table.getSelectionModel().removeListSelectionListener( myListener );
    }
    
    public ArrayList getNetCardInfo(){
        UnixNetCard card;
        
        MyDefaultTableModelForTabZ model = (MyDefaultTableModelForTabZ)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList ret = new ArrayList( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            card = (UnixNetCard)model.getValueAt(row, 1);
            card.isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue(); 
            ret.add( card );
        }
        
        return ret;
    }
    
    public UnixNetCard getSelectNetCard(){
        boolean isSel;
        
        MyDefaultTableModelForTabZ model = (MyDefaultTableModelForTabZ)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel ){
                return (UnixNetCard)model.getValueAt(row, 1);
            }
        }
        
        return null;
    }
        
    public Vector getSelectedIPList(){
        boolean isSel;
        
        MyDefaultTableModelForTabZ model = (MyDefaultTableModelForTabZ)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel ){
                return (Vector)ipListVect.elementAt(row);
            }
        }
        
        return null;
    }
                
    public boolean hasSelectedNetCard(){
        int cnt = 0;
        
        MyDefaultTableModelForTabZ model = (MyDefaultTableModelForTabZ)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel= (Boolean)model.getValueAt(row, 0 );
            if( isSel.booleanValue() ){
                cnt++;
            }
        }
        
        return ( cnt == 1 );
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        MyDefaultTableModelForTabZ model = (MyDefaultTableModelForTabZ)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            dce = table.getCellEditor( i,0 );
            if( dce!=null ){
                try{
                    while(!dce.stopCellEditing()){};
                }catch(Exception ex){}
            }
            
            dce = table.getCellEditor( i, 2);
            if( dce!=null ){
                try{
                    while(!dce.stopCellEditing()){};
                }catch(Exception ex){}
            }
        }
    }
}

class MyListSelectionListener1 implements ListSelectionListener{
    JTableZ table;
     
    public MyListSelectionListener1( JTableZ _table ){
        table = _table;
    }
    
    public void valueChanged(ListSelectionEvent e){
        table.updateNetCardColumn( table.getSelectedRow() );
    }
}
