/*
 * SelectBootVerDialog.java
 *
 * Created on 2008/2/26,�PM�1:04
 */

package guisanboot.ui;

import guisanboot.data.*;
import guisanboot.res.ResourceCenter;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumnModel;
import guisanboot.ui.multiRenderTable.*;
import guisanboot.unlimitedIncMj.entity.CloneDiskWrapper;

/**
 *
 * @author  Administrator
 */
public class SelectBootVerDialog extends javax.swing.JDialog implements UnixIbootable{
    
    /** Creates new form SelectBootVerDialog */
    public SelectBootVerDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public SelectBootVerDialog( SanBootView view,Vector bindList,ArrayList oldVerList,String bootMac,String targetSrvName,BootHost host,Vector partList ) {
        this(view,true);
        myInit( view,bindList,oldVerList,bootMac,targetSrvName,host,partList );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        jCheckBox1.setText("Using swap target when net booting");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 3, 1, 1));
        jPanel4.add(jCheckBox1);

        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 1, 3, 1));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jButton1.setText("OK");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);
        jPanel2.add(jSeparator1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        doOk_process();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SelectBootVerDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
    
    JTableY table;
    String bootMac;
    String targetSrvName;
    BootHost host;
    Vector bindList;
    Vector partList;
    SanBootView view;
    Vector list;
    ArrayList oldVerList;
    Object[] header;
    Object[] label;
    RowEditorModel rm2 = new RowEditorModel();
    RowEditorModel rm0 = new RowEditorModel();
    TargetWrapper osVol = null;
    HashMap viewMap = new HashMap();
    
    void myInit( SanBootView view,Vector bindList,ArrayList oldVerList,String bootMac,String targetSrvName,BootHost host,Vector partList ){
        this.view = view;
        this.list = bindList;
        this.oldVerList = oldVerList;
        this.bootMac = bootMac;
        this.host = host;
        this.partList = partList;
        this.targetSrvName = targetSrvName;
        
        jCheckBox1.setSelected( true );
        setupTable();
        setupLanguage();
    }
    
    void setupLanguage(){
        this.setTitle( SanBootView.res.getString("SelectBootVerDialog.title"));
        jCheckBox1.setText( SanBootView.res.getString("SelectBootVerDialog.checkBox.useSwap") );
        this.jButton1.setText( SanBootView.res.getString("common.button.ok"));
        this.jButton2.setText( SanBootView.res.getString("common.button.cancel"));
    }
    
    public void setupTable( ){
        TargetWrapper tgtWrap;
        BindofTgtWrapAndSnap bind;
        ArrayList snapList;
        JComboBox cb; 
        DefaultCellEditor ed;
        CheckBoxEditor ced;
        int i;
        Object[][] data;
        Object selectSnapVer;
         
        int num = list.size();
        data = new Object[num][3]; 
        
        header = new Object[3];
        label = new Object[num];
        
        header[0] = SanBootView.res.getString("SelectSnapshotPane.table.snap.recovered");
        header[1] = SanBootView.res.getString("SelectSnapshotPane.table.snap.fs");
        header[2] = SanBootView.res.getString("SelectSnapshotPane.table.snap.ver");
        
        for( i=0; i<num; i++ ){
            bind = (BindofTgtWrapAndSnap)list.elementAt(i);
            tgtWrap  = bind.getTarget();
            snapList = bind.getSnapList();
            
            data[i][0] = Boolean.TRUE;
            data[i][1] = tgtWrap;
            
            selectSnapVer = getSelectSnapVer( tgtWrap.toString(), snapList );
            if( selectSnapVer == null ){
                data[i][2] = snapList.get( 0 );    // 就是 target volume 本身
            }else{
                data[i][2] = selectSnapVer;  // 上次网络启动的版本
            }
            
            // 保存 OS 所在的卷
            if( tgtWrap.toString().toUpperCase().equals("/") ) {
                osVol = tgtWrap;
            }
            
            cb = new JComboBox( snapList.toArray() );
            ed = new DefaultCellEditor(cb);
            rm2.addEditorForRow(i, ed );
            
            label[i]= tgtWrap.toString();
        }
        
        MyDefaultTableModelForTabY model = new MyDefaultTableModelForTabY( data,header,label );
        
        table = new JTableY( model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        ced = new CheckBoxEditor();
        rm0.addEditorForRow( 0, ced );
            
        table.setCol2EditorModel(rm2);
        table.setCol0EditorModel(rm0);
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 65 );
        tableColumnModel.getColumn(1).setWidth( 70 );
        tableColumnModel.getColumn(2).setWidth( 380 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
        
        jScrollPane1.getViewport().add( table,null );
        jScrollPane1.getViewport().setBackground( Color.white );
    }
    
    public Object getOSSnap( boolean autoDR ){
        TargetWrapper wraper;
        
        if( autoDR ){
            return osVol;
        }
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            wraper = (TargetWrapper)model.getValueAt(row,1);
            if( wraper.toString().toUpperCase().equals("/") ){
                return model.getValueAt(row,2);
            }
        }
        
        return null;
    }
    
    public Object getSelectSnapVer( String diskLabel,ArrayList snapList ){
        int tid;
        BindOfDiskLabelAndTid binder;
        
        int size = oldVerList.size();
        for( int i=0; i<size; i++ ){
            binder = (BindOfDiskLabelAndTid)oldVerList.get(i);
            tid = binder.getTid();
            if( binder.getDiskLabel().equals( diskLabel ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object obj = snapList.get(j);
                    if( obj instanceof ViewWrapper ){
                        ViewWrapper vw = (ViewWrapper)obj;
                        if( vw.view.getSnap_target_id() == tid ){
                            return obj;
                        }
                    }else if( obj instanceof VolumeMapWrapper ){
                        VolumeMapWrapper vm =(VolumeMapWrapper)obj;
                        if( vm.volMap.getVolTargetID() == tid ){
                            return obj;
                        }
                    }else if( obj instanceof CloneDiskWrapper ){
                        CloneDiskWrapper cd = (CloneDiskWrapper)obj;
                        if( cd.cloneDisk.getTarget_id() == tid ){
                            return obj;
                        }
                    }else{ // SnapWrapper
                    }
                }
                break;
            }
        }
        
        return null;
    }
    
    public boolean toRecoverOSDisk(){
        TargetWrapper wraper;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            wraper = (TargetWrapper)model.getValueAt(row,1);
            if( wraper.toString().toUpperCase().equals("/") ){
                return ((Boolean)model.getValueAt(row, 0 )).booleanValue();
            }
        }
        
        return false;
    }
    
    public ArrayList getSelectedSnap(){
        BindofTgtAndSnap binder;
        boolean isSel;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList ret = new ArrayList( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel ){
                binder = new BindofTgtAndSnap();
                binder.tgt  = (TargetWrapper)model.getValueAt( row,1 );
                binder.snap = model.getValueAt( row,2 );
                binder.isSel = isSel;
                ret.add( binder );
            }
        }
        
        return ret;
    }
    
    public TargetWrapper getTgtWrapper( String label ){
        TargetWrapper wraper;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            wraper = (TargetWrapper)model.getValueAt(row,1);
            if( wraper.toString().toUpperCase().equals( label.toUpperCase() ) ){
                return wraper;
            }
        }
        
        return null;
    }
    
    public ArrayList getSnapshotList( String label,int rootid,int local_snap_id ){
        TargetWrapper tgtWrap;
        BindofTgtWrapAndSnap bind;
        ArrayList snapList;
        ArrayList ret = new ArrayList(0);
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            bind = (BindofTgtWrapAndSnap)list.elementAt(i);
            tgtWrap  = bind.getTarget();
            snapList = bind.getSnapList();
            if( tgtWrap.diskLabel.toUpperCase().equals( label.toUpperCase() ) ){
                int size1 = snapList.size();
                ret = new ArrayList( size1 );
                for( int j=0; j<size1; j++ ){
                    Object item = snapList.get(j);
                    if( item instanceof SnapWrapper ){
                        if( rootid <= 0 ){
                            ret.add( item );
                        }else{
                            SnapWrapper snapWrapper = (SnapWrapper)item;
                            if( (snapWrapper.snap.getSnap_root_id() != rootid ) ||
                                 ( snapWrapper.snap.getSnap_local_snapid() != local_snap_id )){
                                ret.add( item );
                            }
                        }
                    }
                }
                break;
            }
        }
        
        return ret;
    }
    
    public int getSnapshotNum( String label ){
        TargetWrapper tgtWrap;
        BindofTgtWrapAndSnap bind;
        ArrayList snapList;
        int cnt=0;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            bind = (BindofTgtWrapAndSnap)list.elementAt(i);
            tgtWrap  = bind.getTarget();
            snapList = bind.getSnapList();
            if( tgtWrap.diskLabel.toUpperCase().equals( label.toUpperCase() ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object item = snapList.get(j);
                    if( item instanceof SnapWrapper ){
                        cnt+=1;
                    }
                }
                break;
            }
        }
        
        return cnt;
    }
    
    public int getViewNum( String label,SnapWrapper snap ){
        TargetWrapper tgtWrap;
        BindofTgtWrapAndSnap bind;
        ArrayList snapList;
        boolean found = false;
        int cnt=0;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            bind = (BindofTgtWrapAndSnap)list.elementAt(i);
            tgtWrap  = bind.getTarget();
            snapList = bind.getSnapList();
            if( tgtWrap.diskLabel.toUpperCase().equals( label.toUpperCase() ) ){
                int size1 = snapList.size();
                for( int j=0; j<size1; j++ ){
                    Object item = snapList.get(j);
                    if( found ){
                        if( item instanceof ViewWrapper ){
                            cnt+=1;
                        }else{
                            break;
                        }
                    }else{
                        if( item instanceof SnapWrapper ){
                            SnapWrapper snapItem =(SnapWrapper)item;
                            if( ( snapItem.snap.getSnap_root_id() == snap.snap.getSnap_root_id() )&&
                                ( snapItem.snap.getSnap_local_snapid() == snap.snap.getSnap_local_snapid() ) 
                            ){
                                found = true;
                            }
                        }
                    }
                }
                break;
            }
        }
        
        return cnt;
    }
    
    public ArrayList getSelectedSnap1(){
        BindofTgtAndSnap binder;
        boolean isSel;
        
        MyDefaultTableModelForTabY model = (MyDefaultTableModelForTabY)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList ret = new ArrayList( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            binder = new BindofTgtAndSnap();
            binder.tgt = (TargetWrapper)model.getValueAt( row,1 );
            binder.snap = model.getValueAt( row,2 );
            binder.isSel = isSel;
            ret.add( binder );
        }
        
        return ret;
    }
    
    public boolean checkSnapNumber( String label,int rootid,int local_snap_id ){
        int size,i,cnt,max_snap,snapNum;
        ArrayList snapWrapperList;
        SnapWrapper one;
        
        // 先检查各个卷的快照数是否超出了max number;若超出了，则检查是否每个快照都有view
        TargetWrapper tgtWrapper = getTgtWrapper( label );
        if( tgtWrapper != null ){
            max_snap = tgtWrapper.tgt.getMaxSnapNum();
SanBootView.log.debug( getClass().getName()," max snap number: "+ max_snap +" vol: " + tgtWrapper.toString() ); 
            // 找出tgt的当前快照数
            snapNum = getSnapshotNum( tgtWrapper.toString() );
SanBootView.log.debug( getClass().getName()," snap number is : "+ snapNum +" vol: " + tgtWrapper.toString() );            
            if( snapNum >= max_snap ){
                snapWrapperList = getSnapshotList( tgtWrapper.toString(),rootid,local_snap_id );
                size = snapWrapperList.size();
                cnt = 0;
                for( i=0; i<size; i++ ){
                    one = (SnapWrapper)snapWrapperList.get(i);
                    int viewNum = this.getViewNum( tgtWrapper.toString(), one );
                    if( viewNum > 0 ){
                        cnt+=1;
                    }
                }
SanBootView.log.debug( getClass().getName()," view number is : "+ cnt +" vol: "+tgtWrapper.toString() );
                
                if( cnt == size ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectBootVerDialog.error.beyondMaxSnap")+" : "+tgtWrapper.toString()
                    );
                    return false;
                }else{
                    return true;
                }
            }else{
                return true;
            }
        }else{
SanBootView.log.error( getClass().getName(),"Not found object on table(it's impossible): "+ tgtWrapper.toString() );
            return false;
        }
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            dce = table.getCellEditor( i,0 );
            if( dce!=null ){
                try{
                    while(!dce.stopCellEditing()){}
                }catch(Exception ex){}
            }
        }
    }
    
    private void doOk_process(){
        DhcpClientInfo dhcpClntInfo=null;
        Vector subnetList,ibootSrvList;
        String ip_3rd="",nextsrv_3rd="";
        
        fireEditingStopMsg();
        
        if( !toRecoverOSDisk() ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("FailoverWizardDialog.error.notRecoverCDisk")
            );
            return;
        }
        
        // 首先获取设置dhcp所需的subnet和ibootsrv列表
        if( view.initor.dhcpdb.isLoginOK() ){   
            subnetList   = view.initor.dhcpdb.getSubnetListFromDhcp();
            ibootSrvList = view.initor.dhcpdb.getIbootSrvListFromDhcp();
        }else{
            // dhcp server不可用( 无法登陆它,可能没有关于它的配置信息,或者配置信息有误 )
            subnetList   = new Vector();
            ibootSrvList = new Vector();
        }    
        
        SetDhcpPane aSetDhcpPane = new SetDhcpPane( view,"windows" );     
        boolean isUseOdyDhcp = host.isUseOdyDhcp(); 
System.out.println(" boot mac: " + bootMac ); 
        if( isUseOdyDhcp ){
            dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac( NetCard.getUnixMac( bootMac ) );
            if( dhcpClntInfo == null ){
                JOptionPane.showMessageDialog( this,SanBootView.res.getString("SelectBootVerDialog.error.getDhcpInfo"));
                return;
            }
        }
        
        if( !isUseOdyDhcp ){
            // get the 3rd dhcp info
            boolean isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+host.getID()+ ResourceCenter.CONF_3RD_DHCP );
            if( isOk ){
                ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
            }else{
                JOptionPane.showMessageDialog( this,SanBootView.res.getString("SelectBootVerDialog.error.getDhcpInfo"));
                return;
            }
        }
        
        aSetDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,bootMac,isUseOdyDhcp,dhcpClntInfo,host.getIP(),ip_3rd,nextsrv_3rd ); 
        
        // 为所选的快照生成view
        ProgressDialog initDiag = new ProgressDialog( 
            view,
            SanBootView.res.getString("View.pdiagTitle.selRstVer"),
            SanBootView.res.getString("View.pdiagTip.selRstVer")
        );
        DhcpClientInfo dhcpCltInfo = aSetDhcpPane.getDhcpSetInfo();
        String start_ip = aSetDhcpPane.isAutoSetup()? dhcpCltInfo.ip: dhcpCltInfo.ip_3rd;
        CrtUnixView crtView = new CrtUnixView( 
                this,
                initDiag,
                getSelectedSnap1().toArray(),
                viewMap,
                view,
                bootMac,
                host,
                targetSrvName,
                partList,
                start_ip,
                true,
                aSetDhcpPane,
                bootMac,
                jCheckBox1.isSelected()
        );
        crtView.start();
        initDiag.mySetSize();
        initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
        initDiag.setVisible( true );

        if( crtView.allFinish ){
            this.dispose();
            
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBootVerDialog.log.ok")
            );
        }
    }
}
