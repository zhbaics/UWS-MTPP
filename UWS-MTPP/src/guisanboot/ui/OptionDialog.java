/*
 * OptionDialog.java
 *
 * Created on 2007/11/28, PM 5:17
 */

package guisanboot.ui;

import guisanboot.data.GUIAdminOpt;
import guisanboot.data.GUIAdminOptGlobal;
import guisanboot.data.GUIAdminOptUWS;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.io.*;
import java.util.*;

import mylib.tool.*;
import guisanboot.logging.MyLogger;
import guisanboot.res.*;
import guisanboot.ui.multiRenderTable.MyComboBoxEditor;
import guisanboot.ui.multiRenderTable.RowEditorModel;

/**
 *
 * @author  Administrator
 */
public class OptionDialog extends javax.swing.JDialog {
    GUIAdminOpt adminOpt = new GUIAdminOpt();
    String curUWS = null;
    ArrayList map = new ArrayList();
    
    String lang = "zh";       // default value : zh
    int loglevel = 1;         // default value : info
    
    /** Creates new form OptionDialog */
    public OptionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public OptionDialog( SanBootView view ){
        this( view,true);
        myInit( view,0 );
    }
    
    public OptionDialog( SanBootView view,int mode ){
        this( view,true);
        myInit( view,mode );
    }
     
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="generated code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 1, 3, 1)));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jPanel2.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 1, 3, 1)));
        jButton2.setText("Save");
        jButton2.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton2);

        jButton3.setText("Cancel");
        jButton3.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton3);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Lang :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel5.add(jLabel2, gridBagConstraints);

        jComboBox2.setPreferredSize(new java.awt.Dimension(145, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel5.add(jComboBox2, gridBagConstraints);

        jLabel3.setText("Log Level :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel5.add(jLabel3, gridBagConstraints);

        jComboBox3.setPreferredSize(new java.awt.Dimension(145, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel5.add(jComboBox3, gridBagConstraints);

        jLabel4.setText("Log Location :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel5.add(jLabel4, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setPreferredSize(new java.awt.Dimension(285, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel5.add(jTextField1, gridBagConstraints);

        jTabbedPane1.addTab("General", jPanel5);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        jLabel1.setText("Available UWS :");
        jPanel3.add(jLabel1);

        jComboBox1.setPreferredSize(new java.awt.Dimension(200, 20));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jPanel3.add(jComboBox1);

        jButton1.setText("Delete");
        jButton1.setPreferredSize(new java.awt.Dimension(71, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton1);

        jPanel4.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel6, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("UWS", jPanel4);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        delUWS();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        jComboBox1_process();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        save();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OptionDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // �������� - �������޸�//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    // ������������//GEN-END:variables
    
    JTableU table; 
    SanBootView view;
    Object[] header;
    
    private void myInit( SanBootView _view,int mode ){
        view = _view;

        getIP(); // get all contents from config file( ibconf )
        setupLangCom();
        setupLogLevelCom();
        setupUWSCombox();
        setupLanguage();
        
        if( mode == 1 ){
            this.jTabbedPane1.setSelectedComponent( jPanel4 );
        }
        this.jComboBox1_process();
    }
    
    private void setupLangCom(){
        Vector langs = new Vector(3);
        langs.add( SanBootView.res.getString("common.china") );
        langs.add( SanBootView.res.getString("common.us") );
        langs.add( SanBootView.res.getString("common.jp") );
        int size = langs.size();
        for( int i=0; i<size; i++ ){
            jComboBox2.addItem( langs.get(i) );
        }
        
        String aLang;
        GUIAdminOptGlobal global = adminOpt.getGlobal();
        if( global.getLang().toUpperCase().equals("ZH")){
            aLang = SanBootView.res.getString("common.china");
        }else if( global.getLang().toUpperCase().equals("EN") ){
            aLang = SanBootView.res.getString("common.us");
        }else if( global.getLang().toUpperCase().endsWith("JA") ){
            aLang = SanBootView.res.getString("common.jp");
        }else{
            aLang = SanBootView.res.getString("common.us");
        }
        jComboBox2.setSelectedItem( aLang );
    }
    
    private void setupLogLevelCom(){
        Vector aLoglevel = new Vector(4);
        aLoglevel.add( SanBootView.res.getString("common.loglevel.debug") );
        aLoglevel.add( SanBootView.res.getString("common.loglevel.info") );
        aLoglevel.add( SanBootView.res.getString("common.loglevel.warning") );
        aLoglevel.add( SanBootView.res.getString("common.loglevel.error") );  
        int size = aLoglevel.size();
        for( int i=0; i<size; i++ ){
            this.jComboBox3.addItem( aLoglevel.get(i) );
        }
        
        GUIAdminOptGlobal global = adminOpt.getGlobal();
        String log = MyLogger.getLogLevelStr( global.getIntLogLevel() );
        jComboBox3.setSelectedItem( log );
        jTextField1.setText( SanBootView.log.logFilelocation );
    }
    
    private void setupUWSCombox(){
        ArrayList list = adminOpt.getAllUWS();
        int size = list.size();
        for( int i=0; i<size; i++ ){
            GUIAdminOptUWS uws = (GUIAdminOptUWS)list.get(i);
            jComboBox1.addItem( uws );
            
            GUIAdminOptUWS uws1 = new GUIAdminOptUWS();
            uws1.setServerIp( uws.getServerIp() );
            uws1.setTxIP( uws.getTxIP() );
            uws1.setPort( uws.getPort() );
            uws1.setUser( uws.getUser() );
            uws1.setDesc( uws.getServerIp() );
            map.add( uws1 );
        }
        
        GUIAdminOptUWS emptyUWS = new GUIAdminOptUWS();
        emptyUWS.setDesc( SanBootView.res.getString("OptionDialog.label.add"));
        jComboBox1.addItem( emptyUWS );
        GUIAdminOptUWS emptyUWS1 = new GUIAdminOptUWS();
        emptyUWS1.setDesc( SanBootView.res.getString("OptionDialog.label.add"));
        map.add( emptyUWS1 );
    }
    
    private void setupLanguage(){
        setTitle(SanBootView.res.getString("OptionDialog.dialog_title"));
        jLabel1.setText( SanBootView.res.getString("OptionDialog.label.availSWU"));
        jLabel2.setText( SanBootView.res.getString("OptionDialog.label.lang"));
        jLabel3.setText( SanBootView.res.getString("OptionDialog.label.loglevel"));
        jLabel4.setText( SanBootView.res.getString("OptionDialog.label.loglocation"));
        jButton1.setText(SanBootView.res.getString("common.button.del"));
        jButton2.setText(SanBootView.res.getString("common.button.save"));
        jButton3.setText(SanBootView.res.getString("common.button.cancel"));
        
        int index = jTabbedPane1.indexOfComponent(jPanel5);
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("OptionDialog.tabTitle.general")
        );
        index = jTabbedPane1.indexOfComponent(jPanel4);
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("OptionDialog.tabTitle.swu")
        );
    }
    
    private void delUWS(){
        GUIAdminOptUWS uws = (GUIAdminOptUWS)jComboBox1.getSelectedItem();
        if( uws == null ) return;
        
        int indx = jComboBox1.getSelectedIndex();
        if( uws.toString().equals(SanBootView.res.getString("OptionDialog.label.add") ) ){
            return;
        }
        
        if( uws.getServerIp().equals(view.initor.serverIp ) && view.initor.isLogined() ){
            JOptionPane.showMessageDialog(this,SanBootView.res.getString("OptionDialog.error.usedIP") );
            return;
        }else{
            this.adminOpt.removeUWS( uws );
            removeUWSFromMap( uws.getServerIp() );
            
            jComboBox1.removeItemAt( indx );
        }
    }
    
    private void jComboBox1_process(){
        // 保存curUWS的设置
        saveCurUWS();
        
        GUIAdminOptUWS uws = (GUIAdminOptUWS)jComboBox1.getSelectedItem();
        if( uws == null ) return;
        
        GUIAdminOptUWS newUWS = getUWSFromMap( uws.toString() );
        this.setupTable( newUWS );
        curUWS = uws.toString();
    }
    
    private GUIAdminOptUWS getUWSFromMap( String desc ){
        int size = map.size();
        for( int i=0; i<size; i++ ){
            GUIAdminOptUWS uws = (GUIAdminOptUWS)map.get(i);
            if( uws.toString().equals( desc ) ){
                return uws;
            }
        }
        return null;
    }
    
    public void setupTable( GUIAdminOptUWS uws ){
        if( uws == null ) return;
        
        int i;
        Object[][] data;
        
        data = new Object[4][2]; 
        header = new Object[2];
        
        header[0] = SanBootView.res.getString("OptionDialog.opt.name");
        header[1] = SanBootView.res.getString("OptionDialog.opt.val");
        
        data[0][0] = SanBootView.res.getString("OptionDialog.opt.serverip");
        data[0][1] = uws.getServerIp();
        
        data[1][0] = SanBootView.res.getString("OptionDialog.opt.port");
        data[1][1] = uws.getPort()+"";
        
        data[2][0] = SanBootView.res.getString("OptionDialog.opt.user");
        data[2][1] = uws.getUser();
        
        data[3][0] = SanBootView.res.getString("OptionDialog.opt.txIP");
        data[3][1] = uws.getTxIP();
        
        MyDefaultTableModelForTabU model = new MyDefaultTableModelForTabU( data,header );
        
        table = new JTableU( model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        RowEditorModel rm = new RowEditorModel();
        table.setRowEditorModel(rm);
        
        Vector langs = new Vector(3);
        langs.add( SanBootView.res.getString("common.china") );
        langs.add( SanBootView.res.getString("common.us") );
        langs.add( SanBootView.res.getString("common.jp") );
        MyComboBoxEditor mcb = new MyComboBoxEditor( langs );
        rm.addEditorForRow( 5, mcb );
        
        Vector aLoglevel = new Vector(4);
        aLoglevel.add( SanBootView.res.getString("common.loglevel.debug") );
        aLoglevel.add( SanBootView.res.getString("common.loglevel.info") );
        aLoglevel.add( SanBootView.res.getString("common.loglevel.warning") );
        aLoglevel.add( SanBootView.res.getString("common.loglevel.error") );
        
        mcb = new MyComboBoxEditor( aLoglevel );
        rm.addEditorForRow( 6, mcb );
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 135 );
        tableColumnModel.getColumn(1).setWidth( 255 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
        
        jScrollPane1.getViewport().add( table,null );
        jScrollPane1.getViewport().setBackground( Color.white );
    }
    
    private void saveCurUWS(){
        fireEditingStopMsg();
        
        if( table != null ){
            String serverIp = (String)table.getValueAt(0, 1);  
            String port     = (String)table.getValueAt(1, 1);
            String user     = (String)table.getValueAt(2, 1);
            String tx_ip    = (String)table.getValueAt(3, 1);
            
            GUIAdminOptUWS uws = getUWSFromMap( this.curUWS );
            if( uws != null ){
                uws.setServerIp( serverIp );
                uws.setPort( port+"" );
                uws.setUser( user );
                uws.setTxIP( tx_ip );
            }
        }
    }
    
    public void save(){
        String serverIp,user,txIp;
        int port;
        
        this.saveCurUWS();
        
        // global options
        String aLang = (String)jComboBox2.getSelectedItem();
        if( aLang.equals( SanBootView.res.getString("common.china"))){
            lang = "zh";
        }else if( aLang.equals( SanBootView.res.getString("common.us"))){
            lang = "en";
        }else if( aLang.equals( SanBootView.res.getString("common.jp"))){
            lang = "ja";
        }else{
            lang = "zh";
        }
        
        String loglevelStr = (String)jComboBox3.getSelectedItem();
        loglevel = MyLogger.getLogLevel( loglevelStr );
        
        // uws options
        int size = map.size();
        for( int i=0; i<size; i++ ){
            GUIAdminOptUWS uws = (GUIAdminOptUWS)map.get(i);
            
            serverIp = uws.getServerIp();
            if( uws.toString().equals(SanBootView.res.getString("OptionDialog.label.add") ) ){
                if( serverIp.equals("") ){
                    continue;
                }
                
                // 检查是否存在相同的UWS配置
                if( isSameUWS( serverIp )) {
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("OptionDialog.error.sameIP")
                    );
                    return;
                }
            }
            
            if( serverIp.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("OptionDialog.error.noneAdminIP")
                );
                return;
            }
            
            if( !Check.ipCheck( serverIp ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("OptionDialog.error.badAdminIP")
                );
                return;
            }
            
            txIp = uws.getTxIP();
            if( txIp.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("OptionDialog.error.noneTxIP")
                );
                return;
            }
            
            if( !Check.ipCheck( txIp ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("OptionDialog.error.badTxIP")
                );
                return;
            }
            
            String _port = uws.getPort();
            if( _port.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("ConnectDialog.errMsg.nullPort")
                );
                return;
            }
            
            if( !Check.digitCheck( _port ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("ConnectDialog.errMsg.badPort")
                );
                return;
            }
            
            port = ResourceCenter.C_S_PORT;
            try{
                port = Integer.parseInt( _port );
            }catch(Exception ex){}

            if( port <1 || port >65535 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("ConnectDialog.errMsg.invalidPort")
                );
                return ;
            }        
            
            user = uws.getUser();
            if( user.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("ConnectDialog.errMsg.noneUser")
                );
                return;
            }
            
            if( Check.checkInput( user ) ){
                 JOptionPane.showMessageDialog(null,
                    SanBootView.res.getString("ConnectDialog.errMsg.badUser")
                 );
                 return;
            }
            
            if( user.getBytes().length >= 32 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("ConnectDialog.errMsg.invalidUser")
                );
                return;
            }
        }
        
        saveIP();
        
        // change log level dynamaticlly
        SanBootView.log.changeLevel( loglevel );
        
        // 动态地更新profile中的tx_IP
        if( view.initor.isLogined() ){
            GUIAdminOptUWS aCurUWS = view.initor.adminOpt.getUWS( view.initor.serverIp );
            if( aCurUWS != null ){
                view.initor.txIp = aCurUWS.getTxIP();
                
                ModProfile thread = new ModProfile( view,"","",0,aCurUWS.getTxIP() );
                view.startupProcessDiag(
                    SanBootView.res.getString("View.pdiagTitle.modProf"),
                    SanBootView.res.getString("View.pdiagTip.modProf"),
                    thread
                );
            }
        }
        
        this.dispose();
    }
    
    public Point getCenterPoint(int width,int height){
        int x = ( getSize().width - width ) / 2 + getX();
        int y = ( getSize().height - height ) / 2 + getY();
        return new Point(x,y);
    }
    
    public boolean isSameUWS( String sip ){
        return ( adminOpt.getUWS( sip ) != null );
    }
    
    private void removeUWSFromMap( String serverip ){
        int size = map.size();
        for( int i=0; i<size; i++ ){
            GUIAdminOptUWS uws = (GUIAdminOptUWS)map.get(i);
            if( uws.getServerIp().equals( serverip) ){
                map.remove(i);
                break;
            }
        }
    }
    
    public void getIP(){
        try{
            FileReader fin1  = new FileReader( getUserWorkDir() + File.separatorChar + InitApp.CONF_PATH );
            BufferedReader in = new BufferedReader(fin1);
            StringBuffer buf = realGetIP(in);
            adminOpt.parserConf( buf );
//adminOpt.prtMe();
            fin1.close();
        }catch(Exception ex){
System.out.println( "No GUI configuration file." );            
            ex.printStackTrace(); // 可能没有这个文件
        }
    }
    
    public void saveIP(){
        try{
            String ipaddrPath = getUserWorkDir() + File.separator + InitApp.CONF_PATH;
            
            GUIAdminOptGlobal global = new GUIAdminOptGlobal( this.lang, this.loglevel+"",
                ResourceCenter.CMDP_RST_MIRROR_TYPE+"",ResourceCenter.GLOBAL_DELTA_HIGH_SIZE+"",
                ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE+""
            );
            GUIAdminOpt newAdminOpt = new GUIAdminOpt();
            newAdminOpt.setGlobal( global );
            
            int size = map.size();
            for( int i=0; i<size; i++ ){
                GUIAdminOptUWS uws = (GUIAdminOptUWS)map.get(i);
                if( uws.toString().equals( SanBootView.res.getString("OptionDialog.label.add") ) ){
                    if( uws.getServerIp().equals("") ){
                        continue;
                    }else{
                        uws.setDesc( uws.getServerIp() );
                    }
                }else{
                    // 用最新的serverip作为desc
                    uws.setDesc( uws.getServerIp() );
                }
                
                newAdminOpt.addUWS( uws );
            }
            
            view.initor.adminOpt = newAdminOpt;
            
            newAdminOpt.outputConf( ipaddrPath );
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    public static String getUserWorkDir(){
        Properties properties = System.getProperties();
        return properties.getProperty("user.dir");
    }

    public StringBuffer realGetIP( BufferedReader in ){
        String s1;
        StringBuffer buf = new StringBuffer();
        try{
            while( ( s1=in.readLine() ) != null ){
                if( s1.equals("") ) continue;
                s1 = s1.trim();
                buf.append( s1 + "\n" );
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
        
        return buf;
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        if( table != null ){
            AbstractTableModel model = (AbstractTableModel)table.getModel();
            int lineNum = model.getRowCount();
            for( int i=0; i<lineNum; i++  ){
                for( int j=0;j<2;j++ ){ //专门停止1列
                    if( j == 0 ) continue;

                    dce = table.getCellEditor( i,j );
                    if( dce!=null ){
                        try{
                            while(!dce.stopCellEditing()){}
                        }catch(Exception ex){}
                    }
                }
            }
        }
    }
}

class ModProfile extends BasicGetSomethingThread {
    private String name;
    private String pass;
    private int port;
    private String txIp;
    
    public ModProfile( SanBootView view,String name,String pass,int port,String txIp){
        super( view );
        this.name = name;
        this.pass = pass;
        this.port = port;
        this.txIp = txIp;
    }

    public boolean realRun( ){
        ModifyProfileThread modProf = new ModifyProfileThread( view, name, pass, txIp, port );
        if( !modProf.realRun() ){
            errMsg = modProf.getErrMsg();
            return false;
        }else{
            return true;
        }
    }
}
