/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guisanboot.ui;

import guisanboot.data.*;
import guisanboot.datadup.data.NetWork;
import guisanboot.res.ResourceCenter;
import java.io.File;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class IbootForLinux6WizardDialog extends javax.swing.JDialog {

    /**
     * Creates new form IbootForLinux6WizardDialog
     */
    public IbootForLinux6WizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public IbootForLinux6WizardDialog(SanBootView _view, BootHost _host, String _targetSrvName, Vector _partList) {
        this(_view, true);
        myInit(_view, _host, _targetSrvName, _partList);
    }
    public IbootForLinux6WizardDialog(SanBootView _view, BootHost _host, String _targetSrvName, Vector _partList, String original_boot_MAC) {
        this(_view, true);
        myInit(_view, _host, _targetSrvName, _partList, original_boot_MAC);
    }
    SanBootView view;
    BootHost host;
    Vector partlist;
    String targetSrvName;
    String original_boot_MAC ;

    public void myInit(SanBootView _view, BootHost _host, String _targetSrvName, Vector _partList) {
        this.view = _view;
        this.host = _host;
        this.partlist = _partList;
        this.targetSrvName = _targetSrvName;
        setLanguage();
    }
    public void myInit(SanBootView _view, BootHost _host, String _targetSrvName, Vector _partList, String original_boot_MAC) {
        this.view = _view;
        this.host = _host;
        this.partlist = _partList;
        this.targetSrvName = _targetSrvName;
        this.original_boot_MAC = original_boot_MAC;
        setLanguage();
    }

    public void setLanguage() {
        this.setTitle(SanBootView.res.getString("IbootForLinux6WizardDialog.title"));
        this.jLabel1.setText(SanBootView.res.getString("IbootForLinux6WizardDialog.label.path"));
        this.jButton1.setText(SanBootView.res.getString("common.button.ok"));
        this.jButton2.setText(SanBootView.res.getString("common.button.cancel"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Path");
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jTextField1.setPreferredSize(new java.awt.Dimension(280, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jTextField1, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(400, 50));
        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jSeparator1, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(400, 48));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        jButton1.setText("OK");
        jButton1.setPreferredSize(new java.awt.Dimension(80, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);

        jButton2.setText("CANCEL");
        jButton2.setPreferredSize(new java.awt.Dimension(80, 25));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ok_button_act();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void ok_button_act() {
        String strpath = this.jTextField1.getText().trim();
        if("".equals(strpath)){
            JOptionPane.showMessageDialog( view,
                            SanBootView.res.getString("IbootForLinux64WizardDialog.error.nopath")
                        );
            return;
        }
        int size = this.partlist.size();
        long totalSize = 0;
        String fs = "";
        SystemPartitionForUnix temp;
        PoolWrapper poolWrapper;
        Pool pool = null;
        //计算网启时分配盘的大小

        GetAllPoolThread thread = new GetAllPoolThread(
                view);
        view.startupProcessDiag(
                SanBootView.res.getString("View.pdiagTitle.getPool1"),
                SanBootView.res.getString("View.pdiagTip.getPool1"),
                thread);

        IbootThread thread1 = new IbootThread(view, host, targetSrvName, partlist, strpath,original_boot_MAC);
        view.startupProcessDiag(
                SanBootView.res.getString("View.pdiagTitle.setupIbootForLinux64"), 
                SanBootView.res.getString("View.pdiagTip.setupIbootForLinux64"), 
                thread1);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IbootForLinux6WizardDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IbootForLinux6WizardDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IbootForLinux6WizardDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IbootForLinux6WizardDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                IbootForLinux6WizardDialog dialog = new IbootForLinux6WizardDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}

class IbootThread extends BasicGetSomethingThread {

    public static final int BLK = 17;
    public static final String IBOOTDIR = "pxelinux.cfg/";
    SanBootView view;
    BootHost host;
    Vector partlist;
    String targetSrvName;
    String path;
    String original_boot_MAC ;

    public IbootThread(SanBootView _view, BootHost _host, String _targetSrvName, Vector _partList, String _path, String original_boot_MAC) {
        view = _view;
        host = _host;
        partlist = _partList;
        targetSrvName = _targetSrvName;
        path = _path;
        this.original_boot_MAC = original_boot_MAC;
    }

    public boolean realRun() {
        String BOOTFILE_1 = "";   //"vmlinuz-2.6.32-220.el6.x86_64";
        String BOOTFILE_2 = "";   //"initrd-2.6.32-220.el6.x86_64.gz";
        int size = this.partlist.size();
        long totalSize = 0;
        String fs = "";
        String deviceName = "";
        String ip = host.getIP();
        String tXIp = view.initor.getTxIP(ip);
        int port = host.getPort();
        SystemPartitionForUnix temp;
        PoolWrapper poolWrapper;
        Pool pool = null;
        int bksize = 0;
        int bkNum = 0;
        int targetid = -1;
        int rootid = -1;
        String volName = "", iscsiVar = "";
        String lvtype = "", fstype = "";
        String vgName = "", lvName = "", args = "";
        ArrayList<String> devlist1 = null;
        ArrayList<String> devlist2 = null;
        ArrayList<String> u_r = null;
        String tftpRoot = "";
        boolean isOk;

        String bootMac = original_boot_MAC ;
//        if (bootMac.equals("")) {
//            bootMac = host.getBootMac() ;
//        }

//        boolean ok_u = view.initor.mdb.getLinuxDevName(ip, port, "get_uname_r.sh");
//        if (ok_u) {
//            u_r = view.initor.mdb.getLinuxDevNameList();
//            BOOTFILE_1 = "vmlinuz-" + u_r.get(0);
//            BOOTFILE_2 = "initrd-" + u_r.get(0) + ".gz";
//        } else {
//            u_r = null;
//            errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.getDeviceInfoFailed");
//            return false;
//        }

        BOOTFILE_1 = "vmlinuz-2.6.32-279.2.1.el6.x86_64" ;
        BOOTFILE_2 = "initrd-2.6.32-279.2.1.el6.x86_64.img" ;

        boolean ok = view.initor.mdb.getLinuxDevName(ip, port, "get_dev_name.sh");
        if (ok) {
            devlist1 = view.initor.mdb.getLinuxDevNameList();
        } else {
            devlist1 = null;
            errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.getDeviceInfoFailed");
            return false;
        }
        //计算网启时分配盘的大小
        for (int i = 0; i < size; i++) {
            temp = (SystemPartitionForUnix) partlist.elementAt(i);
            if (temp.mp.equals("/")) {
                totalSize = totalSize + temp.getSizeInGiga();
                lvtype = temp.devType;
                fstype = temp.fsType;
                fs = fs + " --fs=" + temp.mp;
            }
        }

        //获取存储池
//        boolean isOk = view.initor.mdb.updatePool();
        ArrayList list = view.initor.mdb.getPoolWrapList(true);
        for (int i = 0; i < list.size(); i++) {
            poolWrapper = (PoolWrapper) list.get(i);
            if (poolWrapper.pool.getFreeSize() > totalSize) {
                pool = poolWrapper.pool;
                break;
            }
        }

        if (pool != null) {
            //create vol
            volName = "iboot_linux64_" + host.getName();
            bksize = (1 << BLK);
            bkNum = (int) ((totalSize * 1024 * 1024 * 1024 + bksize - 1) / bksize);
            isOk = view.initor.mdb.addOrphVol(volName, BLK, bkNum, pool.getPool_id());
            if (isOk) {
                targetid = view.initor.mdb.getNewId();
                rootid = view.initor.mdb.getRootID();
                iscsiVar = ResourceCenter.ISCSI_PREFIX + targetSrvName;
                //add iscsiinitordriver
                isOk = view.initor.mdb.addIscsiInitorDriver(ip, port);
                if (!isOk) {
                    //add iscsiinitordriver failed
                    errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.addIscsiInitorDriverFailed");
                    return false;
                }
                //add lunmap
                isOk = view.initor.mdb.addLunMap(targetid, host.getIP(), "255.255.255.255", "rw", "", "", "", "");
                if (!isOk) {
                    errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.addlunmapfailed");
                    return false;
                }
                //add vg
                isOk = view.initor.mdb.addVg(ip, port,
                        " -I " + iscsiVar + " -S " + tXIp + " -P " + ResourceCenter.ISCSI_LOGIN_PORT
                        + " -lv NONE -c " + host.getID() + " -t " + targetid);
                if (isOk) {
                    vgName = "vg_" + host.getID() + "_" + targetid;
                    lvName = "iboot_linux64_" + targetid;
                    isOk = view.initor.mdb.addLV(ip, port,
                            " -I " + iscsiVar + " -S " + tXIp + " -P " + ResourceCenter.ISCSI_LOGIN_PORT
                            + " -lv NONE -L " + (totalSize * 1024) + " -n " + lvName + " " + vgName
                            + " -t " + targetid);
                    if (isOk) {
                        // 将vg offline掉
                        args = " -lv NONE -g " + vgName;
                        isOk = view.initor.mdb.vgOffline(ip, port, args);
                        if (isOk) {
                            args = " -I " + iscsiVar + " -S " + tXIp + " -P " + ResourceCenter.ISCSI_LOGIN_PORT + " -t " + targetid;
                            isOk = view.initor.mdb.logoutUnixTarget(ip, port, args);
                        }

                        //login target
                        args = " -I " + iscsiVar + " -S " + tXIp + " -P " + ResourceCenter.ISCSI_LOGIN_PORT + " -t " + targetid;
                        isOk = view.initor.mdb.loginUnixTarget(ip, port, args);
                        if (isOk) {
                            args = " -lv NONE -g " + vgName;
                            isOk = view.initor.mdb.vgOnline(ip, port, args);
                            if (isOk) {
                                view.initor.mdb.setNewTimeOut(ResourceCenter.MAX_TIMEOUT);
                                args = " -I " + iscsiVar + " -S " + tXIp + " -P " + ResourceCenter.ISCSI_LOGIN_PORT + " -lv NONE";
                                args += " -g iboot_for_linux64";
                                args += " -t " + targetid;
                                args += " -T " + fstype;
                                isOk = view.initor.mdb.formatUnixVol(ip, port, args);
                                view.initor.mdb.restoreOldTimeOut();

                                //get new devicelist
                                if (isOk) {
                                    isOk = view.initor.mdb.getLinuxDevName(ip, port, "get_dev_name.sh");
                                    if (isOk) {
                                        devlist2 = view.initor.mdb.getLinuxDevNameList();
                                    } else {
                                        devlist2 = null;
                                        errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.getDeviceInfoFailed");
                                        return false;
                                    }
                                } else {
                                    errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.formatUnixVolFailed");
                                    return false;
                                }

                                //get deviceName
                                deviceName = findDevNameByTwoList(devlist1, devlist2);
                                if ("".equals(deviceName)) {
                                    errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.getDeviceNameFailed");
                                    return false;
                                }

                                //进行iscsi_root参数设置和执行。
                                view.initor.mdb.setNewTimeOut(ResourceCenter.MAX_TIMEOUT);
                                StringBuffer sb = new StringBuffer();
                                sb.append(" --path=").append(path);
                                sb.append(" --device=").append(deviceName);
                                sb.append(" --ip=").append(ip);
                                sb.append(" --server=").append(tXIp);
                                sb.append(" --port=").append(ResourceCenter.ISCSI_LOGIN_PORT);
                                sb.append(" --target=").append(ResourceCenter.ISCSI_PREFIX + targetSrvName);
                                sb.append(" --tid=").append(targetid);

                                args = sb.toString();
                                //view.initor.mdb.restoreOldTimeOut();
                                isOk = view.initor.mdb.setupIbootLinux64(ip, port, args);
                                view.initor.mdb.restoreOldTimeOut();
                                if (isOk) {
                                    tftpRoot = view.initor.mdb.getTftpRootPath();
                                    if (!"".equals(tftpRoot)) {
                                        System.out.println(host.getBootMac()) ;
                                        System.out.println(DhcpClientInfo.getSimpleMac( bootMac )) ;
                                        isOk = view.initor.mdb.mkdir(tftpRoot + "/" + DhcpClientInfo.getSimpleMac( bootMac ).toLowerCase() );
                                        if (isOk) {
                                            isOk = view.initor.mdb.sendFileFromAgtToSrv(ip, port, path + "/" + BOOTFILE_1, tftpRoot + "/" + DhcpClientInfo.getSimpleMac( bootMac ).toLowerCase() + "/" + BOOTFILE_1);
                                            if (isOk) {
                                                isOk = view.initor.mdb.sendFileFromAgtToSrv(ip, port, path + "/" + BOOTFILE_2, tftpRoot + "/" + DhcpClientInfo.getSimpleMac( bootMac ).toLowerCase() + "/" + BOOTFILE_2);
                                                if (isOk) {
                                                    view.initor.mdb.lvmCmd(ip, port , "rename_mac.sh " + path + " " + DhcpClientInfo.getSimpleMac( bootMac ).toLowerCase() );
                                                    isOk = view.initor.mdb.sendFileFromAgtToSrv(ip, port, path + "/" + "default", tftpRoot + "/" + IBOOTDIR +  "01-" + bootMac.toLowerCase().replaceAll(":", "-") );

                                                    //在服务器上创建一个文件记录网启信息
                                                    File tmpFile = view.initor.mdb.createTmpFile(ResourceCenter.PREFIX, ResourceCenter.SUFFIX_NETWORK);
                                                    NetWork netWork = new NetWork (host.getID()+"",host.getIP(),isOk) ;
                                                    view.initor.mdb.sendFileToServer(tmpFile.getName(), netWork.prtMe());
                                                    tmpFile.delete();
                                                    isOk = view.initor.mdb.moveFile(ResourceCenter.TMP_DIR + tmpFile.getName(),"/usr/odybk/server/conf/"+host.getID()+"-network.conf");
//                                                    if (isOk) {
//                                                        //setup dhcp
//                                                        Vector templist = view.initor.dhcpdb.getAllClient();
//                                                        if (templist != null && templist.size() > 0) {
//                                                            boolean hasinfo = false;
//                                                            for (int i = 0; i < templist.size(); i++) {
//                                                                DhcpClientInfo clnt = (DhcpClientInfo) templist.elementAt(i);
//                                                                if (DhcpClientInfo.getSimpleMac(clnt.mac).equals(DhcpClientInfo.getSimpleMac(host.getBootMac()))) {
//                                                                    hasinfo = true;
//                                                                }
//                                                            }
//                                                            if (hasinfo) {
//                                                                isOk = view.initor.dhcpdb.dhcpOperation(
//                                                                        ResourceCenter.BIN_DIR + "dhcp_set.sh delcli -p " + DhcpClientInfo.getSimpleMac(host.getBootMac()));
//                                                                if (isOk) {
//                                                                    DhcpClientInfo clnt1 = new DhcpClientInfo(ip, host.getBootMac(), ip.substring(0, ip.indexOf(".")), tXIp, "", "", "linux");
//                                                                    args += " -i " + ip + " -p " + DhcpClientInfo.getSimpleMac(host.getBootMac()) + " -s " + ip.substring(0, ip.indexOf(".")) + ".0" + " -x " + tXIp + " -ostype linux";
//                                                                    isOk = view.initor.dhcpdb.dhcpOperation(
//                                                                            ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args);
//
//                                                                    if (isOk) {
//                                                                        view.initor.dhcpdb.addClnt(clnt1);
//                                                                    } else {
//                                                                        errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.addclientFailed");
//                                                                        return false;
//                                                                    }
//                                                                } else {
//                                                                    errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.addclientFailed");
//                                                                    return false;
//                                                                }
//                                                            } else {
//                                                                DhcpClientInfo clnt1 = new DhcpClientInfo(ip, host.getBootMac(), ip.substring(0, ip.indexOf(".")), tXIp, "", "", "linux");
//                                                                args += " -i " + ip + " -p " + DhcpClientInfo.getSimpleMac(host.getBootMac()) + " -s " + ip.substring(0, ip.indexOf(".")) + ".0" + " -x " + tXIp + " -ostype linux";
//                                                                isOk = view.initor.dhcpdb.dhcpOperation(
//                                                                        ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args);
//
//                                                                if (isOk) {
//                                                                    view.initor.dhcpdb.addClnt(clnt1);
//                                                                } else {
//                                                                    errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.addclientFailed");
//                                                                    return false;
//                                                                }
//                                                            }
//                                                        } else {
//                                                            DhcpClientInfo clnt1 = new DhcpClientInfo(ip, host.getBootMac(), ip.substring(0, ip.indexOf(".")), tXIp, "", "", "linux");
//                                                            args += " -i " + ip + " -p " + DhcpClientInfo.getSimpleMac(host.getBootMac()) + " -s " + ip.substring(0, ip.indexOf(".")) + ".0" + " -x " + tXIp + " -ostype linux";
//                                                            isOk = view.initor.dhcpdb.dhcpOperation(
//                                                                    ResourceCenter.BIN_DIR + "dhcp_set.sh addcli " + args);
//
//                                                            if (isOk) {
//                                                                view.initor.dhcpdb.addClnt(clnt1);
//                                                            } else {
//                                                                errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.addclientFailed");
//                                                                return false;
//                                                            }
//                                                        }
//                                                    } else {
//                                                        errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.sendfailedFailed") +  ":" +path + "/" + host.getBootMac();
//                                                        return false;
//                                                    }
                                                } else {
                                                    errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.sendfailedFailed") + ":" + path + "/" + BOOTFILE_2;
                                                    return false;
                                                }
                                            } else {
                                                errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.sendfailedFailed") + ":" + path + "/" + BOOTFILE_1;
                                                return false;
                                            }
                                        } else {
                                            errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.mkdirFailed") + ":" + tftpRoot + "/" + host.getBootMac();
                                            return false;
                                        }
                                    } else {
                                        errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.gettftpRootPathFailed");
                                        return false;
                                    }
                                } else {
                                    errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.setupIbootFailed");
                                    return false;
                                    //setup failed
                                }
                            } else {
                                errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.vgonlineFailed") + ":" + vgName;
                                return false;
                            }

                        } else {
                            errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.loginUnixVolFailed") + ":" + targetid;
                            return false;
                        }

                    } else {
                        errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.addLVFailed");
                        return false;
                        //add lv failed
                    }
                } else {
                    errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.addVGFailed");
                    return false;
                    // add vg failed
                }
            } else {
                errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.addOrphVolFailed");
                return false;
                //add orphvol failed
            }
        } else {
            errMsg = SanBootView.res.getString("IbootForLinux64WizardDialog.error.getpoolFailed");
            return false;
            //no pool
        }
        JOptionPane.showMessageDialog(view,
                    SanBootView.res.getString("IbootForLinux64WizardDialog.successful")
                );
        return isOk;
    }

    public String findDevNameByTwoList(ArrayList<String> oldone, ArrayList<String> newone) {
        String ret = "";
        String temp, temp2;
        if (oldone != null && newone != null && oldone.size() > 0 && newone.size() > 0) {
            for (int i = 0; i < oldone.size(); i++) {
                temp = oldone.get(i);
                for (int j = 0; j < newone.size(); j++) {
                    temp2 = newone.get(j);
                    if (temp.equals(temp2)) {
                        newone.remove(temp2);
                        continue;
                    }
                }
            }
        }
        if (newone.size() == 1) {
            ret = newone.get(0);
        }
        return ret;
    }
}