/*
 * HostPropertyDialog.java
 *
 * Created on 2007/1/26, PM 1:23
 */

package guisanboot.ui;

import guisanboot.cluster.entity.Cluster;
import guisanboot.cluster.entity.SubCluster;
import guisanboot.cmdp.entity.PPProfileItem;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import mylib.UI.*;
import guisanboot.data.*;
import guisanboot.res.*;
        
/**
 *
 * @author  Administrator
 */
public class HostPropertyDialog extends javax.swing.JDialog {
    
    /** Creates new form HostPropertyDialog */
    public HostPropertyDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public HostPropertyDialog( SanBootView view,BootHost host,Cluster cluster,HashMap map ){
        this( view,true );
        myInit( view,host,cluster,map );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 1, 2, 1));

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Node Member", jPanel6);

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("File System", jPanel1);

        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Service", jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jTextArea1.setEditable(false);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jScrollPane3.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Network Info.", jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jTextArea2.setEditable(false);
        jTextArea2.setDisabledTextColor(java.awt.Color.black);
        jScrollPane4.setViewportView(jTextArea2);

        jPanel5.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Partition Info.", jPanel5);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HostPropertyDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
  
    SanBootView view;
    BootHost host;
    Cluster cluster;
    GeneralEditableTable table  = new GeneralEditableTable();
    GeneralEditableTable table1 = new GeneralEditableTable();
    GeneralEditableTable table2 = new GeneralEditableTable();
    
    private void myInit( SanBootView _view,BootHost _host,Cluster _cluster,HashMap map ){
        view = _view;
        host = _host;
        cluster = _cluster;
        
        jScrollPane1.getViewport().add( table,null );
        jScrollPane1.getViewport().setBackground( Color.white );
        
        jScrollPane2.getViewport().add( table1,null );
        jScrollPane2.getViewport().setBackground( Color.white );

        jScrollPane5.getViewport().add( table2,null );
        jScrollPane5.getViewport().setBackground( Color.white );

        setupLanguage();
        
        if( cluster != null ){
            setupMemberNode();
        }else{
            jTabbedPane1.remove( jPanel6 );
        }
        setupVolTable();
        setupServTable( map );
        setupNetworkInfo();
        setupPartitionInfo();
    }
    
    private void setupLanguage(){
        if( this.cluster != null ){
            setTitle( SanBootView.res.getString("HostPropertyDialog.title1"));
        }else{
            setTitle( SanBootView.res.getString("HostPropertyDialog.title"));
        }
        int index = jTabbedPane1.indexOfComponent( jPanel1 );
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("HostPropertyDialog.label.targetVol")
        );
        index = jTabbedPane1.indexOfComponent( jPanel3 );
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("HostPropertyDialog.label.service")
        );
        index = jTabbedPane1.indexOfComponent( jPanel4 );
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("HostPropertyDialog.label.network")
        );
        index =  jTabbedPane1.indexOfComponent( jPanel5 );
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("HostPropertyDialog.label.partition")
        );
        index =  jTabbedPane1.indexOfComponent( jPanel6 );
        jTabbedPane1.setTitleAt( index,
            SanBootView.res.getString("HostPropertyDialog.label.member")
        );
        jButton1.setText( SanBootView.res.getString("common.button.close"));
    }

    private void setupMemberNode(){
        Object[][] data;
        
        ArrayList<SubCluster> subcList = cluster.getRealSubCluster();
        int num = subcList.size();
        
        data = new Object[2+num][9]; // id,name,ip,pri-ip,vip,port,os,machine,uuid
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 9;      // col num

        data[1][0] = SanBootView.res.getString("View.table.host.id");
        data[1][1] = SanBootView.res.getString("View.table.host.name");
        data[1][2] = SanBootView.res.getString("View.table.host.ip");
        data[1][3] = SanBootView.res.getString("View.table.host.priip");
        data[1][4] = SanBootView.res.getString("View.table.host.vip");
        data[1][5] = SanBootView.res.getString("View.table.host.port");
        data[1][6] = SanBootView.res.getString("View.table.host.os");
        data[1][7] = SanBootView.res.getString("View.table.host.machine");
        data[1][8] = SanBootView.res.getString("View.table.host.uuid");

        int i=0;
        for( int j=0; j<num; j++ ){
            SubCluster subc = subcList.get( j );
            data[2+i][0] = subc.getHost();
            data[2+i][1] = subc.getHost().getName();
            data[2+i][2] = subc.getHost().getIP();
            data[2+i][3] = subc.getHost().getClnt_pri_ip();
            data[2+i][4] = subc.getHost().getClnt_vip();
            data[2+i][5] = subc.getHost().getPort()+"";
            data[2+i][6] = subc.getHost().getOS();
            data[2+i][7] = subc.getHost().getMachine();
            data[2+i][8] = subc.getHost().getUUID();
            i++;
        }
        
        table2.setTableModel( data );
        table2.setDefaultLook();
        
        TableColumnModel tableColumnModel = table2.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 55 );
        tableColumnModel.getColumn(1).setWidth( 160 );
        tableColumnModel.getColumn(2).setWidth( 115 );
        tableColumnModel.getColumn(3).setWidth( 115 );
        tableColumnModel.getColumn(4).setWidth( 115 );
        tableColumnModel.getColumn(5).setWidth( 55 );
        tableColumnModel.getColumn(6).setWidth( 100 );
        tableColumnModel.getColumn(7).setWidth( 100 );
        tableColumnModel.getColumn(8).setWidth( 250 );
        for( i=0;i<colNum;i++ )
            table2.sizeColumnsToFit(i);
            
        table2.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table2.getTableHeader().setReorderingAllowed(false);
    }

    private void  setupVolTable(){
        int i,tid,vtid,colSize;
        String crttime;
        Object[][] data;
        Vector list;
        boolean isMtpp;

        colSize = 6;
        if( cluster != null ){
            list = view.initor.mdb.getVolFromCluster1( cluster.getCluster_id() );
        }else{
            list = view.initor.mdb.getVolMapOnClntID( host.getID() );
        }
        int num = list.size();
        
        data = new Object[2+num][colSize];
        data[0][0] = "" + num;      // row num
        data[0][1] = "" + colSize;  // col num
        
        data[1][0] =  SanBootView.res.getString("View.table.volmap.fs");
        data[1][1] =  SanBootView.res.getString("View.table.volmap.name");
        data[1][2] =  SanBootView.res.getString("View.table.volmap.targetid");  
        data[1][3] =  SanBootView.res.getString("View.table.volmap.maxSnap");
        data[1][4] =  SanBootView.res.getString("View.table.volmap.selBootVer");
        data[1][5] =  SanBootView.res.getString("View.table.volmap.bootVer");
        
        for( i=0; i<num; i++ ){
            VolumeMap volMap = (VolumeMap)list.elementAt( i );
            tid = volMap.getVolTargetID();
            data[2+i][0] = volMap;
            data[2+i][1] = volMap.getVolName();
            data[2+i][2] = tid + "";
            if( this.cluster != null ){
                isMtpp = cluster.isMTPPProtect() || volMap.isMtppProtect();
            }else{
                isMtpp = host.isMTPPProtect() || volMap.isMtppProtect();
            }
            if( isMtpp ){
                data[2+i][3] = volMap.getMaxSnapNum()+"";
            }else{
                MirrorGrp mg = view.initor.mdb.getMGFromVectorOnRootID( volMap.getVol_rootid() );
                if( mg != null ){
                    data[2+i][3] = mg.getMg_max_snapshot()+"";
                }else{
                    data[2+i][3] = "";
                }
            }
            
            vtid = volMap.getVol_last_sel_boot_version();
            if( vtid == -1 || vtid == 0 ){
                data[2+i][4] = SanBootView.res.getString("common.noprotected");
            }else{
                if( vtid == tid ){
                    data[2+i][4] = SanBootView.res.getString("common.vol") + ":" + tid;
                }else{
                    crttime = BasicVDisk.getCreateTimeStr( volMap.getVol_last_sel_boot_info() );
                    if( volMap.isCloneDiskForLastSelBoot() ){
                        if( !crttime.equals("") ){
                            data[2+i][4] = SanBootView.res.getString("common.cdisk") + ":" + vtid + " [" + crttime + "]";
                        }else{
                            data[2+i][4] = SanBootView.res.getString("common.cdisk") + ":" + vtid;
                        }
                    }else{
                        if( !crttime.equals("") ){
                            data[2+i][4] = SanBootView.res.getString("common.view") + ":" + vtid + " [" + crttime + "]";
                        }else{
                            data[2+i][4] = SanBootView.res.getString("common.view") + ":" + vtid;
                        }
                    }
                }
            }

            vtid = volMap.getVol_view_targetid();
            if( vtid == -1 || vtid == 0 ){
                data[2+i][5] = SanBootView.res.getString("common.noprotected");
            }else{
                if( vtid == tid ){
                    data[2+i][5] = SanBootView.res.getString("common.vol") + ":" + tid;
                }else{
                    crttime = BasicVDisk.getCreateTimeStr( volMap.getLastGoodBootInfo() );
                    if( volMap.isCloneDiskForLastGoodBoot() ){
                        if( !crttime.equals("") ){
                            data[2+i][5] = SanBootView.res.getString("common.cdisk") + ":" + vtid + " [" + crttime + "]";
                        }else{
                            data[2+i][5] = SanBootView.res.getString("common.cdisk") + ":" + vtid;
                        }
                    }else{
                        if( !crttime.equals("") ){
                            data[2+i][5] = SanBootView.res.getString("common.view") + ":" + vtid + " [" + crttime + "]";
                        }else{
                            data[2+i][5] = SanBootView.res.getString("common.view") + ":" + vtid;
                        }
                    }
                }
            }
        }
        
        table.setTableModel( data );
        table.setDefaultLook();

        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 70 );
        tableColumnModel.getColumn(1).setWidth( 75 );
        tableColumnModel.getColumn(2).setWidth( 55 );
        tableColumnModel.getColumn(3).setWidth( 70 );
        tableColumnModel.getColumn(4).setWidth( 225 );
        tableColumnModel.getColumn(5).setWidth( 225 );
        for( i=0; i<colNum; i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
    }

    private void setupServTable( HashMap map ){
        if( cluster != null ){
            setupServTableForCMDP( map );
        }else{
            if( host.isMTPPProtect() ){
                setupServTableForMTPP();
            }else{
                setupServTableForCMDP( map );
            }
        }
    }
    
    private HashMap getServiceForCMDP( HashMap map ){
        ArrayList<PPProfileItem> itemList;

        if( host != null ){
            itemList = view.initor.mdb.getPPProfileItem( host.getID() );
        }else{
            itemList = view.initor.mdb.getPPProfileItem1( cluster.getCluster_id() );
        }
        HashMap<String,Service> ret = new HashMap<String,Service>();

        int size = itemList.size();
        for( int i=0; i<size; i++ ){
            PPProfileItem item = itemList.get(i);
            String[] sList = item.getVolMap().getServices();
            for( int j=0; j<sList.length; j++ ){
                if( sList[j].equals("") ) continue;

                Object serv = map.get( sList[j] );
                if( serv != null ){
                    if( ret.get( sList[j]) == null ){
                        Service servObj = (Service)serv;
                        ret.put( sList[j], servObj );
                    }
                }
            }
        }
        return ret;
    }
    
    private void setupServTableForCMDP( HashMap map ){
        Object[][] data;
        
        HashMap list = this.getServiceForCMDP( map );
        Set keySet = list.keySet();
        Iterator iterator = keySet.iterator();
        int num = keySet.size();

        data = new Object[2+num][2]; //name,desc
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 2;      // col num

        data[1][0] = SanBootView.res.getString("SelectServicePane.table.service.name");
        data[1][1] = SanBootView.res.getString("SelectServicePane.table.service.desc");
        
        int i=0;
        while( iterator.hasNext() ){
            String key = (String)iterator.next();
            Service serv = (Service)list.get( key );
            data[2+i][0] = serv.getServName();
            data[2+i][1] = serv.getServDesc();
            i++;
        }

        table1.setTableModel( data );
        table1.setDefaultLook();

        TableColumnModel tableColumnModel = table1.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 150 );
        tableColumnModel.getColumn(1).setWidth( 300 );
        for( i=0;i<colNum;i++ )
            table1.sizeColumnsToFit(i);

        table1.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table1.getTableHeader().setReorderingAllowed(false);
    }
    
    private void setupServTableForMTPP(){
        int i;
        Object[][] data;

        Vector list = view.initor.mdb.getAllServMapOnClntID( host.getID() );
        int num = list.size();

        data = new Object[2+num][2]; //name,desc
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 2;      // col num

        data[1][0] = SanBootView.res.getString("SelectServicePane.table.service.name");
        data[1][1] = SanBootView.res.getString("SelectServicePane.table.service.desc");
        
        for( i=0; i<num; i++ ){
            ServiceMap servMap = (ServiceMap)list.elementAt(i);
            
            data[2+i][0] = servMap;
            data[2+i][1] = servMap.getServDesc();
        }

        table1.setTableModel( data );
        table1.setDefaultLook();

        TableColumnModel tableColumnModel = table1.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 150 );
        tableColumnModel.getColumn(1).setWidth( 300 );
        for( i=0;i<colNum;i++ )
            table1.sizeColumnsToFit(i);

        table1.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table1.getTableHeader().setReorderingAllowed(false);
    }
    
    private void setupNetworkInfo(){
        boolean isOk;
        String sep ="*********************************************************************************";
        
        if( host != null ){
            isOk = view.initor.mdb.viewFileContents( ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_IP );
            if( isOk ){
                jTextArea1.append( view.initor.mdb.getContentBuf().toString() );
            }else{
                if( host.isInited() ){
                    jTextArea1.append( SanBootView.res.getString("HostPropertyDialog.error.getNetworkInfo"));
                }
            }
        }else{
            ArrayList<SubCluster> subcList = cluster.getRealSubCluster();
            int size = subcList.size();
            boolean isFirst = true;
            for( int i=0; i<size; i++ ){
                BootHost aHost = subcList.get(i).getHost();
                isOk = view.initor.mdb.viewFileContents( ResourceCenter.CLT_IP_CONF + "/" + aHost.getID() + ResourceCenter.CONF_IP );
                if( isOk ){
                    if( isFirst ){
                        jTextArea1.append( view.initor.mdb.getContentBuf().toString() );
                        isFirst = false;
                    }else{
                        jTextArea1.append( "\n" );
                        jTextArea1.append( sep );
                        jTextArea1.append( "\n\n" );
                        jTextArea1.append( view.initor.mdb.getContentBuf().toString() );
                    }
                }else{
                    if( aHost.isInited() ){
                        if( isFirst ){
                            jTextArea1.append( SanBootView.res.getString("HostPropertyDialog.error.getNetworkInfo")+" : "+aHost.getIP() );
                            isFirst = false;
                        }else{
                            jTextArea1.append( "\n" );
                            jTextArea1.append( sep );
                            jTextArea1.append( "\n\n" );
                            jTextArea1.append( SanBootView.res.getString("HostPropertyDialog.error.getNetworkInfo")+" : "+aHost.getIP() );
                        }
                    }
                }
            }
        }
    }
    
    private void setupPartitionInfo(){
        boolean isOk;
        String sep ="*********************************************************************************";

        if( host != null ){
            isOk = view.initor.mdb.viewFileContents( ResourceCenter.CLT_IP_CONF + "/" + host.getID() + ResourceCenter.CONF_NORMAL_DISK );
            if( isOk ){
                jTextArea2.append( view.initor.mdb.getContentBuf().toString() );
            }else{
                if( host.isInited() ){
                    jTextArea2.append( SanBootView.res.getString("HostPropertyDialog.error.getPartitionInfo") );
                }
            }
        }else{
            ArrayList<SubCluster> subcList = cluster.getRealSubCluster();
            int size = subcList.size();
            boolean isFirst = true;
            for( int i=0; i<size; i++ ){
                BootHost aHost = subcList.get(i).getHost();
                isOk = view.initor.mdb.viewFileContents( ResourceCenter.CLT_IP_CONF + "/" + aHost.getID() + ResourceCenter.CONF_NORMAL_DISK );
                if( isOk ){
                    if( isFirst ){
                        jTextArea2.append( view.initor.mdb.getContentBuf().toString() );
                        isFirst = false;
                    }else{
                        jTextArea2.append( "\n" );
                        jTextArea2.append( sep );
                        jTextArea2.append( "\n\n" );
                        jTextArea2.append( view.initor.mdb.getContentBuf().toString() );
                    }
                }else{
                    if( aHost.isInited() ){
                        if( isFirst ){
                            jTextArea2.append( SanBootView.res.getString("HostPropertyDialog.error.getPartitionInfo")+" : "+aHost.getIP() );
                            isFirst = false;
                        }else{
                            jTextArea2.append( "\n" );
                            jTextArea2.append( sep );
                            jTextArea2.append( "\n\n" );
                            jTextArea2.append( SanBootView.res.getString("HostPropertyDialog.error.getPartitionInfo")+" : "+aHost.getIP() );
                        }
                    }
                }
            }
        }
    }
}
