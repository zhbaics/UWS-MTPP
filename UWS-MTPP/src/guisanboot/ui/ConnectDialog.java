/*
 * ConnectDialog.java
 *
 * Created on October 19, 2004, 9:10 PM
 */

package guisanboot.ui;

import guisanboot.data.GUIAdminOptUWS;
import java.awt.*;
import java.awt.event.*;
import javax.swing.border.*;
import guisanboot.res.*;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import mylib.tool.Check;

/**
 *
 * @author  Administrator
 */
public class ConnectDialog extends javax.swing.JDialog {
    Object[] values = null;
    
    /** Creates new form ConnectDialog */
    public ConnectDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public ConnectDialog(Frame frame, String ip, int port, String user, String passwd) {
        this(frame,true);
        myInit((SanBootView)frame,ip );
    }
    
    public ConnectDialog(Frame frame,String ip,int port,String user ){
        this( frame,true );
        myInit( (SanBootView)frame,ip );
    }
    
    public ConnectDialog(Frame frame,GUIAdminOptUWS uws ){
        this( frame,true );
        myInit( (SanBootView)frame,uws );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("Login"));
        jLabel1.setText("Server : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Port : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextField2.setPreferredSize(new java.awt.Dimension(70, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(jTextField2, gridBagConstraints);

        jLabel3.setText("User : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jTextField3.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel1.add(jTextField3, gridBagConstraints);

        jLabel4.setText("Password : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jPasswordField1.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel1.add(jPasswordField1, gridBagConstraints);

        jComboBox1.setPreferredSize(new java.awt.Dimension(120, 20));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(jComboBox1, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 1, 1, 1)));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jButton1.setText("Connect");
        jButton1.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton2);

        jButton3.setText("Admin Option");
        jButton3.setPreferredSize(new java.awt.Dimension(120, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton3);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        comboBox_process();
    }//GEN-LAST:event_jComboBox1ActionPerformed
    
    private void comboBox_process(){
        int size = jComboBox1.getModel().getSize();
        if( size <=0 ) return;
        
        Object obj = jComboBox1.getSelectedItem();
        GUIAdminOptUWS uws = (GUIAdminOptUWS)obj;
        
        this.jTextField2.setText( uws.getPort()+"" );
        this.jTextField3.setText( uws.getUser() );
        this.jPasswordField1.setText( "" );
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        OptionDialog dialog = new OptionDialog( view,1 );
        int width  = 430+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 265+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( view.getCenterPoint( width,height ) );
        dialog.setVisible( true );
        
        setupUWScombox( ip );
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        values = null;
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Object obj = jComboBox1.getSelectedItem();
        if( obj == null ) return;
        
        GUIAdminOptUWS uws = null;
        String aIp,txIP;
        if( obj instanceof GUIAdminOptUWS ){
            uws = (GUIAdminOptUWS)obj;
            aIp = uws.getServerIp();
            txIP = uws.getTxIP();
            
            if( aIp.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("OptionDialog.error.noneAdminIP")
                );
                return;
            }
            
            if( !Check.ipCheck( aIp ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("OptionDialog.error.badAdminIP")
                );
                return;
            }
            
            if( txIP.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("OptionDialog.error.noneTxIP")
                );
                return;
            }
            
            if( !Check.ipCheck( txIP ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("OptionDialog.error.badTxIP")
                );
                return;
            }
            
        }else{
            aIp = ((String)obj).trim();
            if( aIp.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("ConnectDialog.error.noneIP")
                );
                return;
            }
            
            if( !Check.ipCheck( aIp ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("ConnectDialog.error.badIP")
                );
                return;
            }
            uws = view.initor.adminOpt.getUWS( aIp );
        }
        
        String _port = jTextField2.getText().trim();
        if( _port.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("ConnectDialog.errMsg.nullPort")
            );
            return;
        }
        
        if( !Check.digitCheck( _port ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("ConnectDialog.errMsg.badPort")
            );
            return;
        }

        int port = ResourceCenter.C_S_PORT;
        try{
            port = Integer.parseInt( _port );
        }catch(Exception ex){}

        if( port <1 || port >65535 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("ConnectDialog.errMsg.invalidPort")
            );
            return ;
        }        
        
        String user = jTextField3.getText().trim();
        if( user.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("ConnectDialog.errMsg.noneUser")
            );
            return;
        }
        
        if( Check.checkInput( user ) ){
             JOptionPane.showMessageDialog(null,
                SanBootView.res.getString("ConnectDialog.errMsg.badUser")
             );
             return;
        }
        
        if( user.getBytes().length >= 32 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("ConnectDialog.errMsg.invalidUser")
            );
            return;
        }
        
        String pwd = new String( jPasswordField1.getPassword() );
        if( !pwd.equals("") ){    
            if( pwd.getBytes().length >= 32  ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("ConnectDialog.errMsg.invalidPwd")
                );
                return;
            }
        }
        
        values = new Object[5];
        values[0] = new String( aIp );
        values[1] = new String( user );
        values[2] = new String ( pwd );
        values[3] = new Integer( port );
        values[4] = uws;
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new ConnectDialog(new javax.swing.JFrame(), true).setVisible( true );
    }
    
    ////GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    ////GEN-END:variables
    
    SanBootView view;
    String ip;
    
    private void myInit( SanBootView view, GUIAdminOptUWS uws  ){
        if( uws == null ){
            myInit( view,"" );
        }else{
            myInit( view,uws.getServerIp() );
        }
    }
    
    private void myInit( SanBootView view,String ip ){
        this.view = view;
        
        this.ip = ip;
        setupUWScombox( ip );
        
        regKeyboardAction();
        if( !ip.equals("") ){
            jPasswordField1.requestFocus();
        }else{
            jComboBox1.requestFocus();
        }
        setupLanguage();
        
        jPasswordField1.addKeyListener(new java.awt.event.KeyAdapter(){
            @Override public void keyPressed( KeyEvent e ){
                if( e.getKeyCode() == KeyEvent.VK_ENTER ){
                    jButton1ActionPerformed(null);
                }
            }
        });
    }
    
    public void myRequestFocus(){
        int size = jComboBox1.getModel().getSize();
        if( size > 0 ){
            jPasswordField1.requestFocus();
        }else{
            jComboBox1.requestFocus();
        }
    }
    
    private void regKeyboardAction(){
        jComboBox1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField2.requestFocusInWindow();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
        
        jTextField2.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField3.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            //JComponent.WHEN_IN_FOCUSED_WINDOW
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
          
        jTextField3.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jPasswordField1.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            //JComponent.WHEN_IN_FOCUSED_WINDOW
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
    }
    
    private void setupUWScombox( String ip ){
        int index=0 ;
        
        jComboBox1.removeAllItems();
        
        ArrayList list = view.initor.adminOpt.getAllUWS();
        int size = list.size();
        for( int i=0; i<size; i++ ){            
            GUIAdminOptUWS uws = (GUIAdminOptUWS)list.get(i);
//System.out.println(" uws: "+ uws.getServerIp() );            
            if( uws.getServerIp().equals(ip) ){
                index = i;
            }
            jComboBox1.addItem( list.get(i) );
        }
        
        if( size > 0 ){
            jComboBox1.setSelectedIndex( index );
        }else{
            jTextField2.setText( "" );
            jTextField3.setText( "" );
            jPasswordField1.setText( "" );
        }
    }
    
    private void setupLanguage(){
        setTitle(SanBootView.res.getString("ConnectDialog.dialog_title"));
        TitledBorder bor = (TitledBorder)jPanel1.getBorder();
        bor.setTitle(SanBootView.res.getString("ConnectDialog.border.title2"));
        jLabel3.setText(SanBootView.res.getString("ConnectDialog.label.text2")); //"Password");
        jLabel2.setText(SanBootView.res.getString("ConnectDialog.label.text4")); //"User");
        jLabel1.setText(SanBootView.res.getString("ConnectDialog.label.text3")); //"Server");
        jLabel4.setText(SanBootView.res.getString("ConnectDialog.label.text1")); //"Port"
        
        jButton1.setText(SanBootView.res.getString("ConnectDialog.button.connect"));
        jButton2.setText(SanBootView.res.getString("common.button.cancel"));
        jButton3.setText(SanBootView.res.getString("ConnectDialog.button.adminOpt"));
    }
    
    public Object[] getValues(){
        return values;
    }
}
