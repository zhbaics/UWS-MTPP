/*
 * SelectBootHostPane.java
 *
 * Created on 2006/12/29,��AM 9:52
 */

package guisanboot.ui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import java.util.*;
import mylib.tool.*;
import guisanboot.data.*;
import guisanboot.res.ResourceCenter;

/**
 *
 * @author  Administrator
 */
public class SelectBootHostPane extends javax.swing.JPanel {
    
    /** Creates new form SelectBootHostPane */
    public SelectBootHostPane() {
        initComponents();
    }
    
    public SelectBootHostPane( SanBootView view,int osType,BootHost selHost ){
        this();
        myInit( view,osType,selHost );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 70));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jRadioButton1.setText("jRadioButton1");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButton1, java.awt.BorderLayout.PAGE_END);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Clinet"));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Client IP :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel5.add(jLabel1, gridBagConstraints);

        jLabel2.setText("CMDP Port :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel2, gridBagConstraints);

        jTextField2.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel5.add(jTextField2, gridBagConstraints);

        jComboBox1.setEditable(true);
        jComboBox1.setPreferredSize(new java.awt.Dimension(120, 20));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                combobox_keyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel5.add(jComboBox1, gridBagConstraints);

        jLabel3.setText("MTPP Port :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel5.add(jLabel3, gridBagConstraints);

        jTextField3.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel5.add(jTextField3, gridBagConstraints);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 45));
        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void combobox_keyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_combobox_keyPressed
        Object obj = jComboBox1.getSelectedItem();
        if( obj == null || obj.equals("") ) return;
        
        if( !(obj instanceof HostWrapper) ){
            findHost( (String)obj );
        }
        
    }//GEN-LAST:event_combobox_keyPressed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        processComboBoxEvent();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
    
    WizardDialogSample wizardDiag;
    SanBootView view;
    int osType;  // 0: logical-windows  1: logical-non-windows  2: physical-windows 3: ams-linux 4:lvm-linux
    
    private void myInit( SanBootView _view,int _osType,BootHost selHost ){
        view = _view;
        osType = _osType;
        jComboBox1.setRenderer( new HostRenderer() );
        setupClntComboBox( selHost );
        setupLanguage();
        jTextArea1.setText(
            SanBootView.res.getString("InitBootHostWizardDialog.tip1")
        );

        if( osType != 2 && osType != 3 && osType != 4 ) {
            jPanel5.remove( this.jLabel2 );
            jPanel5.remove( this.jTextField2 );
            jPanel4.remove( this.jRadioButton1);
        }
        if(osType == 3 || osType == 4 ){
            jPanel5.remove( this.jLabel2 );
            jPanel5.remove( this.jTextField2 );
            jLabel3.setText("保护端口 :");
        }
     
        regKeyboardAction();
    }
    
    private void setupLanguage(){
        jRadioButton1.setText(SanBootView.res.getString("SelectBootHostPane.borderTitle.cluster"));
        ((TitledBorder)jPanel5.getBorder()).setTitle(
            SanBootView.res.getString("SelectBootHostPane.borderTitle.clt")
        );
        jLabel1.setText(SanBootView.res.getString("SelectBootHostPane.label.clntIP"));
        jLabel2.setText( SanBootView.res.getString("SelectProtectedSysVolPane.combox.pp") +
                SanBootView.res.getString("SelectBootHostPane.label.port"));
        jLabel3.setText( SanBootView.res.getString("SelectProtectedSysVolPane.combox.lp") +
                SanBootView.res.getString("SelectBootHostPane.label.port"));
    }
    
    ArrayList findHost = new ArrayList();
    private void findHost( String ip ){
        findHost.clear();
        
        ComboBoxModel model = jComboBox1.getModel();
        int size = model.getSize();
        for( int i=0; i<size; i++ ){
            HostWrapper host = (HostWrapper)model.getElementAt(i);
            if( host.toString().startsWith( ip ) ){
                findHost.add( host );
            }
        }
    }
    
    private void setupClntComboBox( BootHost selHost ){
        BootHost host;
        HostWrapper wrap,selWrap=null;
        
        // 初始化过的客户端还可以再次初始化
        Vector list = view.initor.mdb.getAllBootHost();
        int size = list.size();
        for( int i=0; i<size; i++ ){
            host = (BootHost)list.elementAt( i );
            wrap = new HostWrapper( host );
            if( (selHost !=null) && (selHost.getID() == host.getID()) ){
                selWrap = wrap;
                if( selHost.getUUID().startsWith("CLUSTER-")){
                    jRadioButton1.setSelected(true);
                }
            }
            if( osType == 0 ){
                if( host.isWinHost() && host.isMTPPProtect() ){
                    jComboBox1.addItem( wrap );
                }
            }else if( osType == 1 ){
                if( !host.isWinHost() ){
                    jComboBox1.addItem( wrap );
                }
            }else if( osType == 2 ){
                if( host.isWinHost() && host.isCMDPProtect() ){
                    jComboBox1.addItem( wrap );
                }
            }else if( osType ==3 ){
            	if( !host.isWinHost() ){
            		jComboBox1.addItem( wrap );
            	}
            }else if( osType ==4){
               	if( !host.isWinHost() ){
            		jComboBox1.addItem( wrap );
            	}
            }
        }
        
        if( selWrap != null ){
            jComboBox1.setSelectedItem( selWrap );
            jTextField2.setText( selWrap.getCmdpPort() + "" );
            jTextField3.setText( selWrap.getMtppPort() + "" );
        }else{
            jComboBox1.setSelectedIndex( -1 );
            if( osType == 1 ){
                jTextField3.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
            }else if( osType ==3 ){
            	jTextField3.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
            }else if( osType == 4){
                jTextField3.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
            }
            else{
                jTextField2.setText( ResourceCenter.CMDP_AGENT_PORT+"" );
                jTextField3.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
            }
        }
    }
    
    private void processComboBoxEvent(){
        Object obj = jComboBox1.getSelectedItem();
        if( obj == null ) return;
        
        if( obj instanceof HostWrapper ){
            jTextField2.setText( ((HostWrapper)obj).getCmdpPort()+"" );
            jTextField3.setText( ((HostWrapper)obj).getMtppPort()+"" );
        }else{
            if( this.osType == 1 ){
                jTextField3.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
            }else if( this.osType == 3 ){
            	jTextField3.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
            }else if(this.osType == 4 ){
                jTextField3.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
            }else{
                jTextField2.setText( ResourceCenter.CMDP_AGENT_PORT+"" );
                jTextField3.setText( ResourceCenter.MTPP_AGENT_PORT+"" );
            }
        }
    }
    
    private void regKeyboardAction(){
        jComboBox1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jTextField2.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
          
        jTextField2.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    wizardDiag.nextButtonProcess();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
    }
    
    public void setWizardDialogSample( WizardDialogSample wdiag ){
        wizardDiag = wdiag;
    }
    
    String _ip;
    int port;
    int mtpp_port;
    String uuid="";
    public boolean checkClntInfoValidity(){
        boolean isHost=true;
        
        Object obj = jComboBox1.getSelectedItem();
        if( obj == null ) return false;
        
        if( obj instanceof HostWrapper ){           
            _ip = (((HostWrapper)obj).toString()).trim();
            uuid = ((HostWrapper)obj).getUUID();
        }else{
            isHost = false;
            _ip = ((String)obj).trim();
        }
        
        if( _ip.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.noneIP")
            );
            return false;
        }
        
        if( isHost ){
            if( uuid.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.noneUUID")
                );
                return false;
            }
        }
        
        if( !Check.ipCheck( _ip ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidIP")
            );
            return false;
        }

        if( osType == 2 ){
            String _port = jTextField2.getText().trim();
            if( _port.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.nonePort")
                );
                return false;
            }

            if( !Check.digitCheck( _port ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.invalidPort")
                );
                return false;
            }

            port = -1;
            try{
                port = Integer.parseInt( _port );
            }catch(Exception ex){}

            if( port <1 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.badPort")
                );
                return false;
            }

            if( port >65535 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("AddHostDialog.errMsg.badPort")
                );
                return false;
            }
        }
        
        String _port1 = jTextField3.getText().trim();
        if( _port1.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.nonePort")
            );
            return false;
        }

        if( !Check.digitCheck( _port1 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.invalidPort")
            );
            return false;
        }

        mtpp_port = -1;
        try{
            mtpp_port = Integer.parseInt( _port1 );
        }catch(Exception ex){}

        if( mtpp_port < 1 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.badPort")
            );
            return false;
        }

        if( mtpp_port > 65535 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("AddHostDialog.errMsg.badPort")
            );
            return false;
        }

        // 找出对应的UUID
        if( uuid.equals("") ){
            findHost( _ip );
            int size = findHost.size();
            if( size > 1 ){
SanBootView.log.error( getClass().getName(),"There exist several host with same ip: "+ _ip);                
                JOptionPane.showMessageDialog( this, SanBootView.res.getString("AddHostDialog.errMsg.sameIP") );
                return false;
            }else{
                if( size == 1 ){
                    uuid = ((HostWrapper)findHost.get(0)).getUUID();
                }
            }
        }
         
        return true;
    }
    
    public void setFocusOnTextField1(){
        jComboBox1.requestFocus();
    }
    
    // 为了每次jComboBox1都获取焦点，必须overwrite paintComponent方法
    @Override public void paintComponent( Graphics g ){
        super.paintComponent( g );
        setFocusOnTextField1();
    }
    
    public String getIP(){
        return _ip;
    }
    public int getPort(){
        if( this.osType == 2 ){
            return port;
        }else{
            return this.mtpp_port;
        }
    }
    public int getMtppPort(){
        return this.mtpp_port;
    }
    public String getUUID(){  
        return uuid;
    }
    /**
     * hwh
     */
    public boolean cluster(){
        return jRadioButton1.isSelected();
    }
    
}

class HostRenderer extends DefaultListCellRenderer{ 
    @Override public Component getListCellRendererComponent( JList list,
                                                 Object value,
                                                 int index,
                                                 boolean isSelected,
                                                 boolean cellHasFocus){
        super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
        if( value != null ) {
            if( value instanceof HostWrapper){
                HostWrapper wrap =(HostWrapper)value;
                setText( wrap.toString() );
            }else{
                setText( (String)value );
            }
        }
        return this;
    }
}
