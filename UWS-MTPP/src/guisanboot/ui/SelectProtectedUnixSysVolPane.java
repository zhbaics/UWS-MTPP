package guisanboot.ui;

import guisanboot.ams.entity.VolumeWrapper3;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import guisanboot.res.*;
import guisanboot.data.*;
import guisanboot.ui.multiRenderTable.*;
import guisanboot.cmdp.ui.multiRenderTable.MyDefaultTableModelForTabX2;
import guisanboot.cmdp.ui.multiRenderTable.JTableX2;
import java.util.regex.Pattern;

/**
 *
 * @author  Administrator
 */
public class SelectProtectedUnixSysVolPane extends javax.swing.JPanel implements SelectProtectedFS {
    
    /** Creates new form SelectBootHostPane */
    public SelectProtectedUnixSysVolPane() {
        initComponents();
    }
    
    public SelectProtectedUnixSysVolPane( SanBootView view ) {
        this( view,ResourceCenter.CMD_TYPE_MTPP );
    }

    public SelectProtectedUnixSysVolPane( SanBootView view, int mode ) {
        this();
        myInit( view, mode );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 60));
        jScrollPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 1, 1, 1)));
        jRadioButton1.setText("Copy OS and Modify Boot Config");
        jRadioButton1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jRadioButton1.setPreferredSize(new java.awt.Dimension(190, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel7.add(jRadioButton1, gridBagConstraints);

        jRadioButton3.setText("Do nothing");
        jRadioButton3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel7.add(jRadioButton3, gridBagConstraints);

        jRadioButton2.setText("Only modify boot config");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel7.add(jRadioButton2, gridBagConstraints);

        jLabel1.setPreferredSize(new java.awt.Dimension(10, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        jPanel7.add(jLabel1, gridBagConstraints);

        jPanel5.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    ////GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    ////GEN-END:variables
    
    JTableW table;
    JTable tableAms;
    SanBootView view;
    Object[] header;
    Object[] label;
    WizardDialogSample wizardDiag;
    float vgSize;
    ButtonGroup grp = new ButtonGroup();
    int mode;
    private boolean hasEnoughSpace = true;

    private void myInit( SanBootView _view, int mode ){
        view = _view;
        this.mode = mode;
        
        jTextArea1.setText(
            SanBootView.res.getString("InitBootHostWizardDialog.tip2")
        );
        
        jRadioButton1.setText( SanBootView.res.getString("SelectProtectedSysVolPane.radioBtn.copyos1") );
        jRadioButton2.setText( SanBootView.res.getString("SelectProtectedSysVolPane.radioBtn.modConf") );
        jRadioButton3.setText( SanBootView.res.getString("SelectProtectedSysVolPane.radioBtn.doNothing") );
        
        grp.add( jRadioButton1 );
        grp.add( jRadioButton2 );
        grp.add( jRadioButton3 );
        
        jPanel7.remove( jRadioButton1 );
        jPanel7.remove( jRadioButton2 );
        jPanel7.remove( jRadioButton3 );
        jPanel7.remove( jLabel1 );
        jRadioButton3.setSelected( true );
    }
    
    public void modTipText( float _vgSize ){
        jTextArea1.append( SanBootView.res.getString("SelectProtectedSysVolPane.label.maxFreeSize") +
                "  "+
                _vgSize + 
                "GB  " +
                SanBootView.res.getString("SelectProtectedSysVolPane.label.maxFreeSize1"));
        vgSize = _vgSize;
    }

    public void setHasEnoughSpaceFlag( boolean val ){
        this.hasEnoughSpace = val;
    }


    public void setupTable( Vector list,Vector lvmTypeList ){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            this.setupTableForMTPP( list, lvmTypeList );
        }else{
                this.setupTableForAms( list, lvmTypeList );
        }
    }

    public void setupTableForMTPP( Vector list,Vector lvmTypeList ){ 
        int i;
        long cap;
        Object[][] data;
        String[] capList;
        LVWrapper lvWrapper;
        
        ArrayList blkList = BasicVDisk.getBlkSizeList();
        ArrayList poolList = view.initor.mdb.getPoolWrapList( true );
        
        int num = list.size();
        data = new Object[num][12]; 
        
        header = new Object[12]; 
        label = new Object[num];
        capList = new String[num]; //记录缺省大小
        
        header[0] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.protected");
        header[1] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.fs");
        header[2] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.property");
        header[3] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.action");
        header[4] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.name");
        header[5] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.size");
        header[6] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.blksize");
        header[7] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.pool");
        header[8] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.volType");
        header[9] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.snapSpace");
        header[10] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.maxSnap");
        header[11] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.formatted");
        
        for( i=0; i<num; i++ ){
            BindOfUnixPartandLV binder = (BindOfUnixPartandLV)list.elementAt(i);
            data[i][0] = new Boolean( binder.isProtected );
            data[i][1] = binder.part;
            data[i][2] = binder.part.devType;
            
            if( binder.isRealLV ){
                lvWrapper = new LVWrapper( binder.lv, binder.rawTgt, binder.lvType, binder.snapSapce );
                data[i][4] = lvWrapper;
                data[i][3] = Boolean.FALSE;
                data[i][5] = binder.tgtSize;
            }else{
                data[i][4] = binder.lvName; 
                if( binder.rawTgt != null ){
                    data[i][3] = Boolean.FALSE;
                    data[i][5] = new VolumeWrapper( binder.rawTgt );
                }else{
                    if( this.hasEnoughSpace ){
                        data[i][3] = Boolean.TRUE;
                        // 当存在对应的volmap时，就显示volmap的大小；否则显示实际分区的大小
                        if( binder.tgtSize.equals("") ){
                            cap = binder.part.getSizeInGiga();
                            data[i][5] = (cap == -1L)? "" : cap+"";
                        }else{
                            data[i][5] = binder.tgtSize;
                        }
                    }else{
                        data[i][3] = Boolean.FALSE;
                        // 不能创建新盘了，只能选择target。现在只能赋空值。
                        data[i][4] = "";
                        data[i][5] = null;
                    }
                }
            }
            
            if( data[i][5] instanceof VolumeWrapper ){
                capList[i] = ((VolumeWrapper)data[i][5]).toString();
            }else{
                capList[i] = (String)data[i][5];            
            }
            
            if( binder.isRealLV ){
//System.out.println(" blk size: "+binder.rawTgt.getSnap_block_size() );                
                data[i][6] = BasicVDisk.getBlkSizeStr( binder.rawTgt.getSnap_block_size() );
            }else{
                data[i][6] = BasicVDisk.BLK_SIZE_128K;
            }
            
            if( binder.isRealLV ){
//System.out.println(" pool id: "+binder.rawTgt.getSnap_pool_id() );                
                PoolWrapper wrap = view.initor.mdb.getPoolWrapper( binder.rawTgt.getSnap_pool_id() );
                if( wrap != null ){
                    data[i][7] = wrap;
                }else{
                    data[i][7] ="";
                }
            }else{
                if( poolList.size() >0 ){
                    data[i][7] = poolList.get(0);
                }else{
                    data[i][7]="";
                }
            }
            
            if( binder.lvType.equals("") ){
                data[i][8] = (String)lvmTypeList.elementAt( 0 );
            }else{
                data[i][8] =  binder.lvType;
            }
            data[i][9]  = binder.snapSapce+"";
            data[i][10] = binder.getMaxSnap();
            data[i][11] = new Boolean( binder.isFormatted );
                    
            label[i]= binder.part.mp;
        }
        
        MyDefaultTableModelForTabW model = new MyDefaultTableModelForTabW( data,header,label );
        
        table = new JTableW( model,view,wizardDiag, (String)lvmTypeList.elementAt(0),capList,lvmTypeList,hasEnoughSpace );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        RowEditorModel rm = new RowEditorModel();
        table.setRowEditorModel(rm);
        PaneUnixEditor pe = new PaneUnixEditor( table, view, wizardDiag,hasEnoughSpace );
        rm.addEditorForRow( 3, pe );
        
        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );
        
        MyComboBoxEditor mcb = new MyComboBoxEditor( blkList );
        rm.addEditorForRow( 6, mcb );
        
        mcb = new MyComboBoxEditor( poolList );
        rm.addEditorForRow( 7, mcb );
        
        mcb = new MyComboBoxEditor( lvmTypeList );
        rm.addEditorForRow( 8, mcb );
        
        cb = new CheckBoxEditor();
        rm.addEditorForRow( 11, cb );
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 45 );
        tableColumnModel.getColumn(1).setWidth( 60 );
        tableColumnModel.getColumn(2).setWidth( 60 );
        tableColumnModel.getColumn(3).setWidth( 120 );
        tableColumnModel.getColumn(4).setWidth( 50 );
        tableColumnModel.getColumn(5).setWidth( 80 );
        tableColumnModel.getColumn(6).setWidth( 70 );
        tableColumnModel.getColumn(7).setWidth( 175 );
        tableColumnModel.getColumn(8).setWidth( 60 );
        tableColumnModel.getColumn(9).setWidth( 80 );
        tableColumnModel.getColumn(10).setWidth( 65 );
        tableColumnModel.getColumn(11).setWidth( 50 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
        
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }

    public void setupTableForAms( Vector list,Vector lvmTypeList ){
        String lp = SanBootView.res.getString("SelectProtectedSysVolPane.combox.lp");
        String pp = SanBootView.res.getString("SelectProtectedSysVolPane.combox.pp");
        String up = SanBootView.res.getString("SelectProtectedSysVolPane.combox.up");
        ArrayList ptypeList = new ArrayList();
        ptypeList.add( lp );
        ptypeList.add( pp );
        ptypeList.add( up );

        ArrayList blkList  = BasicVDisk.getBlkSizeList();
        ArrayList poolList = view.initor.mdb.getNormalPoolWrapList( true );
        ArrayList ucsPoolList = view.initor.mdb.getUcsPoolWrapList( true );

        int num = list.size();
        int colNum = 15;
        Object[][] data = new Object[num][colNum];

        header = new Object[colNum];
        label = new Object[num];
        
        header[0] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.protected");
        header[1] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.vol");
        header[2] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.state");
        header[3] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.ptype");
        header[4] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.blksize");
        header[5] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.pool");
        header[6] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.maxSnap");
        header[7] = SanBootView.res.getString("SetUcsPane.label.LatestPool");
        header[8] = SanBootView.res.getString("SetUcsPane.label.OldestPool");
        header[9] = SanBootView.res.getString("SetUcsPane.label.LogPool");
        header[10] = SanBootView.res.getString("SetUcsPane.label.LogNumber");
        header[11] = SanBootView.res.getString("SetUcsPane.label.LogMaxTime");
        header[12] = SanBootView.res.getString("SetUcsPane.label.LogMaxSize");
        header[13] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.formatted");
        header[14] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.desc");

        for( int i=0; i<num; i++ ){
            //BindOfPartandVol
            BindOfUnixPartandLV binder = (BindOfUnixPartandLV)list.elementAt(i);
            data[i][0] = new Boolean( binder.isProtected );
            data[i][1] = binder.part;
//            if( binder.isRealVol ){
//                //data[i][2] = (VolumeWrapper2)binder.vol;
//                data[i][2] = (VolumeWrapper2)binder.rawTgt;
//            }else{
//                data[i][2] = SanBootView.res.getString("common.nprotected");
//            }
            if( binder.isFormatted){
                data[i][2] = SanBootView.res.getString("common.nprotected");
            }else{
                Volume volume = (Volume)binder.rawTgt;//SanBootView.res.getString("common.protected");
                VolumeWrapper3 volume3 = new VolumeWrapper3(volume);
                data[i][2] = volume3;
            }

            data[i][3] = ( binder.ptype == BootHost.PROTECT_TYPE_CMDP )?(binder.isucsprotected?up:pp):lp;
            //data[i][3] = lp;

            if( binder.isRealVol ){
                //data[i][3] = BasicVDisk.getBlkSizeStr( binder.vol.getSnap_block_size() );
                data[i][4] = BasicVDisk.getBlkSizeStr( binder.rawTgt.getSnap_block_size() );
            }else{
                data[i][4] = BasicVDisk.BLK_SIZE_128K;
            }

            if( binder.isRealVol ){
                //PoolWrapper wrap = view.initor.mdb.getPoolWrapper( binder.vol.getSnap_pool_id() );
                PoolWrapper wrap = view.initor.mdb.getPoolWrapper( binder.rawTgt.getSnap_pool_id() );
                if( wrap != null ){
                    data[i][5] = wrap;
                }else{
                    data[i][5] ="";
                }
            }else{
                if( poolList.size() >0 ){
                    data[i][5] = poolList.get(0);
                }else{
                    data[i][5]="";
                }
            }
            data[i][6] = binder.getMaxSnap();
            
            if( binder.ucsLatestPoolid != -1 ){
                PoolWrapper wrap = view.initor.mdb.getPoolWrapper(binder.ucsLatestPoolid);
                if( wrap != null ){
                    data[i][7] = wrap;
                }
            } else {
                data[i][7] = "";
            }
            if( binder.ucsOldestPoolid != -1 ){
                PoolWrapper wrap = view.initor.mdb.getPoolWrapper(binder.ucsOldestPoolid);
                if( wrap != null ){
                    data[i][8] = wrap;
                }
            } else {
                data[i][8] = "";
            }
            if( binder.ucsLogPoolid != -1 ){
                PoolWrapper wrap = view.initor.mdb.getPoolWrapper(binder.ucsLogPoolid);
                if( wrap != null ){
                    data[i][9] = wrap;
                }
            } else {
                data[i][9] = "";
            }
            if( binder.isRealLV ){
                if( binder.isucsprotected ){
                    data[i][10] = binder.ucsLogNumber;
                } else {
                    data[i][10] = "";
                }
            } else {
                data[i][10] = binder.ucsLogNumber;
            }
            if( "-1".equals(binder.ucsLogMaxTime) ){
                data[i][11] = "";
            } else {
                data[i][11] = binder.ucsLogMaxTime;
            }
            if( "-1".equals(binder.ucsLogMaxSize) ){
                data[i][12] = "";
            } else {
                data[i][12] = binder.ucsLogMaxSize;
            }
            
            data[i][13] =  new Boolean( binder.isFormatted );
            data[i][14] = binder.desc;

            label[i]= binder.part.getDiskLabel();
        }

        MyDefaultTableModelForTabX2 model = new MyDefaultTableModelForTabX2( data,header,label );

        tableAms = new JTableX2( model,view,wizardDiag );
        tableAms.setRowHeight( 20 );
        tableAms.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );

        RowEditorModel rm = new RowEditorModel();
        ((JTableX2)tableAms).setRowEditorModel(rm);

        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );
        
        MyComboBoxEditor mcb = new MyComboBoxEditor( ptypeList );
        rm.addEditorForRow( 3, mcb );

        MyComboBoxEditor mcb1 = new MyComboBoxEditor( blkList );
        rm.addEditorForRow( 4, mcb1 );

        mcb = new MyComboBoxEditor( poolList );
        rm.addEditorForRow( 5, mcb );

        mcb = new MyComboBoxEditor( ucsPoolList );
        rm.addEditorForRow( 7 , mcb);
        rm.addEditorForRow( 8 , mcb);
        rm.addEditorForRow( 9 , mcb);
        
        cb = new CheckBoxEditor();
        rm.addEditorForRow( 13, cb );

        TableColumnModel tableColumnModel = tableAms.getColumnModel();
        colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 45 );
        tableColumnModel.getColumn(1).setWidth( 60 );
        tableColumnModel.getColumn(2).setWidth( 70 );
        tableColumnModel.getColumn(3).setWidth( 70 );
        tableColumnModel.getColumn(4).setWidth( 80 );
        tableColumnModel.getColumn(5).setWidth( 175 );
        tableColumnModel.getColumn(6).setWidth( 75 );
        tableColumnModel.getColumn(7).setWidth(85);
        tableColumnModel.getColumn(8).setWidth(85);
        tableColumnModel.getColumn(9).setWidth(75);
        tableColumnModel.getColumn(10).setWidth(70);
        tableColumnModel.getColumn(11).setWidth(85);
        tableColumnModel.getColumn(12).setWidth(75);
        tableColumnModel.getColumn(13).setWidth( 60 );
        tableColumnModel.getColumn(14).setWidth( 150 );
        for( int j=0;j<colNum;j++ )
            tableAms.sizeColumnsToFit( j );

        tableAms.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        tableAms.getTableHeader().setReorderingAllowed(false);

        jScrollPane2.getViewport().add( tableAms,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }
    
    public void setWizardDialogSample( WizardDialogSample wdiag ){
        wizardDiag = wdiag;
    }
    
    public boolean hasProtectOSDisk(){
        SystemPartitionForUnix part;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1);
            if( part.mp.equals("/") ){
                return ((Boolean)model.getValueAt(row, 0 )).booleanValue();
            }
        }
        
        return false;
    }

    public boolean hasProtectOSDiskAms(boolean cluster){
        SystemPartitionForUnix part;

        MyDefaultTableModelForTabX2 model = (MyDefaultTableModelForTabX2)tableAms.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1);
            if( part.mp.equals("/") && !cluster){
                return ((Boolean)model.getValueAt(row, 0 )).booleanValue();
            }
        }
        if(cluster){
            return true;
        } else {
            return false;
        }
    }
    
    public boolean isFormated( int row ){
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        Boolean isFormat = (Boolean)model.getValueAt( row, 11 );
        return isFormat.booleanValue();
    }
    
    public boolean isCreated( int row ){
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        Boolean isCreated = (Boolean)model.getValueAt( row, 3 );
        return isCreated.booleanValue();
    }
    
    public int getSelectOSDiskVolRowOnTable(){
        SystemPartitionForUnix part;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1 );
            if( part.mp.equals("/") ){
                return row;
            }
        }
        
        return -1;
    }
    
    public String getLVMType( int row ){
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        return (String)model.getValueAt( row, 8 );
    }
    
    public LVWrapper getSelectOSDiskVol(){
        SystemPartitionForUnix part;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1 );
            if( part.mp.equals("/") ){
                Object val = model.getValueAt( row, 4 );
                if( val instanceof LVWrapper ){
                    return (LVWrapper)val;
                }
            }
        }
        
        return null;
    }
    
    public String getSelectOSMaxSnap(){
        SystemPartitionForUnix part;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1 );
            if( part.mp.equals("/") ){
                Object val = model.getValueAt( row, 10 );
                return (String)val;
            }
        }
        
        return null;
    }
    
    public String getSelectOSDiskVolFSType(){
        SystemPartitionForUnix part;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1 );
            if( part.mp.equals("/") ){
                return part.fsType;
            }
        }
        
        return null;
    }
    
    public String getSelectOSDiskLVName(){
        SystemPartitionForUnix part;
        Object lvObj;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1 );
            if( part.mp.equals("/") ){
                lvObj = model.getValueAt( row,4 );
                if( lvObj instanceof LVWrapper ){
                    return ((LVWrapper)lvObj).lv.getVolName();
                }else{
                    return (String)lvObj;
                }
            }
        }
        
        return null;
    }
    
    public Volume getSelectOSDiskVolumeWrapper(){
        SystemPartitionForUnix part;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1 );
            if( part.mp.equals("/") ){
                Object val = model.getValueAt( row, 5 );
                if( val instanceof VolumeWrapper ){
                    return ((VolumeWrapper)val).vol;
                }
            }
        }
        
        return null;
    }
    
    public boolean hasProtectedDisk(){
        int cnt = 0;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel = (Boolean)model.getValueAt( row, 0 );
            if( isSel.booleanValue() ){
                cnt++;
            }
        }
        
        return ( cnt > 0 );
    }
    
    public boolean checkVolInfoValidity(){
        SystemPartitionForUnix part;
        boolean isCrt;
        Long acculateSize;
        PoolWrapper poolWrap;
        String bkSizeStr,name;
        long blkUnit,blockSize,bkNum;
        long valLong;
        HashMap map = new HashMap();
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel = (Boolean)model.getValueAt( row, 0 );
            if( isSel.booleanValue() ){
                Object vol = model.getValueAt( row, 4 );
                if( vol == null ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectProtectedSysVolPane.error.noneName") + "["+row+",4]"
                    );
                    return false;
                }else{
                    if( !(vol instanceof LVWrapper ) ){
                        // 这个name为logical volume的名字，底层target的名字自动生成���
                        name = (String)vol;
                        if( name.equals("") ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.noneName") + "["+row+",4]"
                            );
                            return false;
                        }
                        
                        if( name.equals("/") ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.noneName") + "["+row+",4]"
                            );
                            return false;
                        }
                        
                        // 检查lv名字是否重复
                        if( hasSameNameOnTable( name, row ) || view.hasSameLVName( name ) ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.sameName") + "["+row+",4]"
                            );
                            return false;
                        }
                    }
                }
                
                // 检查boot fs是否建在lvm上了
                part = (SystemPartitionForUnix)model.getValueAt( row,1);
                if( part.mp.equals("/boot") ){
                    String lvType = (String)model.getValueAt(row, 8 );
                    if( !lvType.equals(GetLVMType.LVM_TYPE_NONE)) {
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.badLVMType") + "["+row+",8]"
                        );
                        return false;
                    }
                }
                
                isCrt = (( Boolean)model.getValueAt( row, 3 ) ).booleanValue();
                if( isCrt ){ // 只有创建的卷才检查大小是否合法
                    Object size = model.getValueAt( row,5 );
                    if( size == null ){
                        return false;
                    }else{
                        try{
                            bkSizeStr = (String)model.getValueAt(row, 6);
                            blkUnit = BasicVDisk.getBlkSizeFromStr( bkSizeStr );       
                        }catch(Exception ex){
                            blkUnit = 17;
                        }
                        
                        poolWrap = (PoolWrapper)model.getValueAt( row,7 );
                        double val = -1;
                        String _val = (String)size;
System.out.println(" input size by user: "+_val );                        
                        try{
                            val = Double.parseDouble( _val );
                        }catch(Exception ex){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVal") + "["+row+",5]"
                            );
                            return false;
                        }
                        
                        blockSize =(long) ( 1<< blkUnit );
System.out.println(" block size: "+blockSize );                        
                        bkNum =(long)( ( val*1024*1024*1024 + blockSize-1 )/blockSize );
System.out.println(" bknum : "+bkNum );                         
                        
                        // change unit from GB to byte
                        valLong = blockSize*bkNum; //  真正的卷大小
System.out.println(" real size by user: "+valLong );
                        vgSize = poolWrap.pool.getRealFreeSize();
System.out.println(" pool free size: "+vgSize ); 

                        if( valLong <= 0 || valLong > vgSize ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVal") + "(" + poolWrap.pool.getRealFreeSizeStr() + ") [" + row + ",5]"
                            );
                            return false;
                        }
                        
                        acculateSize = (Long)map.get( poolWrap.pool );
                        if( acculateSize == null ){
                            map.put( poolWrap.pool, new Long( valLong ) );
                        }else{
                            valLong = acculateSize.longValue() + valLong;
                            map.put( poolWrap.pool, new Long( valLong ) );
                        }
                    }
                }else{
                    Object size = model.getValueAt( row,5 );
                    if( size == null ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.notSelVol") + " ["+row+",5]"
                        );
                        return false;
                    }
                }
                
                Object snapSpace = model.getValueAt( row, 9 );
                if( snapSpace == null ){
                    return false;
                }else{
                    int ss = 0;
                    String _ss =(String)snapSpace;
                    try{
                        ss = Integer.parseInt( _ss );
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidSnapSpace") + " ["+row+",7]"
                        );
                        return false;
                    }
                    
                    if( ss <=0 || ss > 100 ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidSnapSpace") + " ["+row+",7]"
                        );
                        return false;
                    }
                }
                
                Object snapNum = model.getValueAt( row,10 );
                if( snapNum == null ){
                    return false;
                }else{
                    int num = 0;
                    String _num =(String)snapNum;
                    try{
                        num = Integer.parseInt( _num );
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidSnapVal") +" " +ResourceCenter.MAX_SNAP_NUM  + " ["+row+",8]"
                        );
                        return false;
                    }
                    
                    if( num < 0 || num > ResourceCenter.MAX_SNAP_NUM ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidSnapVal") +" " +ResourceCenter.MAX_SNAP_NUM + " ["+row+",8]"
                        );
                        return false;
                    }
                }
            }
        }
        
        // 检查各个pool上总创建容量是否超过其最大空闲值
        Set set  = map.keySet();
        Iterator iterator = set.iterator();
        while( iterator.hasNext() ){
            Pool pool = (Pool)iterator.next();
            Long accuSize = (Long)map.get( pool );
            if( accuSize.longValue() > pool.getRealFreeSize() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectProtectedSysVolPane.error.beyondVgSize") + " " + pool.getPool_name() + " [ " + BasicVDisk.getCapStr( accuSize.longValue() ) + " > " + pool.getRealFreeSizeStr() + " ]"
                );
                return false;
            }
        } 
        
        return true;
    }

    public boolean isLessThanUsedSize(){
        boolean isCrt;
        String bkSizeStr;
        long blkUnit,blockSize,bkNum;
        long valLong;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel = (Boolean)model.getValueAt( row, 0 );
            if( isSel.booleanValue() ){                 
                SystemPartitionForUnix localdisk = (SystemPartitionForUnix)model.getValueAt( row, 1 );                 
                isCrt = (( Boolean)model.getValueAt( row, 3 ) ).booleanValue();
                if( isCrt ){
                    Object size = model.getValueAt( row,5 );                    
                    try{
                        bkSizeStr = (String)model.getValueAt( row, 6 );
                        blkUnit = BasicVDisk.getBlkSizeFromStr( bkSizeStr );       
                    }catch( Exception ex ){
                        blkUnit = 17;
                    }
                    
                    double val = -1;
                    String _val = (String)size;
                    try{
                        val = Double.parseDouble( _val );
                    }catch( Exception ex ){}
                    
                    blockSize =(long) ( 1<< blkUnit );  
                    bkNum =(long)( ( val*1024*1024*1024 + blockSize-1 )/blockSize );                     
                    // change unit from GB to byte
                    valLong = blockSize*bkNum; //  真正的卷大小
                    
System.out.println(" assign cap: "+ valLong +" used cap: "+ localdisk.getUsedInMega()+" MB" );
                    if( localdisk.getUsedInMega() != -1L ){
                        if( valLong <= localdisk.getUsedInMega()*1024*1024 ){
                            return false;
                        }
                    }             
                }else{
                    Object size1 = model.getValueAt( row,5 );
                    double val1 = -1;                    
                    String _val1;
                    if( size1 instanceof VolumeWrapper ){
                        _val1 = ((VolumeWrapper)size1).toString();
                    }else{
                        _val1 =(String)size1;
                    }
                    try{
                        val1 = Double.parseDouble( _val1 );
                    }catch(Exception ex){ }   
                    
System.out.println(" assign cap: "+ val1*1024*1024*1024 +" used cap: "+ localdisk.getUsedInMega()+" MB" );                    
                    if( localdisk.getUsedInMega() != -1L ){                        
                        if( val1*1024*1024*1024 <= localdisk.getUsedInMega()*1024*1024 ){
                            return false;
                        }
                    }
                }             
            }
        }   
        
        return true;
    }
    
    public boolean isCopyOS(){
        return jRadioButton1.isSelected();
    }
    public void setCopyOSFlag( boolean val ){
        jRadioButton1.setSelected( val );
    }
    public boolean isOnlyModBootConf(){
        return jRadioButton2.isSelected();
    }
    public void setOnlyModBootConf( boolean val ){
        jRadioButton2.setSelected( val );
    }
    public boolean isDonothing(){
        return jRadioButton3.isSelected();
    }
    public void setDonothingFlag( boolean val ){
        jRadioButton3.setSelected( val );
    }
    
    public void setActionMode( boolean isCopyOS,boolean isOnlyModbootConf,boolean isDonothing ){
        if( isCopyOS){
            jRadioButton1.setSelected( true );
        }
        if( isOnlyModbootConf ){
            jRadioButton2.setSelected( true );
        }
        if( isDonothing ){
            jRadioButton3.setSelected( true );
        }
    }
    
    public ArrayList getProtectedVolInfo(){
        BindOfUnixPartandLV binder;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList ret = new ArrayList( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            if( ((Boolean)model.getValueAt( row, 0 )).booleanValue() ){
                binder = new BindOfUnixPartandLV();
                binder.part = (SystemPartitionForUnix)model.getValueAt(row, 1);
                
                Object lvObj = model.getValueAt( row,4 );
                if( lvObj instanceof LVWrapper ){
                    binder.lvName = binder.lv.getVolName();
                }else{
                    binder.action = 0; // 表示要创建一个lv
                    Object volObj = model.getValueAt( row, 5 );
                    if( volObj instanceof VolumeWrapper ){
                        binder.lvName = (String)lvObj; // 新输入的名字
                    }else{
                        binder.lvName = (String)lvObj; // 新输入的名字
                    }
                }
                ret.add( binder );
            }
        }
        
        return ret;
    }
    
    public Vector getVolInfo(){
        BindOfUnixPartandLV binder;
        boolean isCrt;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();
        Vector ret = new Vector( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            binder = new BindOfUnixPartandLV();
            binder.isProtected = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            binder.part = (SystemPartitionForUnix)model.getValueAt(row, 1);
            
            Object lvObj = model.getValueAt( row,4 );
            if( lvObj instanceof LVWrapper ){
                binder.isRealLV = true;
                binder.lv = ((LVWrapper)lvObj).lv;
                binder.lvName = binder.lv.getVolName();
                binder.rawTgt = ((LVWrapper)lvObj).rawTgt;
                binder.tgtSize = (String)model.getValueAt( row,5 );
                binder.action = 1; // 表示选择一个存在的lv
                binder.targetID = binder.rawTgt.getTargetID();
            }else{
                binder.action = 0; // 表示要创建一个lv
                Object volObj = model.getValueAt( row, 5 );
                if( volObj instanceof VolumeWrapper ){
                    // 之前的初始化曾经想把这个raw tgt做成lv,但是没有成功；
                    // 系统中可能还有表示vg或lv的volumeMap跟它相对应
                    binder.isRealLV = false;
                    binder.rawTgt = ((VolumeWrapper)volObj).vol;
                    binder.tgtSize = ((VolumeWrapper)volObj).toString();
                    binder.lvName = (String)lvObj; // 新输入的名字
                    binder.targetID = binder.rawTgt.getTargetID();
                    binder.rootID = ((VolumeWrapper)volObj).vol.getSnap_root_id();
                }else{
                    // 完全重头开始创建一个lv
                    binder.isRealLV = false;
                    binder.lvName = (String)lvObj; // 新输入的名字
                    binder.tgtSize = (String)model.getValueAt( row,5 );
                }
            }
            
            try{
                String bkSizeStr = (String)model.getValueAt(row, 6);
                binder.blkSize = BasicVDisk.getBlkSizeFromStr( bkSizeStr );                
            }catch(Exception ex){
                binder.blkSize = 17;
            }
            
            try{
                PoolWrapper wrap = (PoolWrapper)model.getValueAt(row, 7);
                binder.poolid = wrap.pool.getPool_id();

            }catch(Exception ex){}
            
            binder.lvType = (String)model.getValueAt( row,8 );
            binder.snapSapce = (String)model.getValueAt( row,9 );
            binder.maxSnap = (String)model.getValueAt( row, 10 );
            binder.isFormatted = ((Boolean)model.getValueAt( row, 11 )).booleanValue();
            
            ret.addElement( binder );
        }
        
        return ret;
    }

    /**
     * getVolInfo for AMS
     * @return
     */
    public Vector _getVolInfo(String ip){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            return getVolInfoAmsMTTP( ip );
        }else{
            return getVolInfoForAmsCMDP( ip );
        }
    }

    private Vector getVolInfoForAmsCMDP(String ip){
        String aLabel;
        BindOfUnixPartandLV binder,tmpbinder;
        boolean isLocalDisk;
        Hashtable<String,BindOfPartandVol> hash = new Hashtable<String,BindOfPartandVol>();

        DefaultTableModel model = (DefaultTableModel)tableAms.getModel();
        int lineNum = model.getRowCount();
        Vector ret = new Vector( lineNum );

        for( int row=0; row<lineNum; row++ ){
            binder = new BindOfUnixPartandLV();
            binder.isProtected = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            binder.part = (SystemPartitionForUnix)model.getValueAt(row, 1);

            Object volObj = model.getValueAt( row,2 );
            if( volObj instanceof Volume ){
                binder.action = 1;
                binder.isRealVol = true;
                binder.rawTgt = (Volume)volObj;
            }else{
                binder.action = 0;
                binder.isRealVol = false;
                //binder.volName = (String)volObj;
                binder.tgtName= (String)volObj;
                if( volObj instanceof Volume ){
                    binder.rawTgt = (Volume)volObj;
                }
            }

            try{
                String ptype = (String)model.getValueAt( row, 3 );
                if( ptype.equals( SanBootView.res.getString("SelectProtectedSysVolPane.combox.lp") ) ){
                    binder.ptype = BootHost.PROTECT_TYPE_MTPP;
                }else if( ptype.equals( SanBootView.res.getString("SelectProtectedSysVolPane.combox.pp") ) ){
                        binder.ptype = BootHost.PROTECT_TYPE_CMDP;
                    }else {
                        binder.ptype = BootHost.PROTECT_TYPE_CMDP ;
                        binder.isucsprotected = true ;
                        PoolWrapper wrap = (PoolWrapper)model.getValueAt( row, 7 );
                        binder.ucsLatestPoolid = wrap.pool.getPool_id();
                        wrap = (PoolWrapper)model.getValueAt( row, 8 );
                        binder.ucsOldestPoolid = wrap.pool.getPool_id();
                        wrap = (PoolWrapper)model.getValueAt( row, 9 );
                        binder.ucsLogPoolid = wrap.pool.getPool_id();
                        //String tmp = (String)model.getValueAt(row, 10);
                        //binder.ucsLogNumber = Integer.parseInt(tmp);
                        binder.ucsLogNumber = (Integer)model.getValueAt(row, 10);
                        String timetmp = (String)model.getValueAt(row, 11);
                        if( timetmp != null && !"".equals(timetmp) && !"0".equals(timetmp)){
                            int tmpInt = Integer.parseInt(timetmp)*60;
                            timetmp = String.valueOf(tmpInt);
                            binder.ucsLogMaxTime = timetmp;
                        } else {
                            binder.ucsLogMaxTime = "300";
                        }
                        String iotmp = (String)model.getValueAt(row, 12);
                        if( iotmp != null ){
                            binder.ucsLogMaxSize = iotmp ;
                        } else {
                            binder.ucsLogMaxSize = "";
                        }
                }
            }catch(Exception ex){
                binder.ptype = BootHost.PROTECT_TYPE_CMDP;
            }

            int col = 4;
            try{
                String bkSizeStr = (String)model.getValueAt( row, col );
                binder.blkSize = BasicVDisk.getBlkSizeFromStr( bkSizeStr );
            }catch(Exception ex){
                binder.blkSize = 17;
            }

            col = 5;
            try{
                PoolWrapper wrap = (PoolWrapper)model.getValueAt( row, col );
                binder.poolid = wrap.pool.getPool_id();
            }catch(Exception ex){}

            col = 6;
            binder.maxSnap = (String)model.getValueAt( row, col );
            col = 13;
            binder.isFormatted = ((Boolean)model.getValueAt( row, col )).booleanValue();
            col = 14;
            binder.desc = (String)model.getValueAt( row, col );

            binder.lvType = GetLVMType.LVM_TYPE_NONE;// ams
            if( !ip.equals( "" ))
                binder.lvName = getDefaultVolName( binder.part.mp,ip );//add by hwh

            ret.add( binder );
        }

        Enumeration list = hash.elements();
        while( list.hasMoreElements() ){
            ret.add( list.nextElement() );
        }
        return ret;
    }

       private String getDefaultVolName( String fs,String ip ){
        try{
            int indx = ip.lastIndexOf(".");
            String lastElement = ip.substring( indx+1 );

            String[] list = Pattern.compile("/").split( fs,-1 );
            String path="";
            boolean isFirst = true;
            for( int i=0; i<list.length; i++ ){
SanBootView.log.debug(getClass().getName(), " ele: "+list[i]);
                if( list[i].equals("") ) continue;
                if( isFirst ){
                    path=list[i];
                    isFirst = false;
                }else{
                    path+="."+list[i];
                }
            }

            if( path.equals("") ) path ="root";
SanBootView.log.debug(getClass().getName()," path: "+ path );

            return "vol" + lastElement + "." + path;
        }catch(Exception ex){
            return "";
        }
    }

     private Vector getVolInfoAmsMTTP( String ip ){
        BindOfUnixPartandLV binder;
        boolean isCrt;

        MyDefaultTableModelForTabX2 model = (MyDefaultTableModelForTabX2)tableAms.getModel();
        int lineNum = model.getRowCount();
        Vector ret = new Vector( lineNum );

        for( int row=0; row<lineNum; row++ ){
            binder = new BindOfUnixPartandLV();
            binder.isProtected = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            binder.part = (SystemPartitionForUnix)model.getValueAt(row, 1);

            Object lvObj = model.getValueAt( row,4 );
            if( lvObj instanceof LVWrapper ){
                binder.isRealLV = true;
                binder.lv = ((LVWrapper)lvObj).lv;
                binder.lvName = binder.lv.getVolName();
                binder.rawTgt = ((LVWrapper)lvObj).rawTgt;
                binder.tgtSize = (String)model.getValueAt( row,5 );
                binder.action = 1; // 表示选择一个存在的lv
                binder.targetID = binder.rawTgt.getTargetID();
            }else{
                binder.action = 0; // 表示要创建一个lv
                Object volObj = model.getValueAt( row, 5 );
                if( volObj instanceof VolumeWrapper ){
                    // 之前的初始化曾经想把这个raw tgt做成lv,但是没有成功；
                    // 系统中可能还有表示vg或lv的volumeMap跟它相对应
                    binder.isRealLV = false;
                    binder.rawTgt = ((VolumeWrapper)volObj).vol;
                    binder.tgtSize = ((VolumeWrapper)volObj).toString();
                    binder.lvName = (String)lvObj; // 新输入的名字
                    binder.targetID = binder.rawTgt.getTargetID();
                    binder.rootID = ((VolumeWrapper)volObj).vol.getSnap_root_id();
                }else{
                    // 完全重头开始创建一个lv
                    binder.isRealLV = false;
                    binder.lvName = (String)lvObj; // 新输入的名字
                    binder.tgtSize = (String)model.getValueAt( row,5 );
                }
            }

            try{
                String bkSizeStr = (String)model.getValueAt(row, 6);
                binder.blkSize = BasicVDisk.getBlkSizeFromStr( bkSizeStr );
            }catch(Exception ex){
                binder.blkSize = 17;
            }

            try{
                PoolWrapper wrap = (PoolWrapper)model.getValueAt(row, 7);
                binder.poolid = wrap.pool.getPool_id();

            }catch(Exception ex){}

            binder.lvType = (String)model.getValueAt( row,8 );
            binder.snapSapce = (String)model.getValueAt( row,9 );
            binder.maxSnap = (String)model.getValueAt( row, 10 );
            binder.isFormatted = ((Boolean)model.getValueAt( row, 11 )).booleanValue();

            ret.addElement( binder );
        }

        return ret;
    }
    
    public int getSelectedRowOnMp( String mp ){
        SystemPartitionForUnix part;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1 );
            if( part.mp.equals( mp ) ){
                return row;
            }
        }
        
        return -1;
    }

    public int getSelectedRowOnMpAms( String mp ){
        SystemPartitionForUnix part;

        MyDefaultTableModelForTabX2 model = (MyDefaultTableModelForTabX2)tableAms.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1 );
            if( part.mp.equals( mp ) ){
                return row;
            }
        }

        return -1;
    }
    
    public boolean isThisRowProtected( int row ){
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        return ((Boolean)model.getValueAt(row, 0)).booleanValue();
    }

    public boolean isThisRowProtectedAms( int row ){
        MyDefaultTableModelForTabX2 model = (MyDefaultTableModelForTabX2)tableAms.getModel();
        return ((Boolean)model.getValueAt(row, 0)).booleanValue();
    }
    
    public boolean isThisFsProtected( String mp ){
        SystemPartitionForUnix part;
        if( table != null ){
            MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
            int lineNum = model.getRowCount();
            for( int row=0; row<lineNum; row++ ){
                part = (SystemPartitionForUnix)model.getValueAt( row,1 );
                if( part.mp.equals( mp ) ){
                    return ((Boolean)model.getValueAt(row, 0)).booleanValue();
                }
            }
        }else{ // ams
            MyDefaultTableModelForTabX2 model = (MyDefaultTableModelForTabX2)tableAms.getModel();
            int lineNum = model.getRowCount();
            for( int row=0; row<lineNum; row++ ){
                part = (SystemPartitionForUnix)model.getValueAt( row,1 );
                if( part.mp.equals( mp ) ){
                    return ((Boolean)model.getValueAt(row, 0)).booleanValue();
                }
            }
        }
        return false;
    }

    public boolean isThisFsProtectedAms( String mp ){
        SystemPartitionForUnix part;

        MyDefaultTableModelForTabX2 model = (MyDefaultTableModelForTabX2)tableAms.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForUnix)model.getValueAt( row,1 );
            if( part.mp.equals( mp ) ){
                return ((Boolean)model.getValueAt(row, 0)).booleanValue();
            }
        }

        return false;
    }
    
    public String getBootDevPath(){
        int line,i;
        SystemPartitionForUnix part;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        line = model.getRowCount();
        int bootRow = getSelectedRowOnMp("/boot");
SanBootView.log.info(getClass().getName(), " bootRow=======> : "+bootRow );
        if( bootRow == -1 ){
            for( i=0;i<line;i++ ){
                part = (SystemPartitionForUnix)model.getValueAt( i, 1 );
                if( part.mp.equals("/") ){
                    return part.dev_path;
                }
            }
        }else{
            for( i=0; i<line; i++ ){
                part = (SystemPartitionForUnix)model.getValueAt( i, 1 );
                if( part.mp.equals( "/boot" ) ){
                    return part.dev_path;
                }
            }
        }
        
        return null;
    }

    public String getBootDevPathAms(){
        int line,i;
        SystemPartitionForUnix part;

        MyDefaultTableModelForTabX2 model = (MyDefaultTableModelForTabX2)tableAms.getModel();
        line = model.getRowCount();
        int bootRow = getSelectedRowOnMpAms("/boot");
SanBootView.log.info(getClass().getName(), " bootRow=======> : "+bootRow );
        if( bootRow == -1 ){
            for( i=0;i<line;i++ ){
                part = (SystemPartitionForUnix)model.getValueAt( i, 1 );
                if( part.mp.equals("/") ){
                    return part.dev_path;
                }
            }
        }else{
            for( i=0; i<line; i++ ){
                part = (SystemPartitionForUnix)model.getValueAt( i, 1 );
                if( part.mp.equals( "/boot" ) ){
                    return part.dev_path;
                }
            }
        }

        return null;
    }
    
    private boolean hasSameNameOnTable( String name,int selRow ){
        boolean isSel;
        VolumeMap lv;
        String volName;
        
        MyDefaultTableModelForTabW model = (MyDefaultTableModelForTabW)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel && row !=selRow ){
                Object volObj = model.getValueAt( row,4 );
                if( volObj instanceof LVWrapper ){
                    lv = ((LVWrapper)volObj).lv;
                    if( lv.getVolName().equals( name ) ){
                        return true;
                    }
                }else{
                    volName = (String)volObj;
                    if( volName.equals( name ) ){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    public void fireEditingStopMsg(){
        TableCellEditor dce;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            for( int j=0;j<12;j++ ){ //专门停止0,3，4,5,6,7,8,9,10,11列
                if( j == 1 || j == 2 ) continue;
                
                dce = table.getCellEditor( i,j );
                if( dce!=null ){
                    try{
                        while(!dce.stopCellEditing()){;};
                    }catch(Exception ex){}
                }
            }
        }
    }

    public void fireEditingStopMsgAms(){
         TableCellEditor dce;

        AbstractTableModel model = (AbstractTableModel)tableAms.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            for( int j=0;j<15;j++ ){ //专门停止0,3，4,5,6,7,8列
                if( j == 1 || j == 2 ) continue;

                dce = tableAms.getCellEditor( i,j );
                if( dce!=null ){
                    try{
                        while(!dce.stopCellEditing()){;};
                    }catch(Exception ex){}
                }
            }
        }
    }
}
