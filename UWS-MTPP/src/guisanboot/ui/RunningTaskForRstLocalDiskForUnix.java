/*
 * RunningTaskForRstLocalDiskForUnix.java
 *
 * Created on 2006/12/29， AM�9:52
 */

package guisanboot.ui;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import mylib.UI.*;
import guisanboot.data.*;

/**
 *
 * @author  Administrator
 */
public class RunningTaskForRstLocalDiskForUnix extends javax.swing.JPanel implements RunningTask {
    /** Creates new form RunningTaskForRstLocalDiskForUnix */
    public RunningTaskForRstLocalDiskForUnix() {
        initComponents();
    }
    
    public RunningTaskForRstLocalDiskForUnix( SanBootView view,DestAgent host ) {
        this();
        myInit( view,host );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel13 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 30));
        jScrollPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 1, 3, 1)));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.GridBagLayout());

        jPanel13.add(jPanel12, java.awt.BorderLayout.WEST);

        jPanel6.add(jPanel13, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel7.setPreferredSize(new java.awt.Dimension(5, 100));
        jPanel7.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel7, java.awt.BorderLayout.SOUTH);

        add(jPanel3, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    ////GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    ////GEN-END:variables
    
    Vector taskList = new Vector();
    GeneralEditableTable table = new GeneralEditableTable();
    SanBootView view;
    JPanel[] paneArray;
    JScrollPane[] scroPaneArray;
    JTextArea[] textAreaArray;
    DestAgent host;
    
    private void myInit( SanBootView _view,DestAgent _host ){
        view = _view;
        host = _host;
        
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
        
        jTextArea1.setText(
            SanBootView.res.getString("RestoreOriginalDiskWizardDialog.tip3")
        );
    }
    
    public void updateGUI1( Vector rstList ){
        InitTask task;
        int i,size;
        
        taskList.removeAllElements();
        jTabbedPane1.removeAll();
        
        // 直接用InputSnapshotCmdPane中的task list
        size = rstList.size();
        for( i=0; i<size; i++ ){
            taskList.addElement( rstList.elementAt( i ) );
        }
        
        // 再增加一个"保存信息"的任务
        task = new InitTask();
        size++;
        task.seq = size;
        task.task = SanBootView.res.getString("RunningTaskPane.label.saveInfo");
        task.status = InitTask.INIT_TASK_STA_READY;
        taskList.addElement( task );
        
        setupTable();
        
        paneArray = new JPanel[ size ];
        scroPaneArray = new JScrollPane[ size ];
        textAreaArray = new JTextArea[ size ];
        
        for( i=0; i<size; i++ ){
            paneArray[i] = new JPanel();
            paneArray[i].setLayout(  new BorderLayout() );
            scroPaneArray[i] = new JScrollPane();
            scroPaneArray[i].setVerticalScrollBarPolicy( JScrollPane.VERTICAL_SCROLLBAR_ALWAYS  );
            paneArray[i].add( scroPaneArray[i], BorderLayout.CENTER );
            textAreaArray[i] = new JTextArea();
            textAreaArray[i].setDisabledTextColor( Color.black );
            textAreaArray[i].setEditable( false );
            textAreaArray[i].setLineWrap( true );
            scroPaneArray[i].setViewportView( textAreaArray[i] );
            
            jTabbedPane1.addTab(
                SanBootView.res.getString("common.task") + ( i+1 ),
                paneArray[i]
            );
        }
    }
    
    public void updateGUI( Hashtable rstList ){
        InitTask task;
        BindOfVolMapandDestForUnix binder;
        int i,size;
        boolean isFirst;
        String src,dest,tmp,src1,dest1,precmd,postcmd;
        Vector volList,parm; 
        JPanel pane;
        JScrollPane scroPane;
        JTextArea textArea;
        Object key;
        BindOfSrcAndDest srcDest;
        
        taskList.removeAllElements();
        jTabbedPane1.removeAll();
        
        // 对恢复组进行排序,以便按序恢复
        size = rstList.size();
        java.util.List seqList = new ArrayList( size );
        Enumeration keyList = rstList.keys();
        while( keyList.hasMoreElements() ){
            seqList.add( (Integer)keyList.nextElement() );
        }
        java.util.Collections.sort( seqList );
System.out.println( "rst seq: " + seqList );

        int cnt = 0;
        ListIterator iterator = seqList.listIterator();
        while( iterator.hasNext() ){
            key = (Integer)iterator.next();
            volList = (Vector)rstList.get( key ); // volList中存放了要恢复的一组目标卷和目的盘
            
            parm = new Vector();
            
            isFirst = true;
            src1="";
            dest1="";
            size = volList.size();
            for( i=0; i<size; i++ ){
                binder = (BindOfVolMapandDestForUnix)volList.elementAt( i );
                if( isFirst ){
                    src = binder.lv.toString();
                    dest = binder.destDrv;
                  
                    srcDest = new BindOfSrcAndDest( src,dest );
                    srcDest.lvType = binder.lv.lvmType;
                    parm.addElement( srcDest );
                    
                    src1 = src;
                    dest1= dest;
                    isFirst = false;
                }else{
                    src = binder.lv.toString();
                    dest = binder.destDrv;
                  
                    srcDest = new BindOfSrcAndDest( src,dest );
                    srcDest.lvType = binder.lv.lvmType;
                    parm.addElement( srcDest );
                    
                    src1+=" , "+src;
                    dest1+=" , "+dest;
                }
            }
            
            task = new InitTask();
            cnt++;
            task.seq = cnt;
            tmp = ( size > 1? SanBootView.res.getString("common.restoreLocalDisk.to") :
                SanBootView.res.getString("common.restoreLocalDisk.to1") );
            task.task = SanBootView.res.getString("common.restoreLocalDisk.restore") + " " + src1 +" "+ tmp
                     + " " + dest1;
            task.parm = parm;
            task.status = InitTask.INIT_TASK_STA_READY;
            taskList.addElement( task );
        }
        
        // 再增加一个"保存信息"的任务
        task = new InitTask();
        cnt++;
        task.seq = cnt;
        task.task = SanBootView.res.getString("RunningTaskPane.label.saveInfo");
        task.status = InitTask.INIT_TASK_STA_READY;
        taskList.addElement( task );
        
        setupTable();
        
        paneArray = new JPanel[ cnt ];
        scroPaneArray = new JScrollPane[ cnt ];
        textAreaArray = new JTextArea[ cnt ];
        
        for( i=0; i<cnt; i++ ){
            paneArray[i] = new JPanel();
            paneArray[i].setLayout(  new BorderLayout() );
            scroPaneArray[i] = new JScrollPane();
            scroPaneArray[i].setVerticalScrollBarPolicy( JScrollPane.VERTICAL_SCROLLBAR_ALWAYS  );
            paneArray[i].add( scroPaneArray[i], BorderLayout.CENTER );
            textAreaArray[i] = new JTextArea();
            textAreaArray[i].setDisabledTextColor( Color.black );
            textAreaArray[i].setEditable( false );
            scroPaneArray[i].setViewportView( textAreaArray[i] );
            
            jTabbedPane1.addTab(
                SanBootView.res.getString("common.task") + ( i+1 ),
                paneArray[i]
            );
        }        
    }
    
    public void setupTable(){
        int i;
        Object[][] data;
        
        int num = taskList.size();
        data = new Object[2+num][3]; //seq,task,status
        data[0][0] = "" + num;    // row num
        data[0][1] = "" + 3;      // col num

        data[1][0] = SanBootView.res.getString("TaskConfigPane.table.task.seq");
        data[1][1] = SanBootView.res.getString("TaskConfigPane.table.task.task");
        data[1][2] = SanBootView.res.getString("TaskConfigPane.table.task.status");
        
        for( i=0; i<num; i++ ){
            InitTask task = (InitTask)taskList.elementAt(i);
            
            data[2+i][0] = task.seq+"";
            data[2+i][1] = task;
            data[2+i][2] = InitTask.getTaskStatusStr( task.status );
        }
        
        table.setTableModel( data );
        table.setDefaultLook();

        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        for( i=0;i<colNum;i++ ){
            tableColumnModel.getColumn(i).setCellRenderer(new BrowserTableCellRenderer());
        }

        tableColumnModel.getColumn(0).setWidth( 50 );
        tableColumnModel.getColumn(1).setWidth( 300 );
        tableColumnModel.getColumn(2).setWidth( 100 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
    }
    
    public void setTaskStatus( String val,int row,int col ){
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        model.setValueAt( val, row, col );
    }
    
    public int getTableRow(){
        return table.getRowCount();
    }
    
    public InitTask getTask( int row ){
        return (InitTask)table.getValueAt( row, 1 );
    }
    
    public void setCurTabPane( int which ){
        jTabbedPane1.setSelectedComponent( paneArray[which] );
        setVerticalBase( 50 );
    }
    
    int vertical_base = 50; 
    private void setVerticalBase( int val ){
        vertical_base = val;
    }
    public void setLogOnTabpane( String log,int which ){
        jTabbedPane1.setSelectedComponent( paneArray[which] );
        textAreaArray[which].append( log );
        textAreaArray[which].append( "\n" );
        textAreaArray[which].setPreferredSize( new Dimension( 0,vertical_base+=15 ) ); 
        textAreaArray[which].getCaret().setDot( textAreaArray[which].getText().length() );
        scroPaneArray[which].scrollRectToVisible( textAreaArray[which].getVisibleRect() );
    }
    
    public String getCopyLogOnTabpane( int which ){
        return textAreaArray[which].getText();
    }
    public void freshCopyLogOnTabpane( String prefix,String log,int which,boolean isAutoScroll ){
        jTabbedPane1.setSelectedComponent( paneArray[which] );
        if( !prefix.equals("") ){
            textAreaArray[which].setText( prefix );
            textAreaArray[which].append( log );
        }else{
            textAreaArray[which].setText( log );
        }
        
        textAreaArray[which].setPreferredSize( new Dimension( 0,vertical_base+=15 ) ); 
        textAreaArray[which].getCaret().setDot( textAreaArray[which].getText().length() );
        scroPaneArray[which].scrollRectToVisible( textAreaArray[which].getVisibleRect() );
    }
}