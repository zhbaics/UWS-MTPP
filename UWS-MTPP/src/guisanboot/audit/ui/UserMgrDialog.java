/*
 * UserMgrDialog.java
 *
 */

package guisanboot.audit.ui;

import guisanboot.MenuAndBtnCenterForMainUi;
import guisanboot.audit.data.Audit;
import mylib.UI.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.Vector;
import javax.swing.border.TitledBorder;
import guisanboot.ui.*;
import guisanboot.res.*;
import guisanboot.audit.data.BackupUser;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  Administrator
 */
public class UserMgrDialog extends javax.swing.JDialog {
    ListSelectionListener listener;
    
    /** Creates new form UserMgrDialog */
    public UserMgrDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public UserMgrDialog( SanBootView view ){
        this( view,true );
        myInit( view );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("User List"));
        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton2);

        jButton6.setText("Modify Password");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton6);

        jPanel3.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(9, 1, 9, 1));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jButton1.setText("Close");
        jButton1.setPreferredSize(new java.awt.Dimension(76, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);

        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 120));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jLabel1, gridBagConstraints);

        jTextField1.setPreferredSize(new java.awt.Dimension(180, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel2.add(jTextField1, gridBagConstraints);

        jLabel2.setText("Right");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Password :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jLabel3, gridBagConstraints);

        jPasswordField1.setPreferredSize(new java.awt.Dimension(81, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel2.add(jPasswordField1, gridBagConstraints);

        jLabel4.setText("Password Again :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jLabel4, gridBagConstraints);

        jPasswordField2.setPreferredSize(new java.awt.Dimension(81, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
        jPanel2.add(jPasswordField2, gridBagConstraints);

        jRadioButton1.setText("Administrator");
        jRadioButton1.setBorder(null);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("Common");
        jRadioButton2.setBorder(null);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(jRadioButton2, gridBagConstraints);

        jButton3.setText("Custom");
        jButton3.setPreferredSize(new java.awt.Dimension(100, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel2.add(jButton3, gridBagConstraints);

        jPanel5.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jButton4.setText("New");
        jButton4.setPreferredSize(new java.awt.Dimension(76, 24));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton4);

        jButton5.setText("Save");
        jButton5.setPreferredSize(new java.awt.Dimension(76, 24));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton5);

        jPanel5.add(jPanel6, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel5, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
    customBtn_process();
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     okBtn_process();
}//GEN-LAST:event_jButton1ActionPerformed

private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
// TODO add your handling code here:
    adminRadio_process();
}//GEN-LAST:event_jRadioButton1ActionPerformed

private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
// TODO add your handling code here:
    commonUserRadio_process();
}//GEN-LAST:event_jRadioButton2ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
    delBtn_process();
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
    modPasswd_process();//GEN-LAST:event_jButton6ActionPerformed
}

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
    newBtn_process();//GEN-LAST:event_jButton4ActionPerformed
}

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:
    saveBtn_process();//GEN-LAST:event_jButton5ActionPerformed
}

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UserMgrDialog dialog = new UserMgrDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
   
    int selectionRowOfUsrTab = -1;
    int whatUser     = -1;
    BrowserTable userTable = new BrowserTable();
    
    private final int DO_ADD = 0;
    private final int DO_MOD = 1;
    private final int SAVE   = 0;
    
    SanBootView view;
    ButtonGroup grp;
    
    private void myInit( SanBootView _view ){
        this.view = _view;
        
        setPermOnUser();    
        grp = new ButtonGroup();
        grp.add( this.jRadioButton1 );
        grp.add( this.jRadioButton2 );
        this.jRadioButton2.setSelected( true );
        
        jScrollPane1.getViewport().add( userTable,null );
        jScrollPane1.getViewport().setBackground( Color.white );
        userTable.addMouseListener( new java.awt.event.MouseAdapter(){
            @Override public void mouseClicked( MouseEvent e ){
                userTable_mouseClicked(e);
            }
        });
        
        userTable.setSelectionMode( ListSelectionModel.MULTIPLE_INTERVAL_SELECTION );
        
        listener = new ListSelectionListener(){
            public void valueChanged( ListSelectionEvent e ){
                userTable_mouseClicked( null );
            }
        };
        
        this.setupUserTable();
        this.addListSelectionListener();
        regKeyboardAction();
        setupLanguage();
    }
    
    private void setupLanguage(){
        this.setTitle( SanBootView.res.getString("UserMgrDialog.title") );
        this.jLabel1.setText( SanBootView.res.getString("UserMgrDialog.label.name"));
        this.jLabel2.setText( SanBootView.res.getString("UserMgrDialog.label.right"));
        this.jLabel3.setText( SanBootView.res.getString("UserMgrDialog.label.passwd"));
        this.jLabel4.setText( SanBootView.res.getString("UserMgrDialog.label.passwd1"));
        this.jButton1.setText( SanBootView.res.getString("common.button.close"));
        this.jButton2.setText( SanBootView.res.getString("common.button.del"));
        this.jButton3.setText( SanBootView.res.getString("UserMgrDialog.button.custom"));
        this.jButton4.setText( SanBootView.res.getString("common.button.add"));
        this.jButton5.setText( SanBootView.res.getString("common.button.save"));
        this.jButton6.setText( SanBootView.res.getString("UserMgrDialog.btn.modPasswd"));
        this.jRadioButton1.setText( SanBootView.res.getString("UserMgrDialog.rd.admin"));        
        this.jRadioButton2.setText( SanBootView.res.getString("UserMgrDialog.rd.common"));         
        ((TitledBorder)jPanel5.getBorder()).setTitle(
            SanBootView.res.getString("UserMgrDialog.borderTitle.details")
        );
        ((TitledBorder)jPanel3.getBorder()).setTitle(
            SanBootView.res.getString("UserMgrDialog.borderTitle.list")
        );
    }
    
    private void  setPermOnUser(){     
        if( !view.audit.isLoginUsrIsAdmin() ){
            jButton2.setEnabled( false );
            jButton3.setEnabled( false );
            jButton4.setEnabled( false );
            jButton5.setEnabled( false );
        }
        
        if( !view.audit.hasThisRight( BackupUser.RIGHT_MOD_PWD ) ){ 
            jButton6.setEnabled( false );
        }
    }
      
    public void addListSelectionListener(){
        if( listener != null ){
            userTable.getSelectionModel().addListSelectionListener( 
                listener 
            );
        }
    }
    
    private void removeListSelectionListener(){
        if( listener != null ){
            userTable.getSelectionModel().removeListSelectionListener( 
                listener 
            );
        }
    }
    
    private void regKeyboardAction(){            
        jTextField1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jPasswordField1.requestFocusInWindow();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
        
        jPasswordField1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jPasswordField2.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
          
        jPasswordField2.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jRadioButton1.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
        
        jRadioButton1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    jRadioButton2.requestFocus();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,true),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );
    }
    
    public void userTable_mouseClicked( MouseEvent e ){
        selectionRowOfUsrTab = userTable.getSelectedRow();
        if( selectionRowOfUsrTab <0 ) return;
        
        int nameIdCol = userTable.getColumn(
            SanBootView.res.getString("UserMgrDialog.table.user.name")
        ).getModelIndex();
        
        DefaultTableModel tableModel = (DefaultTableModel)userTable.getModel();
        int lineNum = tableModel.getRowCount();
        if( selectionRowOfUsrTab>=0 && selectionRowOfUsrTab<lineNum ){
            whatUser = DO_MOD;
            BackupUser user = (BackupUser)tableModel.getValueAt( selectionRowOfUsrTab,nameIdCol );
            
            // control modpass function
            if( view.audit.isLoginUsrIsAdmin() ){
                enableUserPane( true );
            }else{
                if( view.audit.isLoginUserName( user.getUserName() ) ){
                    if( !view.audit.hasThisRight( BackupUser.RIGHT_MOD_PWD ) ){ 
                        jButton6.setEnabled( false );
                    }else{
                        jButton6.setEnabled( true );
                    }
                }else{
                    jButton6.setEnabled( false );
                }
            }
            
            jTextField1.setText( user.getUserName() );
            jTextField1.setEnabled( false );
            jPasswordField2.setText( "******" );
            jPasswordField2.setEnabled( false );
            jPasswordField1.setText( "******" );
            jPasswordField1.setEnabled( false );
            
            if( user.isAdminRight() ){
                jRadioButton1.setSelected( true );
                adminRadio_process();
            }else{
                jRadioButton2.setSelected( true );
                commonUserRadio_process();
            }            
        }
    }
    
    public void setupUserTable(){       
        Object[] title = new Object[]{
            SanBootView.res.getString("UserMgrDialog.table.user.name"),
            SanBootView.res.getString("UserMgrDialog.table.user.pass"),
            SanBootView.res.getString("UserMgrDialog.table.user.right"),
        };
      
        userTable.setupTitle( title );
       
        Vector userList = view.initor.mdb.getAllBakUser();
        int userNum = userList.size();
        for( int i=0;i<userNum;i++ ){
            Object[] one = new Object[3];
            BackupUser user = (BackupUser)userList.elementAt(i);
            one[0] = user;
            one[1] = new GeneralBrowserTableCell(
                -1,"******", JLabel.LEFT
            );
            one[2] = new GeneralBrowserTableCell(
                -1,user.getRightString(), JLabel.LEFT
            );
            userTable.insertRow(one);
        }

        int[][] widthList = new int[][]{
            {0,110 },{1,100},{2,185}
        };
        userTable.setupTableColumnWidth( widthList );
        userTable.getTableHeader().setBorder(BorderFactory.createRaisedBevelBorder() );
        userTable.getTableHeader().setReorderingAllowed( false );
        
        enableUserPane( false);
    }
    
    private void enableUserPane( boolean val){
        this.jTextField1.setEnabled( val );
        this.jTextField1.setOpaque( val );
        this.jPasswordField2.setEnabled( val );
        this.jPasswordField2.setOpaque( val );
        this.jPasswordField1.setEnabled( val );
        this.jPasswordField1.setOpaque( val );
        this.jRadioButton1.setEnabled( val );
        this.jRadioButton1.setOpaque( val );
        this.jRadioButton2.setEnabled( val);
        this.jRadioButton2.setOpaque( val );
        this.jButton5.setEnabled( val );
        this.jButton3.setEnabled( val );
    }
    
    private void clearupUserPane(){
        jTextField1.setText("");
        jPasswordField2.setText("");
        jPasswordField1.setText("");
        jRadioButton2.setSelected( true );
    }
    
    private void adminRadio_process(){
        this.jButton3.setEnabled( false );
        this.jButton3.setOpaque( false );
    }
    
    private void commonUserRadio_process(){
        if( view.audit.isLoginUsrIsAdmin() ){
            this.jButton3.setEnabled( true );
            this.jButton3.setOpaque( true );
        }else{
            this.jButton3.setEnabled( false );
            this.jButton3.setOpaque( false );
        }
    }
    
    int curRight;
    private void customBtn_process(){
        RightCustomDialog dialog;
        
        curRight = -1;
        
        if( whatUser == DO_ADD )
            dialog = new RightCustomDialog( this,0,null );
        else{
            int nameIdCol = userTable.getColumn(
                SanBootView.res.getString("UserMgrDialog.table.user.name")
            ).getModelIndex();
            DefaultTableModel tableModel = (DefaultTableModel)userTable.getModel();
            BackupUser user = (BackupUser)tableModel.getValueAt( selectionRowOfUsrTab,nameIdCol );
            if( user != null ){
SanBootView.log.info( getClass().getName()," user right: "+ user.getRight() );
                dialog = new RightCustomDialog( this,user.getRight(),user );
            }else{
SanBootView.log.error( this.getClass().getName(), "can not find selected user...." );             
                return;
            }
        }
        
        int width  = 560;
        int height = 445;
        dialog.setSize( width,height );
        dialog.setLocation( view.getCenterPoint( width,height ) );
        dialog.setVisible( true );
        
        int newRight = dialog.getNewRight();
        if( newRight == -1 ) return;
        
        this.curRight = newRight;
    }
    
    private void okBtn_process(){
        this.dispose();
    }
    
    private void delBtn_process(){
        int row = userTable.getSelectedRow();
        if( row <0 ) {
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("UserMgrDialog.error.noneSelUsr")
            );
            return;
        }
        
        int nameIdCol = userTable.getColumn(
          SanBootView.res.getString("UserMgrDialog.table.user.name")
        ).getModelIndex();

        removeListSelectionListener();
        
        DefaultTableModel tableModel = (DefaultTableModel)userTable.getModel();
        int lineNum = tableModel.getRowCount();
        if( row>=0 && row<lineNum ){
            BackupUser user = (BackupUser)tableModel.getValueAt( row,nameIdCol );
          
            // 不能删除登录用户
            if( user.getUserName().equals( view.initor.user ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("UserMgrDialog.error.delMe")
                );
                addListSelectionListener();
                return;
            }
          
            // 检查是否为最后一个具有admin权限的用户
            if( view.initor.mdb.isLastAdminUser( user.getUserName() ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("UserMgrDialog.error.lastAdminUser")
                );
                addListSelectionListener();
                return;
            }
          
            if( user.getUserName().equals("admin") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("UserMgrDialog.error.delAdminUser")
                );
                addListSelectionListener();
                return;
            }
          
            if( JOptionPane.showConfirmDialog(
                this,
                SanBootView.res.getString("UserMgrDialog.confirm3"),
                SanBootView.res.getString("common.confirm"),  //"Confirm",
                JOptionPane.OK_CANCEL_OPTION
            ) == JOptionPane.CANCEL_OPTION ){
                addListSelectionListener();
                return;
            }
          
            boolean ok = view.initor.mdb.deleteBakUser( user.getUserName() );
            if( ok ){
                view.initor.mdb.removeUserFromVector( user );
                tableModel.removeRow( row );
                clearupUserPane();
                enableUserPane( false );
            }else{
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_DEL_USER )+
                        SanBootView.res.getString("common.failed") + " : " +
                        view.initor.mdb.getErrorMessage()
                );
            }        
        }
        
        addListSelectionListener();
    }
    
    private void modPasswd_process(){
        int row = userTable.getSelectedRow();
        if( row <0 ) {
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("UserMgrDialog.error.noneSelUsr")
            );
            return;
        }
        
        int nameIdCol = userTable.getColumn(
            SanBootView.res.getString("UserMgrDialog.table.user.name")
        ).getModelIndex();
       
        removeListSelectionListener();
        
        DefaultTableModel tableModel = (DefaultTableModel)userTable.getModel();
        int lineNum = tableModel.getRowCount();
        if( row>=0 && row<lineNum ){
            BackupUser user = (BackupUser)tableModel.getValueAt( row,nameIdCol );
            
            guisanboot.audit.ui.InputPasswordDialog dialog = new guisanboot.audit.ui.InputPasswordDialog( this,user );
            int width  = 305;
            int height = 155;
            dialog.setSize( width, height );
            dialog.setLocation( getCenterPoint( width, height) );
            dialog.setVisible( true );
            
            String newPasswd = dialog.getNewPasswd();
            if( newPasswd == null  ){
                addListSelectionListener();
                return;
            }
            
            BackupUser newUser = new BackupUser(
                user.getID(),
                user.getUserName(),
                newPasswd,
                user.getRight(),
                (int)user.getDevList()
            );
            
            Audit audit = view.audit.registerAuditRecord( 0,MenuAndBtnCenterForMainUi.FUNC_MOD_PASS );
            
            boolean ok = view.initor.mdb.addOrModBackupUser( newUser,1 );
            if( ok ){ 
                audit.setEventDesc( "Modify password for user: " + newUser.getUserName() + " successfully." );
                view.audit.addAuditRecord( audit );
                
                view.initor.mdb.removeUserFromVector( user );
                view.initor.mdb.AddUserToVector( newUser );
                tableModel.setValueAt( newUser,row,nameIdCol );
            }else{
                audit.setEventDesc( "Failed to modify password for user: " + newUser.getUserName() );
                view.audit.addAuditRecord( audit );
                
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_CHG_PASS )+
                    " "+ SanBootView.res.getString("common.failed")+" : "+
                    view.initor.mdb.getErrorMessage()
                );
            }
        }
        
        addListSelectionListener();
    }
     
    private void saveBtn_process(){
        saveAndsaveasUserButton_Process( SAVE );
    }
    
    private void saveAndsaveasUserButton_Process( int mode ){
        BackupUser newUser;
        int right=0;
        
        String userName = jTextField1.getText().trim();
        if( userName.equals("") ){
          JOptionPane.showMessageDialog(this,
            SanBootView.res.getString("UserMgrDialog.errMsg.invalidUsrName")
          );
          return;
        }
        
        if( userName.indexOf("\"")>=0 || userName.indexOf("'")>=0|| 
            userName.indexOf(' ')>=0 || userName.indexOf('\t')>=0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("UserMgrDialog.errMsg.badUser")
            );
            return;
        }
        
        if( userName.getBytes().length >= 32 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("UserMgrDialog.errMsg.tooLargeUser")
            );
            return;
        }    
 
        String passwd = new String( jPasswordField2.getPassword() );
        String passwd1 = new String( jPasswordField1.getPassword() );
        
        if( passwd.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("UserMgrDialog.errMsg.nonePasswd")
            );
            return;
        }
        
        if( passwd.indexOf("\"")>=0 || passwd.indexOf("'")>=0 ||
            passwd.indexOf(' ')>=0 || passwd.indexOf('\t')>=0){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("UserMgrDialog.errMsg.badPasswd")
            );
            return;
        }
        
        if( passwd.getBytes().length >= 32 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("UserMgrDialog.errMsg.tooBigPasswd")
            );
            return;
        }
        
        if( !passwd.equals( passwd1 ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("InputPasswordDialog.errMsg.disMatched")
            );
            return;
        }
        
        if( jRadioButton1.isSelected() ){
            right = right | BackupUser.RIGHT_ADMIN;
            newUser = new BackupUser(
                -1, 
                userName,
                passwd,
                right,
                -1
            );
        }else{
            newUser = new BackupUser(
                -1,
                userName,
                passwd,
                right, 
                -1
            );
        }
        
        DefaultTableModel tableModel = (DefaultTableModel)userTable.getModel();
        int nameIdCol = userTable.getColumn(
          SanBootView.res.getString("UserMgrDialog.table.user.name")
        ).getModelIndex();

        BackupUser _user = null;
        if( mode == SAVE ){
            if( whatUser == DO_MOD ){
                _user = (BackupUser)tableModel.getValueAt( selectionRowOfUsrTab,nameIdCol );
                newUser.setUserName( _user.getUserName() );
                newUser.setID( _user.getID() );
                if( _user.getUserName().equals( view.initor.user ) ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("UserMgrDialog.error.modMe")
                    );
                    return;
                }
            
                if( jRadioButton2.isSelected() ){
                    if( view.initor.mdb.isLastAdminUser(_user.getUserName()) ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("UserMgrDialog.error.lastAdminUser")
                        );
                        return;
                    }
                }
                
                // 修改User时,不能修改User的口令
                newUser.setPasswd( _user.getPasswd() );
                if( jRadioButton2.isSelected() ){
                    if( curRight != -1 ){
                        newUser.setRight( curRight );
                    }else{
                        if( _user.isAdminRight() ){
                            newUser.setRight( 0 );
                        }else{
                            newUser.setRight( _user.getRight() );
                        }
                    }
                }
            }else{
                if( jRadioButton2.isSelected() ){
                    if( curRight != -1 ){
                        newUser.setRight( curRight );
                    }
                }
            }
        }

        if( isSameUser( newUser, mode ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("UserMgrDialog.errMsg.sameUserName")
            );
            return;
        }
        
        boolean ok ;       
        boolean isMod = ( whatUser == DO_MOD );
System.out.println(" right: "+ newUser.getRight() );
        if( isMod ){
            ok = view.initor.mdb.addOrModBackupUser( newUser,1 );
        }else{
            ok = view.initor.mdb.addOrModBackupUser( newUser,0 );
            newUser.setID( (int)view.initor.mdb.getNewId() );
        }
        
        if( ok ){
          try{
            if( isMod ){
                view.initor.mdb.removeUserFromVector( _user );
            }
            view.initor.mdb.AddUserToVector( newUser );
            
            setupUserTable();
            clearupUserPane();
            enableUserPane( false );
            jButton5.setEnabled( false );
          }catch(Exception ex){
            ex.printStackTrace();
          }
        }else{
            String cmd = isMod ? ResourceCenter.getCmdString( ResourceCenter.CMD_MOD_USER ):
                                   ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_USER );
            
            JOptionPane.showMessageDialog( this,
                cmd+" "+SanBootView.res.getString("common.failed")+" : "+
                view.initor.mdb.getErrorMessage()
            );
        }
    }
    
    private void newBtn_process(){
        jTextField1.requestFocus();
        whatUser = DO_ADD;
        selectionRowOfUsrTab = -1;
        enableUserPane( true );
        clearupUserPane();
    }
    
    private boolean isSameUser( BackupUser _user,int mode ){
        BackupUser user;

        int nameIdCol = userTable.getColumn(
          SanBootView.res.getString("UserMgrDialog.table.user.name")
        ).getModelIndex();

        DefaultTableModel tableModel = (DefaultTableModel)userTable.getModel();
        int rowNum = tableModel.getRowCount();
        for( int i=0;i<rowNum;i++ ){
            if( whatUser == DO_ADD ){
                user = (BackupUser)tableModel.getValueAt( i,nameIdCol );
                if( user.getUserName().equals( _user.getUserName() ) ){
                    return true;
                }
            }else if( whatUser == DO_MOD ){
                if( i == selectionRowOfUsrTab ){
                    if( mode == SAVE )
                        continue;
                    else{
                        user = (BackupUser)tableModel.getValueAt(i,nameIdCol);
                        if( user.getUserName().equals( _user.getUserName() ) ){
                            return true;
                        }
                    }
                }else{
                    user = (BackupUser)tableModel.getValueAt(i,nameIdCol);
                    if( user.getUserName().equals( _user.getUserName() ) ){
                        return true;
                    }
                }
            }else{
                // do nothing
            }
        }
        
        return false;
    }
    
    public Point getCenterPoint(int width,int height){
        int x = ( getSize().width - width ) / 2 + getX();
        int y = ( getSize().height - height ) / 2 + getY();
        return new Point(x,y);
    }
}
