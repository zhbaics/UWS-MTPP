/*
 * EditProfileDialog.java
 *
 * Created on 2008/7/28,��PM�2:25f
 */

package guisanboot.datadup.ui;

import guisanboot.data.*;
import guisanboot.datadup.cmd.RunBackup;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.SanBootView;
import guisanboot.datadup.data.*;
import guisanboot.datadup.ui.ProcessEvent.ProcessEventOnChiefProfile;
import guisanboot.ui.InitNWinHostWizardDialog;
import guisanboot.ui.InitBootHostWizardDialog;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.*;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.TreePath;
import mylib.UI.*;

/**
 *
 * @author  zjj
 */
public class EditProfileDialog extends javax.swing.JDialog implements Backupable,Schedulerable {
    public final static String SNAP_MP = "/mnt/snap";
    
    private boolean isLoading = false;
    private UniProfile loadUniProfile = null;
    MonthlyPane monthPane = new MonthlyPane(); 
    WeeklyPane weekPane = new WeeklyPane(); 
    SanBootView view;
    String fWindir;
    BootHost host;
    BackupClient bkClnt;
    ArrayList oldSchList;
    Vector rootListForLinux; // 存放linux的fs list(/,/usr/,/boot/等)
    Vector partList; // 存放分区列表（包括文件类型）
    BakObject bkobj = null;
    UniProfile oldProf;
    ArrayList hidenFs;
    DefaultListModel model = new DefaultListModel();
    JList bakList = new JList( model );
    DefaultListModel model1 = new DefaultListModel();
    JList excludeList = new JList( model1 );
    BrowserTable schedulerTable = new BrowserTable();
    int selectionline = -1;
    ButtonGroup grp = new ButtonGroup();
    
    int whatAct = -1;
    public final static int ADD_ACT = 0;
    public final static int MOD_ACT = 1;
    
    private Hashtable<Integer,String> winSrcList = new Hashtable<Integer,String>();
    private Hashtable<Object,BindOfFSAndDevNo> unixSrcList = new Hashtable<Object,BindOfFSAndDevNo>();

    private Vector<VolumeMap> filtered_vol_list;
    private ArrayList<String> root_vol_list;

    private String bootTxIP = "";
    /** Creates new form EditProfileDialog */
    public EditProfileDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public EditProfileDialog( String windir,SanBootView view,BootHost host,
            BackupClient bkClnt,ArrayList oldSchList,
            BakObject bkobj,UniProfile oldProf,
            ArrayList hidenFs ){
        this( view,true );
        myInit( windir,view,host,bkClnt,oldSchList,bkobj,oldProf,hidenFs );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel14 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel27 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel28 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jTextField24 = new javax.swing.JTextField();
        jTextField25 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jPanel18 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jCheckBox8 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setPreferredSize(new java.awt.Dimension(474, 300));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel13.setPreferredSize(new java.awt.Dimension(0, 30));
        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jCheckBox7.setText("Physical Block Incremental Backup");
        jCheckBox7.setBorder(null);
        jCheckBox7.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });
        jPanel13.add(jCheckBox7);

        jCheckBox1.setText("LVM Snapshot(Suitable for Linux)");
        jCheckBox1.setBorder(null);
        jCheckBox1.setPreferredSize(new java.awt.Dimension(225, 19));
        jPanel13.add(jCheckBox1);

        jPanel9.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel14.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Last Duplication Time"));
        jPanel10.setPreferredSize(new java.awt.Dimension(10, 60));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jTextField11.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel10.add(jTextField11, gridBagConstraints);

        jPanel14.add(jPanel10, java.awt.BorderLayout.SOUTH);

        jPanel27.setLayout(new java.awt.BorderLayout());
        jPanel27.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane3.addTab("Content List", jPanel27);

        jPanel28.setLayout(new java.awt.BorderLayout());
        jPanel28.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane3.addTab("Exclude", jPanel28);

        jPanel14.add(jTabbedPane3, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        jButton7.setText("Add");
        jButton7.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton7);

        jButton1.setText("Modify");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton1);

        jButton9.setText("Delete");
        jButton9.setMargin(new java.awt.Insets(2, 1, 2, 1));
        jButton9.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton9);

        jPanel5.add(jPanel12, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Contents", jPanel5);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setOpaque(false);
        jPanel7.setPreferredSize(new java.awt.Dimension(0, 40));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jButton4.setText("Add");
        jButton4.setPreferredSize(new java.awt.Dimension(71, 24));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton4);

        jButton5.setText("Modify");
        jButton5.setPreferredSize(new java.awt.Dimension(71, 24));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton5);

        jButton6.setText("Delete");
        jButton6.setPreferredSize(new java.awt.Dimension(71, 24));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton6);

        jPanel4.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("List"));
        jPanel21.setLayout(new java.awt.BorderLayout());
        jPanel21.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel21, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Scheduler", jPanel4);

        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Inclusive Filter"));
        jPanel16.setPreferredSize(new java.awt.Dimension(10, 150));
        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel12.setText("Only backup files which accord with following filter : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel16.add(jLabel12, gridBagConstraints);

        jTextField13.setPreferredSize(new java.awt.Dimension(425, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel16.add(jTextField13, gridBagConstraints);

        jLabel23.setText("For example:  1.txt and 2.txt  will be backuped according to the filter \"*.txt\" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel16.add(jLabel23, gridBagConstraints);

        jPanel15.add(jPanel16, java.awt.BorderLayout.NORTH);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Exclusive Filter"));
        jPanel17.setLayout(new java.awt.GridBagLayout());

        jLabel22.setText("Exclude files which accord with following filter :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel17.add(jLabel22, gridBagConstraints);

        jTextField14.setPreferredSize(new java.awt.Dimension(420, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel17.add(jTextField14, gridBagConstraints);

        jLabel24.setText("For example : 1.txt and 2.txt will not be backuped according to filter \"*.txt\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel17.add(jLabel24, gridBagConstraints);

        jPanel15.add(jPanel17, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Filter", jPanel15);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Switch"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel6.setText("Cmd bef Snap :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel6.add(jLabel6, gridBagConstraints);

        jTextField4.setPreferredSize(new java.awt.Dimension(350, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 3, 0, 0);
        jPanel6.add(jTextField4, gridBagConstraints);

        jLabel7.setText("Cmd aft Snap :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jLabel7, gridBagConstraints);

        jTextField5.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel6.add(jTextField5, gridBagConstraints);

        jCheckBox3.setText("Not care change of file size and modified time");
        jCheckBox3.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jCheckBox3, gridBagConstraints);

        jLabel21.setText("Backup Level :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jLabel21, gridBagConstraints);

        jLabel33.setText("Command Before :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jLabel33, gridBagConstraints);

        jLabel34.setText("Command After :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jLabel34, gridBagConstraints);

        jTextField24.setPreferredSize(new java.awt.Dimension(72, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel6.add(jTextField24, gridBagConstraints);

        jTextField25.setPreferredSize(new java.awt.Dimension(72, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel6.add(jTextField25, gridBagConstraints);

        jComboBox1.setMinimumSize(new java.awt.Dimension(40, 20));
        jComboBox1.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel6.add(jComboBox1, gridBagConstraints);

        jLabel1.setText("Redundant Clean :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        jPanel6.add(jLabel1, gridBagConstraints);

        jTextField1.setMaximumSize(new java.awt.Dimension(65, 22));
        jTextField1.setMinimumSize(new java.awt.Dimension(65, 22));
        jTextField1.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 3, 0, 0);
        jPanel6.add(jTextField1, gridBagConstraints);

        jLabel2.setText("Times of duplication");
        jLabel2.setMaximumSize(new java.awt.Dimension(180, 16));
        jLabel2.setMinimumSize(new java.awt.Dimension(180, 16));
        jLabel2.setPreferredSize(new java.awt.Dimension(180, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 2, 0, 0);
        jPanel6.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Every");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 3, 0, 0);
        jPanel6.add(jLabel3, gridBagConstraints);

        jCheckBox4.setText("Logout when duplication is finished");
        jCheckBox4.setBorder(null);
        jCheckBox4.setPreferredSize(new java.awt.Dimension(211, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jCheckBox4, gridBagConstraints);

        jCheckBox6.setText("Ignor all errors when data transferring ");
        jCheckBox6.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel6.add(jCheckBox6, gridBagConstraints);

        jPanel11.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Snapshot"));
        jPanel18.setPreferredSize(new java.awt.Dimension(12, 90));
        jPanel18.setLayout(new java.awt.GridBagLayout());

        jRadioButton1.setText("Not create snapshot");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel18.add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("Create Snapshot");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel18.add(jRadioButton2, gridBagConstraints);

        jCheckBox8.setText("Backup only in case of snapshot is OK");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel18.add(jCheckBox8, gridBagConstraints);

        jPanel11.add(jPanel18, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Advanced Options", jPanel11);

        jPanel2.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 1, 5, 1));
        jPanel3.setPreferredSize(new java.awt.Dimension(315, 45));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 1, 2, 1));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 35, 5));

        jButton2.setText("OK");
        jButton2.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        jButton3.setText("Cancel");
        jButton3.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 8));

        jCheckBox2.setText("Start to duplicate");
        jCheckBox2.setBorder(null);
        jPanel8.add(jCheckBox2);

        jCheckBox5.setText("Start with full backup level");
        jPanel8.add(jCheckBox5);

        jPanel3.add(jPanel8, java.awt.BorderLayout.WEST);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        modContents();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        process_PhyInc_chkBox();
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        okButton_actionPerformed( evt );
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        delSch();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        modSch();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        addSch();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        delContents();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        addContents();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
    do_click_radioBtn1();
}//GEN-LAST:event_jRadioButton1ActionPerformed

private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
    do_click_radioBtn2();
}//GEN-LAST:event_jRadioButton2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditProfileDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
     
    private void myInit( String windir,SanBootView view,BootHost host,
            BackupClient bkClnt,ArrayList oldSchList,
            BakObject bkobj,UniProfile oldProf,
            ArrayList hidenFs ){
        this.fWindir  = windir;
        this.view     = view;
        this.oldSchList = oldSchList;
        this.host     = host;
        this.bkClnt   = bkClnt;
        this.bkobj    = bkobj;
        this.oldProf  = oldProf;
        this.hidenFs  = hidenFs;

        jScrollPane1.getViewport().add(bakList, null);
        jScrollPane1.getViewport().setBackground(Color.white);
        bakList.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        
        jScrollPane2.getViewport().add( excludeList, null);
        jScrollPane2.getViewport().setBackground(Color.white);
        excludeList.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        
        bakList.setCellRenderer( new FileDirRenderer() );
        excludeList.setCellRenderer( new FileDirRenderer() );
        
        jScrollPane3.getViewport().add(schedulerTable, null);
        jScrollPane3.getViewport().setBackground( Color.white );
        
        jTextField11.setEnabled( false );
        jTextField11.setOpaque( false );
        
        grp.add( this.jRadioButton1 );
        grp.add( this.jRadioButton2 );
        this.jRadioButton2.setSelected( true );
        
        setupSchedulerTable();
        setupBackupLevel();
        jTextField1.setText( UniProBackup.DEFAULT_VAL_DEL_REDUNDANT+"" );
        jCheckBox4.setSelected( true );
        if( !host.isWin2000() ){
            jCheckBox8.setSelected( true );
        }else{
            this.jRadioButton1.setSelected( true );
            this.do_click_radioBtn1();
        }
        setupLanguage();
        initUi( oldProf );
    }
    
    private void setupLanguage(){
        if( this.bkobj == null ){
            setTitle(SanBootView.res.getString("EditProfileDialog.diagTitle") +" [ "+host.getIP()+" ]" );
        }else{
            setTitle(SanBootView.res.getString("EditProfileDialog.diagTitle1") +" [ "+host.getIP()+" ]" );
        }
        
        TitledBorder bor = (TitledBorder)jPanel6.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditProfileDialog.borderTitle.switch")
        );
        
        bor = (TitledBorder)jPanel18.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditProfileDialog.borderTitle.snapOnClnt") 
        );
        
        bor = (TitledBorder)jPanel10.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditProfileDialog.borderTitle.lastbak") 
        );
        
        bor = (TitledBorder)jPanel16.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditProfileDialog.borderTitle.incFilter")
        );
        
        bor = (TitledBorder)jPanel17.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditProfileDialog.borderTitle.excFilter")
        );
        
        bor = (TitledBorder)jPanel21.getBorder();
        bor.setTitle(
            SanBootView.res.getString("EditProfileDialog.borderTitle.schList")
        );
        
        jRadioButton1.setText( SanBootView.res.getString("EditProfileDialog.radioBtn.notDoSnap"));
        jRadioButton2.setText( SanBootView.res.getString("EditProfileDialog.radioBtn.doSnap"));
        
        jLabel1.setText(SanBootView.res.getString("EditProfileDialog.label.cleanRedundant1"));
        jLabel2.setText(SanBootView.res.getString("EditProfileDialog.label.cleanRedundant2"));
        jLabel3.setText(SanBootView.res.getString("common.every"));
        jLabel6.setText(SanBootView.res.getString("EditProfileDialog.label.snapPrexCmd"));
        jLabel7.setText(SanBootView.res.getString("EditProfileDialog.label.snapPostCmd"));
        jLabel21.setText(SanBootView.res.getString("EditProfileDialog.label.bakLevel"));
        jLabel12.setText(SanBootView.res.getString("EditProfileDialog.label.incTip"));
        jLabel23.setText(SanBootView.res.getString("EditProfileDialog.label.incEg"));
        jLabel22.setText(SanBootView.res.getString("EditProfileDialog.label.excTip"));
        jLabel24.setText(SanBootView.res.getString("EditProfileDialog.label.excEg"));
        jLabel33.setText(SanBootView.res.getString("EditProfileDialog.label.preCmd"));
        jLabel34.setText(SanBootView.res.getString("EditProfileDialog.label.postCmd"));
        
        jCheckBox1.setText( SanBootView.res.getString("EditProfileDialog.checkBox.lvmsnap"));
        jCheckBox2.setText( SanBootView.res.getString("EditProfileDialog.checkBox.startup"));
        jCheckBox3.setText( SanBootView.res.getString("EditProfileDialog.checkBox.inc_no_judge_time"));
        jCheckBox4.setText( SanBootView.res.getString("EditProfileDialog.checkBox.logoutTarget"));
        jCheckBox5.setText( SanBootView.res.getString("EditProfileDialog.checkBox.startwithfull"));
        jCheckBox6.setText( SanBootView.res.getString("EditProfileDialog.checkBox.ignoreAllErr"));
        jCheckBox7.setText( SanBootView.res.getString("EditProfileDialog.checkBox.phyincbak"));
        jCheckBox8.setText( SanBootView.res.getString("EditProfileDialog.checkBox.mustSnapshotOK"));
        
        jButton1.setText(SanBootView.res.getString("common.button.mod1"));
        jButton2.setText(SanBootView.res.getString("common.button.ok"));
        jButton3.setText(SanBootView.res.getString("common.button.cancel"));
        jButton4.setText(SanBootView.res.getString("common.button.add1"));
        jButton5.setText(SanBootView.res.getString("common.button.mod1"));
        jButton6.setText(SanBootView.res.getString("common.button.del"));
        jButton7.setText(SanBootView.res.getString("EditProfileDialog.button.addBakSrc"));
        jButton9.setText(SanBootView.res.getString("EditProfileDialog.button.delBakSrc"));
        
        int index = jTabbedPane1.indexOfComponent(jPanel11);
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("EditProfileDialog.tabTitle.advOpt")
        );
        index = jTabbedPane1.indexOfComponent(jPanel5);
        jTabbedPane1.setTitleAt(index,
            SanBootView.res.getString("EditProfileDialog.tabTitle.content")
        );
        index = jTabbedPane1.indexOfComponent(jPanel15);
        jTabbedPane1.setTitleAt(index, 
            SanBootView.res.getString("EditProfileDialog.tabTitle.filter")
        );
        index = jTabbedPane1.indexOfComponent( jPanel4 );
        jTabbedPane1.setTitleAt(index,
            SanBootView.res.getString("EditProfileDialog.tabTitle.sch")
        );
        
        index = jTabbedPane3.indexOfComponent( jPanel27 );
        jTabbedPane3.setTitleAt(index,
            SanBootView.res.getString("EditProfileDialog.tabTitle.cpList")
        );
        index = jTabbedPane3.indexOfComponent( jPanel28 );
        jTabbedPane3.setTitleAt(index,
            SanBootView.res.getString("EditProfileDialog.tabTitle.excList")
        );
    }
    
    private void setupBackupLevel(){
        jComboBox1.addItem( SanBootView.res.getString(BakObject.BAKLEVEL_FULL) );
        jComboBox1.addItem( SanBootView.res.getString(BakObject.BAKLEVLE_INC) );
        jComboBox1.setSelectedIndex( 1 );
    }
    
    private void setupSchedulerTable(){
        Object[] title = new Object[]{
            SanBootView.res.getString("SchedulerDialog.table.scheduler.name"),
            SanBootView.res.getString("SchedulerDialog.table.scheduler.enable"),
            SanBootView.res.getString("SchedulerDialog.table.scheduler.startTime")
        };
        schedulerTable.setupTitle( title );
        
        int[][] widthList = new int[][]{
            {0,175},{1,65},{2,190}
        };
        schedulerTable.setupTableColumnWidth( widthList );
        schedulerTable.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        schedulerTable.getTableHeader().setReorderingAllowed( false );
    }
    
    private boolean isMustCrtSnap(){
        if( jRadioButton2.isSelected() ){
            return jCheckBox8.isSelected();
        }else{
            return false;
        }
    }
    
    public boolean isSameScheduler( DBSchedule newsch ){
        DBSchedule sched;
        
        int idCol = schedulerTable.getColumn(
            SanBootView.res.getString("SchedulerDialog.table.scheduler.name")
        ).getModelIndex();
        
        DefaultTableModel tableModel = (DefaultTableModel)schedulerTable.getModel();
        int rowNum = tableModel.getRowCount();
        for( int i=0;i<rowNum;i++ ){
            if( whatAct == ADD_ACT ){
                sched = (DBSchedule)tableModel.getValueAt( i,idCol );
                if( sched.getTimeStr().equals( newsch.getTimeStr() ) ){
                    return true;
                }
            }else if( whatAct == MOD_ACT ){
                if( i == selectionline ){
                    continue;
                }else{
                    sched = (DBSchedule)tableModel.getValueAt(i,idCol);
                    if( sched.getTimeStr().equals( newsch.getTimeStr() ) ){
                        return true;
                    }
                }
            }else{
                // do nothing
            }
        }
        
        return false;
    }
    
    private void process_PhyInc_chkBox(){
        jCheckBox3.setSelected( jCheckBox7.isSelected() );
    }
    
    private void setupDefault(){   
    }
    
    private void do_click_radioBtn1(){
        this.jCheckBox8.setEnabled( false );
    }
    
    private void do_click_radioBtn2(){
        this.jCheckBox8.setEnabled( true );
    }
    
    public void setRoot_vol_list( ArrayList<String> val ){
        this.root_vol_list = val;
    }
    
    private ArrayList<String> getFilterString(){
        if( this.filtered_vol_list == null ){
            if( host.isCMDPProtect() && host.isWinHost() ){
                filtered_vol_list = view.initor.mdb.getVolMapOnClntIDAndPType( host.getID(),BootHost.PROTECT_TYPE_CMDP );
            }else{
                filtered_vol_list = new Vector<VolumeMap>();
            }
        }

        int size = this.filtered_vol_list.size();
        ArrayList<String> ret = new ArrayList<String>();
        for( int i=0; i<size; i++ ){
            VolumeMap volMap = filtered_vol_list.get(i);
            ret.add( volMap.getVolDiskLabel() );
        }
        return ret;
    }
    
    private void addContents(){
        SelectBakedFileDialog dialog;
        
        if( host.isWinHost() && host.isCMDPProtect() ){
            if( this.root_vol_list == null ){
                dialog = new SelectBakedFileDialog( view,this.bkClnt,"","",this.getFilterString() );
                dialog.setFilterFlag( true );
            }else{
                dialog = new SelectBakedFileDialog( view,this.bkClnt,this.root_vol_list );
            }
        }else{
            dialog = new SelectBakedFileDialog( view,this.bkClnt,"","" );
        }
        dialog.setHidenFs( hidenFs );

        if( root_vol_list == null ){
            if( this.bkClnt.isWin() ){
                FileListFetcher fetcher1 = new FileListFetcher(
                    this.bkClnt,
                    dialog.getCurPath(),
                    dialog.getFileModel(),
                    dialog.getRootsVector(),
                    (BrowseBakedFile)dialog,
                    view.getSocket(),
                    true,
                    0,
                    true
                );
                fetcher1.start();
            }else{
                FsListFetcher fetcher2 = new FsListFetcher(
                    this.bkClnt,
                    "",
                    dialog.getFileModel(),
                    dialog.getRootsVector(),
                    (BrowseBakedFile)dialog,
                    view.getSocket(),
                    true,
                    0,
                    true
                );
                fetcher2.start();
            }
        }else{
            int size = root_vol_list.size();
            for( int i=0; i<size; i++ ){
                dialog.getFileModel().addElement( root_vol_list.get( i ) );
            }
        }
        
        int width  = 565+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 435+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( getCenterPoint( width,height) );
        dialog.setVisible( true );
        
        Object[] ret = dialog.getValues();
        if( ret == null ) return;
        
        rootListForLinux   = dialog.getRootsVector(); 
        String fileList    = (String)ret[0]; 
        String aExcludeList = (String)ret[1];
        
        setupBakSourcePane( fileList,aExcludeList );
    }
    
    private void modContents(){
        SelectBakedFileDialog dialog;

        String selFile = this.getBkList( false );
        String excFile = this.getExcludeList( false );
        
        if( host.isWinHost() && host.isCMDPProtect() ){
            if( this.root_vol_list == null ){
                dialog = new SelectBakedFileDialog( view,this.bkClnt,"","",this.getFilterString() );
                dialog.setFilterFlag( true );
            }else{
                dialog = new SelectBakedFileDialog( view,this.bkClnt,this.root_vol_list );
            }
        }else{
            dialog = new SelectBakedFileDialog( view,this.bkClnt,selFile,excFile );
        }
        dialog.setHidenFs( hidenFs );

        if( root_vol_list == null ){
            if( this.bkClnt.isWin() ){
                FileListFetcher fetcher1 = new FileListFetcher(
                    this.bkClnt,
                    dialog.getCurPath(),
                    dialog.getFileModel(),
                    dialog.getRootsVector(),
                    (BrowseBakedFile)dialog,
                    view.getSocket(),
                    true,
                    0,
                    true
                );
                fetcher1.start();
            }else{
                FsListFetcher fetcher2 = new FsListFetcher(
                    this.bkClnt,
                    "",
                    dialog.getFileModel(),
                    dialog.getRootsVector(),
                    (BrowseBakedFile)dialog,
                    view.getSocket(),
                    true,
                    0,
                    true
                );
                fetcher2.start();
            }
        }else{
            int size = root_vol_list.size();
            for( int i=0; i<size; i++ ){
                dialog.getFileModel().addElement( root_vol_list.get( i ) );
            }
        }
        
        int width  = 565+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 435+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( getCenterPoint( width,height) );
        dialog.setVisible( true );
        
        Object[] ret = dialog.getValues();
        if( ret == null ) return;
        
        rootListForLinux   = dialog.getRootsVector(); 
        String fileList    = (String)ret[0]; 
        String aExcludeList = (String)ret[1];
        
        setupBakSourcePane( fileList,aExcludeList );
    }
    
    private void delContents(){
        setupBakSourcePane( "","" );
    }
    
    private void setupBakSourcePane( String bakList,String excludeList ){    
        model.removeAllElements();
        String[] list = Pattern.compile(";").split( bakList );
        for( int i=0; i<list.length; i++ ){
            if( !list[i].equals("") )
                model.addElement( list[i] );
        }
        
        model1.removeAllElements();
        list = Pattern.compile(";").split( excludeList );
        for( int i=0; i<list.length; i++ ){
            if( !list[i].equals("") ){
                model1.addElement( list[i] );
            }
        }
        
        jTextField11.setText("");
        jButton7.setEnabled( bakList == null || bakList.equals("") );
        jButton1.setEnabled( bakList != null && !bakList.equals("") );
    }
    
    void addSch(){
        whatAct = ADD_ACT;
        SchedDialog dialog = new SchedDialog( this,view,null ); 
        int width  = 525+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 400+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( view.getCenterPoint( width,height ) );
        dialog.setVisible( true );
        
        Object[] ret = dialog.getValues();
        if( ret == null ) return;
        
        DBSchedule sch = (DBSchedule)ret[0];
        addRowToSchTable( sch );
    }
    
    void delSch(){
        selectionline = schedulerTable.getSelectedRow();
        if( selectionline <0 ) {
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SchedulerDialog.error.noneScher")
            );
            return;
        }
        delRowFromSchTable();
    }
    
    void modSch(){
        whatAct = MOD_ACT;
        selectionline = schedulerTable.getSelectedRow();
        if( selectionline <0 ) {
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SchedulerDialog.error.noneScher")
            );
            return;
        }
        
        int schIdCol = schedulerTable.getColumn(
            SanBootView.res.getString("SchedulerDialog.table.scheduler.name")
        ).getModelIndex();
        
        DefaultTableModel tableModel = (DefaultTableModel)schedulerTable.getModel();
        int numOfLine = tableModel.getRowCount();
        if( selectionline >= 0 && selectionline < numOfLine ){
            DBSchedule selDBSche = ( DBSchedule )schedulerTable.getValueAt( selectionline,schIdCol );
           
            SchedDialog dialog = new SchedDialog( this,view,selDBSche );
            int width  = 525+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 400+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            dialog.setSize( width,height );
            dialog.setLocation( view.getCenterPoint( width,height ) );
            dialog.setVisible( true );

            Object[] ret = dialog.getValues();
            if( ret == null ) return;
            
            DBSchedule sch = (DBSchedule)ret[0];
            sch.setID( selDBSche.getID() );
            modRowOnSchTable( sch );   
        }
    }
    
    private void addRowToSchTable( DBSchedule scheduler ){      
        Object[] one = new Object[]{
            scheduler,
            new GeneralBrowserTableCell(
                -1,scheduler.isEnable()?"Yes":"No",JLabel.RIGHT
            ), 
            new GeneralBrowserTableCell(
                -1,scheduler.getStartTime(),JLabel.RIGHT
            )
        };
        
        schedulerTable.insertRow( one );
    }
    
    public void modRowOnSchTable( DBSchedule sch ){
        int nameIdCol = schedulerTable.getColumn(
            SanBootView.res.getString("SchedulerDialog.table.scheduler.name")
        ).getModelIndex();
        int activeIdCol = schedulerTable.getColumn(
            SanBootView.res.getString("SchedulerDialog.table.scheduler.enable")
        ).getModelIndex();
        int stIdCol = schedulerTable.getColumn(
            SanBootView.res.getString("SchedulerDialog.table.scheduler.startTime")
        ).getModelIndex();
        
        DefaultTableModel tableModel = (DefaultTableModel)schedulerTable.getModel();
        int numOfLine = tableModel.getRowCount();
        if( selectionline >= 0 && selectionline < numOfLine ){
            schedulerTable.setValueAt( sch, selectionline, nameIdCol );
            schedulerTable.setValueAt(  
                new GeneralBrowserTableCell(
                -1,sch.isEnable()?"Yes":"No",JLabel.RIGHT
                ),
                selectionline, 
                activeIdCol 
            );
            schedulerTable.setValueAt( 
                new GeneralBrowserTableCell(
                    -1,sch.getStartTime(),JLabel.RIGHT
                ),
                selectionline, 
                stIdCol 
            );
        }
    }
    
    private void delRowFromSchTable(){
        DefaultTableModel tableModel = (DefaultTableModel)schedulerTable.getModel();
        int numOfLine = tableModel.getRowCount();
        if( selectionline >= 0 && selectionline < numOfLine ){
            tableModel.removeRow( selectionline );
        }
    }
    
    private String getBkList( boolean check ){
        boolean hasOSDisk = false;
        boolean hasEtcDir = false;
        
        if( model.size()<=0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditProfileDialog.error.notselected")
            );
            return null;
        }
        
        int size = model.size();
        String filelist = "";
        for( int i=0;i<size;i++ ){
            String item = (String)model.elementAt( i );
            if( item.toUpperCase().equals("/C:/") ){
                hasOSDisk = true;
            }
            if( item.equals("/etc/") ){
                hasEtcDir = true;
            }
            filelist += item + ";";
        }
        if( check ){
            if( filelist.getBytes().length >= ResourceCenter.CONTENT_SIZE ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.errMsg.tooLongBakContent")
                );
                return null;
            }
        }
        
        return filelist;
    }
    
    private String getExcludeList( boolean check ){
        int i,size;
        
        boolean hasEtcDir = false;
        
        size = model.size();
        for( i=0;i<size;i++ ){
            String item = (String)model.elementAt( i );
            if( item.equals("/etc/") ){
                hasEtcDir = true;
            }
        }
        
        boolean excludeFstab = false;
        boolean excludeNetwork = false;
        boolean excludeKillall = false;
        boolean excludeHalt = false;        
        size = model1.size(); 
        String excludeListStr ="";
        for( i=0; i<size; i++ ){
            String item1 = (String)model1.get( i );
            
            if( item1.equals("/etc/fstab") ){
                excludeFstab = true;
            }
            
            if( item1.equals("/etc/init.d/network") ){
                excludeNetwork = true;
            }
            
            if( item1.equals("/etc/init.d/killall") ){
                excludeKillall = true;
            }
            
            if( item1.equals("/etc/init.d/halt") ){
                excludeHalt = true;
            }
            
            if( item1.equals("/etc/rc.d/init.d/network") ){
                excludeNetwork = true;
            }
            
            if( item1.equals("/etc/rc.d/init.d/killall") ){
                excludeKillall = true;
            }
            
            if( item1.equals("/etc/rc.d/init.d/halt") ){
                excludeHalt = true;
            }
            
            excludeListStr += item1 + ";";
        }
        
        if( check ){
            if( excludeListStr.getBytes().length >=ResourceCenter.CONTENT_SIZE ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.errMsg.tooLongExcludeContent")
                );
                return null;
            }
        }
        
        if( check ){
            // 检查UWS不允许复制的目录
            if( bkClnt.isLinux() ){
                if( hasEtcDir ){
                    if( !excludeFstab || !excludeNetwork || !excludeKillall || !excludeHalt ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBakedFileDialog.errMsg.excludeEtcDir")
                        );
                        return null;
                    }
                }
            }
        }
        
        return excludeListStr;
    }
    
    // 原来的实现（当时不允许编辑复制内容）
    /*
    boolean needAddBkObj = false;
    public boolean bak_content_process(){
        needAddBkObj = false;
        
        String fileList = getBkList( true );
        if( fileList == null ) return false;
        String excludeList = getExcludeList( true );
        if( excludeList == null ) return false;
        
        boolean phyIncBak = false; 
        boolean isSupportPhyInc = jCheckBox7.isSelected();
        int filetype = ResourceCenter.BAK_TYPE_FILE;
        if( isSupportPhyInc ){
            filetype |= ResourceCenter.BAK_TYPE_PHY_INC;
            phyIncBak = true;
        }
        
        if( this.bkobj != null ){
            if( this.bkobj.getFileName().equals( fileList)  &&
                this.bkobj.getExclude().equals( excludeList ) &&
                this.bkobj.getFileType().equals( filetype+"" ) 
            ){
                // 备份源没有变化
                return true;
            }else{
                //  先删除old的备份源
                boolean ok = view.initor.mdb.deleteBakObj( bkobj.getBakObjID() );
                if( !ok ){
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_DEL_BAKOBJECT )+
                        ": "+
                        view.initor.mdb.getErrorMessage()
                    );
                    return false;
                }else{
                    view.initor.mdb.removeBakObjFromVector( bkobj );
                }
            }
        }
        
        // add new bkobj
        BakObject newbakObj = new BakObject(
            -1,
            fileList,
            filetype + "",
            "", // linux's include,将来考虑
            "",
            false,
            excludeList, 
            "",
            false,
            true,
            0,
            0,
            0, 
            "",
            false,
            0,
            bkClnt.getID(),
            0,   //新增的backup object的backcup level都是0
            "",
            -1, 
            0
        );

        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_BKOBJ );
        if( tmpFile == null ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed")
            );
            return false;
        } 

        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),newbakObj.prtMe() ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                view.initor.mdb.getErrorMessage()
            );
            tmpFile.delete();
            return false;
        }
        tmpFile.delete();

        boolean ok = view.initor.mdb.addBakObj( ResourceCenter.TMP_DIR + tmpFile.getName() );
        if( ok ){
            needAddBkObj = true;
            newbakObj.setBakObjID( view.initor.mdb.getNewId() );
            view.initor.mdb.addBakObjIntoVector( newbakObj );
            this.bkobj = newbakObj;
        }else{
            JOptionPane.showMessageDialog(this,
                ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_BAKOBJECT)+
                ": "+
                view.initor.mdb.getErrorMessage()
            );
            return false;
        }
        
        return true;
    }
    */
    
    boolean needAddBkObj = false;
    public boolean bak_content_process(){
        boolean ok;
        needAddBkObj = false;
        
        String fileList = getBkList( true );
        if( fileList == null ) return false;
        String aExcludeList = getExcludeList( true );
        if( aExcludeList == null ) return false;
        
        boolean isSupportPhyInc = jCheckBox7.isSelected();
        int filetype = ResourceCenter.BAK_TYPE_FILE;
        if( isSupportPhyInc ){
            filetype |= ResourceCenter.BAK_TYPE_PHY_INC;
        }
        
        if( this.bkobj != null ){
            if( this.bkobj.getFileName().equals( fileList)  &&
                this.bkobj.getExclude().equals( aExcludeList ) &&
                this.bkobj.getFileType().equals( filetype+"" ) 
            ){
                // 备份源没有变化
                return true;
            }else{
                // modify current bkobj
                ok = view.initor.mdb.modBakObj( this.bkobj.getBakObjID(),fileList,aExcludeList,filetype+"" );
                if( ok ){
                    this.bkobj.setFileName( fileList );
                    this.bkobj.setExclude( aExcludeList );
                    this.bkobj.setFileType( filetype+"" );
                    view.initor.mdb.modBakObjInVector( this.bkobj.getBakObjID(),fileList,aExcludeList,filetype+"" );
                    return true;
                }else{
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_MOD_BAKOBJECT )+
                        ": "+
                        view.initor.mdb.getErrorMessage()
                    );
                    return false;
                }
            }
        }else{ // add new bkobj
            BakObject newbakObj = new BakObject(
                -1,
                fileList,
                filetype + "",
                "", // linux's include,将来考虑
                "",
                false,
                aExcludeList, 
                "",
                false,
                true,
                0,
                0,
                0, 
                "",
                false,
                0,
                bkClnt.getID(),
                0,   // 新增的backup object的backcup level都是0
                "",
                -1, 
                0
            );

            File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_BKOBJ );
            if( tmpFile == null ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed")
                );
                return false;
            } 
            
            if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),newbakObj.prtMe() ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                    view.initor.mdb.getErrorMessage()
                );
                tmpFile.delete();
                return false;
            }
            tmpFile.delete();

            ok = view.initor.mdb.addBakObj( ResourceCenter.TMP_DIR + tmpFile.getName() );
            if( ok ){
                if( view.initor.mdb.getNewId() > 0 ){
                    needAddBkObj = true;
                    newbakObj.setBakObjID( view.initor.mdb.getNewId() );
                    view.initor.mdb.addBakObjIntoVector( newbakObj );
                    this.bkobj = newbakObj;
                    return true;
                }else{
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_BAKOBJECT)+
                        ": "+
                        view.initor.mdb.getErrorMessage()
                    );
                    return false;
                }
            }else{
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_BAKOBJECT)+
                    ": "+
                    view.initor.mdb.getErrorMessage()
                );
                return false;
            }
        }
    }
    
    private ArrayList<DBSchedule> getSchfromSchTable(){
        int nameCol = schedulerTable.getColumn(
            SanBootView.res.getString("SchedulerDialog.table.scheduler.name")
        ).getModelIndex();
        
        DefaultTableModel tableModel = (DefaultTableModel)schedulerTable.getModel();
        int rowNum = tableModel.getRowCount();
        ArrayList<DBSchedule> newSchList = new ArrayList<DBSchedule>( rowNum );
        for( int i=0;i<rowNum;i++ ){
            DBSchedule sched = (DBSchedule)tableModel.getValueAt( i,nameCol );
            newSchList.add( sched );
        }
        return newSchList;
    }
    
    public boolean sch_process( String profname ){
        int i,size;
        boolean isOk;
        boolean ret = true;
        DBSchedule sch;
        
        ArrayList list = getSchfromSchTable();
        size = list.size();
        for( i=0; i<size; i++ ){
            sch = (DBSchedule)list.get(i);
            sch.setProfName( profname );
            sch.setObjId( this.bkobj.getBakObjID() );
            sch.setLevel( this.intbklevel+"" );
            isOk = view.initor.mdb.addOneScheduler( sch );
            if( !isOk && ret  ){
                ret = false;
            }else{
                if( sch.getID() == -1 ){
                    sch.setID( view.initor.mdb.getNewId() );
                    view.initor.mdb.addSchIntoCache(  sch );
                }else{
                    view.initor.mdb.removeSch( sch );
                    view.initor.mdb.addSchIntoCache( sch );
                }
            }
        }
        
        ArrayList delSch = getDelSch( list );
        size = delSch.size();
        for( i=0; i<size; i++ ){
            sch = (DBSchedule)delSch.get(i);
            isOk = view.initor.mdb.deleteOneScheduler( sch );
            if( !isOk && ret  ){
                ret = false;
            }else{
                view.initor.mdb.removeSch( sch );
            }
        }
//System.out.println(" now size: "+view.initor.mdb.getSchNum() );        
        return ret;
    }
    
    private ArrayList getDelSch( ArrayList newList ){
        int size,size1,i,j;
        DBSchedule oldSch,newSch;
        boolean founded = false;
        
        size = oldSchList.size();
        ArrayList<DBSchedule> ret = new ArrayList<DBSchedule>(size);
        size1 = newList.size();
        for( i=0; i<size; i++ ){
            oldSch = (DBSchedule)oldSchList.get(i);
            founded = false;
            for( j=0; j<size1; j++ ){
                newSch = (DBSchedule)newList.get(j);
                if( newSch.getID() == -1 ) continue;    
                if( newSch.getID() == oldSch.getID() ){
                    founded = true;
                    break;
                }
            }
            
            if( !founded ){
                ret.add( oldSch );
            }
        }
        
        return ret;
    }
    
    private void getMpListForWin(){
        String src,driver;
        Object val;
        int ch,key;
        
        winSrcList.clear();
        
        int size = model.size();
        for( int i=0; i<size; i++ ){
            src =(String)model.elementAt(i);
            try{
                // 全部统一成大写的
                src = src.toUpperCase();
                ch = src.charAt( 0 );
                if( ch == '/' || ch =='\\' ){
                    src = src.substring( 1 );
                }
                driver = src.substring( 0,1 );
                key =(int)driver.charAt( 0 );
            }catch(Exception ex){
                continue;
            }
            
            val = winSrcList.get( new Integer( key ) );
            if( val == null ){
                winSrcList.put( new Integer( key), driver );
            }
        }
    }
    
    public VolumeMap getRealLVOnClntIDAndMP( Vector list,String mp ){
        VolumeMap lv;
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            lv = (VolumeMap)list.elementAt(i);
            if( lv.getVolDiskLabel().toUpperCase().equals( mp ) ){
                return lv;
            }
        }
        
        return null;
    }
     
    private MirrorGrp getMg( ArrayList list, int rootid ){
        int size = list.size();
        for( int i=0; i<size; i++ ){
            MirrorGrp mg = (MirrorGrp)list.get(i);
            if( mg.getMg_src_root_id() == rootid ){
                return mg;
            }
        }
        return null;
    }
    
    // 根据fs list从复制内容里筛选出要复制的fs(只需通信一次)
    private void getMpListForLinux(){
        Object[] sortedFsList = null ;
        String src,fs,fs1;
        int i,j,size,len,strlen;
        char ch;
        Object val;
        BindOfFSAndDevNo binder;
        
        this.unixSrcList.clear();
        
        if( rootListForLinux != null && rootListForLinux.size()>0 ){
SanBootView.log.info( getClass().getName(),"fs list is from FsListFetcher.");            
            sortedFsList = rootListForLinux.toArray();
            Arrays.sort( sortedFsList );
        }else{
SanBootView.log.info( getClass().getName(),"fs list is from getUnixPart.");
            boolean ok = view.initor.mdb.getUnixPart( host.getIP(),host.getPort(), "list_mp.sh" );
            if( ok ){
                ArrayList list = view.initor.mdb.getFsList();
                partList = view.initor.mdb.getUnixSysPart();
                sortedFsList = list.toArray();
                Arrays.sort( sortedFsList ); 
            }else{
SanBootView.log.error( getClass().getName()," get fs list by getUnixPart cmd failed.");                
            }
        }
        
        if( sortedFsList != null ){
            size = model.size();
            len = sortedFsList.length;
            for( i=0; i<size; i++ ){
                src =(String)model.elementAt(i);
                
                for( j=len-1; j>=0; j--){
                    fs = (String)sortedFsList[j];
                    if( src.startsWith( fs ) ){
                        val = unixSrcList.get( fs );
                        if( val == null ){
                            strlen = fs.length();
                            if( strlen >1 ){
                                ch = fs.charAt( strlen-1 );
                                if( ch == '/' || ch =='\\' ){                               
                                    fs1 = fs.substring( 0, strlen-1 );
                                }else{
                                    fs1 = fs;
                                }               
                            }else{
                                fs1 = fs;
                            }
                            
                            binder = new BindOfFSAndDevNo();
                            binder.mp = fs1;
                            unixSrcList.put( fs, binder);
                        }
                        break;
                    }
                }
            }
        }
    }
    
    // 根据analyse_mp来获取mp list,要多次跟服务器通信(废弃掉)
    private void getMpListForLinux1(){
        String src;
        Object val;
        BindOfFSAndDevNo binder;
        
        String ip = bkClnt.getIP();
        int port  = bkClnt.getPort();
        unixSrcList.clear();
        
        int size = model.size();
        for( int i=0; i<size; i++ ){
            src =(String)model.elementAt(i);       
            binder = view.initor.mdb.getMp( ip,port,src );
            if( binder!=null ){
                val = unixSrcList.get( new Integer( binder.devno) );
                if( val == null ){
                    unixSrcList.put( new Integer( binder.devno), binder );
                }
            }
        }
    }
    
    public VolumeMap getRealLVOnClntIDAndMPForLinux( Vector<VolumeMap> list,String mp ){
        VolumeMap lv;
        
        Vector<VolumeMap> lvList = getRealLVListOnClntID( list );
        int size = lvList.size();
        for( int i=0; i<size; i++ ){
            lv = lvList.elementAt(i);
            if( lv.getVolDiskLabel().equals( mp ) ){
                return lv;
            }
        }
        
        return null;
    }
    
    public Vector<VolumeMap> getRealLVListOnClntID( Vector<VolumeMap> list ){
        VolumeMap volMap;
        int tid;
        
        Vector<VolumeMap> ret = new Vector<VolumeMap>();
        
        Vector<VolumeMap> lvList = getLVListOnClntID( list,null );
        int size = lvList.size();
        for( int i=0; i<size; i++ ){
            volMap = lvList.elementAt(i);
            tid = getTgtIDOnVGname( list,volMap.getVolDesc() );
            if( tid != -1 ){
                ret.addElement( volMap );
            }
        }
        
        return ret;
    }
    
    public int getTgtIDOnVGname( Vector<VolumeMap> list,String vgname ){
        VolumeMap tgt = getTgtOnVGname( list,vgname );
        if( tgt!= null ){
            return tgt.getVolTargetID();
        }else{
            return -1;
        }
    }
    
    public VolumeMap getTgtOnVGname( Vector<VolumeMap> list,String vgname ){
        Vector tgtList = getTgtListOnClntIDAndVg( list,vgname );
        if( tgtList.size() > 0 ){
            return (VolumeMap)tgtList.elementAt( 0 );
        }else{
            return null;
        }
    }
    
    public Vector<VolumeMap> getTgtListOnClntIDAndVg( Vector<VolumeMap> list, String vgname ){
        VolumeMap volMap;
        Vector<VolumeMap> ret = new Vector<VolumeMap>();
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = list.elementAt(i);
            if( volMap.isTGT() ){
                if( vgname!=null ){
                    if( volMap.getVolDiskLabel().equals( vgname ) ){
                        ret.addElement( volMap );
                    }
                }else{
                    ret.addElement( volMap );
                }
            }
        }
        
        return ret;
    }
   
    public VolumeMap getVGOnVGName( Vector<VolumeMap> list,String vgname ){
        Vector<VolumeMap> vgList = getVgListOnClntID( list );
        int size = vgList.size();
        for( int i=0; i<size; i++ ){
            VolumeMap vg = vgList.elementAt(i);
            if( vg.getVolName().equals( vgname ) ){
                return vg;
            }
        }
        return null;
    }
    
    public Vector<VolumeMap> getVgListOnClntID( Vector<VolumeMap> list ){
        VolumeMap volMap;
        Vector<VolumeMap> ret = new Vector<VolumeMap>();
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = list.elementAt(i);
            if( volMap.isVG() ){
                ret.addElement( volMap );
            }
        }
        
        return ret;
    }   
    
    private Vector<VolumeMap> getLVListOnClntID( Vector<VolumeMap> list,String vgname ){
        VolumeMap volMap;
        int tid;
        Vector<VolumeMap> ret = new Vector<VolumeMap>();
        
        int size = list.size();
        for( int i=0; i<size; i++ ){
            volMap = list.elementAt(i);
            if( volMap.isLV() ){
                if( vgname!=null ){
                    if( volMap.getVolDesc().equals( vgname ) ){
                        ret.addElement( volMap );
                    }
                }else{
                    ret.addElement( volMap );
                }
            }
        }
        
        return ret;
    }
    
    String errMsg ="";
    private String getDestDevPathForWin( boolean withLabel ){
        String mac = this.host.getBootMac().replaceAll("-", ":");
        VolumeMap lv;
        String drivepath="";
        boolean isFirst = true;
        
        errMsg = "";
        
        // 获取srcClnt上的卷信息
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
SanBootView.log.debug( getClass().getName()," mp size:" + winSrcList.size() );
        
        if( winSrcList.size() <=0 ){
            errMsg = SanBootView.res.getString("EditProfileDialog.error.getMp");
            drivepath = null;
            return drivepath;
        }

        if( view.initor.dhcpdb.getClientFromDhcp() ){
            bootTxIP = view.initor.dhcpdb.getSelClntOnMac(mac).getNextServer();

        }
        Enumeration list  = winSrcList.elements();
        while( list.hasMoreElements() ){
            String src =(String) list.nextElement();
SanBootView.log.debug(getClass().getName(), " =====>: " + src + ":\\" );

            lv = getRealLVOnClntIDAndMP( volMapList,src+":\\" );
            if( lv == null ){
                // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + src +":\\" );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ src+":\\";
                drivepath = null;
                break;
            }else{

                if( isFirst){
                    if( !withLabel ){
                        //drivepath = ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+ ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+lv.getVolTargetID();
                        drivepath = ResourceCenter.TARGET_TYPE + bootTxIP +":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+ ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+lv.getVolTargetID();
                        
                    }else{
                        drivepath = src+":\\-?"+ResourceCenter.TARGET_TYPE + bootTxIP+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                            ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+lv.getVolTargetID();

                    }
                    isFirst = false;
                }else{
                    if( !withLabel ){
                        drivepath+="-?"+ResourceCenter.TARGET_TYPE + bootTxIP +":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                            ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+lv.getVolTargetID();
                    }else{
                        drivepath+="-?"+src+":\\-?"+ResourceCenter.TARGET_TYPE + bootTxIP+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                            ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+lv.getVolTargetID();
                    }
                }
            }
        }
        
        return drivepath;
    }
    
    private String getMgInfoForWin(){ 
        VolumeMap lv;
        MirrorGrp mg;
        int mgid;
        String mgInfo ="";
        
        errMsg = "";
        
        // 获取srcClnt上的卷信息
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
SanBootView.log.debug( getClass().getName()," mp size:" + winSrcList.size() );
        
        Enumeration list  = winSrcList.elements();
        while( list.hasMoreElements() ){
            String src =(String) list.nextElement();
SanBootView.log.debug(getClass().getName(), " =====>: " + src + ":\\" );

            lv = getRealLVOnClntIDAndMP( volMapList,src+":\\" );
            if( lv == null ){
                // 必须报告错误，否则该fs无法进行复制（没有对应的lv）
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + src +":\\" );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ src+":\\";
                mgInfo = null;
                break;
            }else{
                mg = view.initor.mdb.getMGFromVectorOnRootID( lv.getVol_rootid() );
                if( mg == null ){
                    mgid = -1;
                }else{
                    mgid = mg.getMg_id();
                }
                
                mgInfo += lv.getVolTargetID()+"-?"+lv.getMaxSnapNum()+"-?"+mgid+";";    
            }
        }
        
        return mgInfo;
    }
    
    private int getOsTidForWin(){
        int tid = -1;
        VolumeMap volMap;
        
        errMsg ="";
        Vector volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
        int size = volMapList.size();
        for( int i=0; i<size; i++ ){
            volMap = (VolumeMap)volMapList.elementAt(i);
            if( volMap.getVolDiskLabel().toUpperCase().equals("C:\\") ){
                tid = volMap.getVolTargetID();
                break;
            }
        }
        
        if( tid == -1 ){
SanBootView.log.error(getClass().getName(), "\nVG or Target is null,exit." );
            errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : C:\\";            
        }
        return tid;
    }
    
    private int getOsTidForLinux(){
        VolumeMap lv,tgt;
        int tid = -1;
        
        errMsg = "";
        Vector<VolumeMap> volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
        lv = getRealLVOnClntIDAndMPForLinux( volMapList,"/" );
        if( lv == null ){
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: / (root fs) " );
            errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : / (root fs)";
        }else{
            tgt = getTgtOnVGname( volMapList,lv.getVolDesc() );
            if( tgt == null ){
SanBootView.log.error(getClass().getName(), "\nVG or Target is null,exit." );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : "+ lv.getVolName();
            }else{
                tid = tgt.getVolTargetID();
            }
        }
        
        return tid;
    }
    
    private String getDestDevPathForLinux( boolean withLabel ){
        VolumeMap lv,vg,tgt;
        String bkdir;
        boolean isFirst = true;
        String drivepath="";
        
        errMsg = "";
        
        // 获取srcClnt上的卷信息
        Vector<VolumeMap> volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
SanBootView.log.debug( getClass().getName()," mp size:" + unixSrcList.size() );
        
        if( unixSrcList.size() <=0 ){
            errMsg = SanBootView.res.getString("EditProfileDialog.error.getMp");
            drivepath = null;
            return drivepath;
        }
        
        Enumeration list  = unixSrcList.elements();
        while( list.hasMoreElements() ){
            BindOfFSAndDevNo binder =(BindOfFSAndDevNo) list.nextElement();
SanBootView.log.debug(getClass().getName(), "====> " + binder.mp );
            
            if( bkobj.getInclude().equals("") ){
                bkdir = binder.mp;
            }else{
                // 该bkobj表示Linux Phyinc（based on LVM）备份,
                // bkobj.include存放快照的mp,它才是要备份的目录
                int indx = bkobj.getInclude().indexOf(";");
                try{
                    bkdir = bkobj.getInclude().substring( 0,indx );
                }catch(Exception ex){
SanBootView.log.error(getClass().getName(), "Parse bkobj's include failed: " + bkobj.getInclude() );                                
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.getSnapMp");
                    drivepath = null;
                    break;
                }
            }
            
            lv = getRealLVOnClntIDAndMPForLinux( volMapList,binder.mp );
            if( lv == null ){
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + binder.mp );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ binder.mp;
                drivepath = null;
                break;
            }else{
                tgt = getTgtOnVGname( volMapList,lv.getVolDesc() );
                vg = getVGOnVGName( volMapList,lv.getVolDesc() );
                if( tgt == null || vg == null ){
SanBootView.log.error(getClass().getName(), "\nVG or Target is null,exit." );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : "+ lv.getVolName();
                    drivepath = null;
                    break;
                }else{
                   if( isFirst ){
                        if( !withLabel ){
                            //drivepath = ResourceCenter.TARGET_TYPE + view.initor.getTxIP(host.getIP())+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+ ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                            drivepath = ResourceCenter.TARGET_TYPE + view.initor.getDhcpIp()+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+ ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                            
                        }else{
                            drivepath = bkdir+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getDhcpIp()+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                                ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                        }
                        isFirst = false;
                    }else{
                        if( !withLabel ){
                            drivepath+="-?"+ResourceCenter.TARGET_TYPE + view.initor.getDhcpIp()+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                                ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                        }else{
                            drivepath+="-?"+bkdir+"-?"+ResourceCenter.TARGET_TYPE + view.initor.getDhcpIp()+":"+ResourceCenter.ISCSI_LOGIN_PORT+"@"+
                                ResourceCenter.ISCSI_PREFIX+this.targetSrvName+":"+tgt.getVolTargetID();
                        }
                   }
                }
            }
        }
        
        return drivepath;
    }
    
    private String getLvmReference(){
        int i,size,clntID,tid;
        String fsType;
        VolumeMap tgt,vg=null,lv=null;
        Vector<VolumeMap> tgtList,vgList,lvList;
        StringBuffer buf  = new StringBuffer();
        
        if( partList == null ){
            boolean ok = view.initor.mdb.getUnixPart( host.getIP(),host.getPort(), "list_mp.sh" );
            if( ok ){
                partList = view.initor.mdb.getUnixSysPart();
            }else{
                errMsg = SanBootView.res.getString("EditProfileDialog.error.getFs");
                return null;
            }
        }
        
        clntID = host.getID();
        Vector<VolumeMap> volMapList = view.initor.mdb.getVolMapOnClntID(  clntID );
        
        tgtList = view.initor.mdb.getTgtListOnClntIDAndVg( volMapList,null, clntID );
        size = tgtList.size();
        for( i=0; i<size; i++ ){
            tgt = tgtList.elementAt(i);
            tid = tgt.getVolTargetID();
            vg = view.initor.mdb.getVgOnTid( clntID, tid );
            if( vg != null ){
                lv = view.initor.mdb.getLVOnClntAndVG( clntID,vg.getVolName() );
            }else{
SanBootView.log.error( getClass().getName(), "\nVG is null in MDB: target_id=" + tid );                
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVg") + " : target_id=" + tid;
                buf = null;
                break;
            }
            
            if( lv == null ){
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: target_id=" + tid );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : target_id=" + tid;
                buf = null;
                break;
            }
            
            if( lv.getVolDiskLabel().equals( ResourceCenter.SWAP_MP ) ) continue;
            
            buf.append( "serverip-?");
            buf.append( view.initor.getTxIP(host.getIP()) );
            buf.append( "-?tgtid-?" );
            buf.append( "" + tid );
            buf.append( "-?lvmtype-?" );
            buf.append( vg.getVolDiskLabel() );
            buf.append( "-?vgname-?" );
            buf.append( vg.getVolName() );
            buf.append( "-?lvname-?" );
            buf.append( lv.getVolName() );
            buf.append( "-?fstype-?" );
            fsType = getFSType( lv.getVolDiskLabel() );
            buf.append( fsType );
            buf.append( ";" );
        }
        
        if( buf != null ){
            return buf.toString();
        }else{
            return null;
        }
    }
    
    private String getProtectedMp( int clntID ){
        VolumeMap lv;
        String fsType;
        
        StringBuffer buf = new StringBuffer();
        Vector lvList = view.initor.mdb.getRealLVListOnClntID( clntID );
        int size = lvList.size();
        for( int i=0; i<size; i++ ){
            lv = (VolumeMap)lvList.elementAt(i);
            fsType = getFSType( lv.getVolDiskLabel() );
            
            //if( lv.getVolDiskLabel().equals( ResourceCenter.SWAP_MP) ) continue;
            buf.append( " -info "+"-g "+lv.getVolDesc()+" -l "+lv.getVolName()+" -m "+lv.getVolDiskLabel() +
                ( fsType.equals("")?"":" -t " + fsType )
            );
        }
        return buf.toString();
    }
    
    private String getFSType( String mp ){
        SystemPartitionForUnix part;
        
        int size = partList.size();
        for( int i=0; i<size; i++ ){
            part = (SystemPartitionForUnix)partList.elementAt(i);
            if( part.mp.equals(mp) ){
                return part.fsType;
            }
        }
        
        return "";
    }
    
    private String getMgInfoForLinux(){
        VolumeMap lv,tgt;
        MirrorGrp mg;
        int mgid;
        String mgInfo="";
        
        errMsg = "";
        
        // 获取srcClnt上的卷信息
        Vector<VolumeMap> volMapList = view.initor.mdb.getVolMapOnClntID( host.getID() );
SanBootView.log.debug( getClass().getName()," mp size:" + unixSrcList.size() );
        
        Enumeration list  = unixSrcList.elements();
        while( list.hasMoreElements() ){
            BindOfFSAndDevNo binder =(BindOfFSAndDevNo) list.nextElement();
SanBootView.log.debug(getClass().getName(), "====> " + binder.mp );
            
            lv = getRealLVOnClntIDAndMPForLinux( volMapList,binder.mp );
            if( lv == null ){
SanBootView.log.error( getClass().getName(), "\nLV is null in MDB: " + binder.mp );
                errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ binder.mp;
                mgInfo = null;
                break;
            }else{
                tgt = getTgtOnVGname( volMapList,lv.getVolDesc() );
                if( tgt == null ){
SanBootView.log.error(getClass().getName(), "\nVG or Target is null,exit." );
                    errMsg = SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : "+ lv.getVolName();
                    mgInfo = null;
                    break;
                }
                
                mg = view.initor.mdb.getMGFromVectorOnRootID( tgt.getVol_rootid() );
                if( mg == null ){
                    mgid = -1;
                }else{
                    mgid = mg.getMg_id();
                }
                
                mgInfo += tgt.getVolTargetID()+"-?"+tgt.getMaxSnapNum()+"-?"+mgid+";";
                 
            }
        }
        
        return mgInfo;
    }
    
    private void refreshChiefProf(){
        BrowserTreeNode chiefProfNode = view.getChiefProfNodeOnHostNode( host.getTreeNode() );
        if( chiefProfNode != null ){
SanBootView.log.debug(getClass().getName(), "found  chief profile on host: "+host.getName() );            
            view.setCurNode( chiefProfNode );
            view.setCurBrowserEventType( Browser.TREE_SELECTED_EVENT );
            ProcessEventOnChiefProfile peOnChiefProf = new ProcessEventOnChiefProfile( view ); 
            TreePath path = new TreePath( chiefProfNode.getPath() );
            peOnChiefProf.processTreeSelection( path );
            peOnChiefProf.controlMenuAndBtnForTreeEvent();
            view.getTree().setSelectionPath( path );
            view.getTree().requestFocus();
        }else{
SanBootView.log.debug(getClass().getName(), "not found  chief profile on host: "+host.getName() );            
        }
    }
    
    private void undo_crt_bkobj(){
        if( needAddBkObj ){
            // 不管结果
            view.initor.mdb.removeBakObjFromVector( bkobj );
            view.initor.mdb.deleteBakObj( bkobj.getBakObjID() );
            this.bkobj = null;
        }
    }
    
    private boolean getWinDir(){
        if( fWindir.equals("") ){
            String windir = view.initor.mdb.getWinDir( host.getIP(),host.getPort() );
SanBootView.log.info( getClass().getName(), "windir: " + windir );
            if( windir.equals("") ){
                JOptionPane.showMessageDialog(view,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_WINDIR )+
                    ": "+
                    view.initor.mdb.getErrorMessage()
                );
                return false;
            }else{
                this.fWindir = windir;
                return true;
            }
        }else{
            return true;
        }
    }
    
    String bootMac="";
    private boolean getBootMac(){
        boolean ok = true;
        
        if( bkClnt.isWin() ){
            if( !this.getWinDir() ) return false;
            
            String windir = "/C:/" + this.fWindir;
            if( isOsDupForWin( bkobj.getFileName(), bkobj.getExclude(),windir ) ){
                if( bootMac.equals("") ){
                    if( this.root_vol_list != null ){
                        ok = view.initor.mdb.getNetInfoFromMDB1( ResourceCenter.CLT_IP_CONF+"/"+host.getID() + ResourceCenter.CONF_IP );
                    }else{
                        ok = view.initor.mdb.getNetInfoFromMDB( ResourceCenter.CLT_IP_CONF+"/"+host.getID() + ResourceCenter.CONF_IP );
                    }
                    if( ok ){
                        bootMac = view.initor.mdb.getBootMac();
                        if( bootMac.equals("") ){
                            ok = false;
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("EditProfileDialog.error.getBootMac")
                            );
                        }
                    }
                }
            }
        }else{
            if( isOsDupForLinux( bkobj.getFileName() ) ){
                if( bootMac.equals("") ){
                    if( this.root_vol_list != null ){
                        ok = view.initor.mdb.getUnixNetCardInfo1( ResourceCenter.CLT_IP_CONF+"/"+host.getID() + ResourceCenter.CONF_IP );
                    }else{
                        ok = view.initor.mdb.getUnixNetCardInfo( ResourceCenter.CLT_IP_CONF+"/"+host.getID() + ResourceCenter.CONF_IP );
                    }
                    if( ok ){
                        bootMac = view.initor.mdb.getUnixBootMac();
                        if( bootMac.equals("") ){
                            ok = false;
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("EditProfileDialog.error.getBootMac")
                            );
                        }
                    }
                }
            }
        }
        
        return ok;
    }
    
    String targetSrvName="";
    void okButton_actionPerformed(ActionEvent e) {
        UniProfile profile,oldProfile,newProfile;
        String profName="";
        File tmpFile;
        boolean ok;
        
        if( targetSrvName.equals("") ){
            targetSrvName = view.initor.mdb.getHostName();
            if( targetSrvName.equals("") ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.getHostNameFailed")
                );
                return;
            }
        }
        
        if( isLoading ){            
            tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_PROF ); 
            if( tmpFile == null ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed")
                );
                return;
            }
            
            ok = bak_content_process();
            if( !ok ) return;
            
            ok = getBootMac();
            if( !ok ) return;
            
            profile = collectBakInfo();
            if( profile == null ) {
                undo_crt_bkobj();
                return;
            }
            
            // 保存打开的profile，即覆盖原有的
            profile.setProfileName( loadUniProfile.getProfileName() );
            profile.setIdentityProfileName();
            profile.setHeaderProfileName();
           
SanBootView.log.info(getClass().getName(), "profile name to modify: " + loadUniProfile.getProfileName() );
System.out.println(" profile: \n" + profile.prtMe() );
            
            // 发送profile的内容
            if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),profile.prtMe() ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                    view.initor.mdb.getErrorMessage()
                );
                tmpFile.delete();
                undo_crt_bkobj();
                return;
            }
            tmpFile.delete();
            
            // 将tmpFile move to profile dir
            profName = ResourceCenter.PROFILE_DIR + profile.toString();
            ok = view.initor.mdb.moveFile(
                ResourceCenter.TMP_DIR + tmpFile.getName(), 
                ResourceCenter.PROFILE_DIR + profile.toString()
            );
            
            if( ok ){
                view.initor.mdb.removeProfFromCache( loadUniProfile );
                view.initor.mdb.addProfileToVector( profile );
                loadUniProfile = profile; // 新的 load profile
            }else{
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_PROFILE )+
                    ": "+
                    SanBootView.res.getString("common.failed")
                );
                undo_crt_bkobj();
                return;
            }
        }else{ // 新增一个profile
            
            if( this.jCheckBox7.isSelected() ){
                boolean isOk = view.initor.mdb.updateLicenseCount();
                if( isOk ){
                    isOk = view.initor.mdb.hasDatabaseLicense();
                    if( !isOk ){
                        JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("EditProfileDialog.error.noDatabaseLicense")
                    );
                    return ;
                        }
                    }
                }
            tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_PROF );
            if( tmpFile == null ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed")
                );
                return;
            }
            
            ok = bak_content_process();
            if( !ok ) return;
            
            ok = getBootMac();
            if( !ok ) return;
            
            profile = collectBakInfo();
            if( profile == null ) {
                undo_crt_bkobj();
                return;
            }
            
            // 决 定 profile 的 名 字
            ProfileChooser chooser = new ProfileChooser(
                view, 
                this,
                SanBootView.res.getString("ProfileChooser.title.saveas"),
                ProfileChooser.MODE_SAVE,
                host
            );
            int width  = 375+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 255+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            chooser.setSize( width, height );
            chooser.setLocation( this.getCenterPoint( width,height) );
            chooser.setModal( true );
            chooser.setVisible( true );
            
            Object[] ret = chooser.getValues();
            if( ret == null ) {
                undo_crt_bkobj();
                return;
            }
            
            if( ret.length == 2 ){ // 要 把 oldProfile 修 改 掉
                oldProfile = (UniProfile)ret[0];
                newProfile = profile;
                
                newProfile.setProfileName( oldProfile.getProfileName() ); 
                profName = oldProfile.getProfileName();
                newProfile.setIdentityProfileName();
                newProfile.setHeaderProfileName();
                
                // 发送profile的内容
                if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),newProfile.prtMe() ) ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                        view.initor.mdb.getErrorMessage()
                    );
                    tmpFile.delete();
                    undo_crt_bkobj();
                    return;
                }    
                tmpFile.delete();
                
                // 将tmpFile move to profile dir
                ok = view.initor.mdb.moveFile(
                    ResourceCenter.TMP_DIR+tmpFile.getName(), 
                    ResourceCenter.PROFILE_DIR + newProfile.toString()
                );
                
                if( ok ){
                    // 将old profile的bkobj删除掉，不管结果
                    UniProIdentity id = oldProfile.getUniProIdentity();
                    BakObject aBkobj = view.initor.mdb.getBakObjFromVector( id.getBkObj_ID() );
                    if( aBkobj != null ){
                        view.initor.mdb.removeBakObjFromVector( aBkobj );
                        view.initor.mdb.deleteBakObj( aBkobj.getBakObjID() );
                    }
                    
                    view.initor.mdb.removeProfFromCache( oldProfile );
                    view.initor.mdb.addProfileToVector( newProfile );
                }else{
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_PROFILE)+
                        ": "+
                        SanBootView.res.getString("common.failed")
                    );
                    undo_crt_bkobj();
                    return;
                }
            }else if( ret.length == 1 ) { // 要 新 增 一 个 profile
                UniProfile tmpNewProfile = (UniProfile)ret[0];
                profName = tmpNewProfile.getProfileName();
                newProfile = profile;
                newProfile.setProfileName( profName );
                newProfile.setIdentityProfileName();
                newProfile.setHeaderProfileName();
                
                // 发送profile的内容
                if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),newProfile.prtMe() ) ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                        view.initor.mdb.getErrorMessage()
                    );
                    tmpFile.delete();
                    undo_crt_bkobj();
                    return;
                }    
                tmpFile.delete();
            
                // 将tmpFile move to profile dir
                ok = view.initor.mdb.moveFile(
                    ResourceCenter.TMP_DIR+tmpFile.getName(), 
                    ResourceCenter.PROFILE_DIR + newProfile.toString()
                );
                if( ok ){
                    view.initor.mdb.addProfileToVector( newProfile );
                }else{
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_PROFILE )+
                        ": "+
                        SanBootView.res.getString("common.failed")
                    );
                    undo_crt_bkobj();
                    return;
                }
            }else{
                // do nothing
            }
        }
        
        // add sch
        if( !sch_process( profName ) ){
            JOptionPane.showMessageDialog( this,
                SanBootView.res.getString("EditProfileDialog.error.schfailed")
            );
        }
        
        refreshChiefProf();
        
        if( jCheckBox2.isSelected() ){ // 开始立即备份
            RunBackup dup = null;
            if( jCheckBox5.isSelected() ){ // 以全备份进行
                profile = collectBakInfo();
                UniProIdentity identity = profile.getUniProIdentity();
                identity.setSchLevel( "0" ); 
                
                tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_PROF );
                if( tmpFile == null ){
                    JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed")
                    );
                    return;
                }
                
                String name = ResourceCenter.TMP_DIR  + tmpFile.getName();
                profile.setProfileName( name );
                profile.setIdentityProfileName();
                profile.setHeaderProfileName();
                
                // 发送profile的内容
                if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),profile.prtMe() ) ){
                    JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                        view.initor.mdb.getErrorMessage()
                    );    
                    tmpFile.delete();
                    return;
                }    
                tmpFile.delete();
                
                profName = profile.getProfileName();
            }
            
            try{
                dup = new RunBackup( 
                    ResourceCenter.getCmd( ResourceCenter.CMD_DATA_DUP )+ 
                    profName +
                    " -clnt=" +
                    bkClnt.getID(),
                    view.getSocket()
                );
                
SanBootView.log.info( getClass().getName(), " data-duplication cmd: " + dup.getCmdLine() );
                
                dup.run();
            }catch( Exception ex ){
                dup.setExceptionErrMsg( ex);
                dup.setExceptionRetCode( ex );
            }
SanBootView.log.info( getClass().getName(), " data-duplication cmd retcode: " + dup.getRetCode() );
            
            if( dup.isOk() ){ 
                MonitorDialog dialog = new MonitorDialog( view );
                
                TaskListGeter geter = new TaskListGeter(
                    dialog,
                    view
                );
                geter.start();

                int width  = 585+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
                int height = 335+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
                dialog.setSize( width,height );
                dialog.setLocation( view.getCenterPoint( width,height ) );

                this.dispose();
                dialog.setVisible( true );          
            }else{
SanBootView.log.error( getClass().getName(), " data-duplication cmd errmsg: " + dup.getErrMsg() );
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.bakCmdFail")
                );
            }
        }else{
            this.dispose();
        }
    }
    
    int intbklevel = -1;
    public UniProfile collectBakInfo(){
        int i,j,k,size,size1,tid=-1;
        UniProfile profile  = new UniProfile();
        UniProIdentity identity = profile.getUniProIdentity();
        UniProHeader header  = profile.getUniProHeader();
        UniProDrive  drive1  = profile.getUniProDrive1();
        UniProBackup backup  = profile.getUniProBackup();
        UniProIBoot  iboot   = profile.getUniProIBoot();
        
        /// 生成 identity 部分
        BakObject aBakObj = this.bkobj;
        identity.setBkObj_ID( aBakObj.getBakObjID()+"" );
        identity.setBkObj_SN( aBakObj.getBakObjSN()+"" ); 
        
        intbklevel = -1;
        String level = (String)jComboBox1.getSelectedItem();
        if( level.equals(SanBootView.res.getString(BakObject.BAKLEVEL_FULL ))){
            intbklevel = 0;
        }else if(level.equals(SanBootView.res.getString(BakObject.BAKLEVLE_INC))){
            intbklevel = 1;
        }else{
            intbklevel = 0;
        }
        identity.setSchLevel( intbklevel+"" );
        identity.setClntID( bkClnt.getID()+"" );
        identity.setAction("backup-file");
        //缺少一个profile name
        
        // 生成 header 部分
        header.setAct("backup-file");        
        String befCmd = jTextField24.getText().trim();
        if( !befCmd.equals("") ){
            if( befCmd.getBytes().length >1000 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.tooLongBefCmd")
                );
                return null;
            }
        }
        header.setPreCmd( befCmd );
        
        String postCmd = jTextField25.getText().trim();
        if( !postCmd.equals("") ){
            if( postCmd.getBytes().length > 1000 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.tooLongPostCmd")
                );
                return null;
            }
        }
        header.setPostCmd( postCmd );
        
        String snapBefCmd = jTextField4.getText().trim();
        if( !snapBefCmd.equals("") ){
            if( snapBefCmd.getBytes().length >1000 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.tooLongSnapBefCmd")
                );
                return null;
            }
        }
        header.setSnapPreCmd( snapBefCmd );
        
        String snapPostCmd = jTextField5.getText().trim();
        if( !snapPostCmd.equals("") ){
            if( snapPostCmd.getBytes().length > 1000 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.tooLongSnapPostCmd")
                );
                return null;
            }
        }
        header.setSnapPostCmd( snapPostCmd );
        
        // 开始根据复制内容分析出fs和vol的对应关系
        if( bkClnt.isWin() ){
            getMpListForWin();
            String src_dest_map = getDestDevPathForWin( true );
            if( src_dest_map == null ){
                JOptionPane.showMessageDialog(this,
                    this.errMsg
                );
                return null;
            }else{
                header.setSource_dest_reference( src_dest_map );
            }

            // 生成 drive-1部分
            String path = getDestDevPathForWin( false );
            if( path == null ){
                JOptionPane.showMessageDialog(this,
                    this.errMsg
                );
                return null;
            }else{
                drive1.setPath( path );
            }
        
        }else{
            getMpListForLinux();
            String src_dest_map = getDestDevPathForLinux( true );
            if( src_dest_map == null ){
                JOptionPane.showMessageDialog(this,
                    this.errMsg
                );
                return null;
            }else{
                header.setSource_dest_reference( src_dest_map );
            }

            // 生成 drive-1部分
            String path = getDestDevPathForLinux( false );
            if( path == null ){
                JOptionPane.showMessageDialog(this,
                    this.errMsg
                );
                return null;
            }else{
                drive1.setPath( path );
            }
            
            String lvm_refer = getLvmReference();
            if( lvm_refer == null ){
                  JOptionPane.showMessageDialog(this,
                    this.errMsg
                );
                return null;
            }else{
                header.setLinux_lvm_reference( lvm_refer );
            }
        }
        
        header.setLinux_lvm_snap( jCheckBox1.isSelected()?"1":"0" );
         
        // 生成 Backup部分
        if( aBakObj != null ){
            String bkSrc = aBakObj.getFileName();
            backup.setSrc( bkSrc );
        }
        backup.setSrcType( aBakObj.getFileType() );
        
        String incFilter = jTextField13.getText().trim();
        if( !incFilter.equals("") ){
            if( incFilter.indexOf("/") >=0 || incFilter.indexOf("\\") >=0 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.errMsg.notHasSeparator")
                );
                return null;
            }
            
            if( incFilter.getBytes().length > 1000 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.tooLongIncFilter")
                );
                return null;
            }
            
            if( incFilter.charAt( incFilter.length() -1 ) !=';' ){
                incFilter +=";";
            }
            backup.setInclude( incFilter );
            backup.setInclCase("YES");
            backup.setInclType("4");
        }
        
        String excFilter = jTextField14.getText().trim();
        if( !excFilter.equals("") ){
            if( excFilter.indexOf("/") >=0 || excFilter.indexOf("\\") >=0 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.errMsg.notHasSeparator")
                );
                return null;
            }
            
            if( excFilter.getBytes().length > 1000 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.tooLongExcFilter")
                );
                return null;
            }
            
            if( excFilter.charAt( excFilter.length() -1 ) !=';' ){
                excFilter +=";";
            }
            backup.setExclude( excFilter );
            backup.setExclCase("YES");
            backup.setExclType("4");
        }
        
        String delRedundantData = jTextField1.getText().trim();
        if( delRedundantData.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditProfileDialog.error.invalidDelRedundantData")
            );
            return null;
        }
        
        int intDelReData = UniProBackup.DEFAULT_VAL_DEL_REDUNDANT;
        try{
            intDelReData = Integer.parseInt( delRedundantData );
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditProfileDialog.error.invalidDelRedundantData")
            );
            return null;
        }
        backup.setDeleteRedundantFile( intDelReData+"" );
        
        backup.setKillPreCmd( "0" );
        backup.setBlkIncRstMode( "0" );
        backup.setPhyIncJudgeTimeFlag( jCheckBox3.isSelected()? "1" : "0" );
        backup.setBakWithSnapFlag( isMustCrtSnap()? "1" : "0" );
        backup.setExcludeFromBak( aBakObj.getExclude() );
        backup.setIgnore_all_copy_error( jCheckBox6.isSelected()? "1" : "0" );
        backup.setCrt_Snap( jRadioButton2.isSelected()? "1" : "0");
        
        // 生成iboot部分
        iboot.cleanIboot_bf_cmd();
        iboot.cleanIboot_af_cmd();
        if( bkClnt.isWin() ){
            if( !this.getWinDir() ) return null;
            
            String windir = "/C:/" + this.fWindir;
            if( isOsDupForWin( aBakObj.getFileName(), aBakObj.getExclude(), windir ) ){
SanBootView.log.info( getClass().getName()," ### "+ bkClnt.getIP()+"'s dup content contains windir, must give iboot cmd.");
                tid = getOsTidForWin();
                if( tid == -1 ){
                    JOptionPane.showMessageDialog(this, 
                        this.errMsg
                    );
                    return null;
                }
                
                Object[] val = InitBootHostWizardDialog.generateIboot_cmd( host.getBootMode(),host, tid, bootMac, view.initor.getTxIP(host.getIP()) );
                ArrayList bef = (ArrayList)val[0];
                ArrayList aft = (ArrayList)val[1];
                size = bef.size();
                for( i=0;i<size;i++ ){
                    iboot.addIboot_bf_cmd( (String)bef.get(i) );
                }
                size = aft.size();
                for( j=0;j<size;j++ ){
                    iboot.addIboot_af_cmd( (String)aft.get(j) );
                }
                
                if( bkClnt.isWin2000() ){
SanBootView.log.info( getClass().getName(), " after data-duplication process for win2000. " );    
                    String[] ret = InitBootHostWizardDialog.w2k_process( bootMac, tid );
                    for( j=0;j<ret.length;j++){
                        iboot.addIboot_bf_cmd(  ret[j] );
                    }
                }
            }
        }else{
            if( isOsDupForLinux( aBakObj.getFileName() ) ){
SanBootView.log.info( getClass().getName()," ### "+ bkClnt.getIP() +"'s dup content contains /etc, must give iboot cmd.");                 
                tid = getOsTidForLinux();
                if( tid == -1 ){
                    JOptionPane.showMessageDialog(this,
                        this.errMsg
                    );
                    return null;
                }
                
                VolumeMap vg = view.initor.mdb.getVgOnTid( host.getID(),tid );
                if( vg == null ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.noSWUVgAndTgt") + " : "+ tid
                    );
                    return null;
                }
                
                String lvmtype = view.initor.mdb.getRealLVMType( host.getID() );    
                Object[] val = InitNWinHostWizardDialog.generateIboot_cmd( tid, vg, bootMac, view.initor.getTxIP(host.getIP()), getProtectedMp( host.getID() ),
                        host, getFSType("/"),lvmtype
                );
                ArrayList bef = (ArrayList)val[0];
                ArrayList aft = (ArrayList)val[1];
                size = bef.size();
                for( i=0;i<size;i++ ){
                    iboot.addIboot_bf_cmd( (String)bef.get(i) );
                }
                size = aft.size();
                for( j=0;j<size;j++ ){
                    iboot.addIboot_af_cmd( (String)aft.get(j) );
                }
            }
        }
SanBootView.log.debug( getClass().getName(),  "iboot aft cmd: " + iboot.assebleIboot_af_cmd() );
        
        if( oldProf != null ){ // 将 ib_snap_bf_cmd 和 ib_snap_bf_cmd1 再写回去
            UniProIBoot uiboot = oldProf.getUniProIBoot();
            ArrayList snap_bf_cmd_list = uiboot.getIboot_snap_bf_cmd_list();
            size1 = snap_bf_cmd_list.size();
            for( k=0; k<size1; k++ ){
                iboot.addIboot_snap_bf_cmd( (String)snap_bf_cmd_list.get( k ) );
            }
            snap_bf_cmd_list = uiboot.getIboot_snap_bf_cmd1_list();
            size1 = snap_bf_cmd_list.size();
            for( k=0; k<size1; k++ ){
                iboot.addIboot_snap_bf_cmd1( (String)snap_bf_cmd_list.get( k ) );
            }
            
            iboot.setOsTid( tid );
        }
        
        iboot.setUws_username( view.initor.user );
        iboot.setUws_passwd( view.initor.passwd );
        //iboot.setUws_ip( view.initor.getTxIP(host.getIP()) );
        iboot.setUws_ip( bootTxIP );
        iboot.setUws_port( view.initor.port+"" );
        
        // 记录mgid/maxsnap/tid的对应关系
        if( bkClnt.isWin() ){
            String mgInfo = getMgInfoForWin();
            if( mgInfo == null ){
                JOptionPane.showMessageDialog(this,
                    this.errMsg
                );
                return null;
            }else{
                iboot.setMgid_info( mgInfo );
            }
        }else{
            String mgInfo = getMgInfoForLinux();
            if( mgInfo == null ){
                JOptionPane.showMessageDialog(this,
                    this.errMsg
                );
                return null;
            }else{
                iboot.setMgid_info( mgInfo );
            }
        }
        
        iboot.setLogout_target( jCheckBox4.isSelected()?"1":"0" );
        return profile;
    }
    
    public static boolean isOsDupForWin( String contents, String exclude, String windir ){
System.out.println(" windir(isOsDupForWin): "+ windir );        
        boolean isOsDup = false;
        
        String [] list = Pattern.compile(";").split( contents );
        for( int i=0; i<list.length; i++ ){
            if( !list[i].equals("") ){
                if( realIsOsDupForWin( list[i],windir ) ){
                    isOsDup = true;
                    break;
                }
            }
        }
        
        // 再考虑 exclude 的情况
        if( isOsDup ){
            list = Pattern.compile(";").split( exclude );
            for( int j=0; j<list.length; j++ ){
                if( !list[j].equals("") ){
                    String path = list[j].toUpperCase();
                    if( path.equals( windir ) || path.equals( windir + "/") ){
                        isOsDup = false;
                        break;
                    }
                }
            }
        }
        
        return isOsDup;
    }
    
    public static boolean realIsOsDupForWin( String file,String windir ){
        int indx1 = file.indexOf(":");
        String drv = file.substring( indx1-1,indx1 );    
        if( !drv.toUpperCase().equals("C") ) return false;
        
        String path = file.toUpperCase();
        if( path.equals("/C:/") || path.equals("C:/") || path.equals("C:\\") || path.equals("/C:\\")){
            return true;
        }
        
        int indx = path.indexOf( "/",indx1+2 );
        if( indx > 0 ){
            if( path.substring( 0, indx ).equals( windir ) ){
                return true;
            }
        }
        
        return false;
    }
    
    public static boolean isOsDupForLinux( String contents ){
        int i;
        String[] list;
        boolean isOsDup = false;
        
        String osdir = "/etc";
        
        list = Pattern.compile(";").split( contents );
        for( i=0; i<list.length; i++ ){
            if( !list[i].equals("") ){
                if( realIsOsDupForLinux( list[i],osdir ) ){
                    isOsDup = true;
                    break;
                }
            }
        }
        
        // 不管exclude的情况
        
        return isOsDup;
    }
    
    public static boolean realIsOsDupForLinux( String file,String osdir ){  
        if( file.equals("/") ){
            return true;
        }
        
        int indx = file.indexOf( "/",1 );
        if( indx >0 ){
            if( file.substring( 0, indx ).equals( osdir) ){
                return true;
            }
        }
        
        return false;
    }
    
    private void initUi( UniProfile profile ){   
        if( profile == null ) return;
        
        String title = this.getTitle();
        this.setTitle( title +"[ "+profile.getProfileNameWithoutExtName() +" ]");
        
        boolean lostBkObj = false,lostSch = false;
        
        UniProIdentity identity = profile.getUniProIdentity();
        UniProHeader header  = profile.getUniProHeader();
        UniProBackup backup  = profile.getUniProBackup();
        UniProIBoot  iboot   = profile.getUniProIBoot();
        
        isLoading = true;
        loadUniProfile = profile;
        
        jTextField24.setText( header.getPreCmd());
        jTextField25.setText( header.getPostCmd() );
        jTextField4.setText( header.getSnapPreCmd() );
        jTextField5.setText( header.getSnapPostCmd() );
        jTextField13.setText( backup.getInclude() );
        jTextField14.setText( backup.getExclude() );
        
        if( identity.getSchLevel().equals("0") ){
            jComboBox1.setSelectedItem(
                SanBootView.res.getString(BakObject.BAKLEVEL_FULL)
            );
        }else if( identity.getSchLevel().equals("1") ){
            jComboBox1.setSelectedItem(
                SanBootView.res.getString(BakObject.BAKLEVLE_INC)
            );
        }else{
            jComboBox1.setSelectedItem(
                SanBootView.res.getString(BakObject.BAKLEVEL_FULL)
            );
        }
        
        jCheckBox1.setSelected( header.isLinuxLVMSnap() );
        jCheckBox3.setSelected( backup.isPhyIncJudgeTime() );
        jCheckBox4.setSelected( iboot.isAutoLogout() );
        jCheckBox8.setSelected( backup.isBakWithSnap() );
        jCheckBox6.setSelected( backup.isIgnore_all_copy_error() );
        if( backup.isCrtSnap() ){
            jRadioButton2.setSelected( true );
            this.do_click_radioBtn2();
        }else{
            jRadioButton1.setSelected( true );
            this.do_click_radioBtn1();
        }
        
        if( backup.isDeleteRedundantFileNumValid() ){
            jTextField1.setText( backup.getDeleteRedundantFile() );
        }else{
            jTextField1.setText( UniProBackup.DEFAULT_VAL_DEL_REDUNDANT+"" );
        }
        
        try{
            int bakObjId = Integer.parseInt( identity.getBkObj_ID() );
            BakObject bakObj = view.initor.mdb.getBakObjFromVector( bakObjId );
            if( bakObj != null ){
                jCheckBox7.setSelected( bakObj.isSupportPhyInc() );
                setupBakSourcePane( bakObj.getFileName(),bakObj.getExclude() );
                jTextField11.setText( bakObj.getLastBkTimeStr() );
            }else{
                lostBkObj = true;
            }
        }catch(Exception ex){
            lostBkObj = true;
        }
        
        ArrayList schList = view.initor.mdb.getSchOnProfName( profile.getProfileName() );
        int size = schList.size();
        for( int i=0; i<size; i++ ){
            addRowToSchTable( (DBSchedule)schList.get(i) );
        }
        
        if( lostBkObj ){   
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditProfileDialog.error.lostBakObj")
            );
        }
    }
    
    public Point getCenterPoint(int width,int height){
        int x = ( getSize().width - width ) / 2 + getX();
        int y = ( getSize().height - height ) / 2 + getY();
        return new Point(x,y);
    }

    public String getBootTxIP() {
        return bootTxIP;
    }

    public void setBootTxIP(String bootTxIP) {
        this.bootTxIP = bootTxIP;
    }


}
