/*
 * BackupHistoryDialog.java
 *
 * Created on Aug 11, 2008, 11:43 AM
 */

package guisanboot.datadup.ui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.util.regex.*;

import mylib.UI.*;
import guisanboot.datadup.data.*;
import guisanboot.res.*;
import guisanboot.ui.SanBootView;

/**
 *
 * @author  Administrator
 */
public class BackupHistoryDialog extends javax.swing.JDialog {
    SanBootView view;
    BrowserTable table = new BrowserTable();
    int begin = 1;
    int end = 51;
    boolean isFirst = true;
    boolean beforeGet = true;
    boolean hasDel = false;
    private final Object lock = new Object();
    
    // 表选择listener,但是要注意add和remove，否则gui上有问题
    ListSelectionListener listener;
    
    /** Creates new form BackupHistoryDialog */
    public BackupHistoryDialog(java.awt.Frame parent, boolean modal) {
        super( parent, modal );
        initComponents();
    }
    
    public BackupHistoryDialog( SanBootView view ){
        this( view,true );
        myInit( view );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel14 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(39, 215));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel13.setBorder(new javax.swing.border.TitledBorder("Final Message"));
        jScrollPane2.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel13.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel11.add(jPanel13, java.awt.BorderLayout.CENTER);

        jPanel14.setLayout(new java.awt.GridBagLayout());

        jPanel14.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(15, 1, 5, 1)));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 15));
        jLabel1.setText("Final Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel14.add(jLabel1, gridBagConstraints);

        jLabel2.setText("jLabel2");
        jLabel2.setPreferredSize(new java.awt.Dimension(320, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel14.add(jLabel2, gridBagConstraints);

        jPanel11.add(jPanel14, java.awt.BorderLayout.NORTH);

        jPanel15.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel11.add(jPanel15, java.awt.BorderLayout.SOUTH);

        jPanel8.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel10.setPreferredSize(new java.awt.Dimension(30, 10));
        jPanel8.add(jPanel10, java.awt.BorderLayout.WEST);

        jPanel12.setPreferredSize(new java.awt.Dimension(30, 10));
        jPanel8.add(jPanel12, java.awt.BorderLayout.EAST);

        jTabbedPane1.addTab("General", jPanel8);

        jPanel16.setLayout(new java.awt.BorderLayout());

        jPanel17.setPreferredSize(new java.awt.Dimension(15, 10));
        jPanel16.add(jPanel17, java.awt.BorderLayout.WEST);

        jPanel18.setPreferredSize(new java.awt.Dimension(15, 10));
        jPanel16.add(jPanel18, java.awt.BorderLayout.EAST);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel19.setBorder(new javax.swing.border.TitledBorder("Log"));
        jTextArea2.setEditable(false);
        jTextArea2.setDisabledTextColor(java.awt.Color.black);
        jScrollPane3.setViewportView(jTextArea2);

        jPanel19.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel16.add(jPanel19, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Diagnosis Log", jPanel16);

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("TaskerID :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel3, gridBagConstraints);

        jLabel4.setText("jLabel4");
        jLabel4.setPreferredSize(new java.awt.Dimension(130, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("AgentID :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel9.add(jLabel5, gridBagConstraints);

        jLabel6.setText("jLabel6");
        jLabel6.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel6, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("ClientStatus :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel9.add(jLabel9, gridBagConstraints);

        jLabel10.setText("jLabel10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel10, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("HostName :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel11, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("OS :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel9.add(jLabel13, gridBagConstraints);

        jLabel14.setText("jLabel14");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel14, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Arch :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel15, gridBagConstraints);

        jLabel16.setText("jLabel16");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel16, gridBagConstraints);

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Agent Start Time :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel17, gridBagConstraints);

        jLabel18.setText("jLabel18");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel18, gridBagConstraints);

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Elapsed Time :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel19, gridBagConstraints);

        jLabel20.setText("jLabel20");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel20, gridBagConstraints);

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Files :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel21, gridBagConstraints);

        jLabel22.setText("jLabel22");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel22, gridBagConstraints);

        jLabel23.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Total Data :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel23, gridBagConstraints);

        jLabel26.setText("jLabel26");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel26, gridBagConstraints);

        jLabel28.setText("jLabel28");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel28, gridBagConstraints);

        jLabel29.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel29.setText("Average Speed :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel29, gridBagConstraints);

        jLabel30.setText("jLabel30");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel30, gridBagConstraints);

        jLabel31.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Contents :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jLabel31, gridBagConstraints);

        jLabel32.setText("jLabel32");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel9.add(jLabel32, gridBagConstraints);

        jTabbedPane1.addTab("Summary", jPanel9);

        jPanel4.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel5.setMinimumSize(new java.awt.Dimension(0, 50));
        jPanel5.setPreferredSize(new java.awt.Dimension(0, 150));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jButton3.setText("Back");
        jButton3.setPreferredSize(new java.awt.Dimension(70, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel7.add(jButton3);

        jButton4.setText("Next");
        jButton4.setPreferredSize(new java.awt.Dimension(70, 24));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel7.add(jButton4);

        jPanel5.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.add(jSeparator1, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 5));

        jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 1, 5, 1)));
        jButton1.setText("Remove");
        jButton1.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton1);

        jButton5.setText("Remove All");
        jButton5.setPreferredSize(new java.awt.Dimension(97, 24));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton5);

        jButton2.setText("Close");
        jButton2.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton2);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    // remove all
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int ret = JOptionPane.showConfirmDialog(
            this,
            SanBootView.res.getString("BackupHistoryDialog.confirm1"),
            SanBootView.res.getString("common.confirm"),
            JOptionPane.OK_CANCEL_OPTION
        );
        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
            return;
        }
        
        // 先删除所有的 log
        RemoveTaskLogThread  thread = new RemoveTaskLogThread(
            view,
            this
        );
        view.startupProcessDiag(
            SanBootView.res.getString("BackupHistoryDialog.pdiagTitle.deltingTskLog"),
            SanBootView.res.getString("BackupHistoryDialog.pdiagTip.deltingTskLog"),
            thread
        );
        
        // 再清除表上的所有记录
        clearGenandSumPane();
        clearSummaryPane();
        removeListSelectionListener();
        removeAllRow();
        
        // 重新初始化
        jButton3.setEnabled( false );
        jButton4.setEnabled( true );
        hasDel = false;
        begin = 1;
        end = 1;
        
        addListSelectionListener();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    // remove
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int[] rows = table.getSelectedRows();
        if( rows == null || rows.length <= 0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("BackupHistoryDialog.error.nosel")
            );
            return;
        }
  
        int tskIdCol = table.getColumn(
            SanBootView.res.getString("MonitorDialog.table.task.id")
        ).getModelIndex();
        
        removeListSelectionListener();
        
        RemoveTaskLogThread thread = new RemoveTaskLogThread(
            view,
            this,
            tskIdCol,
            rows
        );
        view.startupProcessDiag(
            SanBootView.res.getString("BackupHistoryDialog.pdiagTitle.deltingTskLog"),
            SanBootView.res.getString("BackupHistoryDialog.pdiagTip.deltingTskLog"),
            thread
        );
        
        if( thread.getOkCount() >0 ){
            hasDel = true;
        }
        
        clearGenandSumPane();
        clearSummaryPane();
        
        addListSelectionListener();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    // next
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        removeListSelectionListener();  //暂时去掉，否则会有GUI上的问题
        clearSummaryPane();
        clearGenandSumPane();
        removeAllRow();
        
        if( hasDel ){
            hasDel = false;
        }else{
            begin = end;
            end = end+50;
        }
        
        setBeforeGet( true );
        enableButton( false );
        
        TaskLogGeter geter = new TaskLogGeter(
            view, 
            this,
            begin, 
            50
        );
        geter.start();
    }//GEN-LAST:event_jButton4ActionPerformed

    // back
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        removeListSelectionListener();  //暂时去掉，否则会有GUI上的问题
        clearSummaryPane();
        clearGenandSumPane();
        removeAllRow();
        
        if( hasDel ){
            hasDel = false;
        }
        end = begin;
        begin = begin-50;
        
        setBeforeGet( true );
        enableButton( false );
        
        TaskLogGeter geter = new TaskLogGeter(
            view, 
            this,
            begin, 
            50
        );
        geter.start();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new BackupHistoryDialog(new javax.swing.JFrame(), true).setVisible( true );
    }
    
    // �������� - �������޸�//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // ������������//GEN-END:variables
    
    private void myInit( SanBootView _view ){
        view = _view;
        
        setPermOnUser();
        
        jScrollPane1.getViewport().add( table,null );
        jScrollPane1.getViewport().setBackground( Color.white );
        table.addMouseListener( new java.awt.event.MouseAdapter() {
            @Override public void mouseClicked(MouseEvent e) {
                table_mouseClicked(e);
            }
        });
        
        table.setSelectionMode( ListSelectionModel.MULTIPLE_INTERVAL_SELECTION );
        
        listener = new ListSelectionListener(){
            public void valueChanged( ListSelectionEvent e ){
                table_mouseClicked( null );
            }
        };
        
        jTextArea2.setFont( new Font( "MonoSpaced", 0,12 ) );
        
        enableButton( false );
        clearGenandSumPane();
        setupLanguage();
        setupTaskTable();
    }
    
    private void  setPermOnUser(){
        if( view.initor.mdb.isLoginUsrIsAdmin() ){ 
            jButton1.setEnabled( false );
            jButton5.setEnabled( false );
        }
    }
    
   /**
     * 关闭窗口的处理.<br>
     * @param  WindowEvent e  窗口事件
     */
    @Override protected void processWindowEvent(WindowEvent e) {
        super.processWindowEvent(e);
        if ( e.getID() == WindowEvent.WINDOW_CLOSING ) {
            dispose();
        }
    }
    
    private void clearGenandSumPane(){
        clearSummaryPane();
        jLabel2.setText("");
        jTextArea1.setText("");
    }
    
    public void addListSelectionListener(){
        if( listener != null ){
            table.getSelectionModel().addListSelectionListener( 
                listener 
            );
        }
    }
    
    private void removeListSelectionListener(){
        if( listener != null ){
            table.getSelectionModel().removeListSelectionListener( 
                listener 
            );
        }
    }
    
    public DefaultTableModel getTableModel(){
        return (DefaultTableModel)table.getModel();
    }
    
    private void setupLanguage(){
        this.setTitle(SanBootView.res.getString("BackupHistoryDialog.title"));
        this.jButton1.setText(SanBootView.res.getString("BackupHistoryDialog.button.remove"));
        this.jButton2.setText(SanBootView.res.getString("BackupHistoryDialog.button.close"));
        this.jButton3.setText(SanBootView.res.getString("BackupHistoryDialog.button.back"));
        this.jButton4.setText(SanBootView.res.getString("BackupHistoryDialog.button.next"));
        this.jButton5.setText(SanBootView.res.getString("BackupHistoryDialog.button.remall"));
        
        this.jLabel1.setText( SanBootView.res.getString("BackupHistoryDialog.label.finalStatus"));
        
        int index = jTabbedPane1.indexOfComponent(jPanel8);
        jTabbedPane1.setTitleAt( index, 
            SanBootView.res.getString("BackupHistoryDialog.tabTitle.general")
        );
        index = jTabbedPane1.indexOfComponent(jPanel9);
        jTabbedPane1.setTitleAt(index,
            SanBootView.res.getString("BackupHistoryDialog.tabTitle.summary")
        );
        jTabbedPane1.setIconAt( index,ResourceCenter.BTN_ICON_STATISTIC );
        index = jTabbedPane1.indexOfComponent( jPanel16 );
        jTabbedPane1.setTitleAt(index,
            SanBootView.res.getString("BackupHistoryDialog.tabTitle.dialog")
        );
        TitledBorder bor = (TitledBorder)jPanel19.getBorder();
        bor.setTitle(
            SanBootView.res.getString("BackupHistoryDialog.title.log")
        );
        ((TitledBorder)(jPanel13.getBorder())).setTitle(
            SanBootView.res.getString("BackupHistoryDialog.title1")
        );
    }
    
    private void setupTaskTable(){
        Object[] title = new Object[]{
            SanBootView.res.getString("MonitorDialog.table.task.id"),
            SanBootView.res.getString("MonitorDialog.table.task.type"),
            SanBootView.res.getString("MonitorDialog.table.task.client"),
            SanBootView.res.getString("MonitorDialog.table.task.prof"),
            SanBootView.res.getString("MonitorDialog.table.task.status"),
            SanBootView.res.getString("MonitorDialog.table.task.stime")
        };
        table.setupTitle( title );
        
        int[][] widthList = new int[][]{
            {0,55},{1,90},{2,205},{3,120},{4,70},{5,130},
        };
        table.setupTableColumnWidth( widthList );
        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed( false );
    }
    
    public void enableButton( boolean val ){
        if( isFirst ){
            jButton3.setEnabled( false );
            isFirst = false;
        }else{
            if( getBeforeGet() ){
                this.jButton3.setEnabled( val );
            }else{
                if( begin <=1 ){
                    jButton3.setEnabled( false );
                }else if( begin>=51 ){
                    jButton3.setEnabled( true );
                }
            }
        }
        
        if( getBeforeGet() ){
            jButton4.setEnabled( val );
        }else{
            if( table.getRowCount()<50 ){               
                jButton4.setEnabled( false);
            }else{
                jButton4.setEnabled( true );
            }
        }
        
        if( val ){
            if( view.initor.mdb.isLoginUsrIsAdmin() ){
                jButton1.setEnabled( val );
                jButton5.setEnabled( val );
            }else{
                jButton1.setEnabled( false );
                jButton5.setEnabled( false );
            }
        }else{
            jButton1.setEnabled( false );
            jButton5.setEnabled( false );
        }
        
        jButton2.setEnabled( val );
        
        if( !val)
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
        else
            setDefaultCloseOperation( JDialog.DISPOSE_ON_CLOSE );
        
        if( val ){ // 判断 next btn的下一步状态
            if( begin == 1 && end == 51 && table.getRowCount()<=0 ){
                hasDel = false;
                begin = 1;
                end = 1;
                this.jButton4.setEnabled(true);
            }
        }
    }
    
    private void table_mouseClicked( MouseEvent e ){
        Object one;
        
        int row = table.getSelectedRow();
        if( row < 0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("BackupHistoryDialog.error.nosel")
            );
            return;
        }
        
        clearSummaryPane();
        
        int tskIdCol = table.getColumn(
            SanBootView.res.getString("MonitorDialog.table.task.id")
        ).getModelIndex();
        
        DefaultTableModel tableModel = (DefaultTableModel)table.getModel();
        BakTask task = (BakTask)tableModel.getValueAt( row,tskIdCol );
        
        if( task != null ){
            jLabel2.setText( task.getStatus() );
            jTextArea1.setText( task.getMsg() );
            
            // get diagnosis log
            if( !view.initor.mdb.viewDiagInfo( task.getID() ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("BackupHistoryDialog.error.getErrLog")
                );
                jTextArea2.setText( "" ); 
            }else{
                String formatedInfo = parseDignoseInfo( view.initor.mdb.getContentBuf().toString()  );
                jTextArea2.setText( formatedInfo ); 
            }
            
            // restore or autores op has no summary info.
            //if( task.getTaskType().toUpperCase().startsWith("RESTORE") ||
            if( task.getTaskType().toUpperCase().startsWith("AUTORES") ){
                return;
            }
            
            // the following ops has no summary info.
            if( task.getTaskType().toUpperCase().startsWith(BakTask.TASK_TYPE_CLEAN ) ||
                task.getTaskType().toUpperCase().startsWith(BakTask.TASK_TYPE_BKDATA ) ||
                task.getTaskType().toUpperCase().startsWith(BakTask.TASK_TYPE_DELOLD ) 
            ){
                return;
            }
            
            one = view.initor.mdb.getOne( task.getID() ); 
            if( one != null ){
                setupSummaryPane( (TaskSummary)one );
            }else{
                StringBuffer buf = new StringBuffer();
                buf.append( ResourceCenter.OUTPUT_DIR );
                buf.append( "stat_" );
                buf.append( task.getID() );
                buf.append( ".log" );
                String stat_file = buf.toString();
                if( !view.initor.mdb.viewFileContents( stat_file ) ){
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_CAT )+
                            "("+stat_file+")"+ " : "+view.initor.mdb.getErrorMessage()
                    );
                    one = new TaskSummary();
                    view.initor.mdb.addOne( task.getID(),one );
                    return;
                }else{
                    String content = view.initor.mdb.getContentBuf().toString();
//System.out.println(" content: "+ content );
                    parseSummaryInfo( task.getID(),content );
                }
            }
        }
    }
    
    private String parseDignoseInfo( String dignoseInfo  ){
        int index = dignoseInfo.lastIndexOf("=");
        if( index >0 ){
            try{
                String ignore = dignoseInfo.substring( index+1 );
                if( ignore!=null ){
                    Pattern pattern = Pattern.compile("^\\s*$");
                    Matcher matcher = pattern.matcher( ignore );
                    if( !matcher.find() ){
                        StringBuffer buf = new StringBuffer();
                        buf.append( dignoseInfo.substring( 0, index )+"\n" );
                        buf.append( SanBootView.res.getString("common.ignore")+"\n" );
                        buf.append( ignore );
                        return buf.toString();
                    }else{
                        return dignoseInfo;
                    }
                }else{
                    return dignoseInfo;
                }
            }catch(Exception ex){
                return dignoseInfo;
            }
        }else{
            return dignoseInfo;
        }
    }
    
    private void setupSummaryPane( TaskSummary one ){ 
        jLabel4.setText(one.taskerID);
        jLabel6.setText(one.agentID);
        jLabel10.setText(one.hostname );
        jLabel14.setText(one.os);
        jLabel16.setText(one.files);
        jLabel18.setText(one.arch);
        jLabel20.setText(one.totalData);
        jLabel22.setText(one.cltStatus);
        jLabel26.setText(one.stime);
        jLabel28.setText(one.averageSpeed);
        jLabel30.setText(one.elapsedTime);
        jLabel32.setText(one.bakSrc);
    }
    
    private void clearSummaryPane(){
        jLabel4.setText("");
        jLabel6.setText("");
        jLabel10.setText("");
        jLabel14.setText("");
        jLabel16.setText("");
        jLabel18.setText("");
        jLabel20.setText("");
        jLabel22.setText("");
        jLabel26.setText("");
        jLabel28.setText("");
        jLabel30.setText("");
        jLabel32.setText("");
    }
    
    private TaskSummary tskSummary;
    private void parseSummaryInfo( long tsk_id,String info ){
        String str,value,key,tmpstr;
        int index,len;
        
        String[] lines = Pattern.compile("\n").split( info,-1 );
        
        if( lines == null || lines.length <=0 ) return;
        
        tskSummary = new TaskSummary();
        for( int i=0; i<lines.length; i++ ){
            str = lines[i].trim();
            
            index = str.indexOf(":");
            if( index>0 ){
                value = str.substring( index+1 );
                key   = str.substring(0,index);
                
//System.out.println("####: "+key);
//System.out.println("@@@@@: "+value);

                if( key.startsWith( BakTask.TSK_SUMMARY_AGENTID ) ){
                    jLabel6.setText( value );
                    tskSummary.agentID = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_Arch ) ){
                    jLabel18.setText( value );
                    tskSummary.arch = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_AvSpeed ) ){
                    this.jLabel28.setText( value );
                    tskSummary.averageSpeed = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_BakSrc )){
                    if( value.length() >50 ){
                        tmpstr = value.substring(0,50)+" ...";
                    }else{
                        tmpstr = value;
                    }

                    jLabel32.setText( tmpstr );
                    
                    tskSummary.bakSrc = tmpstr;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_CltSta )){
                    this.jLabel22.setText( value);
                    tskSummary.cltStatus = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_ETime )){
                    this.jLabel30.setText( value );
                    tskSummary.elapsedTime = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_Files)){
                    this.jLabel16.setText( value );
                    tskSummary.files = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_HName )){
                    this.jLabel10.setText( value );
                    tskSummary.hostname = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_OS ) ){
                    this.jLabel14.setText( value );
                    tskSummary.os = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_RDays ) ){
                    tskSummary.retentionDays = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_STime1 ) ||
                           key.startsWith( BakTask.TSK_SUMMARY_STime )
                ){
                    this.jLabel26.setText( value );
                    tskSummary.stime = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_SVol )){
                    tskSummary.splitedVols = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_TData )){
                    this.jLabel20.setText( value);
                    tskSummary.totalData = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_TskID )){
                    this.jLabel4.setText( value );
                    tskSummary.taskerID = value;
                }else if( key.startsWith( BakTask.TSK_SUMMARY_Type ) ){
                    tskSummary.type = value;
                }
            }
        }
        
        view.initor.mdb.addOne( tsk_id,tskSummary );
    }
    
    private void removeAllRow(){
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int size = model.getRowCount();
        while( size >0 ){
             model.removeRow( 0);
             size = size -1;
        }
    }
    
    public void setBeforeGet( boolean val){
        synchronized ( lock ){
            beforeGet = val;
        }
    }
    
    public boolean getBeforeGet(){
        synchronized ( lock ){
            return beforeGet;
        }
    }
    
    public Point getCenterPoint(int width,int height){
        int x = ( getSize().width - width ) / 2 + getX();
        int y = ( getSize().height - height ) / 2 + getY();
        return new Point(x,y);
    }
}
