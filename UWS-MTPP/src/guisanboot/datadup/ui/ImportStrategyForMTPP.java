/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportStrategyForMTPP.java
 *
 * Created on 2014-1-12, 14:46:58
 */
package guisanboot.datadup.ui;

import guisanboot.cluster.entity.Cluster;
import guisanboot.cmdp.entity.PPProfileItem;
import guisanboot.data.*;
import guisanboot.ui.SanBootView;
import guisanboot.ui.SelectProtectedFS;
import guisanboot.datadup.data.*;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.WizardDialogSample;
import guisanboot.ui.multiRenderTable.CheckBoxEditor;
import guisanboot.ui.multiRenderTable.JTableX1;
import guisanboot.ui.multiRenderTable.MyDefaultTableModelForTabX1;
import guisanboot.ui.multiRenderTable.RowEditorModel;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import mylib.UI.*;

/**
 *
 * @author bzh
 */
public class ImportStrategyForMTPP extends javax.swing.JDialog implements Backupable, Schedulerable {

    public final static String SNAP_MP = "/mnt/snap";
    private boolean isLoading = false;
    private UniProfile loadUniProfile = null;
    MonthlyPane monthPane = new MonthlyPane();
    WeeklyPane weekPane = new WeeklyPane();
    SanBootView view;
    BootHost host;
    BackupClient bkClnt;
    ArrayList<DBSchedule> oldSchList;
    Vector rootListForLinux; // 存放linux的fs list(/,/usr/,/boot/等)
    Vector partList; // 存放分区列表（包括文件类型）
    BakObject bkobj = null;
    UniProfile oldProf;
    String bootMac;
    DefaultListModel model = new DefaultListModel();
    JList bakList = new JList(model);
    DefaultListModel model1 = new DefaultListModel();
    JList excludeList = new JList(model1);
    BrowserTable schedulerTable = new BrowserTable();
    JTable lp_table;
    int selectionline;
    SelectProtectedFS selProtectFs;
    ArrayList hidenFs;
    ButtonGroup grp1 = new ButtonGroup();
    DuplicationStrategyPane dupStrgyPane;
    int whatAct = -1;
    public final static int ADD_ACT = 0;
    public final static int MOD_ACT = 1;
    private Hashtable<Integer, String> winSrcList = new Hashtable<Integer, String>();
    private Hashtable<String, BindOfFSAndDevNo> unixSrcList = new Hashtable<String, BindOfFSAndDevNo>();
    private ArrayList<PPProfileItem> filtered_vol_list;
    private ArrayList<String> root_vol_list;
    JTable table;
    Object[] header;
    Object[] label;
    WizardDialogSample wizardDiag;
    ArrayList oldProfList;
    Cluster cluster = null;
    String windir = "";
    SelectProtectedFS selProtectFS;
    int mode;
    boolean isCluster = false;

    /** Creates new form ImportStrategyForMTPP Dialog */
    public ImportStrategyForMTPP(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ImportStrategyForMTPP(SanBootView view, BootHost host, BackupClient bkClnt,
            ArrayList<DBSchedule> oldSchList, BakObject bkobj, UniProfile oldProf,
            String bootMac, SelectProtectedFS selProtectFs, ArrayList hidenFs) {
        this(view, true);
        myInit(view, host, bkClnt, oldSchList, bkobj, oldProf, bootMac, selProtectFs, hidenFs);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTabbedPane1.setToolTipText("MTPP");

        jPanel6.setToolTipText("MTPP");
        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel7.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 1, 8, 1));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 5));

        jButton1.setText("OK");
        jButton1.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton1);

        jButton6.setText("Cancel");
        jButton6.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton6);

        jPanel6.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("MTPP", jPanel6);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(0, 20, Short.MAX_VALUE)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 493, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.dispose();
}//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        okButton_actionPerformed(evt);
}//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ImportStrategyForMTPP dialog = new ImportStrategyForMTPP(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void myInit(SanBootView view, BootHost host, BackupClient bkClnt, ArrayList<DBSchedule> oldSchList, BakObject bkobj, UniProfile oldProf, String bootMac, SelectProtectedFS selProtectFs, ArrayList hidenFs) {
        this.view = view;
        this.oldSchList = oldSchList;
        this.host = host;

        // bkclnt可能不存在，是虚构出来的。在必要时要增加该对象到数据库中
        this.bkClnt = bkClnt;

        this.bkobj = bkobj;
        this.oldProf = oldProf;
        this.bootMac = bootMac;
        this.selProtectFs = selProtectFs;
        this.hidenFs = hidenFs;

        jButton1.setText(SanBootView.res.getString("common.button.ok"));
        jButton6.setText(SanBootView.res.getString("common.button.cancel"));

        int index = jTabbedPane1.indexOfComponent(jPanel6);
        jTabbedPane1.setTitleAt(index,
                SanBootView.res.getString("SelectProtectedSysVolPane.combox.lp"));


    }

    public boolean isSameScheduler(DBSchedule newsch) {
        DBSchedule sched;

        int idCol = schedulerTable.getColumn(
                SanBootView.res.getString("SchedulerDialog.table.scheduler.name")).getModelIndex();

        DefaultTableModel tableModel = (DefaultTableModel) schedulerTable.getModel();
        int rowNum = tableModel.getRowCount();
        for (int i = 0; i < rowNum; i++) {
            if (whatAct == ADD_ACT) {
                sched = (DBSchedule) tableModel.getValueAt(i, idCol);
                if (sched.getTimeStr().equals(newsch.getTimeStr())) {
                    return true;
                }
            } else if (whatAct == MOD_ACT) {
                if (i == selectionline) {
                    continue;
                } else {
                    sched = (DBSchedule) tableModel.getValueAt(i, idCol);
                    if (sched.getTimeStr().equals(newsch.getTimeStr())) {
                        return true;
                    }
                }
            } else {
                // do nothing
            }
        }

        return false;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    public void setupTableForMTPP(ArrayList list) {
        int num = list.size();
        Object[][] data = new Object[num][4];

        header = new Object[4];
        label = new Object[num];

        header[0] = SanBootView.res.getString("DuplicationStrategyPane.table.isSel");
        header[1] = SanBootView.res.getString("DuplicationStrategyPane.table.prof");
        header[2] = SanBootView.res.getString("DuplicationStrategyPane.table.sch");
        header[3] = SanBootView.res.getString("DuplicationStrategyPane.table.contents");

        for (int i = 0; i < num; i++) {
            UniProfile prof = (UniProfile) list.get(i);
            data[i][0] = new Boolean(prof.isSel);
            data[i][1] = prof;
            data[i][2] = view.initor.mdb.getSchNumOnProfName(prof.getProfileName()) + "";
            UniProBackup backup = prof.getUniProBackup();
            data[i][3] = backup.getSrc();

            label[i] = prof.toString();
        }

        MyDefaultTableModelForTabX1 modelMtpp = new MyDefaultTableModelForTabX1(data, header, label);

        lp_table = new JTableX1(modelMtpp, view, wizardDiag);
        lp_table.setRowHeight(20);
        lp_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        RowEditorModel rm = new RowEditorModel();
        ((JTableX1) lp_table).setRowEditorModel(rm);

        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow(0, cb);

        TableColumnModel tableColumnModel = lp_table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth(70);
        tableColumnModel.getColumn(1).setWidth(105);
        tableColumnModel.getColumn(2).setWidth(65);
        tableColumnModel.getColumn(3).setWidth(260);
        for (int i = 0; i < colNum; i++) {
            lp_table.sizeColumnsToFit(i);
        }

        lp_table.getTableHeader().setBorder(BorderFactory.createRaisedBevelBorder());
        lp_table.getTableHeader().setReorderingAllowed(false);

        jScrollPane3.getViewport().add(lp_table, null);
        jScrollPane3.getViewport().setBackground(Color.white);
    }
    UniProfile profile = null;
    String targetSrvName = "";

    private void okButton_actionPerformed(ActionEvent evt) {
        UniProfile oldProfile, newProfile;
        String profName = "";
        File tmpFile;
        boolean ok;

        // 检查要复制的文件系统是否被选择保护了
        //if( !checkVolValidity() ) return;

        if (targetSrvName.equals("")) {
            targetSrvName = view.initor.mdb.getHostName();
//            if( targetSrvName.equals("") ){
//                JOptionPane.showMessageDialog(this,
//                    SanBootView.res.getString("EditProfileDialog.error.getHostNameFailed")
//                );
//                return;
//            }
        }


        //选择导入的Profile
        selectionline = lp_table.getSelectedRow();
        if (selectionline < 0) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("DuplicationStrategyPane.error.nonSel"));
            return;
        }
        int profCol = lp_table.getColumn(
                SanBootView.res.getString("DuplicationStrategyPane.table.prof")).getModelIndex();
        UniProfile prof = (UniProfile) lp_table.getValueAt(selectionline, profCol);
        prof.getUniProIdentity().getClntID();
        prof.getUniProHeader().getSource_dest_reference();
        prof.getUniProDrive1().getPath();
        prof.getUniProIBoot().getIboot_af_cmd();
        prof.getUniProIBoot().getIboot_bf_cmd();
        prof.getUniProIBoot().getMgid_info();

        //导入Profile的backup object ID
        String bkobjId = prof.getUniProIdentity().getBkObj_ID();
        bkobj = view.initor.mdb.getBakObjFromVector(bkobjId);
        if (bkobj != null) {
            if (!view.initor.mdb.deleteBakObj(bkobj.getBakObjID())) {
                JOptionPane.showMessageDialog(view,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_DEL_BAKOBJECT) +
                        ": " +
                        view.initor.mdb.getErrorMessage());
                return;
            } else {
                view.initor.mdb.removeBakObjFromVector(bkobj);
            }
        }

        //Profile调度方式
        ArrayList schList = view.initor.mdb.getSchOnProfName(prof.getProfileName());
        int size = schList.size();
        for (int i = 0; i < size; i++) {
            DBSchedule sch = (DBSchedule) schList.get(i);
            if (!view.initor.mdb.deleteOneScheduler(sch)) {
                JOptionPane.showMessageDialog(view,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_DEL_DB_SCHEDULER) +
                        ": " +
                        view.initor.mdb.getErrorMessage());
                return;
            } else {
                view.initor.mdb.removeSch(sch);
            }
        }

        // 新增一个profile
        SanBootView.log.debug(getClass().getName(), "begin to add a profile .....");

        //创建临时file
        tmpFile = view.initor.mdb.createTmpFile(ResourceCenter.PREFIX, ResourceCenter.SUFFIX_PROF);
        if (tmpFile == null) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed"));
            return;
        }

//            ok = bak_content_process();
//            if( !ok ) return;
//
//            profile = collectBakInfo();
        if (profile == null) {
            undo_crt_bkobj();
            return;
        }

        // 决 定 profile 的 名 字
        ProfileChooser chooser = new ProfileChooser(
                view,
                this,
                SanBootView.res.getString("ProfileChooser.title.saveas"),
                ProfileChooser.MODE_SAVE,
                host);
        int width = 375 + ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 255 + ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        chooser.setSize(width, height);
        chooser.setLocation(this.getCenterPoint(width, height));
        chooser.setModal(true);
        chooser.setVisible(true);

        Object[] ret = chooser.getValues();
        if (ret == null) {
            undo_crt_bkobj();
            return;
        }

        if (ret.length == 2) { // 要 把 oldProfile 修 改 掉
            SanBootView.log.debug(getClass().getName(), "begin to overwrite a profile .....");
            oldProfile = (UniProfile) ret[0];
            profile.setProfileName(oldProfile.getProfileName());
            profile.setIdentityProfileName();
            profile.setHeaderProfileName();
            SanBootView.log.debug(getClass().getName(), "profile: " + profile.prtMe());

            // 发送profile的内容
            if (!view.initor.mdb.sendFileToServer(tmpFile.getName(), profile.prtMe())) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("common.errmsg.sendFileFailed") + " : " +
                        view.initor.mdb.getErrorMessage());
                tmpFile.delete();
                undo_crt_bkobj();
                profile = null;
                return;
            }
            tmpFile.delete();

            // 将tmpFile move to profile dir
            ok = view.initor.mdb.moveFile(
                    ResourceCenter.TMP_DIR + tmpFile.getName(),
                    ResourceCenter.PROFILE_DIR + profile.toString());
            if (ok) {
                // 将old profile的bkobj删除掉，不管结果�
                UniProIdentity id = oldProfile.getUniProIdentity();
                BakObject aBkobj = view.initor.mdb.getBakObjFromVector(id.getBkObj_ID());
                if (aBkobj != null) {
                    view.initor.mdb.removeBakObjFromVector(aBkobj);
                    view.initor.mdb.deleteBakObj(aBkobj.getBakObjID());
                }

                view.initor.mdb.removeProfFromCache(oldProfile);
                view.initor.mdb.addProfileToVector(profile);
            } else {
                JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_ADD_PROFILE) +
                        ": " +
                        SanBootView.res.getString("common.failed"));
                undo_crt_bkobj();
                profile = null;
                return;
            }
        } else {// 要 新 增 一 个 profile
            UniProfile tmpNewProfile = (UniProfile) ret[0];
            profile.setProfileName(tmpNewProfile.getProfileName());
            profile.setIdentityProfileName();
            profile.setHeaderProfileName();
            SanBootView.log.debug(getClass().getName(), "profile: " + profile.prtMe());

            // 发送profile的内容
            if (!view.initor.mdb.sendFileToServer(tmpFile.getName(), profile.prtMe())) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("common.errmsg.sendFileFailed") + " : " +
                        view.initor.mdb.getErrorMessage());
                tmpFile.delete();
                undo_crt_bkobj();
                profile = null;
                return;
            }
            tmpFile.delete();

            // 将tmpFile move to profile dir
            ok = view.initor.mdb.moveFile(
                    ResourceCenter.TMP_DIR + tmpFile.getName(),
                    ResourceCenter.PROFILE_DIR + profile.toString());
            if (ok) {
                view.initor.mdb.addProfileToVector(profile);
            } else {
                JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_ADD_PROFILE) +
                        ": " +
                        SanBootView.res.getString("common.failed"));
                undo_crt_bkobj();
                profile = null;
                return;
            }
        }

        if (!view.initor.mdb.delFile(prof.getProfileName())) {
            JOptionPane.showMessageDialog(view,
                    ResourceCenter.getCmdString(ResourceCenter.CMD_DEL_FILE) +
                    ": " +
                    view.initor.mdb.getErrorMessage());
        } else {
            view.initor.mdb.removeProfFromCache(prof);
            delRowFromTable();
        }


    }

    private void delRowFromTable() {
        MyDefaultTableModelForTabX1 modelImport = (MyDefaultTableModelForTabX1) lp_table.getModel();
        int numOfLine = modelImport.getRowCount();
        if (selectionline >= 0 && selectionline < numOfLine) {
            modelImport.removeRow(selectionline);
        }
    }

    public Point getCenterPoint(int width, int height) {
        int x = (getSize().width - width) / 2 + getX();
        int y = (getSize().height - height) / 2 + getY();
        return new Point(x, y);
    }
    boolean needAddBkObj = false;

    /**
     *
     * @return
     */
    private void undo_crt_bkobj() {
        if (needAddBkObj) {
            // 不管结果
            view.initor.mdb.removeBakObjFromVector(bkobj);
            view.initor.mdb.deleteBakObj(bkobj.getBakObjID());
            this.bkobj = null;
        }
    }

    /**
     * function 修改从其主机导入到本机的 profile
     * @param importProfile 选中的 profile
     * @param oldProfile 本主机的配置文件
     * @param newProfile 产生新的配置文件
     * @return newProfile
     */
    public UniProfile modImportProfile(UniProfile importProfile, UniProfile oldProfile, UniProfile newProfile) {
        UniProIdentity identity = importProfile.getUniProIdentity();
        UniProHeader header1 = importProfile.getUniProHeader();
        UniProBackup backup = importProfile.getUniProBackup();
        UniProIBoot iboot = importProfile.getUniProIBoot();
        UniProDrive drive = importProfile.getUniProDrive1();

        //生成 identity 部分
        BakObject bakObj = this.bkobj;
        identity.setBkObj_ID(bakObj.getBakObjID() + "");
        newProfile.setUniProIdentity(identity);
        //缺少一个profile name

        //生成 header 部分
        header1.setSource_dest_reference(oldProfile.getUniProHeader().getSource_dest_reference());
        newProfile.setUniProHeader(header1);
        //缺少一个profile name

        //生成 backup 部分
        newProfile.setUniProBackup(backup);

        //生成 iboot 部分
        iboot.cleanIboot_af_cmd();
        iboot.addIboot_af_cmd(oldProfile.getUniProIBoot().getIboot_af_cmd());
        iboot.cleanIboot_bf_cmd();
        iboot.addIboot_bf_cmd(oldProfile.getUniProIBoot().getIboot_bf_cmd());
        iboot.setMgid_info(oldProfile.getUniProIBoot().getMgid_info());
        newProfile.setUniProIBoot(iboot);

        //生成 drive 部分
        drive.setPath(oldProfile.getUniProDrive1().getPath());
        newProfile.setUniProDrive1(drive);

        return newProfile;
    }

    public UniProfile collectBakInfo() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
