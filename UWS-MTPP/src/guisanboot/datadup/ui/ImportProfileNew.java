/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.qqS
 */

/*
 * ImportProfile2.java
 *
 * Created on 2014-3-5, 16:06:34
 */

package guisanboot.datadup.ui;

import guisanboot.data.BindOfFSAndDevNo;
import guisanboot.data.BootHost;
import guisanboot.datadup.data.BackupClient;
import guisanboot.datadup.data.BakObject;
import guisanboot.datadup.data.DBSchedule;
import guisanboot.datadup.data.UniProBackup;
import guisanboot.datadup.data.UniProHeader;
import guisanboot.datadup.data.UniProIBoot;
import guisanboot.datadup.data.UniProIdentity;
import guisanboot.datadup.data.UniProfile;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.SanBootView;
import guisanboot.ui.SelectProtectedFS;
import guisanboot.ui.WizardDialogSample;
import guisanboot.ui.multiRenderTable.CheckBoxEditor;
import guisanboot.ui.multiRenderTable.JTableX1;
import guisanboot.ui.multiRenderTable.MyDefaultTableModelForTabX1;
import guisanboot.ui.multiRenderTable.RowEditorModel;
import java.awt.Color;
import java.awt.Point;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import java.io.File;
import javax.swing.JOptionPane;
import java.util.*;

/**
 *
 * @author Administrator
 */
public class ImportProfileNew extends javax.swing.JDialog implements Backupable{

    SanBootView view;
    BootHost host;
    BackupClient bkClnt;
    ArrayList<DBSchedule> oldSchList;
    BakObject bkobj = null;
    UniProfile oldProf;
    String bootMac;
    SelectProtectedFS selProtectFs;
    ArrayList hidenFs;

    ArrayList profileList = new ArrayList() ;
    
    private Hashtable<Integer,String> winSrcList  = new Hashtable<Integer,String>();
    private Hashtable<String,BindOfFSAndDevNo> unixSrcList = new Hashtable<String,BindOfFSAndDevNo>();
    
    Vector rootListForLinux; // 存放linux的fs list(/,/usr/,/boot/等)
    Vector partList; // 存放分区列表（包括文件类型）

    DefaultListModel model = new DefaultListModel();
    JList bakList = new JList( model );
    DefaultListModel model1 = new DefaultListModel();
    JList excludeList = new JList( model1 );

    //BrowserTable schedulerTable = new BrowserTable();

    int whatAct = -1;
    int selectionline = -1;
    public final static int ADD_ACT = 0;
    public final static int MOD_ACT = 1;

    DefaultListModel selectModel = new DefaultListModel();

    /** Creates new form ImportProfile2 */
    public ImportProfileNew(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ImportProfileNew( SanBootView view,BootHost host, BackupClient bkClnt,
            ArrayList<DBSchedule> oldSchList,BakObject bkobj,UniProfile oldProf,
            String bootMac,SelectProtectedFS selProtectFs,ArrayList hidenFs
    ){
        this( view,true );
        myInit( view,host,bkClnt,oldSchList,bkobj,oldProf,bootMac,selProtectFs,hidenFs );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(53, 53, 53)
                .add(jButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 102, Short.MAX_VALUE)
                .add(jButton2)
                .add(61, 61, 61))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton2))
                .add(116, 116, 116))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        okButton_actionPerformed();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        profile = null;
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ImportProfileNew dialog = new ImportProfileNew(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public UniProfile collectBakInfo() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    //暂时没弄明白干嘛用的--实现接口所重写的方法--翻译为是否为一样的调度器



    //创建对象时所作的初始化
    private void myInit( SanBootView view,BootHost host,BackupClient bkClnt,ArrayList<DBSchedule> oldSchList,
            BakObject bkobj,UniProfile oldProf,String bootMac,SelectProtectedFS selProtectFs,ArrayList hidenFs
    ){
        this.view = view;
        this.oldSchList = oldSchList;
        this.host = host;
        // bkclnt可能不存在，是虚构出来的。在必要时要增加该对象到数据库中
        this.bkClnt = bkClnt;
        this.bkobj = bkobj;
        this.oldProf = oldProf;
        this.bootMac = bootMac;
        this.selProtectFs = selProtectFs;
        this.hidenFs = hidenFs;

        setupList() ;

        jButton1.setText(SanBootView.res.getString("common.button.ok"));

        jButton2.setText(SanBootView.res.getString("common.button.cancel"));

        setupTableForMTPP(profileList) ;

        setupLanguage();

        for (int i = 0; i < oldSchList.size(); i++) {
            DBSchedule sch = oldSchList.get(i);
        }

    }



    //确定按钮事件
    UniProfile profile = null ;
    String targetSrvName="";
    public void okButton_actionPerformed () {
        File tmpFile ;
        Boolean ok ;

        //得到选中的策略文件
        int i = lp_table.getSelectedRow() ;
        UniProfile selectProfile = (UniProfile)lp_table.getValueAt(i,1);

        //得到选中的策略文件对应的调度
        ArrayList<DBSchedule> schList = view.initor.mdb.getSchOnProfName( selectProfile.getProfileName() );

        String selectSrc = selectProfile.getUniProBackup().getSrc();
        String[] list = selectSrc.split(";") ;
        for (int j = 0; j < list.length; j++) {
            if( !list[j].equals("") )
                model.addElement( list[j] );
        }
        

        // 检查要复制的文件系统是否被选择保护了
        //if( !checkVolValidity() ) return;

//        if( targetSrvName.equals("") ){
//            targetSrvName = view.initor.mdb.getHostName();
//            if( targetSrvName.equals("") ){
//                JOptionPane.showMessageDialog(this,
//                    SanBootView.res.getString("EditProfileDialog.error.getHostNameFailed")
//                );
//                return;
//            }
//        }

        //--开始创建
        SanBootView.log.debug( getClass().getName(), "begin to add a profile .....");

        tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_PROF );
        if( tmpFile == null ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed")
            );
            return;
        }

        ok = bak_content_process();
        if( !ok ) return;

        profile = collectBakInfo(selectProfile) ;
        if( profile == null ) {
            undo_crt_bkobj();
            return;
        }

        // 决 定 profile 的 名 字
        ImportProfileChooser chooser = new ImportProfileChooser(
            view,
            this,
            SanBootView.res.getString("ProfileChooser.title.saveas"),
            ProfileChooser.MODE_SAVE
        );
        int width  = 375+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 255+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        chooser.setSize( width, height );
        chooser.setLocation( this.getCenterPoint( width,height) );
        chooser.setModal( true );
        chooser.setVisible( true );

        Object[] ret = chooser.getValues();
        if( ret == null ) {
            undo_crt_bkobj();
            return;
        }

        // 要 新 增 一 个 profile

        UniProfile tmpNewProfile = (UniProfile)ret[0];
        profile.setProfileName( tmpNewProfile.getProfileName() );
        profile.setIdentityProfileName();
        profile.setHeaderProfileName();
        SanBootView.log.debug( getClass().getName(),  "profile: " + profile.prtMe() );
        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),profile.prtMe() ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                view.initor.mdb.getErrorMessage()
            );
            tmpFile.delete();
            undo_crt_bkobj();
            profile = null;
            return;
        }

        tmpFile.delete();

        // 将tmpFile move to profile dir
        ok = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR+tmpFile.getName(),
            ResourceCenter.PROFILE_DIR + profile.toString()
        );

        if( ok ){
            view.initor.mdb.addProfileToVector( profile );
        }else{
            JOptionPane.showMessageDialog(this,
                ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_PROFILE )+
                ": "+
                SanBootView.res.getString("common.failed")
            );
            undo_crt_bkobj();
            profile = null;
            return;
        }

         //add sch
        if( !sch_process( profile.getProfileName(),schList ) ){
            JOptionPane.showMessageDialog( this,
                SanBootView.res.getString("EditProfileDialog.error.schfailed")
            );
        }

        this.dispose();

    }


    //设置向导对话框示例--为了设置显示位置
    public void setWizardDialogSample( WizardDialogSample wdiag ){
        wizardDiag = wdiag;
    }

    //为外部提供配置文件的方法
    public UniProfile getProfile(){
        return profile;
    }

    //bak内容过程
    boolean needAddBkObj = false;
    public boolean bak_content_process(){
        boolean ok;
        needAddBkObj = false;

        String fileList = getBkList( true );
        if( fileList == null ) return false;
        String aExcludeList = getExcludeList( true );
        if( aExcludeList == null ) return false;


        int filetype = ResourceCenter.BAK_TYPE_FILE;

        if( this.bkobj != null ){
            if( this.bkobj.getFileName().equals( fileList)  &&
                this.bkobj.getExclude().equals( aExcludeList ) &&
                this.bkobj.getFileType().equals( filetype+"" )
            ){
                // 备份源没有变化
                return true;
            }else{
                // modify current bkobj
                ok = view.initor.mdb.modBakObj( this.bkobj.getBakObjID(),fileList,aExcludeList,filetype+"" );
                if( ok ){
                    this.bkobj.setFileName( fileList );
                    this.bkobj.setExclude( aExcludeList );
                    this.bkobj.setFileType( filetype+"" );
                    view.initor.mdb.modBakObjInVector( this.bkobj.getBakObjID(),fileList,aExcludeList,filetype+"" );
                    return true;
                }else{
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_MOD_BAKOBJECT )+
                        ": "+
                        view.initor.mdb.getErrorMessage()
                    );
                    return false;
                }
            }
        }else{
            if( bkClnt.getID() <= 0 ){
                // 先增加d2d client
                ok = view.initor.mdb.addOneClient( bkClnt );
                if( !ok ){
                    JOptionPane.showMessageDialog(view,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_CLIENT )+
                        ": "+
                        view.initor.mdb.getErrorMessage()
                    );
                    return false;
                }else{
                    bkClnt.setID( view.initor.mdb.getNewId() );
                    view.initor.mdb.addBakClntIntoCache( bkClnt );
                }
            }

            // add new bkobj
            BakObject newbakObj = new BakObject(
                -1,
                fileList,
                filetype + "",
                "", // linux's include,将来考虑
                "",
                false,
                aExcludeList,
                "",
                false,
                true,
                0,
                0,
                0,
                "",
                false,
                0,
                bkClnt.getID(),
                0,   //新增的backup object的backcup level都是0
                "",
                -1,
                0
            );

            File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_BKOBJ );
            if( tmpFile == null ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed")
                );
                return false;
            }

            if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),newbakObj.prtMe() ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
                    view.initor.mdb.getErrorMessage()
                );
                tmpFile.delete();
                return false;
            }
            tmpFile.delete();

            ok = view.initor.mdb.addBakObj( ResourceCenter.TMP_DIR + tmpFile.getName() );
            if( ok ){
                if( view.initor.mdb.getNewId() > 0 ){
                    needAddBkObj = true;
                    newbakObj.setBakObjID( view.initor.mdb.getNewId() );
                    view.initor.mdb.addBakObjIntoVector( newbakObj );
                    this.bkobj = newbakObj;
                    return true;
                }else{
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_BAKOBJECT)+
                        ": "+
                        view.initor.mdb.getErrorMessage()
                    );
                    return false;
                }
            }else{
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_BAKOBJECT)+
                    ": "+
                    view.initor.mdb.getErrorMessage()
                );
                return false;
            }
        }
    }

    // 部分生成profile,其余部分在init向导中生成。不能生成的部分涉及到卷的信息，而此时卷还没有生成。
    int intbklevel = -1;
    public UniProfile collectBakInfo(UniProfile selectProfile){
        int k,size1;
        //新建profile
        UniProfile aProfile      = new UniProfile();
        UniProIdentity identity = aProfile.getUniProIdentity();
        UniProHeader headerTemp  = aProfile.getUniProHeader();
        UniProBackup backup  = aProfile.getUniProBackup();
        UniProIBoot  iboot   = aProfile.getUniProIBoot();

        //旧profile
        UniProfile bProfile      = selectProfile ;
        UniProIdentity bIdentity = bProfile.getUniProIdentity();
        UniProHeader bHeader  = bProfile.getUniProHeader();
        UniProBackup bBackup  = bProfile.getUniProBackup();
        UniProIBoot  bIboot   = bProfile.getUniProIBoot();

        // 生成 identity 部分
        BakObject bakObj = this.bkobj;
        identity.setBkObj_ID( bakObj.getBakObjID()+"" );
        identity.setBkObj_SN( bakObj.getBakObjSN()+"" );

        identity.setSchLevel( bIdentity.getSchLevel() );
        identity.setClntID( bkClnt.getID()+"" );
        identity.setAction("backup-file");
        //缺少一个profile name

        // 生成 header 部分
        headerTemp.setAct("backup-file");
        headerTemp.setPreCmd( bHeader.getPreCmd() );

        headerTemp.setPostCmd( bHeader.getPostCmd() );

        headerTemp.setSnapPreCmd( bHeader.getSnapPreCmd() );


        headerTemp.setSnapPostCmd( bHeader.getSnapPostCmd() );
        headerTemp.setLinux_lvm_snap( bHeader.getLinux_lvm_snap() );

        //生成 Backup部分
        if( bakObj != null ){
            String bkSrc = bakObj.getFileName();
            if( !bakObj.getInclude().equals("") ){
                // 只要bkobj中的include域不为空,那么就表示真正要备份的是include所表示的内容
                bkSrc = bakObj.getInclude();
            }
            backup.setSrc( bkSrc );
            backup.setSrc(bBackup.getSrc());
        }
        backup.setSrcType( bakObj.getFileType() );

        String incFilter = bBackup.getInclude() ;
        if( !incFilter.equals("") ){
            if( incFilter.indexOf("/") >=0 || incFilter.indexOf("\\") >=0 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.errMsg.notHasSeparator")
                );
                return null;
            }

            if( incFilter.getBytes().length > 1000 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.tooLongIncFilter")
                );
                return null;
            }

            if( incFilter.charAt( incFilter.length() -1 ) !=';' ){
                incFilter +=";";
            }
            backup.setInclude( incFilter );
            backup.setInclCase("YES");
            backup.setInclType("4");
        }

        String excFilter = bBackup.getExclude();
        if( !excFilter.equals("") ){
            if( excFilter.indexOf("/") >=0 || excFilter.indexOf("\\") >=0 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.errMsg.notHasSeparator")
                );
                return null;
            }

            if( excFilter.getBytes().length > 1000 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.tooLongExcFilter")
                );
                return null;
            }

            if( excFilter.charAt( excFilter.length() -1 ) !=';' ){
                excFilter +=";";
            }
            backup.setExclude( excFilter );
            backup.setExclCase("YES");
            backup.setExclType("4");
        }

        String delRedundantData = bBackup.getDeleteRedundantFile();
        if( delRedundantData.equals("") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditProfileDialog.error.invalidDelRedundantData")
            );
            return null;
        }

        int intDelReData = UniProBackup.DEFAULT_VAL_DEL_REDUNDANT;
        try{
            intDelReData = Integer.parseInt( delRedundantData );
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditProfileDialog.error.invalidDelRedundantData")
            );
            return null;
        }
        backup.setDeleteRedundantFile( intDelReData+"" );

        backup.setKillPreCmd( "0" );
        backup.setBlkIncRstMode( "0" );
        backup.setPhyIncJudgeTimeFlag( bBackup.getPhyIncJudgeTimeFlag() );
        backup.setBakWithSnapFlag( bBackup.getBakWithSnapFlag() );
        backup.setExcludeFromBak( bakObj.getExclude() );
        backup.setIgnore_all_copy_error( bBackup.getIgnore_all_copy_error() );
        backup.setCrt_Snap( bBackup.getCrt_Snap() );

        if( oldProf != null ){ // 将 ib_snap_bf_cmd 和 ib_snap_bf_cmd1 再写回去
            UniProIBoot uiboot = oldProf.getUniProIBoot();
            ArrayList snap_bf_cmd_list = uiboot.getIboot_snap_bf_cmd_list();
            size1 = snap_bf_cmd_list.size();
            for( k=0; k<size1; k++ ){
                iboot.addIboot_snap_bf_cmd( (String)snap_bf_cmd_list.get( k ) );
            }
            snap_bf_cmd_list = uiboot.getIboot_snap_bf_cmd1_list();
            size1 = snap_bf_cmd_list.size();
            for( k=0; k<size1; k++ ){
                iboot.addIboot_snap_bf_cmd1( (String)snap_bf_cmd_list.get( k ) );
            }
        }

        iboot.setUws_username( view.initor.user );
        iboot.setUws_passwd( view.initor.passwd );
        iboot.setUws_ip( view.initor.getTxIP(bkClnt.getIP()) );
        iboot.setUws_port( view.initor.port+"" );

        iboot.setLogout_target( bIboot.getLogout_target() );

        return aProfile;
    }

    //Sch过程
    public boolean sch_process( String profname , ArrayList<DBSchedule> schList ){
        int i,size;
        boolean isOk;
        boolean ret = true;
        DBSchedule sch;

        ArrayList<DBSchedule> list = schList ;
        size = list.size();
        for( i=0; i<size; i++ ){
            sch = list.get(i);
            

            DBSchedule newScheduler = new DBSchedule(
                -1L,
                sch.getName(),
                sch.getSchType(),
                sch.getMin(),
                sch.getHour(),
                sch.getDay(),
                sch.getMonth(),
                sch.getWeek(),
                sch.getLevel(),
                sch.getProfId(),
                sch.getDevId(),
                this.bkobj.getBakObjID(),
                profname
            );
            isOk = view.initor.mdb.addOneScheduler( newScheduler );
            if( !isOk && ret  ){
                ret = false;
            }else{
                if( newScheduler.getID() == -1 ){
                    newScheduler.setID( view.initor.mdb.getNewId() );
                    view.initor.mdb.addSchIntoCache(  newScheduler );
                }else{
                    view.initor.mdb.removeSch( newScheduler );
                    view.initor.mdb.addSchIntoCache( newScheduler );
                }
            }
        }

        //System.out.println(" now size: "+view.initor.mdb.getSchNum() );
        return ret;
    }


    //---------------------------------------------------------私有方法----------------------------------------------------

    //设置语言
    private void setupLanguage(){
        String ip = ( this.host != null )? " [ "+host.getIP()+" ]":"";
        if( this.bkobj == null ){
            setTitle(SanBootView.res.getString("EditProfileDialog.diagTitle")+ip );
        }else{
            setTitle(SanBootView.res.getString("EditProfileDialog.diagTitle1")+ip );
        }
    }

    //设置表内所需集合
    private void setupList(){
        ArrayList list = view.initor.mdb.getAllProfile() ;

        //得到该主机的策略文件集合
        //long id = view.initor.mdb.getBkClntOnUUID(InitBootHostWizardDialog.uuid_long).getID();



//        去重--暂时不考虑
//        ArrayList list2 = view.initor.mdb.getAllProfileOnClntID(id) ;
//        for (int i = 0; i < list2.size(); i++) {
//            UniProfile profile = (UniProfile)list2.get(i);
//            System.out.println(profile.getProfileName()) ;
//            list.remove(profile);
//        }

        int size = list.size();
        for( int i=0; i<size; i++ ){
            UniProfile profileTemp = (UniProfile)list.get(i);
            selectModel.addElement( profileTemp );
            profileList.add(profileTemp);
        }
    }

    //设置MTPP表
    JTable table;
    JTable lp_table;
    Object[] header;
    Object[] label;
    WizardDialogSample wizardDiag;
    //设置MTPP表
    public void setupTableForMTPP( ArrayList list ){

        int num = list.size();
        Object[][] data = new Object[num][4];

        header = new Object[4];
        label = new Object[num];

        header[0] = SanBootView.res.getString("DuplicationStrategyPane.table.isSel");
        header[1] = SanBootView.res.getString("DuplicationStrategyPane.table.prof");
        header[2] = SanBootView.res.getString("DuplicationStrategyPane.table.sch");
        header[3] = SanBootView.res.getString("DuplicationStrategyPane.table.contents");

        for( int i=0; i<num; i++ ){
            UniProfile prof = (UniProfile)list.get(i);
            data[i][0] = new Boolean( prof.isSel );
            data[i][1] = prof;
            data[i][2] = view.initor.mdb.getSchNumOnProfName( prof.getProfileName() ) + "";
            UniProBackup backup = prof.getUniProBackup();
            data[i][3] = backup.getSrc();

            label[i]= prof.toString();
        }

        MyDefaultTableModelForTabX1 models = new MyDefaultTableModelForTabX1( data,header,label );

        lp_table = new JTableX1( models,view,wizardDiag );
        lp_table.setRowHeight( 20 );
        lp_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        RowEditorModel rm = new RowEditorModel();
        ((JTableX1)lp_table).setRowEditorModel(rm);

        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );

        TableColumnModel tableColumnModel = lp_table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 70 );
        tableColumnModel.getColumn(1).setWidth( 105 );
        tableColumnModel.getColumn(2).setWidth( 65 );
        tableColumnModel.getColumn(3).setWidth( 260);
        for( int i=0;i<colNum;i++ )
            lp_table.sizeColumnsToFit(i);

        lp_table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        lp_table.getTableHeader().setReorderingAllowed(false);

        jScrollPane1.getViewport().add( lp_table,null );
        jScrollPane1.getViewport().setBackground( Color.white );
    }

    //计算位置
    public Point getCenterPoint(int width,int height){
        int x = ( getSize().width - width ) / 2 + getX();
        int y = ( getSize().height - height ) / 2 + getY();
        return new Point(x,y);
    }

    //检查是否被保护
    private boolean checkVolValidity(){
        Enumeration list;

        if( host.isWinHost() ){
            getMpListForWin();

            if( winSrcList.size() <= 0 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.getMp")
                );
                return false;
            }

            list  = winSrcList.elements();

            while( list.hasMoreElements() ){

                String src =(String) list.nextElement();

                SanBootView.log.debug(getClass().getName(), " =====>: " + src + ":\\" );

                if( !selProtectFs.isThisFsProtected( src+":\\" ) ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ src
                    );
                    return false;
                }
            }

        }else{
            getMpListForLinux();

            if( unixSrcList.size() <=0 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.getMp")
                );
                return false;
            }

            list  = unixSrcList.elements();
            while( list.hasMoreElements() ){
                BindOfFSAndDevNo binder =(BindOfFSAndDevNo) list.nextElement();
SanBootView.log.debug(getClass().getName(), "====> " + binder.mp );
                if( !selProtectFs.isThisFsProtected( binder.mp ) ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : "+ binder.mp
                    );
                    return false;
                }
            }
        }

        return true;
    }

    //未知功能私有方法
    private void getMpListForWin(){
        String src,driver;
        Object val;
        int ch,key;

        winSrcList.clear();

        int size = model.size();
        for( int i=0; i<size; i++ ){
            src =(String)model.elementAt(i);
            try{
                // 全部统一成大写的
                src = src.toUpperCase();
                ch = src.charAt( 0 );
                if( ch == '/' || ch =='\\' ){
                    src = src.substring( 1 );
                }
                driver = src.substring( 0,1 );
                key =(int)driver.charAt( 0 );
            }catch(Exception ex){
                continue;
            }

            val = winSrcList.get( new Integer( key ) );
            if( val == null ){
                winSrcList.put( new Integer( key), driver );
            }
        }
    }

    // 根据fs list从复制内容里筛选出要复制的fs(只需通信一次)
    private void getMpListForLinux(){
        Object[] sortedFsList = null ;
        String src,fs,fs1;
        int i,j,size,len,strlen;
        char ch;
        Object val;
        BindOfFSAndDevNo binder;

        this.unixSrcList.clear();

        if( rootListForLinux != null && rootListForLinux.size()>0 ){
SanBootView.log.info( getClass().getName(),"fs list is from FsListFetcher.");
            sortedFsList = rootListForLinux.toArray();
            Arrays.sort( sortedFsList );
        }else{
SanBootView.log.info( getClass().getName(),"fs list is from getUnixPart.");
            boolean ok = view.initor.mdb.getUnixPart( host.getIP(),host.getPort(), "list_mp.sh" );
            if( ok ){
                ArrayList list = view.initor.mdb.getFsList();
                partList = view.initor.mdb.getUnixSysPart();
                sortedFsList = list.toArray();
                Arrays.sort( sortedFsList );
            }else{
SanBootView.log.error( getClass().getName()," get fs list by getUnixPart cmd failed.");
            }
        }

        if( sortedFsList != null ){
            size = model.size();
            len = sortedFsList.length;
            for( i=0; i<size; i++ ){
                src =(String)model.elementAt(i);

                for( j=len-1; j>=0; j--){
                    fs = (String)sortedFsList[j];
                    if( src.startsWith( fs ) ){
                        val = unixSrcList.get( fs );
                        if( val == null ){
                            strlen = fs.length();
                            if( strlen >1 ){
                                ch = fs.charAt( strlen-1 );
                                if( ch == '/' || ch =='\\' ){
                                    fs1 = fs.substring( 0, strlen-1 );
                                }else{
                                    fs1 = fs;
                                }
                            }else{
                                fs1 = fs;
                            }

                            binder = new BindOfFSAndDevNo();
                            binder.mp = fs1;
                            unixSrcList.put( fs, binder );
                        }
                        break;
                    }
                }
            }
        }
    }

    //获得BK列表
    private String getBkList( boolean check ){
        boolean hasOSDisk = false;
        boolean hasEtcDir = false;

        if( model.size()<=0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditProfileDialog.error.notselected")
            );
            return null;
        }

        int size = model.size();
        String filelist = "";
        for( int i=0;i<size;i++ ){
            String item = (String)model.elementAt( i );
            if( item.toUpperCase().equals("/C:/") ){
                hasOSDisk = true;
            }
            if( item.equals("/etc/") ){
                hasEtcDir = true;
            }
            filelist += item + ";";
        }
        if( check ){
            if( filelist.getBytes().length >= ResourceCenter.CONTENT_SIZE ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.errMsg.tooLongBakContent")
                );
                return null;
            }
        }

        return filelist;
    }

    //获得排除列表
    private String getExcludeList( boolean check ){
        int i,size;

        boolean hasEtcDir = false;

        size = model.size();
        String filelist = "";
        for( i=0;i<size;i++ ){
            String item = (String)model.elementAt( i );
            if( item.equals("/etc/") ){
                hasEtcDir = true;
            }
        }

        boolean excludeFstab = false;
        boolean excludeNetwork = false;
        boolean excludeKillall = false;
        boolean excludeHalt = false;
        size = model1.size();
        String excludeListStr ="";
        for( i=0; i<size; i++ ){
            String item1 = (String)model1.get( i );

            if( item1.equals("/etc/fstab") ){
                excludeFstab = true;
            }

            if( item1.equals("/etc/init.d/network") ){
                excludeNetwork = true;
            }

            if( item1.equals("/etc/init.d/killall") ){
                excludeKillall = true;
            }

            if( item1.equals("/etc/init.d/halt") ){
                excludeHalt = true;
            }

            if( item1.equals("/etc/rc.d/init.d/network") ){
                excludeNetwork = true;
            }

            if( item1.equals("/etc/rc.d/init.d/killall") ){
                excludeKillall = true;
            }

            if( item1.equals("/etc/rc.d/init.d/halt") ){
                excludeHalt = true;
            }

            excludeListStr += item1 + ";";
        }

        if( check ){
            if( excludeListStr.getBytes().length >=ResourceCenter.CONTENT_SIZE ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.errMsg.tooLongExcludeContent")
                );
                return null;
            }
        }

        if( check ){
            // 检查UWS不允许复制的目录
            if( bkClnt.isLinux() ){
                if( hasEtcDir ){
                    if( !excludeFstab || !excludeNetwork || !excludeKillall || !excludeHalt ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBakedFileDialog.errMsg.excludeEtcDir")
                        );
                        return null;
                    }
                }
            }
        }

        return excludeListStr;
    }

    private void undo_crt_bkobj(){
        if( needAddBkObj ){
            // 不管结果
            view.initor.mdb.removeBakObjFromVector( bkobj );
            view.initor.mdb.deleteBakObj( bkobj.getBakObjID() );
            this.bkobj = null;
        }
    }

}
