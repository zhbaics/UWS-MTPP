/*
 * SelectBakedFileDialog.java
 *
 * Created on July 29, 2008, 16:38 PM
 */

package guisanboot.datadup.ui;

import guisanboot.data.SystemPartitionForUnix;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import java.util.*;
import java.util.regex.*;

import guisanboot.res.*;
import guisanboot.datadup.data.BackupClient;
import guisanboot.datadup.cmd.GetFileList;
import guisanboot.ui.SanBootView;

/**
 *
 * @author  Administrator
 */
public class SelectBakedFileDialog extends javax.swing.JDialog implements BrowseBakedFile{
    private final String pattern1 = ".*/\\.\\./.*";
    private final String pattern2 = ".*/\\./.*";
    private Pattern pattern;
    private Matcher matcher;
    
    private String curPath  = "/";
    private String rootPath = "/";    // 只能显示rootPath里面的目录
    private boolean onlyOne = false;  // 是否只能选一个
    private Vector<String> roots = new Vector<String>(); // 放第一次获取的文件列表(就是所有的文件系统)
    private Vector<String> roots_cache = new Vector<String>(); // 保存roots里面的内容
    private ArrayList<String> excludeList = new ArrayList<String>(); // 存放exlcude list

    private ArrayList<SystemPartitionForUnix> hidenFs; // 用户不能选择的fs
    
    private String selFileList;
    private String excludeFileList;
    private ArrayList<String> filter_list;
    private ArrayList<String> root_vol_list; // 限定了能浏览的卷（FS）
    
    /** Creates new form SelectBakedFileDialog */
    public SelectBakedFileDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public SelectBakedFileDialog(
        SanBootView view,
        BackupClient cli,
        String rootPath,
        boolean onlyOne,
        String selFileList,
        String excludeFileList,
        ArrayList<String> filter_list,
        ArrayList<String> root_vol_list
    ){
        this( view,true );
        myInit( view,cli,rootPath,onlyOne,selFileList,excludeFileList,filter_list,root_vol_list );
    }

    public SelectBakedFileDialog( 
        SanBootView view,
        BackupClient cli,
        String rootPath,
        boolean onlyOne,
        String selFileList,
        String excludeFileList
    ){
        this( view,cli,rootPath,onlyOne,selFileList,excludeFileList,null,null );
    }
    
    public SelectBakedFileDialog( SanBootView view,BackupClient cli,String selFileList,String excludeFileList ){
        this( view,cli,"/",false,selFileList,excludeFileList );
    }
    
    public SelectBakedFileDialog( SanBootView view,BackupClient cli,String selFileList,String excludeFileList,ArrayList<String> filter_list ){
        this( view,cli,"/",false,selFileList,excludeFileList,filter_list,null );
    }

    public SelectBakedFileDialog( SanBootView view,BackupClient cli,ArrayList<String> root_vol_list ){
        this( view,cli,"/",false,"","",null,root_vol_list );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(363, 60));
        jLabel1.setText("Enter Path :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel1, gridBagConstraints);

        jTextField1.setPreferredSize(new java.awt.Dimension(475, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jTextField1, gridBagConstraints);

        jButton6.setText("Add");
        jButton6.setPreferredSize(new java.awt.Dimension(60, 20));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jButton6, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 5, 1)));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(new javax.swing.border.TitledBorder("Files"));
        jScrollPane2.setBackground(java.awt.Color.white);
        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(280, 10));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(new javax.swing.border.TitledBorder("Selections"));
        jScrollPane1.setBackground(java.awt.Color.white);
        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton7.setText("Exclude");
        jButton7.setPreferredSize(new java.awt.Dimension(77, 24));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jPanel7.add(jButton7);

        jPanel5.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel4.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setPreferredSize(new java.awt.Dimension(100, 10));
        jButton1.setText("Add");
        jButton1.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jButton1, gridBagConstraints);

        jButton3.setText("Done");
        jButton3.setMaximumSize(new java.awt.Dimension(55, 27));
        jButton3.setMinimumSize(new java.awt.Dimension(55, 27));
        jButton3.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        jPanel6.add(jButton3, gridBagConstraints);

        jButton4.setText("Cancel");
        jButton4.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        jPanel6.add(jButton4, gridBagConstraints);

        jButton2.setText("Reomve");
        jButton2.setMaximumSize(new java.awt.Dimension(55, 27));
        jButton2.setMinimumSize(new java.awt.Dimension(55, 27));
        jButton2.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        jPanel6.add(jButton2, gridBagConstraints);

        jButton5.setText("Stop");
        jButton5.setMaximumSize(new java.awt.Dimension(55, 27));
        jButton5.setMinimumSize(new java.awt.Dimension(55, 27));
        jButton5.setPreferredSize(new java.awt.Dimension(81, 24));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        jPanel6.add(jButton5, gridBagConstraints);

        jPanel4.add(jPanel6, java.awt.BorderLayout.WEST);

        jPanel2.add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        excludeBtn_process();
    }//GEN-LAST:event_jButton7ActionPerformed

    // exclude backup file
    private void excludeBtn_process(){
        Vector content = getBakContent();
        if( content.size()<=0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.errmsg.notselected")
            );
            return;
        }
        
        ExcludeBakcontentsDialog diag = new ExcludeBakcontentsDialog( this,cli,view,roots_cache,content,excludeList ); 
        int width  = 565+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 345+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        diag.setSize( width,height );
        diag.setLocation( getCenterPoint( width,height) );
        diag.setVisible( true );
        
        Object ret = diag.getValues();
        if( ret == null ) return;
        
        excludeList = (ArrayList<String>)ret;
        
        int size = excludeList.size();
        for( int i=0; i<size; i++ ){
SanBootView.log.debug( getClass().getName()," exclude item: "+ excludeList.get(i) );            
        }
    }
    
    // add textfile
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String file = jTextField1.getText().trim();
        if( file.equals("") ) {
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.nullFile")
            );
            return;
        }
        
        if( onlyOne ){
            if( selectModel.getSize() > 0 ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectBakedFileDialog.error.onlyOne")
                );
                return;
            }
        }
        
        if( file.equals("../") || file.equals("/") ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.badsel")
            );
            return;
        }
        
        if( !file.startsWith( rootPath ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.badRootPath")+" "+rootPath
            );
            setTextOnTextField1( curPath );
            return;
        }
        
        if( file.indexOf("\\") >0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.invalidSeprator")
            );
            setTextOnTextField1( curPath );
            return;
        }
        
        // .. 和 .是非法的输入
        if( isOneOrtwopoint( file+"/" ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.badInput")
            );
            return;
        }
        
        if( !view.initor.mdb.getFileStatus( cli.getID(), file ) ){ 
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.getfstat")+" : "+
                 view.initor.mdb.getErrorMessage()
            );
            return;
        }
        
        if( view.initor.mdb.isNotExist() ){ 
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.notExist")
            );
            return;
        }
        
        if( view.initor.mdb.isUnknownErr() ){ 
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.UnknownErr")
            );
            return;
        }
        
        if( view.initor.mdb.isDir() ){ 
            if( file.charAt( file.length()-1 ) !='/' ){
                file +="/";
            }
        }        
        
        if( !isExist( file ) ){
            if( isSelected1( file ) ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectBakedFileDialog.error.fcexist")
                );
                return;
            }
            
            if( cli.isLinux() ){  
                if( file.startsWith("/sys") || 
                    file.startsWith("/dev") || 
                    file.startsWith("/proc")   
                ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectBakedFileDialog.error.specialFile")
                    );
                    return;
                }

                if( isUWS ){
                    if( file.equals("/etc/fstab") ||
                        file.equals("/etc/init.d/network") ||
                        file.equals("/etc/init.d/killall") ||
                        file.equals("/etc/init.d/halt") ||
                        file.equals("/etc/rc.d/init.d/network") ||
                        file.equals("/etc/rc.d/init.d/killall") ||
                        file.equals("/etc/rc.d/init.d/halt")
                    ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBakedFileDialog.error.specialFile3")
                        );
                        return;
                    }

                }
            }
            
            // Check special files for Windows
            if( cli.isWin() ){
                // "System Volume Information" dir don't need to duplicate.
                pattern  = Pattern.compile( "^/[a-zA-Z]:/" + GetFileList.SVINFO.toUpperCase() + "$" );
System.out.println(" ss: "+file.toUpperCase() );                
                matcher = pattern.matcher( file.toUpperCase() );
                if( matcher.find() ){
                    JOptionPane.showMessageDialog(this,
                        file + " " + SanBootView.res.getString("SelectBakedFileDialog.error.specialFile1")
                    );
                    return;
                }
            }
            
            // 判断是否超过了长度限制
            // 每个文件后面跟一个";",所以要多加1
            totalChar +=( file.getBytes().length+1 );
            
            if( totalChar >= ResourceCenter.CONTENT_SIZE ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.errMsg.tooLongBakContent")
                );
                totalChar -= ( file.getBytes().length+1 );
                return;
            }
            
            selectModel.addElement( file );
        }else{
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.sameFile")+
                " "+file
            );
        }
    }//GEN-LAST:event_jButton6ActionPerformed
    
    // stop button
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if( fetcher!=null ){
            // 设置destroy标志,使得运行cmd的sunprocess被destroied.
            fetcher.setDestroyFlag( true );
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    // remove button process
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int i;
        
        int[] indexs = selectList.getSelectedIndices();
        if( indexs == null || indexs.length <=0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.erorr.notSel")
            );
            return;
        }
        
        for( i =indexs.length-1; i>=0 ;i-- ){
            selectModel.removeElementAt( indexs[i] );
        }
        
        int size = selectModel.size();
        int num = 0;
        for( i=0; i<size; i++ ){
            String one =  (String)selectModel.elementAt(i);
            num += ( one.getBytes().length+1 );
        }
        
        totalChar = num;
    }//GEN-LAST:event_jButton2ActionPerformed

    //cancel button process
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        values = null;
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    // done button process
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        boolean hasEtcDir = false;
        Vector content = getBakContent();
        if( content.size()<=0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.errmsg.notselected")
            );
            return;
        }
        
        int size = content.size();
        String filelist = "";
        for( int i=0;i<size;i++ ){
            String item = (String)content.elementAt(i);
            if( item.equals("/etc/") ){
                hasEtcDir = true;
            }
            filelist += item + ";";
        }
        if( filelist.getBytes().length >= ResourceCenter.CONTENT_SIZE ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditProfileDialog.errMsg.tooLongBakContent")
            );
            return;
        }
        
        boolean excludeFstab = false;
        boolean excludeNetwork = false;
        boolean excludeKillall = false;
        boolean excludeHalt = false;        
        size = this.excludeList.size();
        String excludeListStr ="";
        for( int i=0; i<size; i++ ){
            String item1 = (String)excludeList.get(i);
            
            if( item1.equals("/etc/fstab") ){
                excludeFstab = true;
            }
            
            if( item1.equals("/etc/init.d/network") ){
                excludeNetwork = true;
            }
            
            if( item1.equals("/etc/init.d/killall") ){
                excludeKillall = true;
            }
            
            if( item1.equals("/etc/init.d/halt") ){
                excludeHalt = true;
            }
            
            if( item1.equals("/etc/rc.d/init.d/network") ){
                excludeNetwork = true;
            }
            
            if( item1.equals("/etc/rc.d/init.d/killall") ){
                excludeKillall = true;
            }
            
            if( item1.equals("/etc/rc.d/init.d/halt") ){
                excludeHalt = true;
            }
            
            excludeListStr += item1 + ";";
        }
        
        if( excludeListStr.getBytes().length >= ResourceCenter.CONTENT_SIZE ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("EditProfileDialog.errMsg.tooLongExcludeContent")
            );
            return;
        }
        
        // 检查UWS不允许复制的目录
        if( isUWS ){
            if( cli.isLinux() ){
                if( hasEtcDir ){
                    if( !excludeFstab || !excludeNetwork || !excludeKillall || !excludeHalt ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBakedFileDialog.errMsg.excludeEtcDir")
                        );
                        return;
                    }
                }
            }
        }
        
        values = new Object[2];
        values[0] = filelist;
        values[1] = excludeListStr;
        
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int i,j,size;
        String selfile;
        
SanBootView.log.debug(getClass().getName(),"bak clnt os: "+ this.cli.getOsType() );
        
        int[] indexs = fileList.getSelectedIndices();
        if( indexs == null || indexs.length<=0 ) {
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.erorr.notSel")
            );
            return;
        }
        
        for( i=0; i<indexs.length; i++ ){
            if( indexs[i]>=0 ){
                if( onlyOne ){
                    if( selectModel.getSize()>0 ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBakedFileDialog.error.onlyOne")
                        );
                        return;
                    }
                }
                
                String element = (String)fileModel.getElementAt( indexs[i] );
                if( element.startsWith("ERROR") ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectBakedFileDialog.error.badFile")
                    );
                    return;
                }
                
                if( element.equals("../") ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectBakedFileDialog.error.badsel")
                    );
                    return;
                }
                
                if( !element.startsWith("/") ){
                    selfile = curPath+element;
                }else{
                    selfile = element;
                }
SanBootView.log.debug(getClass().getName(), "Selected file(add file): "+selfile);
                
                // Check special files for Linux
                if( cli.isLinux() ){
                    if( selfile.startsWith("/sys") || 
                        selfile.startsWith("/dev") || 
                        selfile.startsWith("/proc")   
                    ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBakedFileDialog.error.specialFile")
                        );
                        return;
                    }
                    
                    if( isUWS ){
                        if( selfile.equals("/etc/fstab") ||
                            selfile.equals("/etc/init.d/network") ||
                            selfile.equals("/etc/init.d/killall") ||
                            selfile.equals("/etc/init.d/halt") ||
                            selfile.equals("/etc/rc.d/init.d/network") ||
                            selfile.equals("/etc/rc.d/init.d/killall") ||
                            selfile.equals("/etc/rc.d/init.d/halt")
                        ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectBakedFileDialog.error.specialFile3")
                            );
                            return;
                        }

                        if( hidenFs != null ){
                            size = this.hidenFs.size();
                            for( j=0; j<size; j++ ){
                                SystemPartitionForUnix part = (SystemPartitionForUnix)hidenFs.get( j );
System.out.println( getClass().getName() + " " + part.mp +" selfile: " + selfile );
                                if( selfile.startsWith( part.mp+"/" ) ){
                                    JOptionPane.showMessageDialog(this,
                                        SanBootView.res.getString("SelectBakedFileDialog.error.specialFile4")
                                    );
                                    return;
                                }
                            }
                        }
                    }
                }
                
                // Check special files for Windows
                if( cli.isWin() ){
                    // "System Volume Information"
                    pattern  = Pattern.compile( "^/[a-zA-Z]:/" + GetFileList.SVINFO + "$" );
                    matcher = pattern.matcher( selfile );
                    if( matcher.find() ){
                        JOptionPane.showMessageDialog(this,
                            selfile + " " + SanBootView.res.getString("SelectBakedFileDialog.error.specialFile1")
                        );
                        return;
                    }
                }
                
                if( !isExist( selfile ) ){
                    if( isSelected1( selfile ) ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBakedFileDialog.error.subdirexist")
                        );
                        return;
                    }
                    
                    // 判断是否超过了长度限制
                    // 每个文件后面跟一个";",所以要多加1
                    totalChar +=( selfile.getBytes().length+1 );
                    
                    if( totalChar >= ResourceCenter.CONTENT_SIZE ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("EditProfileDialog.errMsg.tooLongBakContent")
                        );
                        totalChar -= ( selfile.getBytes().length+1 );
                        return;
                    }
                                  
                    selectModel.addElement( selfile );
                }else{
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectBakedFileDialog.error.sameFile")+
                        " "+selfile
                    );
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private boolean isCDisk( String file ){
        String header = file.substring( 1,2 );
        return  header.toUpperCase().equals("C");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new SelectBakedFileDialog(new javax.swing.JFrame(), true).setVisible( true );
    }
    
    // �������� - �������޸�//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // ������������//GEN-END:variables
    
    boolean isUWS = true; 
    Object[] values;
    SanBootView view;
    BackupClient cli;
    DefaultListModel fileModel;
    JList fileList;
    DefaultListModel selectModel = new DefaultListModel();
    JList selectList = new JList( selectModel );
    FetchFileable fetcher;
    
    int totalChar = 0; // 所选文件的总字节数
    String windir = "";
    
    private void myInit( 
        SanBootView _view,
        BackupClient _cli,
        String _rootPath,
        boolean _onlyOne,
        String selFileList,
        String excludeFileList,
        ArrayList<String> filter_list,
        ArrayList<String> root_vol_list
    ){
        view = _view;
        cli = _cli;
        rootPath = _rootPath;
        curPath = rootPath;
        onlyOne = _onlyOne;
        this.selFileList = selFileList;
        this.excludeFileList = excludeFileList;
        this.filter_list = filter_list;
        this.root_vol_list =  root_vol_list;
        
        if( !cli.isWin() ) {
            rootPath = "";
        }
        
        if( this.filter_list != null ){
            fileModel = new StringFilterListModel( filter_list,1 );
        }else{
            fileModel = new DefaultListModel();
        }
        fileList = new JList( fileModel );
        
        this.jScrollPane2.getViewport().add( fileList,null );
        this.jScrollPane1.getViewport().add( selectList,null );
        fileList.setCellRenderer( new FileDirRenderer() );
        selectList.setCellRenderer( new FileDirRenderer() );
        
        if( !rootPath.equals("/") && !rootPath.equals("") ){
            jTextField1.setDocument( new DevPathDocument( jTextField1 ) ); 
        }else{
            jTextField1.setDocument( new GeneralPathDocument( jTextField1, "/" ) );
        }

        this.fileList.addMouseListener( new MouseAdapter(){
            @Override public void mouseClicked( MouseEvent e){
                doubleClickPrcess(e);
            }
        });
        
        this.jTextField1.setEnabled( false );
        
        if( selFileList != null ){
            setupBakSourcePane( selFileList );
        }
        
        regKeyboardAction();
        setupLanguage( selFileList==null );
    }

    public void setFilterFlag( boolean val ){
        if( this.fileModel instanceof StringFilterListModel ){
            ((StringFilterListModel)fileModel).setFilterFlag( val );
        }
    }

    private void setupBakSourcePane( String bakList ){    
        selectModel.removeAllElements();
        String[] list = Pattern.compile(";").split( bakList );
        for( int i=0; i<list.length; i++ ){
            if( !list[i].equals("") )
                selectModel.addElement( list[i] );
        }
        
        if( excludeFileList != null ){
            String[] list1 = Pattern.compile(";").split( excludeFileList );
            for( int i=0; i<list1.length; i++ ){
                if( !list1[i].equals("") )
                    excludeList.add( list1[i] );
            }
        }
    }
    
    public void setEnabledTF1(){
        this.jTextField1.setEnabled( true );
    }
    
    private boolean isDir( String file ){
        if( file.equals("") ) return true; // for linux
        
        int length = file.length();
        char tmp = file.charAt( length-1 );
        if( (tmp == '/')|| (tmp == '\\') )
            return true;
        else
            return false;
    }
    
    boolean isRoot = false;
    private String getFatherPath(){
        String ret = "/";
        
        if( isRoot( curPath ) ){
            isRoot = true;
            return ret;
        }else{
            isRoot = false;
        }
        
        int index = this.curPath.lastIndexOf("/");
        if( index >=0 ){
            try{
                ret = this.curPath.substring( 0,index );
                index = ret.lastIndexOf("/");
                if( index >=0 ){
                    ret = ret.substring(0,index)+"/";
                }else{
                    ret = "/";
                }
            }catch(Exception ex){
                ret = "/";
            }
        }
        
        return ret;
    }
    
    private void doubleClickPrcess(  MouseEvent  e){ 
        String tmpStr;
        
        if( e.getClickCount() >= 2 ){
            // 关闭内容过滤（只有第一次列目录时才需要过滤）
            this.setFilterFlag( false );
            
            if( fetcher!=null && !fetcher.isOver() ){
SanBootView.log.warning( getClass().getName()," already has a fetcher to get files, please wait a moment....");                
                return;
            }
            
            int index = fileList.locationToIndex( e.getPoint() );
            if( index < 0 ) return;
            String file = (String)fileModel.getElementAt( index );
System.out.println(" curPath: "+ curPath +" file: "+file );
            
            if( file.equals("../") ){
                if( curPath.equals("/") ){
                    if( cli.isWin() )
                        return ;
                    else
                        curPath="";
                }else{
                    curPath = this.getFatherPath();
                    if( !cli.isWin() ){
                        if( this.isRoot && curPath.equals("/") ){
                            curPath="";
                        }
                    }
System.out.println(" curPath(getFatherPath): "+curPath );
                }
            }else if( this.isDir( file ) ){
                if( !isRoot( file ) ){
                    //检查 curPath是否已经被选择备份了
                    tmpStr = curPath + file;
                    if( isSelected( tmpStr ) ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBakedFileDialog.error.alreadySeled")
                        );
                        return;
                    }
                }else{
                    if( isSelected( file ) ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectBakedFileDialog.error.alreadySeled")
                        );
                        return;
                    }
                    tmpStr = file;
                }                
System.out.println(" curPath(isDir): " + tmpStr );
                
                curPath = tmpStr;
            }else{
                return;
            }
            
            fileModel.removeAllElements();
            setTextOnTextField1( curPath );
            
            if( curPath.equals("/") ){
                if( cli.isWin() ){
                    clear_roots();

                    if( this.root_vol_list == null ){
                        // 此时需要重新进行过滤（因为从 / 开始列目录）
                        this.setFilterFlag( true );

                        fetcher = new FileListFetcher(
                            cli,
                            this.curPath,
                            fileModel,
                            roots,
                            this,
                            view.getSocket(),
                            false,
                            0,
                            curPath.equals( rootPath )?true:false
                        );
                        fetcher.startup();
                    }else{
                        int size = root_vol_list.size();
                        for( int i=0; i<size; i++ ){
                            fileModel.addElement( root_vol_list.get(i) );
                        }
                    }
                }else{
                    fetcher = new FileListFetcher( 
                        cli, 
                        this.curPath, 
                        fileModel, 
                        null,
                        this,
                        view.getSocket(),
                        false,
                        0,
                        curPath.equals( rootPath )?true:false
                    );
                    fetcher.startup();
                }
            }else if( curPath.equals("") ){
                clear_roots();
                
                fetcher = new FsListFetcher(
                    cli, 
                    curPath, 
                    fileModel, 
                    roots, 
                    this, 
                    view.getSocket(),
                    true,
                    0,
                    true
                );
                fetcher.startup();
            }else{
                fetcher = new FileListFetcher( 
                    cli, 
                    this.curPath, 
                    fileModel, 
                    null,
                    this,
                    view.getSocket(),
                    false,
                    0,
                    curPath.equals( rootPath )?true:false
                );
                fetcher.startup();
            }
        }
    }
    
    private void regKeyboardAction(){     
        jTextField1.registerKeyboardAction(
            new ActionListener(){
                public void actionPerformed(ActionEvent e){
                    // 开始传输输入路径的文件
                    keyboardPress();
                }
            },
            KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,false),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );  
    }
    
    private void keyboardPress(){
//System.out.println("keyboardPress  clicked ...............");        
        if( fetcher!=null && !fetcher.isOver() ){
            return;
        }
        
        String path = jTextField1.getText().trim();
        if( path.equals("") ) {
            if( cli.isWin() ){
                path = "/";
            }
        }
        
        if( path.indexOf("\\") >0 ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.invalidSeprator")
            );
            setTextOnTextField1( curPath );
            return;
        }
        
        if( !path.startsWith( rootPath ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.badRootPath")+" "+rootPath
            );
            setTextOnTextField1( curPath );
            return;
        }
        
        if( !isDir( path ) ){
            path = path +"/";
        }      
        
        // .. 和 .是非法的输入
        if( isOneOrtwopoint( path ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.badInput")
            );
            return;
        }
        
        if( isSelected( path ) ){
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("SelectBakedFileDialog.error.alreadySeled")
            );
            return;
        }
        
        curPath = path;
        
        fileModel.removeAllElements();
        setTextOnTextField1( curPath );
        
        if( this.curPath.equals("/") ){
            clear_roots();

            if( root_vol_list == null ){
                this.setFilterFlag( true );

                fetcher = new FileListFetcher(
                    cli,
                    this.curPath,
                    fileModel,
                    roots,
                    this,
                    view.getSocket(),
                    false,
                    0,
                    curPath.equals( rootPath )?true:false
                );
                fetcher.startup();
            }else{
                int size = root_vol_list.size();
                for( int i=0; i<size; i++ ){
                    fileModel.addElement( root_vol_list.get(i) );
                }
            }
        }else if( curPath.equals("") ){
            clear_roots();
            
            fetcher = new FsListFetcher(
                cli, 
                curPath, 
                fileModel, 
                roots, 
                this, 
                view.getSocket(),
                true,
                0,
                true
            );
            fetcher.startup();
        }else{
            fetcher = new FileListFetcher(
                cli, 
                this.curPath, 
                fileModel, 
                null,
                this,
                view.getSocket(), 
                false,
                0,
                curPath.equals( rootPath )?true:false
            );
            fetcher.startup();
        }        
    }
    
    private void setupLanguage( boolean isAdd ){
        if( isAdd )
            this.setTitle(SanBootView.res.getString("SelectBakedFileDialog.diagTitle"));
        else
            this.setTitle(SanBootView.res.getString("SelectBakedFileDialog.diagTitle1"));
        this.jButton1.setText(SanBootView.res.getString("SelectBakedFileDialog.button.add"));
        this.jButton1.setIcon( ResourceCenter.BTN_ICON_ADD );
        this.jButton2.setText(SanBootView.res.getString("SelectBakedFileDialog.button.remove"));
        this.jButton2.setIcon( ResourceCenter.BTN_ICON_REMOVE );
        this.jButton3.setText(SanBootView.res.getString("SelectBakedFileDialog.button.done"));
        this.jButton4.setText(SanBootView.res.getString("SelectBakedFileDialog.button.cancel"));
    	this.jButton5.setText(SanBootView.res.getString("SelectBakedFileDialog.button.stop"));
        this.jButton6.setText(SanBootView.res.getString("SelectBakedFileDialog.button.add"));
        this.jButton7.setText(SanBootView.res.getString("SelectBakedFileDialog.button.exclude"));
        this.jLabel1.setText(SanBootView.res.getString("SelectBakedFileDialog.label.enterpath"));
        TitledBorder bor = (TitledBorder)jPanel3.getBorder();
        bor.setTitle(
            SanBootView.res.getString("SelectBakedFileDialog.title.files") 
        );
        bor = (TitledBorder)jPanel5.getBorder();
        bor.setTitle(
            SanBootView.res.getString("SelectBakedFileDialog.title.selections") 
        );
    }
    
    Cursor oldCursor;
    public void setWaitCursor( ){
        oldCursor = this.getCursor();
        this.setCursor( Cursor.getPredefinedCursor( Cursor.WAIT_CURSOR )  );
    }
    
    public void resotreCursor(){
        this.setCursor( oldCursor );
    }
    
    private void displayRoot(){
        int size = roots.size();
//System.out.println(" size: "+size);        
        for( int i=0; i<size; i++ ){
            String one = (String)roots.elementAt(i);
//System.out.println(" root ====>: "+one );         
        }
    }
    
    boolean isSort = false;
    Object[] sortedFsList;
    private String getRootFsFromPath( String path ){
        if( !isSort ){
            sortedFsList = roots.toArray();
            Arrays.sort( sortedFsList );
        }
        
        int len = sortedFsList.length;
        for( int i=len-1; i>=0; i-- ){
            String rootfs = (String)sortedFsList[i];
            if( path.startsWith( rootfs ) ){
                return rootfs;
            }
        }
        
        return "/";
    }
    
    private boolean isRoot( String dir ){
        int size = roots.size();
        for( int i=0; i<size; i++ ){
            String one = (String)roots.elementAt(i);
            if( one.equals( dir ) ){
                return true;
            }
        }
        return false;
    }
    
    private void clear_roots(){
        roots_cache.removeAllElements();
        
        int size = roots.size();
        for( int i=0; i<size; i++ ){
            roots_cache.add( roots.elementAt(i) );
        }
        
        roots.removeAllElements();
        this.isSort = false;
    }
    
    public void saveRoots(){
        int size = fileModel.getSize();
        for( int i=0; i<size; i++ ){
            roots_cache.addElement( (String)fileModel.getElementAt(i) );
        }
    }
    
    public boolean isExist( String file ){
        boolean isWin = cli.isWin();
        
        int size = this.selectModel.getSize();
        for( int i=0;i<size;i++ ){
            String item = (String) selectModel.getElementAt(i);
            if( isWin ){
                if( item.toUpperCase().equals( file.toUpperCase() ) ){
                    return true;
                }
            }else{
                if( item.equals( file ) ){
                    return true;
                }
            }
        }
        
        return false;
    }
    
    public boolean isCDiskExit(){
        int size = selectModel.getSize();        
        for( int i=0;i<size;i++ ){
            String item = (String) selectModel.getElementAt(i);
            if( item.substring( 1, 2 ).equals("C") ){
                return true;
            }
        }
        return false;
    }
    
    public Object[] getValues(){
        return values;
    }
    
    private Vector<String> getBakContent(){
        Vector<String> ret = new Vector<String>();
        int size = this.selectModel.getSize();
        for( int i=0;i<size;i++ ){
            ret.addElement( (String)selectModel.elementAt( i) );
        }
        return ret;
    }
    
    public DefaultListModel getFileModel( ){
        return this.fileModel;
    }
    
    public Vector getRootsVector(){
        return roots;
    }
    
    public String getCurPath(){
        return curPath;
    }
    
    public void setCurPath( String path ){
        curPath = path;
    }
    
    private boolean isSelected( String path ){
//System.out.println(" isSelected is called [path]: "+ path);
        boolean isWin = cli.isWin();
        
        int size = selectModel.getSize();
        for( int i=0; i<size; i++ ){
            String file = (String)selectModel.elementAt(i);
            if( isWin ){
                if( file.toUpperCase().equals( path.toUpperCase() ) ){
                    return true;
                }
            }else{
                if( file.equals( path ) ){
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean isSelected1( String path ){
//System.out.println(" isSelected1 is called [path]: " + path);
        boolean isWin = cli.isWin();
        
        int size = selectModel.getSize();
        for( int i=0; i<size; i++ ){
            String selFile = (String)selectModel.elementAt(i);
//System.out.println( " compared file(isSelected1): " + selFile );
            
            if( isWin ){
                if( selFile.toUpperCase().startsWith( path.toUpperCase() ) ){
                    int len = path.length();
                    if( path.charAt( len-1 ) =='/' ){
                        return true;
                    }else{
                        if( selFile.charAt( len ) == '/' ){
                            return true; 
                        }
                    }
                }else{
                    if( path.toUpperCase().startsWith( selFile.toUpperCase() ) ){
                        int len = selFile.length();
                        if( selFile.charAt( len-1 ) =='/' ){
                            return true;
                        }else{
                            if( path.charAt( len ) == '/' ){
                                return true; 
                            }
                        }
                    }
                }
            }else{  // linux platform
                if( selFile.equals("/") ){
                    String rfs = getRootFsFromPath( path );
                    if( rfs.equals("/") ){
                        return true;
                    }
                    continue;
                }
                
                if( path.equals("/") ){
                    /// 检查file属于哪个fs
                    String rfs = getRootFsFromPath( selFile );
//System.out.println(" / is selected, " + " compared file: "+ selFile ); 
                    if( rfs.equals("/") ){
                        return true;
                    }
                    continue;
                }
                
                if( selFile.startsWith( path ) ){
                    int len = path.length();
                    if( path.charAt( len-1 ) =='/' ){
                        return true;
                    }else{
                        if( selFile.charAt( len ) == '/' ){
                            return true; 
                        }
                    }
                }else{
                    if( path.startsWith( selFile ) ){
                        int len = selFile.length();
                        if( selFile.charAt( len-1 ) =='/' ){
                            return true;
                        }else{
                            if( path.charAt( len ) == '/' ){
                                return true; 
                            }
                        }
                    }
                }
            }
        }
        
        return false;
    }
    
    public Point getCenterPoint(int width,int height){
        int x = ( getSize().width - width ) / 2 + getX();
        int y = ( getSize().height - height ) / 2 + getY();
        return new Point(x,y);
    }

    public void setHidenFs( ArrayList fsList ){
        this.hidenFs = fsList;
    }

    public void setFileListFetcher( FileListFetcher _fetcher){
        fetcher = _fetcher;
    }
    
    private void setTextOnTextField1( String curPath ){
        try{
            int len = jTextField1.getDocument().getLength();
            ((GeneralPathDocument)jTextField1.getDocument()).forceRemove( 0,len );
            ((GeneralPathDocument)jTextField1.getDocument()).forceInserting( 0,curPath,null );
        }catch(Exception ex){    
        }
    }
    
    private boolean isAllNumber( String val ){
        char ele;
        
        int len = val.length();
        for( int i=0; i<len; i++ ){
            ele = val.charAt(i);
            if( !Character.isDigit( ele ) ){
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * �判断输入中是否有 .. 和.
     */
    private boolean isOneOrtwopoint( String path ) {
        pattern  = Pattern.compile( pattern1 );
        matcher = pattern.matcher( path );
        if( matcher.find() ){
            return true;
        }
        
        pattern = Pattern.compile( pattern2 );
        matcher = pattern.matcher( path );
        if( matcher.find() ){
            return true;
        }
        
        return false;
    }
}
