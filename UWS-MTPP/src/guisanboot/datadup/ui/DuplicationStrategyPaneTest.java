/*
 * DuplicationStrategyPane.java
 *
 * Created on 2008/8/20,��AM 11:12
 */

package guisanboot.datadup.ui;

import guisanboot.cluster.entity.Cluster;
import guisanboot.cluster.entity.ClusterVolume;
import guisanboot.cluster.entity.SubCluster;
import guisanboot.cmdp.entity.PPProfile;
import guisanboot.cmdp.entity.PPProfileItem;
import guisanboot.cmdp.ui.EditPhyProfileWhenInitDialog;
import guisanboot.cmdp.ui.PhyInitInterface;
import guisanboot.cmdp.ui.multiRenderTable.JTableX3;
import guisanboot.cmdp.ui.multiRenderTable.MyDefaultTableModelForTabX3;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import guisanboot.data.*;
import guisanboot.datadup.data.BackupClient;
import guisanboot.datadup.data.BakObject;
import guisanboot.datadup.data.DBSchedule;
import guisanboot.datadup.data.UniProBackup;
import guisanboot.datadup.data.UniProfile;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.multiRenderTable.*;
import guisanboot.ui.SanBootView;
import guisanboot.ui.SelectProtectedFS;
import guisanboot.ui.WizardDialogSample;
import java.io.File;

/**
 *
 * @author  Administrator
 */
public class DuplicationStrategyPaneTest extends javax.swing.JPanel {
    
    /** Creates new form DuplicationStrategyPane */
    public DuplicationStrategyPaneTest() {
        initComponents();
    }

    public DuplicationStrategyPaneTest( SanBootView view ){
        this( view,ResourceCenter.CMD_TYPE_MTPP );
    }

    public DuplicationStrategyPaneTest( SanBootView view,int mode ) {
        this();
        myInit( view,mode );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 60));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jTabbedPane1.setToolTipText("MTPP");

        jPanel5.setToolTipText("CMDP");
        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel8.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 1, 8, 1));
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 60, 5));

        jButton5.setText("Modify");
        jButton5.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton5);

        jPanel5.add(jPanel8, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("CMDP", jPanel5);

        jPanel6.setToolTipText("MTPP");
        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel6.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel7.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 1, 8, 1));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 5));

        jButton4.setText("inport");
        jButton4.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton4);

        jButton1.setText("Add");
        jButton1.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton1);

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel7.add(jComboBox1);

        jButton3.setText("Modify");
        jButton3.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton3);

        jButton2.setText("Delete");
        jButton2.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton2);

        jPanel6.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("MTPP", jPanel6);

        jPanel3.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        modPPProfile();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        delProfile();
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        modMTPPProfile();
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addProfile();
}//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        importProfile();
    }//GEN-LAST:event_jButton4ActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    int selectionline;
    JTable table;
    JTable lp_table;
    SanBootView view;
    Object[] header;
    Object[] label;
    WizardDialogSample wizardDiag;
    ArrayList oldProfList;
    BootHost host = null;
    Cluster cluster = null;
    BackupClient bkClnt = null;
    String bootMac;
    String windir="";
    SelectProtectedFS selProtectFS;
    ArrayList hidenFs;
    int mode;
    boolean isCluster = false;
    ImportProfileNew importDialog;

    private String bootTxIP = "";

    //初始化
    private void myInit( SanBootView _view,int mode ){
        System.out.println("---------------") ;
        view = _view;
        this.mode = mode;
        
        jButton1.setText(SanBootView.res.getString("common.button.add"));
        jButton2.setText(SanBootView.res.getString("common.button.del"));
        jButton3.setText(SanBootView.res.getString("common.button.change"));
        jButton4.setText(" import ");
        jButton5.setText( SanBootView.res.getString("common.button.change"));

        int index = jTabbedPane1.indexOfComponent( jPanel5 );
        jTabbedPane1.setTitleAt( index,
            SanBootView.res.getString("SelectProtectedSysVolPane.combox.pp")
        );
        index = jTabbedPane1.indexOfComponent( jPanel6 );
        jTabbedPane1.setTitleAt( index,
            SanBootView.res.getString("SelectProtectedSysVolPane.combox.lp")
        );
        if( this.mode == ResourceCenter.CMD_TYPE_MTPP ){
            jTabbedPane1.remove( this.jPanel5 );
        }
        if(true){
           jPanel7.remove( this.jComboBox1 );
        }
    }

    //设置文本提示信息
    public void setupTextTipInfo( String text ){
        jTextArea1.setText( text );
    }

    //设置隐藏...
    public void setHidenFs( ArrayList fsList ){
        this.hidenFs = fsList;
    }

    //设置主机
    public void setHost( BootHost host ){
        this.host = host;
    }

    //设置集群
    public void setCluster( Cluster cluster ){
        this.cluster = cluster;
    }

    //设置IP和端口
    public void setIPAndPort( String ip,int port,int mtpp_port,String name,String machine,String os,String uuid,String bootMac,String aWinDir, String bootTxIP ){
        this.windir = aWinDir;
        this.bootMac = bootMac;
        this.bootTxIP = bootTxIP;
        
        host = view.initor.mdb.getHostFromCacheOnUUID( uuid );
        if( host != null ){
            if( mode == ResourceCenter.CMD_TYPE_MTPP ||
                mode == ResourceCenter.CMD_TYPE_CMDP )
            {
                bkClnt = view.initor.mdb.getBkClntOnUUID( uuid );
                if( bkClnt == null ){
                    bkClnt = new BackupClient( name, ip, machine, mtpp_port, os, uuid );
                }else{
                    // 不能输入".",因为"../"和"./"会造成不必要的混乱
                    bkClnt.setIP( ip );
                    bkClnt.setPort( mtpp_port );
                }
            }
            host.setProtectType( BootHost.PROTECT_TYPE_CMDP );
        }else{
            if( mode == ResourceCenter.CMD_TYPE_MTPP ||
                mode == ResourceCenter.CMD_TYPE_CMDP )
            {
                bkClnt = view.initor.mdb.getBkClntOnUUID( uuid );
                if( bkClnt == null ){
                    bkClnt = new BackupClient( name, ip,machine, mtpp_port, os, uuid );
                }else{
                    // 换成当前正在使用的ip和mtpp_port比较保险
                    bkClnt.setIP( ip );
                    bkClnt.setPort( mtpp_port );
                }
            }
            
            host = new BootHost( name, ip, port, mtpp_port,machine, os, uuid );
            if( mode == ResourceCenter.CMD_TYPE_MTPP ){
                host.setProtectType( BootHost.PROTECT_TYPE_CMDP );
            }
            
        }
    }

    //设置是否为集群标志
    public void setIsClusterFlag( boolean val ){
        this.isCluster = val;
    }

    //设置选择保护
    public void setSelectProtectedFS( SelectProtectedFS selProtectFS ){
        this.selProtectFS = selProtectFS;
    }

    //设置旧的保护集合
    public void setOldProfList( ArrayList oldList ){
        this.oldProfList = oldList;
    }

    //得到旧的保护集合
    public ArrayList getOldProfList(){
        return oldProfList;
    }

    //设置表
    public void setupTable( ArrayList list ){

        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            setupTableForMTPP( list );
        }else{
            setupTableForCMDP( list );
        }
    }

    //设置CMDP表
    public void setupTableForCMDP( ArrayList list ){
        this.setupTableForCMDP( list, 0 );
    }

    //设置CMDP表的重载方法
    public void setupTableForCMDP( ArrayList list,int mode ){
        int num = list.size();
        int colSize = 3;
        Object[][] data = new Object[num][colSize];

        header = new Object[colSize];
        label = new Object[num];

        header[0] = SanBootView.res.getString("View.table.profile.content1");
        header[1] = SanBootView.res.getString("View.table.profile.autocrtversion");
        header[2] = SanBootView.res.getString("View.table.profile.services");

        for( int i=0; i<num; i++ ){
            PPProfile prof = (PPProfile)list.get(i);
            if( prof.getDiskSize() == 0 ) continue;
            prof.setDisplayMode( mode );
            
            data[i][0] = prof;
            data[i][1] = prof.getSchString();
            data[i][2] = "ins: "+ prof.getTemp_db_instance()+" ser: "+prof.getTemp_services() + " max snap: "+prof.getTemp_max_snap() +
                    " min size: "+prof.getTemp_min_size() +" db type: "+prof.getTemp_db_type();

            label[i]= prof.toString();
        }

        MyDefaultTableModelForTabX3 model = new MyDefaultTableModelForTabX3( data,header,label );
        table = new JTableX3( model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        RowEditorModel rm = new RowEditorModel();
        ((JTableX3)table).setRowEditorModel(rm);

        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 300 );
        tableColumnModel.getColumn(1).setWidth( 185 );
        tableColumnModel.getColumn(2).setWidth( 300);
        for( int i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);

        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }

    //获取备份主机列表
    public void getBackupedHostList( ArrayList<SubCluster> subcList ){
        jComboBox1.removeAllItems();
        int size = subcList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = subcList.get(i);
            if( subc.hasMTPPProtectedDisk() ){
                jComboBox1.addItem( subc );
            }
        }
    }

    //设置MTPP表
    public void setupTableForMTPP( ArrayList list ){
        int num = list.size();
        Object[][] data = new Object[num][4]; 
        
        header = new Object[4];
        label = new Object[num];
        
        header[0] = SanBootView.res.getString("DuplicationStrategyPane.table.isSel");
        header[1] = SanBootView.res.getString("DuplicationStrategyPane.table.prof");
        header[2] = SanBootView.res.getString("DuplicationStrategyPane.table.sch");
        header[3] = SanBootView.res.getString("DuplicationStrategyPane.table.contents");

        for( int i=0; i<num; i++ ){
            UniProfile prof = (UniProfile)list.get(i);            
            data[i][0] = new Boolean( prof.isSel );
            data[i][1] = prof;
            data[i][2] = view.initor.mdb.getSchNumOnProfName( prof.getProfileName() ) + "";
            UniProBackup backup = prof.getUniProBackup();
            data[i][3] = backup.getSrc();
            
            label[i]= prof.toString();
        }
        
        MyDefaultTableModelForTabX1 model = new MyDefaultTableModelForTabX1( data,header,label );  
        
        lp_table = new JTableX1( model,view,wizardDiag );
        lp_table.setRowHeight( 20 );
        lp_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        RowEditorModel rm = new RowEditorModel();
        ((JTableX1)lp_table).setRowEditorModel(rm);
        
        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );
            
        TableColumnModel tableColumnModel = lp_table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 70 );
        tableColumnModel.getColumn(1).setWidth( 105 );
        tableColumnModel.getColumn(2).setWidth( 65 );
        tableColumnModel.getColumn(3).setWidth( 260);
        for( int i=0;i<colNum;i++ )
            lp_table.sizeColumnsToFit(i);

        lp_table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        lp_table.getTableHeader().setReorderingAllowed(false);
        
        jScrollPane3.getViewport().add( lp_table,null );
        jScrollPane3.getViewport().setBackground( Color.white );
    }

    //设置向导对话框示例
    public void setWizardDialogSample( WizardDialogSample wdiag ){
        wizardDiag = wdiag;
    }

    //检查配置文件
    public boolean checkProfile( ){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            return this.checkMTPPProfile();
        }else{
            boolean isMtppOk = this.checkMTPPProfile();
            boolean isCmdpOk = this.checkCMDPProfile();
            if( !hasOsDupOnCMDP && !hasOsDupOnMTPP ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("DuplicationStrategyPane.error.lostOSProf")
                    );
                    return false;
            }

            if( hasMtppProfile && startUpAtOnce ){
                int ret = JOptionPane.showConfirmDialog(
                    view,
                    SanBootView.res.getString("DuplicationStrategyPane.confirm2"),
                    SanBootView.res.getString("common.confirm"),  //"Confirm",
                    JOptionPane.OK_CANCEL_OPTION
                );
                if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                    return false;
                }
            }

            return isMtppOk && isCmdpOk;
        }
    }

    //检查配置文件的重载方法
    public boolean checkProfile( boolean cluster){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            return this.checkMTPPProfile();
        }else{
            boolean isMtppOk = this.checkMTPPProfile();
            boolean isCmdpOk = this.checkCMDPProfile();
            if( !hasOsDupOnCMDP && !hasOsDupOnMTPP ){
                if( !cluster ){
                    JOptionPane.showMessageDialog( this,
                        SanBootView.res.getString("DuplicationStrategyPane.error.lostOSProf")
                    );
                    return false;
                }
            }

            if( hasMtppProfile && startUpAtOnce ){
                int ret = JOptionPane.showConfirmDialog(
                    view,
                    SanBootView.res.getString("DuplicationStrategyPane.confirm2"),
                    SanBootView.res.getString("common.confirm"),  //"Confirm",
                    JOptionPane.OK_CANCEL_OPTION
                );
                if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                    return false;
                }
            }

            return isMtppOk && isCmdpOk;
        }
    }

    private boolean hasOsDupOnMTPP;
    private boolean hasOsDupOnCMDP;
    private boolean hasMtppProfile;
    private boolean startUpAtOnce;

    //检查MTPP保护
    public boolean checkMTPPProfile(){
        UniProfile prof;
        String bkobjId,content,num,exclude;
        BakObject bkObj;
        int schNum,cnt=0;
        boolean isSel;
        
        hasOsDupOnMTPP = false;
        startUpAtOnce = false;
        hasMtppProfile = true;
        boolean noSch  = false;
        
        MyDefaultTableModelForTabX1 model = (MyDefaultTableModelForTabX1)lp_table.getModel();
        int lineNum = model.getRowCount();
        if( lineNum <= 0 ) hasMtppProfile = false;
        for( int row=0; row<lineNum; row++ ){
            isSel = ( (Boolean)model.getValueAt( row,0 ) ).booleanValue();
            prof = (UniProfile)model.getValueAt( row, 1 ); 
            num = (String)model.getValueAt( row, 2 );
            
            if( !isSel ){
                cnt++;
            }
            
            try{
                schNum = Integer.parseInt( num );
            }catch( Exception ex ){
                schNum = 0;
            }
            
            if( schNum <= 0 ){
                if( !noSch ) noSch = true;
            }
            
            bkobjId = prof.getUniProIdentity().getBkObj_ID();
            bkObj = view.initor.mdb.getBakObjFromVector( bkobjId );
            if( bkObj == null ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("DuplicationStrategyPane.error.lostBkobj")+" "+prof.toString()
                );
                return false;
            }else{
                content = bkObj.getFileName();
                exclude = bkObj.getExclude();
                if( this.cluster != null ){
                    bkClnt = view.initor.mdb.getClientFromVectorOnID( bkObj.getClientId()+"");
                    if( bkClnt == null ){
                        JOptionPane.showMessageDialog( this,
                            SanBootView.res.getString("DuplicationStrategyPane.error.lostD2dClnt")+" "+prof.toString()
                        );
                        return false;
                    }
                }
                if( bkClnt.isWin() ){
                    if( EditProfileDialog.isOsDupForWin( content, exclude,windir ) ){
                        if( !hasOsDupOnMTPP ) hasOsDupOnMTPP = true;
                    }
                }else{
                    if( EditProfileDialog.isOsDupForLinux( content ) ){
                        if( !hasOsDupOnMTPP ) hasOsDupOnMTPP = true;
                    }
                }    
            }
        }
        
        if( this.mode == ResourceCenter.CMD_TYPE_MTPP ){
            if( !hasOsDupOnMTPP ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("DuplicationStrategyPane.error.lostOSProf")
                );
                return false;
            }
        }

        startUpAtOnce = ( cnt == lineNum );
        if( this.mode == ResourceCenter.CMD_TYPE_MTPP ){
            if( startUpAtOnce ){
                int ret = JOptionPane.showConfirmDialog(
                    view,
                    SanBootView.res.getString("DuplicationStrategyPane.confirm2"),
                    SanBootView.res.getString("common.confirm"),  //"Confirm",
                    JOptionPane.OK_CANCEL_OPTION
                );
                if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
                    return false;
                }
            }
        }

        return true;
    }

    //检查CMDP保护
    public boolean checkCMDPProfile(){
        PPProfile prof;

        hasOsDupOnCMDP = false;

        MyDefaultTableModelForTabX3 model = (MyDefaultTableModelForTabX3)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            prof = (PPProfile)model.getValueAt( row, 0 );
            if( prof.isBelongedToThisDG( "C:\\") ){
                hasOsDupOnCMDP = true;
            }
        }

        return true;
    }

    //从标签获得配置文件信息
    public ArrayList getProfileInfoFromTab(){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            return this.getMTPPProfileInfoFromTab();
        }else{
            return this.getCMDPProfileInfoFromTab();
        }
    }

    //从标签获得MTPP配置文件信息
    public ArrayList getMTPPProfileInfoFromTab(){
        UniProfile prof;

        MyDefaultTableModelForTabX1 model = (MyDefaultTableModelForTabX1)lp_table.getModel();
        int lineNum = model.getRowCount();
        ArrayList<UniProfile> ret = new ArrayList<UniProfile>( lineNum );
        for( int row=0; row<lineNum; row++ ){
            prof = (UniProfile)model.getValueAt( row, 1 );
            prof.isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            ret.add( prof );
        }

        return ret;
    }

    //从标签获得CMDP配置文件信息
    private ArrayList getCMDPProfileInfoFromTab(){
        PPProfile prof;

        MyDefaultTableModelForTabX3 model = (MyDefaultTableModelForTabX3)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList<PPProfile> ret = new ArrayList<PPProfile>( lineNum );
        for( int row=0; row<lineNum; row++ ){
            prof = (PPProfile)model.getValueAt( row, 0 );
            ret.add( prof );
        }

        return ret;
    }

    //从标签获得CMDP配置文件信息--方法内容与上述方法完全一致 但是返回类型进行了泛型
    public ArrayList<PPProfile> getCMDPProfileInfoFromTab1(){
        PPProfile prof;

        MyDefaultTableModelForTabX3 model = (MyDefaultTableModelForTabX3)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList<PPProfile> ret = new ArrayList<PPProfile>( lineNum );
        for( int row=0; row<lineNum; row++ ){
            prof = (PPProfile)model.getValueAt( row, 0 );
            ret.add( prof );
        }

        return ret;
    }

    //配置器所在逻辑保护配置文件
    private void filterVolInPPProfile( PPProfile prof ){
        ArrayList<PPProfileItem> itemList = prof.getElements();
        int size = itemList.size();
        for( int i=size-1; i>=0; i-- ){
            PPProfileItem item = itemList.get(i);
            if( view.initor.mdb.isVolExist( host.getID(),item.getVolMap().getVolDiskLabel() ) == null ){
                prof.removeItem( item.getVolMap().getVol_rootid() );
            }
        }
    }

    //得到物理保护配置文件选项卡
    public ArrayList getQuiliedCMDPProfileInfoFromTab(){
        PPProfile prof;

        MyDefaultTableModelForTabX3 model = (MyDefaultTableModelForTabX3)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList<PPProfile> ret = new ArrayList<PPProfile>( lineNum );
        for( int row=0; row<lineNum; row++ ){
            prof = (PPProfile)model.getValueAt( row, 0 );
            this.filterVolInPPProfile( prof );
            if( prof.getDiskSize() > 0 ){
                ret.add( prof );
            }
        }

        return ret;
    }

    //得到物理保护服务
    public HashMap getCMDPService(){
        if( table == null ) return null;

        MyDefaultTableModelForTabX3 model = (MyDefaultTableModelForTabX3)table.getModel();
        int lineNum = model.getRowCount();
        HashMap ret = new HashMap();

        for( int row=0; row<lineNum; row++ ){
            PPProfile prof = (PPProfile)model.getValueAt( row, 0 );
            String[] list = prof.getServices();
            for( int i=0; i<list.length; i++ ){
                if( list[i].equals("") ) continue;
                
                if( ret.get( list[i] ) == null ){
                    ret.put( list[i], list[i] );
                }
            }
        }
        
        return ret;
    }

    //得到物理保护配置文件
    public ArrayList getCMDPProfileItemFromTabForCluster( PPProfile prof ){
        PPProfile aProf;

        MyDefaultTableModelForTabX3 model = (MyDefaultTableModelForTabX3)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList<PPProfileItem> ret = new ArrayList<PPProfileItem>();
        for( int row=0; row<lineNum; row++ ){
            aProf = (PPProfile)model.getValueAt( row, 0 );
            if( aProf.getHost_ip().equals( prof.getHost_ip() ) ){
                ArrayList<PPProfileItem> disks = aProf.getElements();
                int size = disks.size();
                for( int i=0; i<size; i++ ){
                    ret.add( disks.get(i) );
                }
            }
        }

        return ret;
    }

    //从选项卡获得集群的逻辑保护配置项
    public ArrayList<String> getMtppRootVolForCluster( String host_ip ){
        ArrayList<String> ret = new ArrayList<String>();

        ArrayList<SubCluster> subcList = cluster.getSubClusterList();
        int size = subcList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = subcList.get(i);
            if( subc.getHost().getIP().equals( host_ip ) ){
                ArrayList<ClusterVolume> cvs = subc.getDisks();
                int size1 = cvs.size();
                for( int j=0; j<size1; j++ ){
                    ClusterVolume cv = cvs.get(j);
                    if( cv.isMtppProtect() ){
                        ret.add( cv.getDiskLabel() );
                    }
                }
                break;
            }
        }
        return ret;
    }

    //从标签获得物理保护配置文件项
    public ArrayList<PPProfileItem> getCMDPProfileItemFromTab(){
        PPProfile prof;

        MyDefaultTableModelForTabX3 model = (MyDefaultTableModelForTabX3)table.getModel();
        int lineNum = model.getRowCount();
        ArrayList<PPProfileItem> ret = new ArrayList<PPProfileItem>();
        for( int row=0; row<lineNum; row++ ){
            prof = (PPProfile)model.getValueAt( row, 0 );
            ArrayList<PPProfileItem> disks = prof.getElements();
            int size = disks.size();
            for( int i=0; i<size; i++ ){
                ret.add( disks.get(i) );
            }
        }

        return ret;
    }
    
    UniProfile hidenFs_profile = null;

    //获得配置文件信息
    public ArrayList getProfileInfo() throws Exception{
        UniProfile prof;
        
        MyDefaultTableModelForTabX1 model = (MyDefaultTableModelForTabX1)lp_table.getModel();
        int lineNum = model.getRowCount();
        ArrayList<UniProfile> ret = new ArrayList<UniProfile>( lineNum );
        for( int row=0; row<lineNum; row++ ){
            prof = (UniProfile)model.getValueAt( row, 1 );
            prof.isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();            
            ret.add( prof );
        }
        
        // add profile which is for hiden fs( e.g. ia64 )
        if( hidenFs_profile == null ){
            hidenFs_profile = addHidenFsProfile();
        }

        if( hidenFs_profile != null ){
            ret.add( hidenFs_profile );
        }
        
        return ret;
    }

    //添加隐藏FS配置文件
    private UniProfile addHidenFsProfile() throws Exception{
        if( this.hidenFs == null ) return null;

        StringBuffer tmp = new StringBuffer();
        int size = hidenFs.size();
        for( int i=0; i<size; i++ ){
            tmp.append( ((SystemPartitionForUnix)hidenFs.get(i)).mp );
            tmp.append(";");
        }
        BakObject hidenFsBkObj = view.initor.mdb.getBakObjectFromVector( bkClnt.getID(),tmp.toString() );
        if( hidenFsBkObj == null ){
            // add new bkobj
            BakObject newbakObj = new BakObject(
                -1,
                tmp.toString(),
                4+ "",
                "", // linux's include,将来考虑
                "",
                false,
                "",
                "",
                false,
                true,
                0,
                0,
                0,
                "",
                false,
                0,
                bkClnt.getID(),
                0,   //新增的backup object的backcup level都是0
                "",
                -1,
                0
            );

            File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_BKOBJ );
            if( tmpFile == null ){
SanBootView.log.error( getClass().getName(),"failed to create local tmp file when crt bakobj.");
                throw new Exception("can't crt tmp file when crt bakobj");
            }

            if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),newbakObj.prtMe() ) ){
SanBootView.log.error( getClass().getName(),"failed to send file to server when crt bakobj.");
                tmpFile.delete();
                throw new Exception("can't send file to server when crt bakobj.");
            }
            tmpFile.delete();

            boolean ok = view.initor.mdb.addBakObj( ResourceCenter.TMP_DIR + tmpFile.getName() );
            if( ok ){
                newbakObj.setBakObjID( view.initor.mdb.getNewId() );
                view.initor.mdb.addBakObjIntoVector( newbakObj );
                hidenFsBkObj = newbakObj;
            }else{
SanBootView.log.error( getClass().getName(),"failed to add bakobj.");
                throw new Exception("failed to add bakobj.");
            }
        }

        File tmpFile1 = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_PROF );
        if( tmpFile1 == null ){
SanBootView.log.error( getClass().getName(),"failed to create local tmp file when gen hidenfs profile.");
            throw new Exception("can't crt tmp file when gen hidenfs profile.");
        }

        UniProfile hidenFs_Profile = EditProfileWhenInitDialog.getHidenFsProfile(
            hidenFsBkObj,bkClnt,view.initor.user,view.initor.passwd,view.initor.getTxIP(bkClnt.getIP()),view.initor.port
        );

        hidenFs_Profile.setProfileName( ResourceCenter.TMP_DIR + "**dup_hidenfs" + host.getID() + ".prf" );
        hidenFs_Profile.setIdentityProfileName();
        hidenFs_Profile.setHeaderProfileName();
SanBootView.log.debug( getClass().getName(),  "dup_hidenfs profile: " + hidenFs_Profile.prtMe() );

        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile1.getName(),hidenFs_Profile.prtMe() ) ){
SanBootView.log.error( getClass().getName(),"failed to send file to server when gen dup-hidenfs profile.");
            tmpFile1.delete();
            throw new Exception("can't send file to server when gen dup-hidenfs profile.");
        }
        tmpFile1.delete();
        
        // 将tmpFile rename to **dup_hidenfs.prf
        boolean ok = view.initor.mdb.moveFile(
            ResourceCenter.TMP_DIR + tmpFile1.getName(),
            ResourceCenter.TMP_DIR + hidenFs_Profile.toString()
        );
        if( !ok ){
SanBootView.log.error( getClass().getName(),"failed to gen dup-hidenfs profile.");
            throw new Exception("failed to gen dup-hidenfs profile.");
        }else{
            hidenFs_Profile.isSel = true;
        }

        return hidenFs_Profile;
    }

    private void addRowToTable( UniProfile profile ){
        int schNum = view.initor.mdb.getSchNumOnProfName( profile.getProfileName() );
        UniProBackup backup = profile.getUniProBackup();
        
        Object[] one = new Object[]{
            new Boolean( false ),
            profile,
            schNum+"",
            backup.getSrc()
        };
        
        MyDefaultTableModelForTabX1 model = (MyDefaultTableModelForTabX1)lp_table.getModel();
        model.addRow( one );
    }
    
    private void modRowOnTable( UniProfile profile ){
        int profCol = lp_table.getColumn(
            SanBootView.res.getString("DuplicationStrategyPane.table.prof")
        ).getModelIndex();
        int schCol = lp_table.getColumn(
            SanBootView.res.getString("DuplicationStrategyPane.table.sch")
        ).getModelIndex();
        int contentCol = lp_table.getColumn(
            SanBootView.res.getString("DuplicationStrategyPane.table.contents")
        ).getModelIndex();
        
        MyDefaultTableModelForTabX1 tableModel = (MyDefaultTableModelForTabX1)lp_table.getModel();
        int numOfLine = tableModel.getRowCount();
        if( selectionline >= 0 && selectionline < numOfLine ){
            int schNum = view.initor.mdb.getSchNumOnProfName( profile.getProfileName() );
            UniProBackup backup = profile.getUniProBackup();
            lp_table.setValueAt( profile,selectionline,profCol );
            lp_table.setValueAt( schNum+"", selectionline, schCol );
            lp_table.setValueAt( backup.getSrc(), selectionline, contentCol );
        }
    }
    
    private void delRowFromTable(){
        MyDefaultTableModelForTabX1 model = (MyDefaultTableModelForTabX1)lp_table.getModel();
        int numOfLine = model.getRowCount();
        if( selectionline >= 0 && selectionline < numOfLine ){
            model.removeRow( selectionline );
        }
    }

    private void addProfile(){
        if( this.cluster != null ){
            Object _subc = jComboBox1.getSelectedItem();
            if( _subc == null ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("DuplicationStrategyPane.error.nonSel2")
                );
                return;
            }else{
                SubCluster subc = (SubCluster)_subc;
                host = subc.getHost();
                bkClnt = subc.getD2d_host();
            }
        }

        EditProfileWhenInitDialog dialog = new EditProfileWhenInitDialog( view,host,bkClnt,new ArrayList<DBSchedule>(0),null,null,bootMac,selProtectFS,hidenFs, bootTxIP );
//        if( host.isCMDPProtect() ){
//            if( this.cluster == null ){
//
//                dialog.setFiltered_vol_list( this.getCMDPProfileItemFromTab() );
//            }else{
//                dialog.setRoot_vol_list( this.getMtppRootVolForCluster( host.getIP() ) );
//            }
//        }
        int width  = 560+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 470+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize( width,height );
        dialog.setLocation( wizardDiag.getCenterPoint( width,height ) );
        dialog.setVisible( true );

        UniProfile profile = dialog.getProfile();
        if( profile == null ) return;

        if( this.cluster != null ){
            host.setClnt_d2d_cid( (int)bkClnt.getID() );
        }
        addRowToTable( profile );
    }

    private void modPPProfile(){
        this.modCMDPProfile();
    }
    
    private void modCMDPProfile(){
        ArrayList<PPProfileItem> allDisks;
        String ip;
        int port;

        selectionline = table.getSelectedRow();
        if( selectionline < 0 ) {
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DuplicationStrategyPane.error.nonSel1")
            );
            return;
        }

        MyDefaultTableModelForTabX3 model = (MyDefaultTableModelForTabX3)table.getModel();
        int lineNum = model.getRowCount();
        if ( selectionline>=0 && selectionline <lineNum ){
            PPProfile prof = (PPProfile)model.getValueAt( selectionline, 0 );

            ip = prof.getHost_ip();
            port = prof.getHost_port();

            view.initor.mdb.getOSService( ip,port,"",ResourceCenter.CMD_TYPE_CMDP );
            Vector serviceList = view.initor.mdb.getOSService();
            ((PhyInitInterface)this.wizardDiag).addNewService( serviceList );

            if( this.isCluster ){
                // 找出跟所选profile的成员相适应（相融合）的所有disks
                allDisks = this.getCMDPProfileItemFromTabForCluster( prof );
            }else{
                allDisks = this.getCMDPProfileItemFromTab(); 
            }

            EditPhyProfileWhenInitDialog dialog = new EditPhyProfileWhenInitDialog(
                view,
                prof,
                allDisks,
                serviceList,
                this.oldProfList
            );
            int width  = 520+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 355+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            dialog.setSize( width,height );
            dialog.setLocation( wizardDiag.getCenterPoint( width,height ) );
            dialog.setVisible( true );

            this.setupTableForCMDP( this.oldProfList,isCluster?1:0 );
        }
    }
    
    private BootHost getBootHostFromCluster( int d2d_clnt_id ){
        ArrayList<SubCluster> subcList = this.cluster.getSubClusterList();
        int size = subcList.size();
        for( int i=0; i<size; i++ ){
            SubCluster subc = subcList.get(i);
            if( subc.getHost().getClnt_d2d_cid() == d2d_clnt_id ){
                return subc.getHost();
            }
        }
        return null;
    }
    
    private void modMTPPProfile(){
        selectionline = lp_table.getSelectedRow();
        if( selectionline < 0 ) {
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DuplicationStrategyPane.error.nonSel")
            );
            return;
        }

        if( this.cluster == null ){ // 非cluster的情况，必须提前将host和bkclnt置好
            if( host == null || bkClnt == null ){
SanBootView.log.error( this.getClass().getName()," Can't find boothost or client in profile." );            
                JOptionPane.showMessageDialog(view,
                    SanBootView.res.getString("common.errcode.inconsistentProf")
                );
                return;
            }
        }
        
        MyDefaultTableModelForTabX1 model = (MyDefaultTableModelForTabX1)lp_table.getModel();
        int lineNum = model.getRowCount();
        if ( selectionline>=0 && selectionline <lineNum ){
            UniProfile prof = ( (UniProfile)model.getValueAt( selectionline, 1 ) );
            
            String bkobjId = prof.getUniProIdentity().getBkObj_ID();
            if( this.cluster != null ){
                String d2d_clnt_id = prof.getUniProIdentity().getClntID();
                bkClnt = view.initor.mdb.getClientFromVectorOnID( d2d_clnt_id );
                if( bkClnt == null ){
SanBootView.log.error( this.getClass().getName()," Can't find boothost or client in profile." );
                    JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("common.errcode.inconsistentProf")
                    );
                    return;
                }else{
                    host = getBootHostFromCluster( (int)bkClnt.getID() );
                    if( host == null ){
SanBootView.log.error( this.getClass().getName()," Can't find boothost or client in profile." );
                        JOptionPane.showMessageDialog(view,
                            SanBootView.res.getString("common.errcode.inconsistentProf")
                        );
                        return;
                    }
                }
            }

            ArrayList<DBSchedule> schList = view.initor.mdb.getSchOnProfName( prof.getProfileName() );
            
            // 进去前先重新获取一下backup object,因为备份的时候bkobj会变化，所以只能每次都update bk obj
            view.initor.mdb.updateBakObjList( bkobjId );
            BakObject bkObj = view.initor.mdb.getOneBakObject();
            if( bkObj == null ){
                // 还用原来的
                bkObj = view.initor.mdb.getBakObjFromVector( bkobjId );
SanBootView.log.warning( getClass().getName()," no d2d bkobj, bkobj id: "+ bkobjId );
            }else{
                // update bkboj in cache
                view.initor.mdb.removeBakObjFromVector( bkObj.getBakObjID() );
                view.initor.mdb.addBakObjIntoVector( bkObj );
            }
            
            EditProfileWhenInitDialog dialog = new EditProfileWhenInitDialog( view, host, bkClnt, schList, bkObj,prof,bootMac,selProtectFS,this.hidenFs, bootTxIP );
            if( host.isCMDPProtect() ){
                if( this.cluster == null ){
                    dialog.setFiltered_vol_list( this.getCMDPProfileItemFromTab() );
                }else{
                    dialog.setRoot_vol_list( this.getMtppRootVolForCluster( host.getIP() ) );
                }
            }
            int width  = 560+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 470+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            dialog.setSize( width,height );
            dialog.setLocation( wizardDiag.getCenterPoint( width,height ) );
            dialog.setVisible( true );
            
            UniProfile profile = dialog.getProfile();
            if( profile == null ) return;
            
            modRowOnTable( profile );
        }
    }
    
    private void delProfile(){
        selectionline = lp_table.getSelectedRow();
        if( selectionline < 0 ) {
            JOptionPane.showMessageDialog(this,
                SanBootView.res.getString("DuplicationStrategyPane.error.nonSel")
            );
            return;
        }
        
        int ret = JOptionPane.showConfirmDialog(
            view,
            SanBootView.res.getString("MenuAndBtnCenter.confirm15"),
            SanBootView.res.getString("common.confirm"),  //"Confirm",
            JOptionPane.OK_CANCEL_OPTION
        );
        if( ( ret == JOptionPane.CANCEL_OPTION ) || ( ret == JOptionPane.CLOSED_OPTION) ){
            return;
        }
        
        int profCol = lp_table.getColumn(
            SanBootView.res.getString("DuplicationStrategyPane.table.prof")
        ).getModelIndex(); 
        UniProfile prof = (UniProfile)lp_table.getValueAt( selectionline,profCol );
        
        String bkobjId = prof.getUniProIdentity().getBkObj_ID();
        BakObject bkObj = view.initor.mdb.getBakObjFromVector( bkobjId );
        if( bkObj != null ){
            if( !view.initor.mdb.deleteBakObj( bkObj.getBakObjID() ) ){
                JOptionPane.showMessageDialog(view,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_DEL_BAKOBJECT )+
                    ": "+
                    view.initor.mdb.getErrorMessage()
                );
                return;
            }else{
                view.initor.mdb.removeBakObjFromVector( bkObj );
            }
        }
        
        ArrayList schList = view.initor.mdb.getSchOnProfName( prof.getProfileName() );
        int size = schList.size();
        for( int i=0; i<size; i++ ){
            DBSchedule sch = (DBSchedule)schList.get(i);
            if( !view.initor.mdb.deleteOneScheduler( sch ) ){
                JOptionPane.showMessageDialog(view,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_DEL_DB_SCHEDULER ) +
                    ": "+
                    view.initor.mdb.getErrorMessage()
                );
                return;
            }else{
                view.initor.mdb.removeSch( sch );
            }
        }
        
        if( !view.initor.mdb.delFile( prof.getProfileName()  ) ){
            JOptionPane.showMessageDialog(view,
                ResourceCenter.getCmdString( ResourceCenter.CMD_DEL_FILE ) +
                ": "+
                view.initor.mdb.getErrorMessage()
            );
        }else{
            view.initor.mdb.removeProfFromCache( prof );
            delRowFromTable();
        }
    }

   
    public void fireEditingStopMsg(){
        fireEditingStopMsgForMTPP();
    }

    public void fireEditingStopMsgForMTPP(){
        TableCellEditor dce;
        
        MyDefaultTableModelForTabX1 model = (MyDefaultTableModelForTabX1)lp_table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            dce = lp_table.getCellEditor( i,0 );
            if( dce!=null ){
                try{
                    while(!dce.stopCellEditing()){}
                }catch(Exception ex){}
            }
        }
    }

    private void importProfile() {
        if( this.cluster != null ){
            Object _subc = jComboBox1.getSelectedItem();
            if( _subc == null ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("DuplicationStrategyPane.error.nonSel2")
                );
                return;
            }else{
                SubCluster subc = (SubCluster)_subc;
                host = subc.getHost();
                bkClnt = subc.getD2d_host();
            }
        }

        importDialog = new ImportProfileNew( view,host,bkClnt,new ArrayList<DBSchedule>(0),null,null,bootMac,selProtectFS,hidenFs );
        importDialog.setWizardDialogSample( wizardDiag );
        int width  = 560+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 470+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        importDialog.setSize( width,height );
        importDialog.setLocation( wizardDiag.getCenterPoint( width,height ) );
        importDialog.setVisible( true );

        UniProfile profile = importDialog.getProfile();
        if( profile == null ) return;

        if( this.cluster != null ){
            host.setClnt_d2d_cid( (int)bkClnt.getID() );
        }
        addRowToTable( profile );

    }

}
