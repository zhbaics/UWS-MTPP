/*
 * EditProfileWhenInitDialog.java
 *
 * Created on 2008/8/20,��PM 5:25
 */
package guisanboot.datadup.ui;

import guisanboot.cmdp.entity.PPProfileItem;
import guisanboot.data.*;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.SanBootView;
import guisanboot.ui.SelectProtectedFS;
import guisanboot.datadup.data.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.*;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import mylib.UI.*;

/**
 *
 * @author  zjj
 */
public class EditProfileWhenInitDialog extends javax.swing.JDialog implements Backupable, Schedulerable {

    public final static String SNAP_MP = "/mnt/snap";
    private boolean isLoading = false;
    private UniProfile loadUniProfile = null;
    MonthlyPane monthPane = new MonthlyPane();
    WeeklyPane weekPane = new WeeklyPane();
    SanBootView view;
    BootHost host;
    BackupClient bkClnt;
    ArrayList<DBSchedule> oldSchList;
    Vector rootListForLinux; // 存放linux的fs list(/,/usr/,/boot/等)
    Vector partList; // 存放分区列表（包括文件类型）
    BakObject bkobj = null;
    UniProfile oldProf;
    String bootMac;
    DefaultListModel model = new DefaultListModel();
    JList bakList = new JList(model);
    DefaultListModel model1 = new DefaultListModel();
    JList excludeList = new JList(model1);
    BrowserTable schedulerTable = new BrowserTable();
    int selectionline = -1;
    SelectProtectedFS selProtectFs;
    ArrayList hidenFs;
    ButtonGroup grp1 = new ButtonGroup();

    int whatAct = -1;
    public final static int ADD_ACT = 0;
    public final static int MOD_ACT = 1;
    private Hashtable<Integer, String> winSrcList = new Hashtable<Integer, String>();
    private Hashtable<String, BindOfFSAndDevNo> unixSrcList = new Hashtable<String, BindOfFSAndDevNo>();
    private ArrayList<PPProfileItem> filtered_vol_list;
    private ArrayList<String> root_vol_list;

    private String txIP;

    /** Creates new form EditProfileWhenInitDialog */
    public EditProfileWhenInitDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public EditProfileWhenInitDialog(SanBootView view, BootHost host, BackupClient bkClnt,
            ArrayList<DBSchedule> oldSchList, BakObject bkobj, UniProfile oldProf,
            String bootMac, SelectProtectedFS selProtectFs, ArrayList hidenFs, String txIP) {
        this(view, true);
        myInit(view, host, bkClnt, oldSchList, bkobj, oldProf, bootMac, selProtectFs, hidenFs, txIP);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel14 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel27 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel28 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jTextField24 = new javax.swing.JTextField();
        jTextField25 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jCheckBox5 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setPreferredSize(new java.awt.Dimension(474, 300));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel13.setPreferredSize(new java.awt.Dimension(0, 30));
        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jCheckBox7.setText("Physical Block Incremental Backup");
        jCheckBox7.setBorder(null);
        jCheckBox7.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });
        jPanel13.add(jCheckBox7);

        jCheckBox1.setText("LVM Snapshot(Suitable for Linux)");
        jCheckBox1.setBorder(null);
        jCheckBox1.setPreferredSize(new java.awt.Dimension(225, 19));
        jPanel13.add(jCheckBox1);

        jPanel9.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel14.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Last Duplication Time"));
        jPanel10.setPreferredSize(new java.awt.Dimension(10, 60));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jTextField11.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel10.add(jTextField11, gridBagConstraints);

        jPanel14.add(jPanel10, java.awt.BorderLayout.SOUTH);

        jPanel27.setLayout(new java.awt.BorderLayout());
        jPanel27.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane3.addTab("Content List", jPanel27);

        jPanel28.setLayout(new java.awt.BorderLayout());
        jPanel28.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane3.addTab("Exclude", jPanel28);

        jPanel14.add(jTabbedPane3, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        jButton7.setText("Add");
        jButton7.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton7);

        jButton1.setText("Modify");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton1);

        jButton9.setText("Delete");
        jButton9.setMargin(new java.awt.Insets(2, 1, 2, 1));
        jButton9.setPreferredSize(new java.awt.Dimension(75, 24));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton9);

        jPanel5.add(jPanel12, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Contents", jPanel5);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setOpaque(false);
        jPanel7.setPreferredSize(new java.awt.Dimension(0, 40));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jButton4.setText("Add");
        jButton4.setPreferredSize(new java.awt.Dimension(71, 24));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton4);

        jButton5.setText("Modify");
        jButton5.setPreferredSize(new java.awt.Dimension(71, 24));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton5);

        jButton6.setText("Delete");
        jButton6.setPreferredSize(new java.awt.Dimension(71, 24));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton6);

        jPanel4.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("List"));
        jPanel21.setLayout(new java.awt.BorderLayout());
        jPanel21.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel21, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Scheduler", jPanel4);

        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Inclusive Filter"));
        jPanel16.setPreferredSize(new java.awt.Dimension(10, 150));
        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel12.setText("Only backup files which accord with following filter : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel16.add(jLabel12, gridBagConstraints);

        jTextField13.setPreferredSize(new java.awt.Dimension(425, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel16.add(jTextField13, gridBagConstraints);

        jLabel23.setText("For example:  1.txt and 2.txt  will be backuped according to the filter \"*.txt\" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel16.add(jLabel23, gridBagConstraints);

        jPanel15.add(jPanel16, java.awt.BorderLayout.NORTH);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Exclusive Filter"));
        jPanel17.setLayout(new java.awt.GridBagLayout());

        jLabel22.setText("Exclude files which accord with following filter :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel17.add(jLabel22, gridBagConstraints);

        jTextField14.setPreferredSize(new java.awt.Dimension(420, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel17.add(jTextField14, gridBagConstraints);

        jLabel24.setText("For example : 1.txt and 2.txt will not be backuped according to filter \"*.txt\"");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel17.add(jLabel24, gridBagConstraints);

        jPanel15.add(jPanel17, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Filter", jPanel15);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Switch"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel6.setText("Cmd bef Snap :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel6.add(jLabel6, gridBagConstraints);

        jTextField4.setPreferredSize(new java.awt.Dimension(350, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 3, 0, 0);
        jPanel6.add(jTextField4, gridBagConstraints);

        jLabel7.setText("Cmd aft Snap :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jLabel7, gridBagConstraints);

        jTextField5.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel6.add(jTextField5, gridBagConstraints);

        jCheckBox3.setText("Not care change of file size and modified time");
        jCheckBox3.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel6.add(jCheckBox3, gridBagConstraints);

        jLabel21.setText("Backup Level :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jLabel21, gridBagConstraints);

        jLabel33.setText("Command Before :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jLabel33, gridBagConstraints);

        jLabel34.setText("Command After :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jLabel34, gridBagConstraints);

        jTextField24.setPreferredSize(new java.awt.Dimension(72, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel6.add(jTextField24, gridBagConstraints);

        jTextField25.setPreferredSize(new java.awt.Dimension(72, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 0, 0);
        jPanel6.add(jTextField25, gridBagConstraints);

        jComboBox1.setPreferredSize(new java.awt.Dimension(29, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel6.add(jComboBox1, gridBagConstraints);

        jLabel1.setText("Redundant Clean :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        jPanel6.add(jLabel1, gridBagConstraints);

        jTextField1.setPreferredSize(new java.awt.Dimension(65, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 3, 0, 0);
        jPanel6.add(jTextField1, gridBagConstraints);

        jLabel2.setText("Times of duplication");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 2, 0, 0);
        jPanel6.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Every");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 3, 0, 0);
        jPanel6.add(jLabel3, gridBagConstraints);

        jCheckBox2.setText("Logout when duplication is finished");
        jCheckBox2.setBorder(null);
        jCheckBox2.setPreferredSize(new java.awt.Dimension(193, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel6.add(jCheckBox2, gridBagConstraints);

        jCheckBox4.setText("Ignore all errors when data transferring");
        jCheckBox4.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel6.add(jCheckBox4, gridBagConstraints);

        jPanel8.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Client Snapshot"));
        jPanel11.setPreferredSize(new java.awt.Dimension(10, 90));
        jPanel11.setLayout(new java.awt.GridBagLayout());

        jRadioButton1.setText("Not create snapshot");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel11.add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("Create snapshot");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel11.add(jRadioButton2, gridBagConstraints);

        jCheckBox5.setText("Backup only in case of snapshot is OK");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel11.add(jCheckBox5, gridBagConstraints);

        jPanel8.add(jPanel11, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Advanced Options", jPanel8);

        jPanel2.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 1, 5, 1));
        jPanel3.setPreferredSize(new java.awt.Dimension(315, 45));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 1, 2, 1));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 90, 5));

        jButton2.setText("OK");
        jButton2.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        jButton3.setText("Cancel");
        jButton3.setPreferredSize(new java.awt.Dimension(74, 24));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        modContents();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        process_PhyInc_chkBox();
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        okButton_actionPerformed(evt);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        delSch();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        modSch();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        addSch();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        delContents();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        addContents();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        profile = null;
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
    do_click_radioBtn1();
}//GEN-LAST:event_jRadioButton1ActionPerformed

private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
    do_click_radioBtn2();
}//GEN-LAST:event_jRadioButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EditProfileDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

    private void myInit(SanBootView view, BootHost host, BackupClient bkClnt, ArrayList<DBSchedule> oldSchList,
            BakObject bkobj, UniProfile oldProf, String bootMac, SelectProtectedFS selProtectFs, ArrayList hidenFs, String txIP) {
        this.view = view;
        this.oldSchList = oldSchList;
        this.host = host;

        // bkclnt可能不存在，是虚构出来的。在必要时要增加该对象到数据库中
        this.bkClnt = bkClnt;

        this.bkobj = bkobj;
        this.oldProf = oldProf;
        this.bootMac = bootMac;
        this.selProtectFs = selProtectFs;
        this.hidenFs = hidenFs;
        this.txIP = txIP;

        jScrollPane1.getViewport().add(bakList, null);
        jScrollPane1.getViewport().setBackground(Color.white);
        bakList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jScrollPane2.getViewport().add(excludeList, null);
        jScrollPane2.getViewport().setBackground(Color.white);
        excludeList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        bakList.setCellRenderer(new FileDirRenderer());
        excludeList.setCellRenderer(new FileDirRenderer());

        jScrollPane3.getViewport().add(schedulerTable, null);
        jScrollPane3.getViewport().setBackground(Color.white);

        jTextField11.setEnabled(false);
        jTextField11.setOpaque(false);

        grp1.add(this.jRadioButton1);
        grp1.add(this.jRadioButton2);
        this.jRadioButton2.setSelected(true);

        setupSchedulerTable();
        setupBackupLevel();
        jTextField1.setText(UniProBackup.DEFAULT_VAL_DEL_REDUNDANT + "");
        jCheckBox2.setSelected(true);
        if (!host.isWin2000()) {
            jCheckBox5.setSelected(true);
        } else {
            this.jRadioButton1.setSelected(true);
            this.do_click_radioBtn1();
        }
        setupLanguage();

        try {
            SwingUtilities.invokeLater(initUI);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    Runnable initUI = new Runnable() {

        public void run() {
            initUi(oldProf);
        }
    };

    private void setupLanguage() {
        String ip = (this.host != null) ? " [ " + host.getIP() + " ]" : "";
        if (this.bkobj == null) {
            setTitle(SanBootView.res.getString("EditProfileDialog.diagTitle") + ip);
        } else {
            setTitle(SanBootView.res.getString("EditProfileDialog.diagTitle1") + ip);
        }

        TitledBorder bor = (TitledBorder) jPanel6.getBorder();
        bor.setTitle(
                SanBootView.res.getString("EditProfileDialog.borderTitle.switch"));

        bor = (TitledBorder) jPanel10.getBorder();
        bor.setTitle(
                SanBootView.res.getString("EditProfileDialog.borderTitle.lastbak"));

        bor = (TitledBorder) jPanel11.getBorder();
        bor.setTitle(
                SanBootView.res.getString("EditProfileDialog.borderTitle.snapOnClnt"));

        bor = (TitledBorder) jPanel16.getBorder();
        bor.setTitle(
                SanBootView.res.getString("EditProfileDialog.borderTitle.incFilter"));

        bor = (TitledBorder) jPanel17.getBorder();
        bor.setTitle(
                SanBootView.res.getString("EditProfileDialog.borderTitle.excFilter"));

        bor = (TitledBorder) jPanel21.getBorder();
        bor.setTitle(
                SanBootView.res.getString("EditProfileDialog.borderTitle.schList"));

        jRadioButton1.setText(SanBootView.res.getString("EditProfileDialog.radioBtn.notDoSnap"));
        jRadioButton2.setText(SanBootView.res.getString("EditProfileDialog.radioBtn.doSnap"));

        jLabel1.setText(SanBootView.res.getString("EditProfileDialog.label.cleanRedundant1"));
        jLabel2.setText(SanBootView.res.getString("EditProfileDialog.label.cleanRedundant2"));
        jLabel3.setText(SanBootView.res.getString("common.every"));
        jLabel6.setText(SanBootView.res.getString("EditProfileDialog.label.snapPrexCmd"));
        jLabel7.setText(SanBootView.res.getString("EditProfileDialog.label.snapPostCmd"));
        jLabel21.setText(SanBootView.res.getString("EditProfileDialog.label.bakLevel"));
        jLabel12.setText(SanBootView.res.getString("EditProfileDialog.label.incTip"));
        jLabel23.setText(SanBootView.res.getString("EditProfileDialog.label.incEg"));
        jLabel22.setText(SanBootView.res.getString("EditProfileDialog.label.excTip"));
        jLabel24.setText(SanBootView.res.getString("EditProfileDialog.label.excEg"));
        jLabel33.setText(SanBootView.res.getString("EditProfileDialog.label.preCmd"));
        jLabel34.setText(SanBootView.res.getString("EditProfileDialog.label.postCmd"));

        jCheckBox1.setText(SanBootView.res.getString("EditProfileDialog.checkBox.lvmsnap"));
        jCheckBox2.setText(SanBootView.res.getString("EditProfileDialog.checkBox.logoutTarget"));
        jCheckBox3.setText(SanBootView.res.getString("EditProfileDialog.checkBox.inc_no_judge_time"));
        jCheckBox4.setText(SanBootView.res.getString("EditProfileDialog.checkBox.ignoreAllErr"));
        jCheckBox7.setText(SanBootView.res.getString("EditProfileDialog.checkBox.phyincbak"));
        jCheckBox5.setText(SanBootView.res.getString("EditProfileDialog.checkBox.mustSnapshotOK"));

        jButton1.setText(SanBootView.res.getString("common.button.mod1"));
        jButton2.setText(SanBootView.res.getString("common.button.ok"));
        jButton3.setText(SanBootView.res.getString("common.button.cancel"));
        jButton4.setText(SanBootView.res.getString("common.button.add1"));
        jButton5.setText(SanBootView.res.getString("common.button.mod1"));
        jButton6.setText(SanBootView.res.getString("common.button.del"));
        jButton7.setText(SanBootView.res.getString("EditProfileDialog.button.addBakSrc"));
        jButton9.setText(SanBootView.res.getString("EditProfileDialog.button.delBakSrc"));

        int index = jTabbedPane1.indexOfComponent(jPanel8);
        jTabbedPane1.setTitleAt(index,
                SanBootView.res.getString("EditProfileDialog.tabTitle.advOpt"));
        index = jTabbedPane1.indexOfComponent(jPanel5);
        jTabbedPane1.setTitleAt(index,
                SanBootView.res.getString("EditProfileDialog.tabTitle.content"));
        index = jTabbedPane1.indexOfComponent(jPanel15);
        jTabbedPane1.setTitleAt(index,
                SanBootView.res.getString("EditProfileDialog.tabTitle.filter"));
        index = jTabbedPane1.indexOfComponent(jPanel4);
        jTabbedPane1.setTitleAt(index,
                SanBootView.res.getString("EditProfileDialog.tabTitle.sch"));

        index = jTabbedPane3.indexOfComponent(jPanel27);
        jTabbedPane3.setTitleAt(index,
                SanBootView.res.getString("EditProfileDialog.tabTitle.cpList"));
        index = jTabbedPane3.indexOfComponent(jPanel28);
        jTabbedPane3.setTitleAt(index,
                SanBootView.res.getString("EditProfileDialog.tabTitle.excList"));
    }

    private void setupBackupLevel() {
        jComboBox1.addItem(SanBootView.res.getString(BakObject.BAKLEVEL_FULL));
        jComboBox1.addItem(SanBootView.res.getString(BakObject.BAKLEVLE_INC));
        jComboBox1.setSelectedIndex(1);
    }

    private void setupSchedulerTable() {
        Object[] title = new Object[]{
            SanBootView.res.getString("SchedulerDialog.table.scheduler.name"),
            SanBootView.res.getString("SchedulerDialog.table.scheduler.enable"),
            SanBootView.res.getString("SchedulerDialog.table.scheduler.startTime")
        };
        schedulerTable.setupTitle(title);

        int[][] widthList = new int[][]{
            {0, 175}, {1, 65}, {2, 190}
        };
        schedulerTable.setupTableColumnWidth(widthList);
        schedulerTable.getTableHeader().setBorder(BorderFactory.createRaisedBevelBorder());
        schedulerTable.getTableHeader().setReorderingAllowed(false);
    }

    private boolean isMustCrtSnap() {
        if (jRadioButton2.isSelected()) {
            return jCheckBox5.isSelected();
        } else {
            return false;
        }
    }

    public boolean isSameScheduler(DBSchedule newsch) {
        DBSchedule sched;

        int idCol = schedulerTable.getColumn(
                SanBootView.res.getString("SchedulerDialog.table.scheduler.name")).getModelIndex();

        DefaultTableModel tableModel = (DefaultTableModel) schedulerTable.getModel();
        int rowNum = tableModel.getRowCount();
        for (int i = 0; i < rowNum; i++) {
            if (whatAct == ADD_ACT) {
                sched = (DBSchedule) tableModel.getValueAt(i, idCol);
                if (sched.getTimeStr().equals(newsch.getTimeStr())) {
                    return true;
                }
            } else if (whatAct == MOD_ACT) {
                if (i == selectionline) {
                    continue;
                } else {
                    sched = (DBSchedule) tableModel.getValueAt(i, idCol);
                    if (sched.getTimeStr().equals(newsch.getTimeStr())) {
                        return true;
                    }
                }
            } else {
                // do nothing
            }
        }

        return false;
    }

    private void process_PhyInc_chkBox() {
        jCheckBox3.setSelected(jCheckBox7.isSelected());
    }

    private void setupDefault() {
    }

    private void do_click_radioBtn1() {
        this.jCheckBox5.setEnabled(false);
    }

    private void do_click_radioBtn2() {
        this.jCheckBox5.setEnabled(true);
    }

    private void modContents() {
        SelectBakedFileDialog dialog;

        String selFile = this.getBkList(false);
        String excFile = this.getExcludeList(false);

        if (host.isWinHost() && host.isCMDPProtect()) {
            if (this.root_vol_list == null) {
                dialog = new SelectBakedFileDialog(view, this.bkClnt, selFile, excFile, this.getFilterString());
                dialog.setFilterFlag(true);
            } else {
                dialog = new SelectBakedFileDialog(view, this.bkClnt, this.root_vol_list);
            }
        } else {
            dialog = new SelectBakedFileDialog(view, this.bkClnt, selFile, excFile);
        }
        dialog.setHidenFs(this.hidenFs);

        if (root_vol_list == null) {
            if (this.bkClnt.isWin()) {
                FileListFetcher fetcher1 = new FileListFetcher(
                        this.bkClnt,
                        dialog.getCurPath(),
                        dialog.getFileModel(),
                        dialog.getRootsVector(),
                        (BrowseBakedFile) dialog,
                        view.getSocket(),
                        true,
                        0,
                        true);
                fetcher1.start();
            } else {
                FsListFetcher fetcher2 = new FsListFetcher(
                        this.bkClnt,
                        "",
                        dialog.getFileModel(),
                        dialog.getRootsVector(),
                        (BrowseBakedFile) dialog,
                        view.getSocket(),
                        true,
                        0,
                        true);
                fetcher2.start();
            }
        } else {
            int size = root_vol_list.size();
            for (int i = 0; i < size; i++) {
                dialog.getFileModel().addElement(root_vol_list.get(i));
            }
        }

        int width = 565 + ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 435 + ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize(width, height);
        dialog.setLocation(getCenterPoint(width, height));
        dialog.setVisible(true);

        Object[] ret = dialog.getValues();
        if (ret == null) {
            return;
        }

        rootListForLinux = dialog.getRootsVector();
        String fileList = (String) ret[0];
        String aExcludeList = (String) ret[1];

        setupBakSourcePane(fileList, aExcludeList);
    }

    public void setFiltered_vol_list(ArrayList<PPProfileItem> val) {
        this.filtered_vol_list = val;
    }

    public void setRoot_vol_list(ArrayList<String> val) {
        this.root_vol_list = val;
    }

    private ArrayList<String> getFilterString() {
        ArrayList<String> ret = new ArrayList<String>();
        if (this.filtered_vol_list != null) {
            int size = this.filtered_vol_list.size();
            for (int i = 0; i < size; i++) {
                PPProfileItem pppItem = filtered_vol_list.get(i);
                ret.add(pppItem.getVolMap().getVolDiskLabel());
            }
        }
        return ret;
    }

    private void addContents() {
        SelectBakedFileDialog dialog;

        if (host.isWinHost() && host.isCMDPProtect()) {
            if (this.root_vol_list == null) {
                dialog = new SelectBakedFileDialog(view, this.bkClnt, "", "", this.getFilterString());
                dialog.setFilterFlag(true);
            } else {
                dialog = new SelectBakedFileDialog(view, this.bkClnt, this.root_vol_list);
            }
        } else {
            dialog = new SelectBakedFileDialog(view, this.bkClnt, "", "");
        }
        dialog.setHidenFs(this.hidenFs);

        if (root_vol_list == null) {
            if (this.bkClnt.isWin()) {
                FileListFetcher fetcher1 = new FileListFetcher(
                        this.bkClnt,
                        dialog.getCurPath(),
                        dialog.getFileModel(),
                        dialog.getRootsVector(),
                        (BrowseBakedFile) dialog,
                        view.getSocket(),
                        true,
                        0,
                        true);
                fetcher1.start();
            } else {
                FsListFetcher fetcher2 = new FsListFetcher(
                        this.bkClnt,
                        "",
                        dialog.getFileModel(),
                        dialog.getRootsVector(),
                        (BrowseBakedFile) dialog,
                        view.getSocket(),
                        true,
                        0,
                        true);
                fetcher2.start();
            }
        } else {
            int size = root_vol_list.size();
            for (int i = 0; i < size; i++) {
                dialog.getFileModel().addElement(root_vol_list.get(i));
            }
        }

        int width = 565 + ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 435 + ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize(width, height);
        dialog.setLocation(getCenterPoint(width, height));
        dialog.setVisible(true);

        Object[] ret = dialog.getValues();
        if (ret == null) {
            return;
        }

        rootListForLinux = dialog.getRootsVector();
        String fileList = (String) ret[0];
        String aExcludeList = (String) ret[1];
        setupBakSourcePane(fileList, aExcludeList);
    }

    private void delContents() {
        setupBakSourcePane("", "");
    }

    private void setupBakSourcePane(String bakList, String excludeList) {
        model.removeAllElements();
        String[] list = Pattern.compile(";").split(bakList);
        for (int i = 0; i < list.length; i++) {
            if (!list[i].equals("")) {
                model.addElement(list[i]);
            }
        }

        model1.removeAllElements();
        list = Pattern.compile(";").split(excludeList);
        for (int i = 0; i < list.length; i++) {
            if (!list[i].equals("")) {
                model1.addElement(list[i]);
            }
        }

        jTextField11.setText("");
        jButton7.setEnabled(bakList == null || bakList.equals(""));
        jButton1.setEnabled(bakList != null && !bakList.equals(""));
    }

    void addSch() {
        whatAct = ADD_ACT;
        SchedDialog dialog = new SchedDialog(this, view, null);
        int width = 525 + ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 400 + ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        dialog.setSize(width, height);
        dialog.setLocation(view.getCenterPoint(width, height));
        dialog.setVisible(true);

        Object[] ret = dialog.getValues();
        if (ret == null) {
            return;
        }

        DBSchedule sch = (DBSchedule) ret[0];
        addRowToSchTable(sch);
    }

    void delSch() {
        selectionline = schedulerTable.getSelectedRow();
        if (selectionline < 0) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SchedulerDialog.error.noneScher"));
            return;
        }
        delRowFromSchTable();
    }

    void modSch() {
        whatAct = MOD_ACT;
        selectionline = schedulerTable.getSelectedRow();
        if (selectionline < 0) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SchedulerDialog.error.noneScher"));
            return;
        }

        int schIdCol = schedulerTable.getColumn(
                SanBootView.res.getString("SchedulerDialog.table.scheduler.name")).getModelIndex();

        DefaultTableModel tableModel = (DefaultTableModel) schedulerTable.getModel();
        int numOfLine = tableModel.getRowCount();
        if (selectionline >= 0 && selectionline < numOfLine) {
            DBSchedule selDBSche = (DBSchedule) schedulerTable.getValueAt(selectionline, schIdCol);

            SchedDialog dialog = new SchedDialog(this, view, selDBSche);
            int width = 525 + ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 400 + ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            dialog.setSize(width, height);
            dialog.setLocation(view.getCenterPoint(width, height));
            dialog.setVisible(true);

            Object[] ret = dialog.getValues();
            if (ret == null) {
                return;
            }

            DBSchedule sch = (DBSchedule) ret[0];
            sch.setID(selDBSche.getID());
            modRowOnSchTable(sch);
        }
    }

    private void addRowToSchTable(DBSchedule scheduler) {
        Object[] one = new Object[]{
            scheduler,
            new GeneralBrowserTableCell(
            -1, scheduler.isEnable() ? "Yes" : "No", JLabel.RIGHT),
            new GeneralBrowserTableCell(
            -1, scheduler.getStartTime(), JLabel.RIGHT)
        };

        schedulerTable.insertRow(one);
    }

    public void modRowOnSchTable(DBSchedule sch) {
        int nameIdCol = schedulerTable.getColumn(
                SanBootView.res.getString("SchedulerDialog.table.scheduler.name")).getModelIndex();
        int activeIdCol = schedulerTable.getColumn(
                SanBootView.res.getString("SchedulerDialog.table.scheduler.enable")).getModelIndex();
        int stIdCol = schedulerTable.getColumn(
                SanBootView.res.getString("SchedulerDialog.table.scheduler.startTime")).getModelIndex();

        DefaultTableModel tableModel = (DefaultTableModel) schedulerTable.getModel();
        int numOfLine = tableModel.getRowCount();
        if (selectionline >= 0 && selectionline < numOfLine) {
            schedulerTable.setValueAt(sch, selectionline, nameIdCol);
            schedulerTable.setValueAt(
                    new GeneralBrowserTableCell(
                    -1, sch.isEnable() ? "Yes" : "No", JLabel.RIGHT),
                    selectionline,
                    activeIdCol);
            schedulerTable.setValueAt(
                    new GeneralBrowserTableCell(
                    -1, sch.getStartTime(), JLabel.RIGHT),
                    selectionline,
                    stIdCol);
        }
    }

    private void delRowFromSchTable() {
        DefaultTableModel tableModel = (DefaultTableModel) schedulerTable.getModel();
        int numOfLine = tableModel.getRowCount();
        if (selectionline >= 0 && selectionline < numOfLine) {
            tableModel.removeRow(selectionline);
        }
    }

    private String getBkList(boolean check) {
        boolean hasOSDisk = false;
        boolean hasEtcDir = false;

        if (model.size() <= 0) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.notselected"));
            return null;
        }

        int size = model.size();
        String filelist = "";
        for (int i = 0; i < size; i++) {
            String item = (String) model.elementAt(i);
            if (item.toUpperCase().equals("/C:/")) {
                hasOSDisk = true;
            }
            if (item.equals("/etc/")) {
                hasEtcDir = true;
            }
            filelist += item + ";";
        }
        if (check) {
            if (filelist.getBytes().length >= ResourceCenter.CONTENT_SIZE) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.errMsg.tooLongBakContent"));
                return null;
            }
        }

        return filelist;
    }

    private String getExcludeList(boolean check) {
        int i, size;

        boolean hasEtcDir = false;

        size = model.size();
        String filelist = "";
        for (i = 0; i < size; i++) {
            String item = (String) model.elementAt(i);
            if (item.equals("/etc/")) {
                hasEtcDir = true;
            }
        }

        boolean excludeFstab = false;
        boolean excludeNetwork = false;
        boolean excludeKillall = false;
        boolean excludeHalt = false;
        size = model1.size();
        String excludeListStr = "";
        for (i = 0; i < size; i++) {
            String item1 = (String) model1.get(i);

            if (item1.equals("/etc/fstab")) {
                excludeFstab = true;
            }

            if (item1.equals("/etc/init.d/network")) {
                excludeNetwork = true;
            }

            if (item1.equals("/etc/init.d/killall")) {
                excludeKillall = true;
            }

            if (item1.equals("/etc/init.d/halt")) {
                excludeHalt = true;
            }

            if (item1.equals("/etc/rc.d/init.d/network")) {
                excludeNetwork = true;
            }

            if (item1.equals("/etc/rc.d/init.d/killall")) {
                excludeKillall = true;
            }

            if (item1.equals("/etc/rc.d/init.d/halt")) {
                excludeHalt = true;
            }

            excludeListStr += item1 + ";";
        }

        if (check) {
            if (excludeListStr.getBytes().length >= ResourceCenter.CONTENT_SIZE) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.errMsg.tooLongExcludeContent"));
                return null;
            }
        }

        if (check) {
            // 检查UWS不允许复制的目录
            if (bkClnt.isLinux()) {
                if (hasEtcDir) {
                    if (!excludeFstab || !excludeNetwork || !excludeKillall || !excludeHalt) {
                        JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectBakedFileDialog.errMsg.excludeEtcDir"));
                        return null;
                    }
                }
            }
        }

        return excludeListStr;
    }
    /*
    boolean needAddBkObj = false;
    public boolean bak_content_process(){
    boolean ok;
    needAddBkObj = false;

    String fileList = getBkList( true );
    if( fileList == null ) return false;
    String excludeList = getExcludeList( true );
    if( excludeList == null ) return false;

    boolean phyIncBak = false;
    boolean isSupportPhyInc = jCheckBox7.isSelected();
    int filetype = ResourceCenter.BAK_TYPE_FILE;
    if( isSupportPhyInc ){
    filetype |= ResourceCenter.BAK_TYPE_PHY_INC;
    phyIncBak = true;
    }

    if( this.bkobj != null ){
    if( this.bkobj.getFileName().equals( fileList)  &&
    this.bkobj.getExclude().equals( excludeList ) &&
    this.bkobj.getFileType().equals( filetype+"" )
    ){
    // 备份源没有变化
    return true;
    }else{
    //  先删除old的备份源
    ok = view.initor.mdb.deleteBakObj( bkobj.getBakObjID() );
    if( !ok ){
    SanBootView.log.error( getClass().getName()," #### delete older bkobj failed.");
    JOptionPane.showMessageDialog(this,
    ResourceCenter.getCmdString( ResourceCenter.CMD_DEL_BAKOBJECT )+
    ": "+
    view.initor.mdb.getErrorMessage()
    );
    return false;
    }else{
    view.initor.mdb.removeBakObjFromVector( bkobj );
    }
    }
    }

    // 先增加d2d client,因为BakObject要使用到
    if( bkClnt.getID() == -1 ){
    SanBootView.log.warning( getClass().getName(),"#### d2d client not exist, must add one.");
    ok = view.initor.mdb.addOneClient( bkClnt );
    if( !ok ){
    SanBootView.log.error( getClass().getName(),"#### add d2d client failed.");
    JOptionPane.showMessageDialog(view,
    ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_BAKOBJECT)+
    ": "+
    view.initor.mdb.getErrorMessage()
    );
    return false;
    }else{
    bkClnt.setID( view.initor.mdb.getNewId() );
    view.initor.mdb.addBakClntIntoCache( bkClnt );
    }
    }

    // add new bkobj
    BakObject newbakObj = new BakObject(
    -1,
    fileList,
    filetype + "",
    "", // linux's include,将来考虑
    "",
    false,
    excludeList,
    "",
    false,
    true,
    0,
    0,
    0,
    "",
    false,
    0,
    bkClnt.getID(),
    0,   //新增的backup object的backcup level都是0
    "",
    -1,
    0
    );

    File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_BKOBJ );
    if( tmpFile == null ){
    JOptionPane.showMessageDialog(this,
    SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed")
    );
    return false;
    }

    if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),newbakObj.prtMe() ) ){
    JOptionPane.showMessageDialog(this,
    SanBootView.res.getString("common.errmsg.sendFileFailed")+" : "+
    view.initor.mdb.getErrorMessage()
    );
    tmpFile.delete();
    return false;
    }
    tmpFile.delete();

    ok = view.initor.mdb.addBakObj( ResourceCenter.TMP_DIR + tmpFile.getName() );
    if( ok ){
    needAddBkObj = true;
    newbakObj.setBakObjID( view.initor.mdb.getNewId() );
    view.initor.mdb.addBakObjIntoVector( newbakObj );
    this.bkobj = newbakObj;
    }else{
    JOptionPane.showMessageDialog(this,
    ResourceCenter.getCmdString( ResourceCenter.CMD_ADD_BAKOBJECT)+
    ": "+
    view.initor.mdb.getErrorMessage()
    );
    return false;
    }

    return true;
    }
     */

    boolean needAddBkObj = false;

    /**
     * 
     * @return
     */
    public boolean bak_content_process() {
        boolean ok;
        needAddBkObj = false;

        String fileList = getBkList(true);
        if (fileList == null) {
            return false;
        }
        String aExcludeList = getExcludeList(true);
        if (aExcludeList == null) {
            return false;
        }

        boolean isSupportPhyInc = jCheckBox7.isSelected();
        int filetype = ResourceCenter.BAK_TYPE_FILE;
        if (isSupportPhyInc) {
            filetype |= ResourceCenter.BAK_TYPE_PHY_INC;
        }

        if (this.bkobj != null) {
            if (this.bkobj.getFileName().equals(fileList) &&
                    this.bkobj.getExclude().equals(aExcludeList) &&
                    this.bkobj.getFileType().equals(filetype + "")) {
                // 备份源没有变化
                return true;
            } else {
                // modify current bkobj
                ok = view.initor.mdb.modBakObj(this.bkobj.getBakObjID(), fileList, aExcludeList, filetype + "");
                if (ok) {
                    this.bkobj.setFileName(fileList);
                    this.bkobj.setExclude(aExcludeList);
                    this.bkobj.setFileType(filetype + "");
                    view.initor.mdb.modBakObjInVector(this.bkobj.getBakObjID(), fileList, aExcludeList, filetype + "");
                    return true;
                } else {
                    JOptionPane.showMessageDialog(this,
                            ResourceCenter.getCmdString(ResourceCenter.CMD_MOD_BAKOBJECT) +
                            ": " +
                            view.initor.mdb.getErrorMessage());
                    return false;
                }
            }
        } else {
            if (bkClnt.getID() <= 0) {
                // 先增加d2d client
                ok = view.initor.mdb.addOneClient(bkClnt);
                if (!ok) {
                    JOptionPane.showMessageDialog(view,
                            ResourceCenter.getCmdString(ResourceCenter.CMD_ADD_CLIENT) +
                            ": " +
                            view.initor.mdb.getErrorMessage());
                    return false;
                } else {
                    bkClnt.setID(view.initor.mdb.getNewId());
                    view.initor.mdb.addBakClntIntoCache(bkClnt);
                }
            }

            // add new bkobj
            BakObject newbakObj = new BakObject(
                    -1,
                    fileList,
                    filetype + "",
                    "", // linux's include,将来考虑
                    "",
                    false,
                    aExcludeList,
                    "",
                    false,
                    true,
                    0,
                    0,
                    0,
                    "",
                    false,
                    0,
                    bkClnt.getID(),
                    0, //新增的backup object的backcup level都是0
                    "",
                    -1,
                    0);

            File tmpFile = view.initor.mdb.createTmpFile(ResourceCenter.PREFIX, ResourceCenter.SUFFIX_BKOBJ);
            if (tmpFile == null) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed"));
                return false;
            }

            if (!view.initor.mdb.sendFileToServer(tmpFile.getName(), newbakObj.prtMe())) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("common.errmsg.sendFileFailed") + " : " +
                        view.initor.mdb.getErrorMessage());
                tmpFile.delete();
                return false;
            }
            tmpFile.delete();

            ok = view.initor.mdb.addBakObj(ResourceCenter.TMP_DIR + tmpFile.getName());
            if (ok) {
                if (view.initor.mdb.getNewId() > 0) {
                    needAddBkObj = true;
                    newbakObj.setBakObjID(view.initor.mdb.getNewId());
                    view.initor.mdb.addBakObjIntoVector(newbakObj);
                    this.bkobj = newbakObj;
                    return true;
                } else {
                    JOptionPane.showMessageDialog(this,
                            ResourceCenter.getCmdString(ResourceCenter.CMD_ADD_BAKOBJECT) +
                            ": " +
                            view.initor.mdb.getErrorMessage());
                    return false;
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_ADD_BAKOBJECT) +
                        ": " +
                        view.initor.mdb.getErrorMessage());
                return false;
            }
        }
    }

    private ArrayList<DBSchedule> getSchfromSchTable() {
        int nameCol = schedulerTable.getColumn(
                SanBootView.res.getString("SchedulerDialog.table.scheduler.name")).getModelIndex();

        DefaultTableModel tableModel = (DefaultTableModel) schedulerTable.getModel();
        int rowNum = tableModel.getRowCount();
        ArrayList<DBSchedule> newSchList = new ArrayList<DBSchedule>(rowNum);
        for (int i = 0; i < rowNum; i++) {
            DBSchedule sched = (DBSchedule) tableModel.getValueAt(i, nameCol);
            newSchList.add(sched);
        }
        return newSchList;
    }

    public boolean sch_process(String profname) {
        int i, size;
        boolean isOk;
        boolean ret = true;
        DBSchedule sch;

        ArrayList<DBSchedule> list = getSchfromSchTable();
        size = list.size();
        for (i = 0; i < size; i++) {
            sch = list.get(i);
            sch.setProfName(profname);
            sch.setObjId(this.bkobj.getBakObjID());
            sch.setLevel(this.intbklevel + "");
            isOk = view.initor.mdb.addOneScheduler(sch);
            if (!isOk && ret) {
                ret = false;
            } else {
                if (sch.getID() == -1) {
                    sch.setID(view.initor.mdb.getNewId());
                    view.initor.mdb.addSchIntoCache(sch);
                } else {
                    view.initor.mdb.removeSch(sch);
                    view.initor.mdb.addSchIntoCache(sch);
                }
            }
        }

        ArrayList<DBSchedule> delSch = getDelSch(list);
        size = delSch.size();
        for (i = 0; i < size; i++) {
            sch = delSch.get(i);
            isOk = view.initor.mdb.deleteOneScheduler(sch);
            if (!isOk && ret) {
                ret = false;
            } else {
                view.initor.mdb.removeSch(sch);
            }
        }
//System.out.println(" now size: "+view.initor.mdb.getSchNum() );
        return ret;
    }

    private ArrayList<DBSchedule> getDelSch(ArrayList<DBSchedule> newList) {
        int size, size1, i, j;
        DBSchedule oldSch, newSch;
        boolean founded = false;

        size = oldSchList.size();
        ArrayList<DBSchedule> ret = new ArrayList<DBSchedule>(size);
        size1 = newList.size();
        for (i = 0; i < size; i++) {
            oldSch = oldSchList.get(i);
            founded = false;
            for (j = 0; j < size1; j++) {
                newSch = newList.get(j);
                if (newSch.getID() == -1) {
                    continue;
                }
                if (newSch.getID() == oldSch.getID()) {
                    founded = true;
                    break;
                }
            }

            if (!founded) {
                ret.add(oldSch);
            }
        }

        return ret;
    }

    private void undo_crt_bkobj() {
        if (needAddBkObj) {
            // 不管结果
            view.initor.mdb.removeBakObjFromVector(bkobj);
            view.initor.mdb.deleteBakObj(bkobj.getBakObjID());
            this.bkobj = null;
        }
    }
    UniProfile profile = null;
    String targetSrvName = "";

    void okButton_actionPerformed(ActionEvent e) {
        UniProfile oldProfile;
        File tmpFile;
        boolean ok;

        // 检查要复制的文件系统是否被选择保护了
        if (!checkVolValidity()) {
            return;
        }

        if (targetSrvName.equals("")) {
            targetSrvName = view.initor.mdb.getHostName();
            if (targetSrvName.equals("")) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.getHostNameFailed"));
                return;
            }
        }

        if (isLoading) {
            SanBootView.log.info(getClass().getName(), "begin to modify a profile .....");
            tmpFile = view.initor.mdb.createTmpFile(ResourceCenter.PREFIX, ResourceCenter.SUFFIX_PROF);
            if (tmpFile == null) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed"));
                return;
            }

            ok = bak_content_process();
            if (!ok) {
                return;
            }

            profile = collectBakInfo();
            if (profile == null) {
                undo_crt_bkobj();
                return;
            }

            // 保存打开的profile，即覆盖原有的
            profile.setProfileName(loadUniProfile.getProfileName());
            profile.setIdentityProfileName();
            profile.setHeaderProfileName();
            SanBootView.log.debug(getClass().getName(), "profile: " + profile.prtMe());

            // 发送profile的内容
            if (!view.initor.mdb.sendFileToServer(tmpFile.getName(), profile.prtMe())) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("common.errmsg.sendFileFailed") + " : " +
                        view.initor.mdb.getErrorMessage());
                tmpFile.delete();
                undo_crt_bkobj();
                profile = null;
                return;
            }
            tmpFile.delete();

            // 将tmpFile move to profile dir
            ok = view.initor.mdb.moveFile(
                    ResourceCenter.TMP_DIR + tmpFile.getName(),
                    ResourceCenter.PROFILE_DIR + profile.toString());
            if (ok) {
                view.initor.mdb.removeProfFromCache(loadUniProfile);
                view.initor.mdb.addProfileToVector(profile);
                loadUniProfile = profile; // 新的 load profile
            } else {
                JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString(ResourceCenter.CMD_ADD_PROFILE) +
                        ": " +
                        SanBootView.res.getString("common.failed"));
                undo_crt_bkobj();
                profile = null;
                return;
            }
        } else { // 新增一个profile
            SanBootView.log.debug(getClass().getName(), "begin to add a profile .....");
            if (this.jCheckBox7.isSelected()) {
                boolean isOk = view.initor.mdb.updateLicenseCount();
                if (isOk) {
                    isOk = view.initor.mdb.hasDatabaseLicense();
                    if (!isOk) {
                        JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("EditProfileDialog.error.noDatabaseLicense"));
                        return;
                    }
                }
            }
            tmpFile = view.initor.mdb.createTmpFile(ResourceCenter.PREFIX, ResourceCenter.SUFFIX_PROF);
            if (tmpFile == null) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("common.errmsg.crtTmpFileLocallyFailed"));
                return;
            }

            ok = bak_content_process();
            if (!ok) {
                return;
            }

            profile = collectBakInfo();
            if (profile == null) {
                undo_crt_bkobj();
                return;
            }

            // 决 定 profile 的 名 字
            ProfileChooser chooser = new ProfileChooser(
                    view,
                    this,
                    SanBootView.res.getString("ProfileChooser.title.saveas"),
                    ProfileChooser.MODE_SAVE,
                    host);
            int width = 375 + ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
            int height = 255 + ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
            chooser.setSize(width, height);
            chooser.setLocation(this.getCenterPoint(width, height));
            chooser.setModal(true);
            chooser.setVisible(true);

            Object[] ret = chooser.getValues();
            if (ret == null) {
                undo_crt_bkobj();
                return;
            }

            if (ret.length == 2) { // 要 把 oldProfile 修 改 掉
                SanBootView.log.debug(getClass().getName(), "begin to overwrite a profile .....");
                oldProfile = (UniProfile) ret[0];
                profile.setProfileName(oldProfile.getProfileName());
                profile.setIdentityProfileName();
                profile.setHeaderProfileName();
                SanBootView.log.debug(getClass().getName(), "profile: " + profile.prtMe());

                // 发送profile的内容
                if (!view.initor.mdb.sendFileToServer(tmpFile.getName(), profile.prtMe())) {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("common.errmsg.sendFileFailed") + " : " +
                            view.initor.mdb.getErrorMessage());
                    tmpFile.delete();
                    undo_crt_bkobj();
                    profile = null;
                    return;
                }
                tmpFile.delete();

                // 将tmpFile move to profile dir
                ok = view.initor.mdb.moveFile(
                        ResourceCenter.TMP_DIR + tmpFile.getName(),
                        ResourceCenter.PROFILE_DIR + profile.toString());
                if (ok) {
                    // 将old profile的bkobj删除掉，不管结果�
                    UniProIdentity id = oldProfile.getUniProIdentity();
                    BakObject aBkobj = view.initor.mdb.getBakObjFromVector(id.getBkObj_ID());
                    if (aBkobj != null) {
                        view.initor.mdb.removeBakObjFromVector(aBkobj);
                        view.initor.mdb.deleteBakObj(aBkobj.getBakObjID());
                    }

                    view.initor.mdb.removeProfFromCache(oldProfile);
                    view.initor.mdb.addProfileToVector(profile);
                } else {
                    JOptionPane.showMessageDialog(this,
                            ResourceCenter.getCmdString(ResourceCenter.CMD_ADD_PROFILE) +
                            ": " +
                            SanBootView.res.getString("common.failed"));
                    undo_crt_bkobj();
                    profile = null;
                    return;
                }
            } else {// 要 新 增 一 个 profile
                UniProfile tmpNewProfile = (UniProfile) ret[0];
                profile.setProfileName(tmpNewProfile.getProfileName());
                profile.setIdentityProfileName();
                profile.setHeaderProfileName();
                SanBootView.log.debug(getClass().getName(), "profile: " + profile.prtMe());

                // 发送profile的内容
                if (!view.initor.mdb.sendFileToServer(tmpFile.getName(), profile.prtMe())) {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("common.errmsg.sendFileFailed") + " : " +
                            view.initor.mdb.getErrorMessage());
                    tmpFile.delete();
                    undo_crt_bkobj();
                    profile = null;
                    return;
                }
                tmpFile.delete();

                // 将tmpFile move to profile dir
                ok = view.initor.mdb.moveFile(
                        ResourceCenter.TMP_DIR + tmpFile.getName(),
                        ResourceCenter.PROFILE_DIR + profile.toString());
                if (ok) {
                    view.initor.mdb.addProfileToVector(profile);
                } else {
                    JOptionPane.showMessageDialog(this,
                            ResourceCenter.getCmdString(ResourceCenter.CMD_ADD_PROFILE) +
                            ": " +
                            SanBootView.res.getString("common.failed"));
                    undo_crt_bkobj();
                    profile = null;
                    return;
                }
            }
        }

        // add sch
        if (!sch_process(profile.getProfileName())) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.schfailed"));
        }

        this.dispose();
    }

    public UniProfile getProfile() {
        return profile;
    }
    // 部分生成profile,其余部分在init向导中生成。不能生成的部分涉及到卷的信息，而此时卷还没有生成。
    int intbklevel = -1;

    public UniProfile collectBakInfo() {
        int k, size1;
        UniProfile aProfile = new UniProfile();
        UniProIdentity identity = aProfile.getUniProIdentity();
        UniProHeader header = aProfile.getUniProHeader();
        UniProBackup backup = aProfile.getUniProBackup();
        UniProIBoot iboot = aProfile.getUniProIBoot();

        // 生成 identity 部分
        BakObject bakObj = this.bkobj;
        identity.setBkObj_ID(bakObj.getBakObjID() + "");
        identity.setBkObj_SN(bakObj.getBakObjSN() + "");

        intbklevel = -1;
        String level = (String) jComboBox1.getSelectedItem();
        if (level.equals(SanBootView.res.getString(BakObject.BAKLEVEL_FULL))) {
            intbklevel = 0;
        } else if (level.equals(SanBootView.res.getString(BakObject.BAKLEVLE_INC))) {
            intbklevel = 1;
        } else {
            intbklevel = 0;
        }
        identity.setSchLevel(intbklevel + "");
        identity.setClntID(bkClnt.getID() + "");
        identity.setAction("backup-file");
        //缺少一个profile name

        // 生成 header 部分
        header.setAct("backup-file");
        String befCmd = jTextField24.getText().trim();
        if (!befCmd.equals("")) {
            if (befCmd.getBytes().length > 1000) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.tooLongBefCmd"));
                return null;
            }
        }
        header.setPreCmd(befCmd);

        String postCmd = jTextField25.getText().trim();
        if (!postCmd.equals("")) {
            if (postCmd.getBytes().length > 1000) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.tooLongPostCmd"));
                return null;
            }
        }
        header.setPostCmd(postCmd);

        String snapBefCmd = jTextField4.getText().trim();
        if (!snapBefCmd.equals("")) {
            if (snapBefCmd.getBytes().length > 1000) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.tooLongSnapBefCmd"));
                return null;
            }
        }
        header.setSnapPreCmd(snapBefCmd);

        String snapPostCmd = jTextField5.getText().trim();
        if (!snapPostCmd.equals("")) {
            if (snapPostCmd.getBytes().length > 1000) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.tooLongSnapPostCmd"));
                return null;
            }
        }
        header.setSnapPostCmd(snapPostCmd);
        header.setLinux_lvm_snap(jCheckBox1.isSelected() ? "1" : "0");

        //生成 Backup部分
        if (bakObj != null) {
            String bkSrc = bakObj.getFileName();
            if (!bakObj.getInclude().equals("")) {
                // 只要bkobj中的include域不为空,那么就表示真正要备份的是include所表示的内容
                bkSrc = bakObj.getInclude();
            }
            backup.setSrc(bkSrc);
        }
        backup.setSrcType(bakObj.getFileType());

        String incFilter = jTextField13.getText().trim();
        if (!incFilter.equals("")) {
            if (incFilter.indexOf("/") >= 0 || incFilter.indexOf("\\") >= 0) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.errMsg.notHasSeparator"));
                return null;
            }

            if (incFilter.getBytes().length > 1000) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.tooLongIncFilter"));
                return null;
            }

            if (incFilter.charAt(incFilter.length() - 1) != ';') {
                incFilter += ";";
            }
            backup.setInclude(incFilter);
            backup.setInclCase("YES");
            backup.setInclType("4");
        }

        String excFilter = jTextField14.getText().trim();
        if (!excFilter.equals("")) {
            if (excFilter.indexOf("/") >= 0 || excFilter.indexOf("\\") >= 0) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.errMsg.notHasSeparator"));
                return null;
            }

            if (excFilter.getBytes().length > 1000) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.tooLongExcFilter"));
                return null;
            }

            if (excFilter.charAt(excFilter.length() - 1) != ';') {
                excFilter += ";";
            }
            backup.setExclude(excFilter);
            backup.setExclCase("YES");
            backup.setExclType("4");
        }

        String delRedundantData = jTextField1.getText().trim();
        if (delRedundantData.equals("")) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.invalidDelRedundantData"));
            return null;
        }

        int intDelReData = UniProBackup.DEFAULT_VAL_DEL_REDUNDANT;
        try {
            intDelReData = Integer.parseInt(delRedundantData);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.invalidDelRedundantData"));
            return null;
        }
        backup.setDeleteRedundantFile(intDelReData + "");

        backup.setKillPreCmd("0");
        backup.setBlkIncRstMode("0");
        backup.setPhyIncJudgeTimeFlag(jCheckBox3.isSelected() ? "1" : "0");
        backup.setBakWithSnapFlag(isMustCrtSnap() ? "1" : "0");
        backup.setExcludeFromBak(bakObj.getExclude());
        backup.setIgnore_all_copy_error(jCheckBox4.isSelected() ? "1" : "0");
        backup.setCrt_Snap(jRadioButton2.isSelected() ? "1" : "0");

        if (oldProf != null) { // 将 ib_snap_bf_cmd 和 ib_snap_bf_cmd1 再写回去
            UniProIBoot uiboot = oldProf.getUniProIBoot();
            ArrayList snap_bf_cmd_list = uiboot.getIboot_snap_bf_cmd_list();
            size1 = snap_bf_cmd_list.size();
            for (k = 0; k < size1; k++) {
                iboot.addIboot_snap_bf_cmd((String) snap_bf_cmd_list.get(k));
            }
            snap_bf_cmd_list = uiboot.getIboot_snap_bf_cmd1_list();
            size1 = snap_bf_cmd_list.size();
            for (k = 0; k < size1; k++) {
                iboot.addIboot_snap_bf_cmd1((String) snap_bf_cmd_list.get(k));
            }
        }

        iboot.setUws_username(view.initor.user);
        iboot.setUws_passwd(view.initor.passwd);
        //iboot.setUws_ip(view.initor.getTxIP(bkClnt.getIP()));
//        iboot.setUws_ip(view.initor.getDhcpIp());
        iboot.setUws_ip(txIP);
        iboot.setUws_port(view.initor.port + "");

        iboot.setLogout_target(jCheckBox2.isSelected() ? "1" : "0");

        return aProfile;
    }

    public static UniProfile getHidenFsProfile(BakObject bakObj1, BackupClient bkClnt,
            String user, String passwd, String uws_ip, int port) {
        UniProfile aProfile = new UniProfile();
        UniProIdentity identity = aProfile.getUniProIdentity();
        UniProHeader header = aProfile.getUniProHeader();
        UniProBackup backup = aProfile.getUniProBackup();
        UniProIBoot iboot = aProfile.getUniProIBoot();

        // 生成 identity 部分
        BakObject bakObj = bakObj1;
        identity.setBkObj_ID(bakObj.getBakObjID() + "");
        identity.setBkObj_SN(bakObj.getBakObjSN() + "");

        identity.setSchLevel("0");
        identity.setClntID(bkClnt.getID() + "");
        identity.setAction("backup-file");
        //缺少一个profile name

        // 生成 header 部分
        header.setAct("backup-file");
        header.setLinux_lvm_snap("0");

        //生成 Backup部分
        if (bakObj != null) {
            String bkSrc = bakObj.getFileName();
            if (!bakObj.getInclude().equals("")) {
                // 只要bkobj中的include域不为空,那么就表示真正要备份的是include所表示的内容
                bkSrc = bakObj.getInclude();
            }
            backup.setSrc(bkSrc);
        }
        backup.setSrcType(bakObj.getFileType());
        backup.setDeleteRedundantFile("10");

        backup.setKillPreCmd("0");
        backup.setBlkIncRstMode("0");
        backup.setPhyIncJudgeTimeFlag("0");
        backup.setBakWithSnapFlag("0");
        backup.setExcludeFromBak(bakObj.getExclude());
        backup.setIgnore_all_copy_error("0");
        backup.setCrt_Snap("0");

        iboot.setUws_username(user);
        iboot.setUws_passwd(passwd);
        iboot.setUws_ip(uws_ip);
        iboot.setUws_port(port + "");
        iboot.setLogout_target("1");

        return aProfile;
    }

    private boolean checkVolValidity() {
        Enumeration list;

        if (host.isWinHost()) {
            getMpListForWin();

            if (winSrcList.size() <= 0) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.getMp"));
                return false;
            }

            list = winSrcList.elements();
            while (list.hasMoreElements()) {
                String src = (String) list.nextElement();
                SanBootView.log.debug(getClass().getName(), " =====>: " + src + ":\\");
                if (!selProtectFs.isThisFsProtected(src + ":\\")) {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : " + src);
                    return false;
                }
            }
        } else {
            getMpListForLinux();

            if (unixSrcList.size() <= 0) {
                JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("EditProfileDialog.error.getMp"));
                return false;
            }

            list = unixSrcList.elements();
            while (list.hasMoreElements()) {
                BindOfFSAndDevNo binder = (BindOfFSAndDevNo) list.nextElement();
                SanBootView.log.debug(getClass().getName(), "====> " + binder.mp);
                if (!selProtectFs.isThisFsProtected(binder.mp)) {
                    JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("EditProfileDialog.error.noSWULV") + " : " + binder.mp);
                    return false;
                }
            }
        }

        return true;
    }

    private void getMpListForWin() {
        String src, driver;
        Object val;
        int ch, key;

        winSrcList.clear();

        int size = model.size();
        for (int i = 0; i < size; i++) {
            src = (String) model.elementAt(i);
            try {
                // 全部统一成大写的
                src = src.toUpperCase();
                ch = src.charAt(0);
                if (ch == '/' || ch == '\\') {
                    src = src.substring(1);
                }
                driver = src.substring(0, 1);
                key = (int) driver.charAt(0);
            } catch (Exception ex) {
                continue;
            }

            val = winSrcList.get(new Integer(key));
            if (val == null) {
                winSrcList.put(new Integer(key), driver);
            }
        }
    }

    // 根据fs list从复制内容里筛选出要复制的fs(只需通信一次)
    private void getMpListForLinux() {
        Object[] sortedFsList = null;
        String src, fs, fs1;
        int i, j, size, len, strlen;
        char ch;
        Object val;
        BindOfFSAndDevNo binder;

        this.unixSrcList.clear();

        if (rootListForLinux != null && rootListForLinux.size() > 0) {
            SanBootView.log.info(getClass().getName(), "fs list is from FsListFetcher.");
            sortedFsList = rootListForLinux.toArray();
            Arrays.sort(sortedFsList);
        } else {
            SanBootView.log.info(getClass().getName(), "fs list is from getUnixPart.");
            boolean ok = view.initor.mdb.getUnixPart(host.getIP(), host.getPort(), "list_mp.sh");
            if (ok) {
                ArrayList list = view.initor.mdb.getFsList();
                partList = view.initor.mdb.getUnixSysPart();
                sortedFsList = list.toArray();
                Arrays.sort(sortedFsList);
            } else {
                SanBootView.log.error(getClass().getName(), " get fs list by getUnixPart cmd failed.");
            }
        }

        if (sortedFsList != null) {
            size = model.size();
            len = sortedFsList.length;
            for (i = 0; i < size; i++) {
                src = (String) model.elementAt(i);

                for (j = len - 1; j >= 0; j--) {
                    fs = (String) sortedFsList[j];
                    if (src.startsWith(fs)) {
                        val = unixSrcList.get(fs);
                        if (val == null) {
                            strlen = fs.length();
                            if (strlen > 1) {
                                ch = fs.charAt(strlen - 1);
                                if (ch == '/' || ch == '\\') {
                                    fs1 = fs.substring(0, strlen - 1);
                                } else {
                                    fs1 = fs;
                                }
                            } else {
                                fs1 = fs;
                            }

                            binder = new BindOfFSAndDevNo();
                            binder.mp = fs1;
                            unixSrcList.put(fs, binder);
                        }
                        break;
                    }
                }
            }
        }
    }

    public void initUi(UniProfile profile) {
        if (profile == null) {
            return;
        }

        String title = this.getTitle();
        this.setTitle(title + "[ " + profile.getProfileNameWithoutExtName() + " ]");

        boolean lostBkObj = false, lostSch = false;

        UniProIdentity identity = profile.getUniProIdentity();
        UniProHeader header = profile.getUniProHeader();
        UniProBackup backup = profile.getUniProBackup();
        UniProIBoot iboot = profile.getUniProIBoot();

        isLoading = true;
        loadUniProfile = profile;

        jTextField24.setText(header.getPreCmd());
        jTextField25.setText(header.getPostCmd());
        jTextField4.setText(header.getSnapPreCmd());
        jTextField5.setText(header.getSnapPostCmd());
        jTextField13.setText(backup.getInclude());
        jTextField14.setText(backup.getExclude());

        if (identity.getSchLevel().equals("0")) {
            jComboBox1.setSelectedItem(
                    SanBootView.res.getString(BakObject.BAKLEVEL_FULL));
        } else if (identity.getSchLevel().equals("1")) {
            jComboBox1.setSelectedItem(
                    SanBootView.res.getString(BakObject.BAKLEVLE_INC));
        } else {
            jComboBox1.setSelectedItem(
                    SanBootView.res.getString(BakObject.BAKLEVEL_FULL));
        }

        jCheckBox1.setSelected(header.isLinuxLVMSnap());
        jCheckBox2.setSelected(iboot.isAutoLogout());
        jCheckBox3.setSelected(backup.isPhyIncJudgeTime());
        jCheckBox4.setSelected(backup.isIgnore_all_copy_error());
        jCheckBox5.setSelected(backup.isBakWithSnap());
        if (backup.isCrtSnap()) {
            jRadioButton2.setSelected(true);
            this.do_click_radioBtn2();
        } else {
            jRadioButton1.setSelected(true);
            this.do_click_radioBtn1();
        }

        if (backup.isDeleteRedundantFileNumValid()) {
            jTextField1.setText(backup.getDeleteRedundantFile());
        } else {
            jTextField1.setText(UniProBackup.DEFAULT_VAL_DEL_REDUNDANT + "");
        }

        try {
            int bakObjId = Integer.parseInt(identity.getBkObj_ID());
            BakObject bakObj = view.initor.mdb.getBakObjFromVector(bakObjId);
            if (bakObj != null) {
                jCheckBox7.setSelected(bakObj.isSupportPhyInc());
                setupBakSourcePane(bakObj.getFileName(), bakObj.getExclude());
                jTextField11.setText(bakObj.getLastBkTimeStr());
            } else {
                lostBkObj = true;
            }
        } catch (Exception ex) {
            lostBkObj = true;
        }

        ArrayList schList = view.initor.mdb.getSchOnProfName(profile.getProfileName());
        int size = schList.size();
        for (int i = 0; i < size; i++) {
            addRowToSchTable((DBSchedule) schList.get(i));
        }

        if (lostBkObj) {
            JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("EditProfileDialog.error.lostBakObj"));
        }
    }

    public Point getCenterPoint(int width, int height) {
        int x = (getSize().width - width) / 2 + getX();
        int y = (getSize().height - height) / 2 + getY();
        return new Point(x, y);
    }

    void importButton_actionPerformed(ActionEvent e) {
    }

    public String getBootMac() {
        return bootMac;
    }

    public String getTxIP() {
        return txIP;
    }


}
