/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditMjSchDialog.java
 *
 * Created on 2010-9-8, 11:02:53
 */

package guisanboot.remotemirror.ui;

import guisanboot.remotemirror.entity.MirrorJobSch;
import guisanboot.remotemirror.ui.multiRenderTable.JTableForMjSch;
import guisanboot.remotemirror.ui.multiRenderTable.MyDefaultTableModelForMJSch;
import guisanboot.remotemirror.ui.multiRenderTable.MyTableHeaderRenderer;
import guisanboot.ui.SanBootView;
import guisanboot.ui.multiRenderTable.CheckBoxEditor;
import guisanboot.ui.multiRenderTable.RowEditorModel;
import java.awt.Color;
import javax.swing.BorderFactory;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author zjj
 */
public class EditMjSchDialog extends javax.swing.JDialog {

    /** Creates new form EditMjSchDialog */
    public EditMjSchDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public EditMjSchDialog( SanBootView view,MirrorJobSch mjSch ){
        this( view,true );
        myInit( view,mjSch );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 1, 3, 1));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 35, 5));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        jPanel3.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel4.setPreferredSize(new java.awt.Dimension(400, 25));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        jCheckBox1.setText("Default Time:10 p.m  to 6 a.m at tomorrow");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox1);

        jCheckBox2.setText("Select All");
        jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox2);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.ret = null;
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        do_defaultTimeBox();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        do_selAllBox();
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        do_okButton();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EditMjSchDialog dialog = new EditMjSchDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    Object ret = null;
    SanBootView view;
    MirrorJobSch mjSch;
    JTableForMjSch table;

    public void myInit( SanBootView view,MirrorJobSch mjSch ){
        this.view = view;
        this.mjSch = mjSch;

        setupTable();
        initUI();
        setupLanguage();
    }

    private void setupTable(){
        int colNum = 8;
        Object[][] data = new Object[24][colNum];
        Object[] header = new Object[colNum];
        
        header[0] = "";
        header[1] = SanBootView.res.getString("View.table.mjsch.mon");
        header[2] = SanBootView.res.getString("View.table.mjsch.tue");
        header[3] = SanBootView.res.getString("View.table.mjsch.wed");
        header[4] = SanBootView.res.getString("View.table.mjsch.thu");
        header[5] = SanBootView.res.getString("View.table.mjsch.fri");
        header[6] = SanBootView.res.getString("View.table.mjsch.sat");
        header[7] = SanBootView.res.getString("View.table.mjsch.sun");

        for( int i=0; i<24; i++ ){
            data[i][0] = i+"";
            data[i][1] = new Boolean( true );
            data[i][2] = new Boolean( true );
            data[i][3] = new Boolean( true );
            data[i][4] = new Boolean( true );
            data[i][5] = new Boolean( true );
            data[i][6] = new Boolean( true );
            data[i][7] = new Boolean( true );
        }

        MyDefaultTableModelForMJSch model = new MyDefaultTableModelForMJSch( data,header );
        table = new JTableForMjSch( model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );

        RowEditorModel rm = new RowEditorModel();
        table.setRowEditorModel( rm );

        CheckBoxEditor cb1 = new CheckBoxEditor();
        rm.addEditorForRow( 1, cb1 );
        CheckBoxEditor cb2 = new CheckBoxEditor();
        rm.addEditorForRow( 2, cb2 );
        CheckBoxEditor cb3 = new CheckBoxEditor();
        rm.addEditorForRow( 3, cb3 );
        CheckBoxEditor cb4 = new CheckBoxEditor();
        rm.addEditorForRow( 4, cb4 );
        CheckBoxEditor cb5 = new CheckBoxEditor();
        rm.addEditorForRow( 5, cb5 );
        CheckBoxEditor cb6 = new CheckBoxEditor();
        rm.addEditorForRow( 6, cb6 );
        CheckBoxEditor cb7 = new CheckBoxEditor();
        rm.addEditorForRow( 7, cb7 );
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum1 = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 45 );
        tableColumnModel.getColumn(1).setWidth( 75 );
        tableColumnModel.getColumn(2).setWidth( 75 );
        tableColumnModel.getColumn(3).setWidth( 75 );
        tableColumnModel.getColumn(4).setWidth( 75 );
        tableColumnModel.getColumn(5).setWidth( 75 );
        tableColumnModel.getColumn(6).setWidth( 75 );
        tableColumnModel.getColumn(7).setWidth( 75 );
        for( int i=0; i<colNum1; i++ )
            table.sizeColumnsToFit(i);

        java.util.GregorianCalendar cal = new java.util.GregorianCalendar();
        int weekDay = cal.get( java.util.GregorianCalendar.DAY_OF_WEEK );
        int week_day = ( weekDay == 1 )?  7: ( weekDay-1 );
        for( int i=0; i<8; i++ ){
            tableColumnModel.getColumn( i ).setHeaderRenderer(
                new MyTableHeaderRenderer( i == week_day )
            );
        }

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed( false );
        
        this.jScrollPane1.getViewport().add( this.table,null );
        jScrollPane1.getViewport().setBackground( Color.white );
    }

    private void editTable( String[] selTime,int col ){
        DefaultTableModel model = (DefaultTableModel)table.getModel();
       for( int i=0; i<24; i++ ){
           model.setValueAt( new Boolean( this.isContainedInSelectedTime( selTime, i+"" ) ), i, col );
       }
    }

    private void initUI(){
        if( this.mjSch == null ) return;
        
        String[] selTime = this.mjSch.getSelectedClock( mjSch.getScheduler_mon() );
        this.editTable( selTime, 1 );
        selTime = this.mjSch.getSelectedClock( mjSch.getScheduler_tue() );
        this.editTable( selTime, 2 );
        selTime = this.mjSch.getSelectedClock( mjSch.getScheduler_wed() );
        this.editTable( selTime, 3 );
        selTime = this.mjSch.getSelectedClock( mjSch.getScheduler_thu() );
        this.editTable( selTime, 4 );
        selTime = this.mjSch.getSelectedClock( mjSch.getScheduler_fri() );
        this.editTable( selTime, 5 );
        selTime = this.mjSch.getSelectedClock( mjSch.getScheduler_sat() );
        this.editTable( selTime, 6 );
        selTime = this.mjSch.getSelectedClock( mjSch.getScheduler_sun() );
        this.editTable( selTime, 7 );
    }
    
    private boolean isContainedInSelectedTime( String[] selTime,String clock ){
        for( int i=0; i<selTime.length; i++ ){
            if( selTime[i].equals( clock ) ){
                return true;
            }
        }
        return false;
    }

    private boolean isContainedInDefaultTime( String clock ){
        int[] defaultTime = new int[]{ 22,23,0,1,2,3,4,5,6 };
        for( int i=0; i<defaultTime.length; i++ ){
            if( clock.equals( defaultTime[i]+"" ) ){
                return true;
            }
        }
        return false;
    }
    
    private void do_defaultTimeBox(){
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            String clock = (String)model.getValueAt( row,0 );
            if( !this.isContainedInDefaultTime( clock ) ) {
                for( int j=1; j<8; j++ ){
                    model.setValueAt( new Boolean( false ), row, j );
                }
            }else{
                for( int j=1; j<8; j++ ){
                    model.setValueAt( new Boolean( this.jCheckBox1.isSelected() ), row, j );
                }
            }
            fireEditingStopMsg();
        }
        fireEditingStopMsg();
    }

    private void do_selAllBox(){
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            for( int j=1; j<8; j++ ){
                model.setValueAt( new Boolean( this.jCheckBox2.isSelected() ), row, j );
            }
            fireEditingStopMsg();
        }
        fireEditingStopMsg();
    }

    private void setupLanguage(){
        if( this.mjSch == null ){
            this.setTitle( SanBootView.res.getString("EditMjSchDialog.title") );
        }else{
            this.setTitle( SanBootView.res.getString("EditMjSchDialog.title1") );
        }
        this.jButton1.setText(SanBootView.res.getString("common.button.ok"));
        this.jButton2.setText( SanBootView.res.getString("common.button.cancel"));
        this.jCheckBox1.setText( SanBootView.res.getString("EditMjSchDialog.checkBox.defaultTime"));
        this.jCheckBox2.setText( SanBootView.res.getString("EditMjSchDialog.checkBox.selAll"));
    }

    public Object getRetVal(){
        return ret;
    }

    public void fireEditingStopMsg(){
        TableCellEditor dce;

        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            for( int j=1; j<8; j++ ){
                dce = table.getCellEditor( i,j );
                if( dce != null ){
                    try{
                        while( !dce.stopCellEditing() ){}
                    }catch(Exception ex){}
                }
            }
        }
    }

    private String getValueInCol( int col ){
        StringBuffer buf = new StringBuffer();
        boolean isFirst = true;
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        for( int i=0; i<24; i++ ){
            Boolean isSel = (Boolean)model.getValueAt( i,col );
            if( isSel ){
                if( isFirst ){
                    buf.append( i+"" );
                    isFirst = false;
                }else{
                    buf.append( "," + i + "" );
                }
            }
        }
        return buf.toString();
    }

    private void do_okButton(){
        this.fireEditingStopMsg();
        
        String mon_time = this.getValueInCol( 1 );
        String tue_time = this.getValueInCol( 2 );
        String wed_time = this.getValueInCol( 3 );
        String thu_time = this.getValueInCol( 4 );
        String fri_time = this.getValueInCol( 5 );
        String sat_time = this.getValueInCol( 6 );
        String sun_time = this.getValueInCol( 7 );

        MirrorJobSch newMjSch = new MirrorJobSch(
            mon_time,
            tue_time,
            wed_time,
            thu_time,
            fri_time,
            sat_time,
            sun_time
        );

        ret = newMjSch;

        this.dispose();
    }
}
