/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SetupMjSchDialog.java
 *
 * Created on 2010-9-9, 11:22:04
 */

package guisanboot.remotemirror.ui;

import guisanboot.data.MirrorJob;
import guisanboot.remotemirror.entity.MJWrapper;
import guisanboot.remotemirror.entity.MirrorJobSch;
import guisanboot.remotemirror.entity.PesudoMJSch;
import guisanboot.remotemirror.ui.multiRenderTable.JTableForSetupMjSch;
import guisanboot.remotemirror.ui.multiRenderTable.MirrorJobSchPaneEditor;
import guisanboot.remotemirror.ui.multiRenderTable.MyDefaultTableModelForTableForSetupMjSch;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.InitProgramDialog;
import guisanboot.ui.SanBootView;
import guisanboot.ui.SlowerLaunch;
import guisanboot.ui.multiRenderTable.CheckBoxEditor;
import guisanboot.ui.multiRenderTable.RowEditorModel;
import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author zjj
 */
public class SetupMjSchDialog extends javax.swing.JDialog implements SlowerLaunch{

    /** Creates new form SetupMjSchDialog */
    public SetupMjSchDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public SetupMjSchDialog( SanBootView view ) {
         this( view,true );
         myInit( view );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        jCheckBox1.setText("Select All");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox1);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 5));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        retVal = new Integer(0);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        do_okBtn();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        do_selAllOpt();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SetupMjSchDialog dialog = new SetupMjSchDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private String status = "";
    private int cnt = 0;
    private int totalStep = 0;
    private String errormsg = "";
    private Object retVal = null;

    SanBootView view;
    JTableForSetupMjSch table;

    private void myInit( SanBootView view ){
        this.view = view;

        setupTable();
        setupLanguage();
    }

    private MirrorJobSch getSeledMjSch( ArrayList mjSchList,int sch_id ){
        int size = mjSchList.size();
        for( int i=0; i<size; i++ ){
            MirrorJobSch mjSch = (MirrorJobSch)mjSchList.get(i);
            if( mjSch.getScheduler_id() == sch_id ){
                return mjSch;
            }
        }
        return (MirrorJobSch)mjSchList.get( 0 );
    }

    private void setupTable(){
        ArrayList mjSchList = view.initor.mdb.getAllMjSch();
        mjSchList.add( 0, new PesudoMJSch() );

        ArrayList<MirrorJob> aMjList = view.initor.mdb.getAllMj();
        int num = aMjList.size();
        ArrayList mjList1 = new ArrayList( num );
        for( int i=0; i<num; i++ ){
            mjList1.add( new MJWrapper( aMjList.get(i) ) );
        }
        int colNum = 3;

        Object[][] data = new Object[num][colNum];
        Object[] header = new Object[colNum];

        header[0] = SanBootView.res.getString("common.sel");
        header[1] = SanBootView.res.getString("SetupMjSchDialog.table.mjName");
        header[2] = SanBootView.res.getString("common.mjSchList");

        for( int i=0; i<num; i++ ){
            MJWrapper mj = (MJWrapper)mjList1.get(i);
            
            data[i][0] = new Boolean( false );
            data[i][1] = mj;
            data[i][2] = getSeledMjSch( mjSchList,mj.mj.getMj_scheduler() );
        }

        MyDefaultTableModelForTableForSetupMjSch model = new MyDefaultTableModelForTableForSetupMjSch( data,header );
        table = new JTableForSetupMjSch( mjSchList,model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        RowEditorModel rm = new RowEditorModel();
        ((JTableForSetupMjSch)table).setRowEditorModel( rm );

        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );
        
        MirrorJobSchPaneEditor mjSchEditor = new MirrorJobSchPaneEditor( mjSchList,this );
        rm.addEditorForRow( 2,mjSchEditor );
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        tableColumnModel.getColumn(0).setWidth( 45 );
        tableColumnModel.getColumn(1).setWidth( 170 );
        tableColumnModel.getColumn(2).setWidth( 250 );
        for( int j=0;j<colNum;j++ )
            table.sizeColumnsToFit(j);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);

        jScrollPane1.getViewport().add( table,null );
        jScrollPane1.getViewport().setBackground( Color.white );
    }

    private void do_selAllOpt(){
        boolean isSel = this.jCheckBox1.isSelected();

        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            model.setValueAt( new Boolean( isSel ), row, 0 );
        }
        fireEditingStopMsg();
    }

    public void fireEditingStopMsg(){
        TableCellEditor dce;

        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            for( int j=0; j<3; j++ ){
                if( j == 1 ) continue;

                dce = table.getCellEditor( i,j );
                if( dce != null ){
                    try{
                        while( !dce.stopCellEditing() ){}
                    }catch(Exception ex){}
                }
            }
        }
    }

    private void setupLanguage(){
        this.setTitle( SanBootView.res.getString("SetupMjSchDialog.title") );
        this.jCheckBox1.setText( SanBootView.res.getString("SetupMjSchDialog.checkbox.selAll") );
        this.jButton1.setText( SanBootView.res.getString("common.button.ok") );
        this.jButton2.setText( SanBootView.res.getString("common.button.cancel") );
    }

    public Point getCenterPoint(int width,int height){
        int x = ( getSize().width - width ) / 2 + getX();
        int y = ( getSize().height - height ) / 2 + getY();
        return new Point(x,y);
    }

    ArrayList<MirrorJob> mjList = new ArrayList<MirrorJob>();
    private void do_okBtn(){
        boolean hasErr = false;
        this.fireEditingStopMsg();

        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            if( !((Boolean)model.getValueAt( row, 0 )).booleanValue() ) continue;
            
            MirrorJob mj = ((MJWrapper)model.getValueAt( row,1 )).mj;
            if( mj.isMJStart() ){
                boolean ok = view.initor.mdb.checkMg( mj.getMj_mg_id() );
                if( ok ){
                    // mg is still running.
SanBootView.log.error(this.getClass().getName(),"Mj and mg are all running. Don't modify this mj: " + mj.getMj_job_name() );
                    JOptionPane.showMessageDialog(view,
                        SanBootView.res.getString("MenuAndBtnCenter.error.mjisrunning1") +" : " + mj.getMj_job_name()
                    );
                    hasErr = true;
                    break;
                }else{
SanBootView.log.error(this.getClass().getName(),"Mj is running,but mg already stopped. So we stop mj directly for modifying it." );
                    // mg already stopped. So stop mj directly.
                    ok = view.initor.mdb.stopMj( mj.getMj_id() );
                    if( !ok ){
                        JOptionPane.showMessageDialog(view,
                            SanBootView.res.getString("MenuAndBtnCenter.error.mjisrunning1") +" : " + mj.getMj_job_name()
                        );
                        hasErr = true;
                        break;
                    }
                }
            }

            MirrorJobSch mjSch = (MirrorJobSch)model.getValueAt( row,2 );
            mj.setMj_scheduler( mjSch.getScheduler_id() );
            mjList.add( mj );
        }
        
        if( hasErr ) return;

        // 图形化地显示修改过程
        status = "";
        errormsg = "";
        cnt = 0;
        totalStep = mjList.size();
        if( totalStep <=0 ) {
            JOptionPane.showMessageDialog( this,
                SanBootView.res.getString("SetupMjSchDialog.error.noSel")
            );
            return;
        }

        this.dispose();

        InitProgramDialog initDiag = new InitProgramDialog(
            view,
            SanBootView.res.getString("SetupMjSchDialog.title.crtMj"),
            SanBootView.res.getString("SetupMjSchDialog.label.tip.crtMj")
        );
        Thread initThread = new Thread( new BatchedOpForMj( initDiag,this ) );
        initThread.start();
        int width  = 300+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 120+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        initDiag.setSize( width, height );
        initDiag.setLocation( view.getCenterPoint(width,height) );
        initDiag.setVisible( true );

        retVal = new Integer(1);
    }

    public boolean init(){
        boolean isFirst=true,retValue =true,isOk;

        StringBuffer errBuf = new StringBuffer();

        int size = this.mjList.size();
        for( int i=0; i<size; i++ ){
            MirrorJob mj = this.mjList.get( i );
            cnt++;
            status = SanBootView.res.getString("SetupMjSchDialog.loadstatus.setup") + " " + mj.getMj_job_name();

            isOk = view.initor.mdb.modMjScheduler( mj.getMj_id(),mj.getMj_scheduler() );
            if( !isOk ){
                retValue = false;
                if( isFirst ){
                    errBuf.append( mj.getMj_job_name() );
                    isFirst = false;
                }else{
                    errBuf.append(","+mj.getMj_job_name() );
                }
            }
        } // for end

        if( !retValue ){
            errormsg = SanBootView.res.getString("SetupMjSchDialog.error.setup") + errBuf.toString();
        }else{
            errormsg = "";
        }

        return retValue;
    }

    public String getLoadingStatus(){
        return status;
    }

    public int getLoadingProcessVal(){
        return ( cnt * 100 )/totalStep;
    }

    public String getInitErrMsg(){
        return errormsg;
    }

    public boolean isCrtVG(){
        return false;
    }

    public String getSrvIP(){
        return "";
    }

    public Object getRetVal(){
        return this.retVal;
    }
}
