/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StartOrStopMjInBatchDialog.java
 *
 * Created on 2010-8-18, 11:12:01
 */

package guisanboot.remotemirror.ui;

import guisanboot.data.AbstractNetworkRunning;
import guisanboot.data.BootHost;
import guisanboot.data.DeleteMjThread;
import guisanboot.data.MirrorGrp;
import guisanboot.data.MirrorJob;
import guisanboot.data.SourceAgent;
import guisanboot.data.StartorStopMjThread;
import guisanboot.res.ResourceCenter;
import guisanboot.ui.InitProgramDialog;
import guisanboot.ui.SanBootView;
import guisanboot.ui.SlowerLaunch;
import guisanboot.ui.multiRenderTable.CheckBoxEditor;
import guisanboot.ui.multiRenderTable.RowEditorModel;
import guisanboot.unlimitedIncMj.service.StartorStopCjThread;
import guisanboot.unlimitedIncMj.service.StartorStopUnlimitedIncMjThread;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumnModel;
import guisanboot.remotemirror.ui.multiRenderTable.JTableForMJ;
import guisanboot.remotemirror.ui.multiRenderTable.MyDefaultTableModelForMJ;

/**
 *
 * @author zjj
 */
public class StartOrStopMjInBatchDialog extends javax.swing.JDialog implements SlowerLaunch,BatchedOpForMjInterface {

    /** Creates new form StartOrStopMjInBatchDialog */
    public StartOrStopMjInBatchDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public StartOrStopMjInBatchDialog( SanBootView view ){
        this( view,true );
        myInit( view );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 5));

        jButton1.setText("QuickStart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setText("Start");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        jButton3.setText("Stop");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);

        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5);

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4);

        jPanel3.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel4.setPreferredSize(new java.awt.Dimension(400, 25));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        jCheckBox1.setText("Select All");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox1);

        jCheckBox2.setText("Forced to delete");
        jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1));
        jPanel4.add(jCheckBox2);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        retVal = new Integer(0);
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        do_selCheckBox();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        do_qStart();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        do_start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        do_stop();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        do_delete();
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StartOrStopMjInBatchDialog dialog = new StartOrStopMjInBatchDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private JTableForMJ table = new JTableForMJ();
    private String status="";
    private int cnt = 0;
    private int totalStep = 0;
    private ArrayList<MirrorJob> mjList = new ArrayList<MirrorJob>();

    public final static int what_qstart = 1;
    public final static int what_start = 2;
    public final static int what_stop = 3;
    public final static int what_delete = 4;
    private int whatToDo;  // 1: qstart 2: start 3: stop
    
    private SanBootView view;
    private String errormsg = "";
    private Object retVal = null;

    private HashMap<Integer,Boolean> set_bootHost = new HashMap<Integer,Boolean>();
    private HashMap<Integer,Boolean> set_srcAgnt = new HashMap<Integer,Boolean>();
    
    private void myInit( SanBootView view ){
        this.view = view;
        setupMJTable();

        setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );

        jButton1.setEnabled( false );
        jButton2.setEnabled( false );
        jButton3.setEnabled( false );
        jButton4.setEnabled( false );
        jButton5.setEnabled( false );

        setupLanguage();
    }
    
    private void setupLanguage(){
        this.setTitle( SanBootView.res.getString("StartOrStopMjInBatchDialog.title") );
        this.jButton1.setText( SanBootView.res.getString("StartOrStopMjInBatchDialog.btn.qStart"));
        this.jButton2.setText( SanBootView.res.getString("StartOrStopMjInBatchDialog.btn.start"));
        this.jButton3.setText( SanBootView.res.getString("StartOrStopMjInBatchDialog.btn.stop"));
        this.jButton4.setText( SanBootView.res.getString("common.button.cancel"));
        this.jButton5.setText( SanBootView.res.getString("common.button.del"));
        this.jCheckBox1.setText( SanBootView.res.getString("common.selectAll") );
        this.jCheckBox2.setText( SanBootView.res.getString("StartOrStopMjInBatchDialog.checkBox.forceDel") );
    }

    public JTable getTable(){
        return this.table;
    }

    public void setupMJTable(){
        int colNum = 11;
        Object[][] data = new Object[0][colNum];
        Object[] header = new Object[colNum];

        header[0] = SanBootView.res.getString("common.sel");
        header[1] = SanBootView.res.getString("View.table.mj.id");
        header[2] = SanBootView.res.getString("View.table.mj.name");
        header[3] = SanBootView.res.getString("View.table.mj.type");
        header[4] = SanBootView.res.getString("View.table.mj.status");
        header[5] = SanBootView.res.getString("View.table.mj.mjInfo");
        header[6] = SanBootView.res.getString("View.table.mj.swu_ip");
        header[7] = SanBootView.res.getString("View.table.mj.swu_port");
        header[8] = SanBootView.res.getString("View.table.mj.swu_pool");
        header[9] = SanBootView.res.getString("View.table.mj.opt");
        header[10]= SanBootView.res.getString("View.table.mj.desc");

        MyDefaultTableModelForMJ model = new MyDefaultTableModelForMJ( data,header );
        table = new JTableForMJ( model );
        table.setRowHeight( 20 );
        table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );

        RowEditorModel rm = new RowEditorModel();
        table.setRowEditorModel( rm );

        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum1 = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 45 );
        tableColumnModel.getColumn(1).setWidth( 75 );
        tableColumnModel.getColumn(2).setWidth( 120 );
        tableColumnModel.getColumn(3).setWidth( 85 );
        tableColumnModel.getColumn(4).setWidth( 55 );
        tableColumnModel.getColumn(5).setWidth( 160 );
        tableColumnModel.getColumn(6).setWidth( 130 );
        tableColumnModel.getColumn(7).setWidth( 130 );
        tableColumnModel.getColumn(8).setWidth( 170 );
        tableColumnModel.getColumn(9).setWidth( 360);
        tableColumnModel.getColumn(10).setWidth( 120 );
        for( int i=0;i<colNum1;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed( false );

        this.jScrollPane1.getViewport().add( this.table,null );
        jScrollPane1.getViewport().setBackground( Color.white );
    }

    public void enableButton( boolean val ){
        this.jButton1.setEnabled( val );
        this.jButton2.setEnabled( val );
        this.jButton3.setEnabled( val );
        this.jButton4.setEnabled( val );
        this.jButton5.setEnabled( val );

        if( !val)
            setDefaultCloseOperation( JDialog.DO_NOTHING_ON_CLOSE );
        else
            setDefaultCloseOperation( JDialog.DISPOSE_ON_CLOSE );
    }

    private void do_selCheckBox(){
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            model.setValueAt( new Boolean( this.jCheckBox1.isSelected() ), row, 0 );
        }
        fireEditingStopMsg();
    }

    public void fireEditingStopMsg(){
        TableCellEditor dce;

        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            dce = table.getCellEditor( i,0);
            if( dce != null ){
                try{
                    while( !dce.stopCellEditing() ){}
                }catch(Exception ex){}
            }
        }
    }
    
    private void do_qStart(){
        this.do_op( what_qstart );
    }
    private void do_start(){
        this.do_op( what_start );
    }
    private void do_stop(){
        this.do_op( what_stop );
    }
    
    private void do_delete(){
        this.fireEditingStopMsg();

        this.mjList.clear();
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            if( !((Boolean)model.getValueAt( row, 0 )).booleanValue() ) continue;
            MirrorJob mj  = (MirrorJob)model.getValueAt( row,1 );

            String aStatus = (String)model.getValueAt( row, 4 );
            if( aStatus.equals( SanBootView.res.getString("DhcpDialog.label.start") ) ){
                JOptionPane.showMessageDialog( this,SanBootView.res.getString("MenuAndBtnCenter.error.mjisrunning") +" : " +mj.getMj_job_name()  );
                return;
            }
            
            this.mjList.add( mj );
        }

        // 图形化地显示启、停任务
        status = "";
        errormsg = "";
        cnt = 0;
        totalStep = this.mjList.size();
        if( totalStep <= 0 ) {
            JOptionPane.showMessageDialog( this,
                SanBootView.res.getString("StartOrStopMjInBatchDialog.error.noSel")
            );
            return;
        }
        
        int aRetVal =  JOptionPane.showConfirmDialog(
            view,
            SanBootView.res.getString("StartOrStopMjInBatchDialog.confirm1"),
            SanBootView.res.getString("common.confirm"),
            JOptionPane.OK_CANCEL_OPTION
        );
        if( ( aRetVal == JOptionPane.CANCEL_OPTION ) || ( aRetVal == JOptionPane.CLOSED_OPTION ) ){
            return;
        }

        this.whatToDo = what_delete;
        this.dispose();

        String title = SanBootView.res.getString("StartOrStopMjInBatchDialog.title.del");
        String tip = SanBootView.res.getString("StartOrStopMjInBatchDialog.label.tip.del");

        InitProgramDialog initDiag = new InitProgramDialog( view,title,tip );
        Thread initThread = new Thread( new BatchedOpForMj( initDiag,this ) );
        initThread.start();
        int width  = 300+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 120+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        initDiag.setSize( width, height );
        initDiag.setLocation( view.getCenterPoint(width,height) );
        initDiag.setVisible( true );

        retVal = new Integer(1);
    }

    public void setMjList( ArrayList<MirrorJob> mjList ){
        this.mjList = mjList;
    }
    
    public void doWithGraph( int what ){
        // 图形化地显示启、停任务
        status = "";
        errormsg = "";
        cnt = 0;
        totalStep = this.mjList.size();
        if( totalStep <= 0 ) {
            JOptionPane.showMessageDialog( this,
                SanBootView.res.getString("StartOrStopMjInBatchDialog.error.noSel")
            );
            return;
        }

        this.whatToDo = what;
        this.dispose();

        String title,tip;
        if( what == what_qstart ){
            title = SanBootView.res.getString("StartOrStopMjInBatchDialog.title.qstart");
            tip = SanBootView.res.getString("StartOrStopMjInBatchDialog.label.tip.qstart");
        }else if( what == what_start ){
            title = SanBootView.res.getString("StartOrStopMjInBatchDialog.title.start");
            tip = SanBootView.res.getString("StartOrStopMjInBatchDialog.label.tip.start");
        }else{
            title = SanBootView.res.getString("StartOrStopMjInBatchDialog.title.stop");
            tip = SanBootView.res.getString("StartOrStopMjInBatchDialog.label.tip.stop");
        }
        InitProgramDialog initDiag = new InitProgramDialog( view,title,tip );
        Thread initThread = new Thread( new BatchedOpForMj( initDiag,this ) );
        initThread.start();
        int width  = 300+ResourceCenter.GLOBAL_DELTA_WIDTH_SIZE;
        int height = 120+ResourceCenter.GLOBAL_DELTA_HIGH_SIZE;
        initDiag.setSize( width, height );
        initDiag.setLocation( view.getCenterPoint(width,height) );
        initDiag.setVisible( true );

        retVal = new Integer(1);
    }

    private void do_op( int what ){
        this.fireEditingStopMsg();

        this.mjList.clear();
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            if( !((Boolean)model.getValueAt( row, 0 )).booleanValue() ) continue;
            MirrorJob mj = (MirrorJob)model.getValueAt( row,1 );
            this.mjList.add( mj );
        }

        doWithGraph( what );
    }
    
    public String getErrorMsg(){
        return this.errormsg;
    }

    public boolean init(){
        Object[] ret;
        Object hostObj;
        int rootid,action,ptype;
        String vol_name,vol_mp;
        boolean quickStart,isFirst=true,retValue =true,isOk;

        StringBuffer errBuf = new StringBuffer();

        int size = this.mjList.size();
        for( int i=0; i<size; i++ ){
            MirrorJob mj = this.mjList.get( i );
            cnt++;
            quickStart = false;
            
            if( this.whatToDo == what_qstart ){
                status = SanBootView.res.getString("StartOrStopMjInBatchDialog.loadstatus.qstart");
                action = 0;
                quickStart = true;
            }else if(this.whatToDo == what_start ){
                action = 0;
                status = SanBootView.res.getString("StartOrStopMjInBatchDialog.loadstatus.start");
            }else if(this.whatToDo == what_stop ){ // stop mirror job
                action = 1;
                status = SanBootView.res.getString("StartOrStopMjInBatchDialog.loadstatus.stop");
            }else{ // delete mirror job
                action = 1;
                status = SanBootView.res.getString("StartOrStopMjInBatchDialog.loadstatus.del");
            }
            status += " " + mj.getMj_job_name();

            ret = view.initor.mdb.getSomethingFromMjObj( mj );
            if( ret == null ) {
SanBootView.log.error(getClass().getName(), "Can't get info. on this mj, it's id: " + mj.getMj_id() );
                continue;
            }

            hostObj  = ret[0];
            rootid   = ((Integer)ret[1]).intValue();
            vol_name = (String)ret[2];
            vol_mp   = (String)ret[3];
            ptype = ((Integer)ret[4]).intValue();
            
            if( this.whatToDo == what_delete ){
                if( hostObj != null ){
                    boolean delHostInfo = false;

                    if( mj.isCjType() ){
                        isOk = view.initor.mdb.delMj( mj.getMj_id() );
                    }else{
SanBootView.log.info(getClass().getName(), "test whether destination swu server can be connected: " + mj.getMj_dest_ip() );
                        view.initor.mdb.targetSrvName = "";
                        view.initor.mdb.getHostName(
                            mj.getMj_dest_ip(),
                            mj.getMj_dest_port(),
                            mj.getMj_dest_pool(),
                            mj.getMj_dest_pool_passwd()
                        );
                        if( view.initor.mdb.getErrorCode() != AbstractNetworkRunning.OK ){
                            if( !jCheckBox2.isSelected() ){
SanBootView.log.warning(this.getClass().getName(), "Can't connecto to destination mirror server: " +mj.getMj_dest_ip() +". Cancel to delete this mj: " + mj.getMj_job_name() +" because user not select to force to delete mj.");
                                continue;
                            }else{
                                isOk = view.initor.mdb.delMj( mj.getMj_id() );
                            }
                        }else{
                            // 清除targetSrvName,免得影响其他代码（宁肯重新获取）
                            view.initor.mdb.targetSrvName = "";
                            DeleteMjThread thread = new DeleteMjThread( view, mj, 0, hostObj, rootid, vol_name,vol_mp,delHostInfo,ptype );
                            isOk = thread.realRun();
                        }
                    }
                }else{
                    isOk = view.initor.mdb.delMj( mj.getMj_id() );
                }

                // 将对应的mg也删除掉，否则有可能服务器端还有对应的进程( start_mirror )
                MirrorGrp mg = view.initor.mdb.getMGFromVectorOnRootID( rootid );
                if( mg != null && ( mg.getMg_type() != MirrorGrp.MG_TYPE_RADISK ) ){
SanBootView.log.info(getClass().getName(), "Try to delete corresponding mirror group object.if failed, do not care.");

                    // find mj list related to this mg. one mg can be shared by many mj
                    ArrayList aMjList = view.initor.mdb.getMjListFromVecOnMgID( mg.getMg_id() );
                    if( aMjList.size() ==1 ){
                        if( view.initor.mdb.delMg( mg.getMg_id() ) ){
                            view.initor.mdb.removeMGFromVector( mg );
                        }
                    }
                }

                if( isOk ){
                    view.initor.mdb.removeMJFromVector( mj );
                }else{
                    retValue = false;
                    if( isFirst ){
                        errBuf.append( mj.getMj_job_name() );
                        isFirst = false;
                    }else{
                        errBuf.append(","+mj.getMj_job_name() );
                    }
                }
            }else{ // start or stop mj
                String bootMac = "";
                if( hostObj != null ){
                    if( hostObj instanceof BootHost ){
                        BootHost bh = (BootHost)hostObj;
                        if( !bh.isWinHost() ){
                            boolean ok = view.initor.mdb.getUnixNetCardInfo( ResourceCenter.CLT_IP_CONF + "/" + bh.getID() + ResourceCenter.CONF_IP );
                            if( ok ){
                                bootMac = view.initor.mdb.getUnixBootMac();
                                if( bootMac.equals( "" ) ){
SanBootView.log.error(getClass().getName(), "Can't get bootMAC on boot host, it's host_id: " + bh.getID() );
                                    continue;
                                }
                            }
                        }

                        if( this.whatToDo == what_start  ){
                            Object _isOkTransferManagedInfo = this.set_bootHost.get( new Integer( bh.getID() ) );
                            if( _isOkTransferManagedInfo != null  ){
                                boolean isOkForTransfer = ((Boolean)_isOkTransferManagedInfo).booleanValue();
                                if( isOkForTransfer ){
                                    // 已经成功地传过了管理信息,后面的就不需要传输了
                                    quickStart = true;
                                }
                            }
                        }

                    }else if( hostObj instanceof SourceAgent ){
                        SourceAgent sa = (SourceAgent)hostObj;
                        if( !sa.isWinHost() ){
                            boolean ok = view.initor.mdb.getUnixNetCardInfo( ResourceCenter.CLT_IP_CONF + "/" + ResourceCenter.PREFIX_SRC_AGNT + sa.getSrc_agnt_id() + ResourceCenter.CONF_IP );
                            if( ok ){
                                bootMac = view.initor.mdb.getUnixBootMac();
                                if( bootMac.equals( "" ) ){
SanBootView.log.error(getClass().getName(), "Can't get bootMAC on src agnt, it's host_id: " + sa.getSrc_agnt_id() );
                                    continue;
                                }
                            }
                        }

                        if( this.whatToDo == what_start  ){
                            Object _isOkTransferManagedInfo = this.set_srcAgnt.get( new Integer( sa.getSrc_agnt_id() ) );
                            if( _isOkTransferManagedInfo != null  ){
                                boolean isOkForTransfer = ((Boolean)_isOkTransferManagedInfo).booleanValue();
                                if( isOkForTransfer ){
                                    // 已经成功地传过了管理信息，后面的就不需要传输了
                                    quickStart = true;
                                }
                            }
                        }
                    }
                }

                if( mj.isNormalMjType() ){
SanBootView.log.info(getClass().getName(), "this mirror job is a normal job: " + mj.getMj_id() );
                    StartorStopMjThread thread1 = new StartorStopMjThread( view, mj, action, hostObj, rootid, vol_name,vol_mp,bootMac,quickStart,false,ptype );
                    isOk = thread1.realRun();
                    judgeTransferManagedInfoIsOk( hostObj,this.whatToDo,thread1.isTransferManagedInfoOk() );
                }else if( mj.isIncMjType() ){
SanBootView.log.info(getClass().getName(), "this mirror job is an incremental job: " + mj.getMj_id() );
                    StartorStopUnlimitedIncMjThread thread2 = new StartorStopUnlimitedIncMjThread( view,mj,action,hostObj,rootid,vol_name,vol_mp,bootMac,quickStart,false,ptype );
                    isOk = thread2.realRun();
                    judgeTransferManagedInfoIsOk( hostObj,this.whatToDo,thread2.isTransferManagedInfoOk() );
                }else{
SanBootView.log.info(getClass().getName(), "this mirror job is a copy job: " + mj.getMj_id() );
                    StartorStopCjThread thread3 = new StartorStopCjThread( view,mj,action,hostObj,rootid,vol_name,vol_mp,bootMac,quickStart,false,ptype );
                    isOk = thread3.realRun();
                    judgeTransferManagedInfoIsOk( hostObj,this.whatToDo,thread3.isTransferManagedInfoOk() );
                }

                if( !isOk ){
                    retValue = false;
                    if( isFirst ){
                        errBuf.append( mj.getMj_job_name() );
                        isFirst = false;
                    }else{
                        errBuf.append(","+mj.getMj_job_name() );
                    }
                }else{
                    if( action == 0 ){
                        mj.setMj_job_status( MirrorJob.MJ_STATUS_START );
                    }else{
                        mj.setMj_job_status( MirrorJob.MJ_STATUS_STOP );
                    }
                }
            }
        } // for end

        if( this.whatToDo == what_qstart ){
            if( !retValue ){
                errormsg = SanBootView.res.getString("StartOrStopMjInBatchDialog.error.qstart") + "\n"+errBuf.toString();
            }else{
                errormsg = "";
            }
        }else if( this.whatToDo == what_start ){
            if( !retValue ){
                errormsg = SanBootView.res.getString("StartOrStopMjInBatchDialog.error.start") + "\n"+errBuf.toString();
            }else{
                errormsg = "";
            }
            // 再判断管理信息是否成功传输
            errormsg += getErrorMsgForTransferManagedInfo();
        }else{
            if( !retValue ){
                errormsg = SanBootView.res.getString("StartOrStopMjInBatchDialog.error.stop") + errBuf.toString();
            }else{
                errormsg = "";
            }
        }

        if( this.whatToDo == what_start ){
            return retValue && errormsg.equals("");
        }else{
            return retValue;
        }
    }

    private String getErrorMsgForTransferManagedInfo(){
        boolean isFirst = true;
        StringBuffer ret = new StringBuffer();

        StringBuffer errBuf1 = new StringBuffer();
        Iterator iterator  = this.set_bootHost.keySet().iterator();
        while( iterator.hasNext() ){
            Integer key = (Integer)iterator.next();
            Boolean val = this.set_bootHost.get( key );
            if( !val ){
                if( isFirst ){
                    errBuf1.append( "" + key );
                    isFirst = false;
                }else{
                    errBuf1.append( "," + key );
                }
            }
        }

        if( !errBuf1.toString().equals("") ){
            ret.append("\n"+SanBootView.res.getString("StartOrStopMjInBatchDialog.error.transfer1") );
            ret.append("\n" + errBuf1.toString() );
        }

        isFirst = true;
        StringBuffer errBuf2 = new StringBuffer();
        iterator  = this.set_srcAgnt.keySet().iterator();
        while( iterator.hasNext() ){
            Integer key = (Integer)iterator.next();
            Boolean val = this.set_srcAgnt.get( key );
            if( !val ){
                if( isFirst ){
                    errBuf2.append( "" + key );
                    isFirst = false;
                }else{
                    errBuf2.append( "," + key );
                }
            }
        }

        if( !errBuf2.toString().equals("") ){
            ret.append("\n"+SanBootView.res.getString("StartOrStopMjInBatchDialog.error.transfer2") );
            ret.append("\n" + errBuf2.toString() );
        }

        return ret.toString();
    }

    private void judgeTransferManagedInfoIsOk( Object hostObj,int whatToDo,boolean isOkForTransfer ){
        if( ( hostObj != null ) && ( whatToDo == what_start ) ){
            if( hostObj instanceof BootHost ){
                BootHost bh = (BootHost)hostObj;
                Object _isOkTransferManagedInfo = this.set_bootHost.get( new Integer( bh.getID() ) );
                if( _isOkTransferManagedInfo != null  ){
                    boolean val = ((Boolean)_isOkTransferManagedInfo).booleanValue();
                    if( val ){
                        // 已经成功地传过了管理信息，后面的就不需要传输了
                        return;
                    }else{
                        this.set_bootHost.put( new Integer(bh.getID()), new Boolean(isOkForTransfer) );
                    }
                }else{
                    this.set_bootHost.put( new Integer(bh.getID()), new Boolean(isOkForTransfer) );
                }
            }else{
                SourceAgent sa = (SourceAgent)hostObj;
                Object _isOkTransferManagedInfo = this.set_srcAgnt.get( new Integer( sa.getSrc_agnt_id() ) );
                if( _isOkTransferManagedInfo != null  ){
                    boolean val = ((Boolean)_isOkTransferManagedInfo).booleanValue();
                    if( val ){
                        // 已经成功地传过了管理信息，后面的就不需要传输了
                        return;
                    }else{
                        this.set_srcAgnt.put( new Integer( sa.getSrc_agnt_id() ), new Boolean(isOkForTransfer) );
                    }
                }else{
                    this.set_srcAgnt.put( new Integer( sa.getSrc_agnt_id() ), new Boolean(isOkForTransfer) );
                }
            }
        }
    }

    public String getLoadingStatus(){
        return status;
    }
    
    public int getLoadingProcessVal(){
        return ( cnt * 100 )/totalStep;
    }

    public String getInitErrMsg(){
        return errormsg;
    }

    public boolean isCrtVG(){
        return false;
    }

    public String getSrvIP(){
        return "";
    }
    
    public Object getRetVal(){
        return this.retVal;
    }
}