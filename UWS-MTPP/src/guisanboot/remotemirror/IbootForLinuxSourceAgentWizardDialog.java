/*
 * IbootForLinuxSourceAgentWizardDialog.java
 *
 * Created on 2009/9/23,��PM 15:15
 */

package guisanboot.remotemirror;

import guisanboot.ui.*;
import javax.swing.*;
import java.util.*;
import guisanboot.data.*;
import guisanboot.res.*;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;

/**
 *
 * @author  Administrator
 */
public class IbootForLinuxSourceAgentWizardDialog extends WizardDialogSample implements FailoverInterface,UnixIbootable{
    SelectHostForNetBootPane selectHostForNetBoot;
    SelectNetCardPane selectNetCardPane;
    SetDhcpPane setDhcpPane;
    SelectUnixSnapshotForSrcAgentPane selectSnapPane;
    
    SanBootView view;
    SourceAgent host;  // 删除windows配置
    BootHost netBootedHost; // 网络启动所在的宿主机
    boolean mustCheckDiskExist;   // 标志：是否检查卷的存在；对于处于“回滚主机列表下”的srcagnt要做这样的检查
    SeledHostForNetBoot selHostForNetBoot;
    String rstIP;
    int rstPort;
    
    Vector bindList = null;
    Vector partitionList = null;
    String original_boot_MAC; // 初始化的原机对应的启动网卡MAC
    HashMap viewMap = new HashMap();
    private Hashtable cardOnClnt = new Hashtable();
    private Hashtable dhcpOnClnt = new Hashtable();
    private Hashtable oldBootVer = new Hashtable();
    
    String bootMac=""; // 要进行网络启动的物理主机的网卡
    String targetSrvName="";
    BootVerList oldBootVerList;  // 上次网络启动的恢复版本( 里面包含版本列表和os的版本 )
    StringBuffer logBuf = new StringBuffer();

    /** Creates new form IbootForLinuxSourceAgentWizardDialog */
    public IbootForLinuxSourceAgentWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public IbootForLinuxSourceAgentWizardDialog( 
            SanBootView view,
            SourceAgent orgHost,
            String targetSrvName,
            Vector partList,
            String original_boot_MAC,
            boolean mustCheckDiskExist
    ){
        super( view );
        myInit( view,orgHost,targetSrvName,partList,original_boot_MAC,mustCheckDiskExist );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitBootHostWizardDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private void myInit( SanBootView _view,SourceAgent _host,String _tgtSrvName,Vector _partitionList,String _original_boot_MAC,boolean _mustCheckDiskExist ){
        view = _view;
        host = _host;
        this.targetSrvName = _tgtSrvName;
        this.partitionList = _partitionList;
        this.original_boot_MAC = _original_boot_MAC;
        this.mustCheckDiskExist = _mustCheckDiskExist;
        
        setupLanguage1();
        enableBackButton( false );
        
        setWizardTipText( 
            SanBootView.res.getString( "WizardDialogSample.wizardText"),
            SanBootView.res.getString( "IbootForLinuxWizardDialog.wizardText1" ) 
        );
        
        setTipTextOnTopPane( SanBootView.res.getString("IbootForLinuxWizardDialog.title") );
        
        selectHostForNetBoot = new SelectHostForNetBootPane( view,(BootHost)null );
        selectNetCardPane = new SelectNetCardPane( view);
        setDhcpPane = new SetDhcpPane( view,"windows" );
        selectSnapPane = new SelectUnixSnapshotForSrcAgentPane( view );
        selectSnapPane.removeSwapOption();
    }
    
    private void setupLanguage1(){
        setTitle( SanBootView.res.getString("IbootForLinuxWizardDialog.title") );
    }
    
    private ArrayList getNetCardList( ){
        ArrayList netCardList;
        boolean isOk;
        
        boolean isWin = netBootedHost.isWinHost();
        int hostID = netBootedHost.getID();
        
        if( isWin ){
            isOk = view.initor.mdb.getIPInfoFromSrv( ResourceCenter.CLT_IP_CONF+"/"+ hostID + ResourceCenter.CONF_IP );
        }else{
            isOk = view.initor.mdb.getUnixNetCardFromSrv( ResourceCenter.CLT_IP_CONF+"/"+ hostID + ResourceCenter.CONF_IP  ); 
        }
        
        if( !isOk ){
            if( isWin ){
                isOk = view.initor.mdb.getIPInfoFromClnt( rstIP,rstPort, "00-00-00-00-00-00" );
            }else{
                isOk = view.initor.mdb.getUnixNetCard( rstIP,rstPort, "list_netinfo.sh" ); 
            }
            if( !isOk ){
                JOptionPane.showMessageDialog(this,
                    ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                        view.initor.mdb.getErrorMessage()
                );
                return null;
            }else{
                if( isWin )
                    netCardList = view.initor.mdb.getAllNetCardinfo();
                else
                    netCardList = view.initor.mdb.getUnixNetCard();
            }
        }else{
            if( isWin )
                netCardList = view.initor.mdb.getAllNetCardinfoFromSrv();
            else
                netCardList = view.initor.mdb.getUnixNetCardFromSrv();
            if( netCardList.size() <=0 ){
                if( isWin ){
                    isOk = view.initor.mdb.getIPInfoFromClnt( rstIP,rstPort, "00-00-00-00-00-00" );
                }else{
                    isOk = view.initor.mdb.getUnixNetCard( rstIP,rstPort, "list_netinfo.sh" ); 
                }
                if( !isOk ){
                    JOptionPane.showMessageDialog(this,
                        ResourceCenter.getCmdString( ResourceCenter.CMD_GET_NETCARD )+" : "+
                            view.initor.mdb.getErrorMessage()
                    );
                    return null;
                }else{
                    if( isWin )
                        netCardList = view.initor.mdb.getAllNetCardinfo();
                    else
                        netCardList = view.initor.mdb.getUnixNetCard();
                }
            }
        }
        
        return netCardList;
    }
    
    @Override public void backButtonProcess(){
        ArrayList netCardInfo;
        
        if( getTipTitle().compareTo(SanBootView.res.getString("IbootForLinuxWizardDialog.title1").trim() ) == 0 ){
            this.enableBackButton( false );
            this.removeCenterPane();
            this.addImagePaneOntoCenterPane();
            this.addWizardTipTextPane();
            this.setWizardTipText(
                SanBootView.res.getString( "WizardDialogSample.wizardText"),
                SanBootView.res.getString("IbootForLinuxWizardDialog.wizardText1")
            );
            setTipTextOnTopPane( SanBootView.res.getString("IbootForLinuxWizardDialog.title") );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("IbootForLinuxWizardDialog.title2").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            netCardInfo = selectNetCardPane.getNetCardInfo();
            selHostForNetBoot = selectHostForNetBoot.getSelectHostToNetBoot();
            if( selHostForNetBoot.mac.equals("") ){
                String rstIP1 = selHostForNetBoot.host.getIP();
                cardOnClnt.remove( new String( rstIP1 ) );
                cardOnClnt.put( new String( rstIP1 ),netCardInfo );
            }
            selectNetCardPane.removeListener();    
            setTipTextOnTopPane( SanBootView.res.getString("IbootForLinuxWizardDialog.title1") );
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane(  selectHostForNetBoot );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("IbootForLinuxWizardDialog.title3").trim() ) == 0 ){     
            selHostForNetBoot = selectHostForNetBoot.getSelectHostToNetBoot();
            InfoFromDhcpSetupPane dhcpSetPane = new InfoFromDhcpSetupPane();
            dhcpSetPane.isUseOdyDhcp = setDhcpPane.isAutoSetup();
            dhcpSetPane.dhcpClntInfo = setDhcpPane.getDhcpSetInfo();
            if( selHostForNetBoot.mac.equals("") ){    
                String rstIP2 = selHostForNetBoot.host.getIP();
                dhcpOnClnt.remove( new String( rstIP2 ) );
                dhcpOnClnt.put( new String(rstIP2), dhcpSetPane );
            }else{
                dhcpOnClnt.remove( new String( selHostForNetBoot.mac ) );
                dhcpOnClnt.put( new String(selHostForNetBoot.mac), dhcpSetPane );
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("IbootForLinuxWizardDialog.title2") );
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane(  selectNetCardPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo(SanBootView.res.getString("IbootForLinuxWizardDialog.title4").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("IbootForLinuxWizardDialog.title3") );
            removePaneFromContentPane( selectSnapPane );
            addPaneOntoContentPane(  setDhcpPane );
            refreshCenterPane();
            return;
        }
    }
    
    @Override public void nextButtonProcess(){
        boolean isOk,contained,isUseOdyDhcp=true;
        Vector subnetList=null,ibootSrvList=null;
        ArrayList netCardList;
        String oldmac="",start_ip,ip_3rd="",nextsrv_3rd="";
        DhcpClientInfo dhcpClntInfo=null;
        InfoFromDhcpSetupPane dhcpSetPane; 
        
        if( getTipTitle().compareTo( SanBootView.res.getString("IbootForLinuxWizardDialog.title1").trim() ) == 0 ){
            if( !selectHostForNetBoot.checkInputValidity() ) return;
            
            selHostForNetBoot = selectHostForNetBoot.getSelectHostToNetBoot();
            if( selHostForNetBoot.mac.equals("") ){
                netBootedHost = selHostForNetBoot.host;
                rstIP = netBootedHost.getIP();
                rstPort = netBootedHost.getPort(); 
            }else{//从指定网卡进行网络启动
                netBootedHost = null;
                rstIP ="";
                rstPort = -1;
            }
            
            if( netBootedHost == null ){
                netCardList = new ArrayList();
                PesudoNetCard pnc = new PesudoNetCard();
                pnc.isSel = true;
                pnc.mac = selHostForNetBoot.mac;
                netCardList.add( pnc );
                selectNetCardPane.setupNetCardTable( netCardList );
            }else{
                contained = cardOnClnt.containsKey( new String( rstIP ) );
                if( !contained ){
                    netCardList = getNetCardList();
                    cardOnClnt.put( new String(rstIP), netCardList );
                    
                    // 获取当前的iboot list，从中找出netBootedHost曾经确定过的启动网卡
                    DestAgent da = getSelectedMC( netCardList );
                    if( da != null ){
                        oldmac = da.getDst_agent_mac();
                    }else{
                        oldmac = "";
                    }                       
                    selectNetCardPane.setupNetCardTable( netCardList );
                    selectNetCardPane.setupGigaNetCard( oldmac );                    
                }else{ 
                    Object val = cardOnClnt.get( new String(rstIP) );
                    netCardList = (ArrayList)val;
                    selectNetCardPane.setupNetCardTable( netCardList );
                }
                selectNetCardPane.addListener();
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("IbootForLinuxWizardDialog.title2") );    
            removePaneFromContentPane( selectHostForNetBoot );
            addPaneOntoContentPane( selectNetCardPane  );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("IbootForLinuxWizardDialog.title2").trim() ) == 0 ){
            selectNetCardPane.fireEditingStopMsg();
            
            if( !selectNetCardPane.hasSelectedNetCard() ){
                JOptionPane.showMessageDialog( this,
                    SanBootView.res.getString("InitBootHostWizardDialog.error.notSelCard")
                );
                return;
            }
            
            // 首先获取设置dhcp所需的subnet和ibootsrv列表
            if( subnetList == null || ibootSrvList == null ){
                // 首先判断该主机是否使用了uws服务器上的dhcp服务
                if( view.initor.dhcpdb.isLoginOK() ){   
                    subnetList   = view.initor.dhcpdb.getSubnetListFromDhcp();
                    ibootSrvList = view.initor.dhcpdb.getIbootSrvListFromDhcp();
                }else{
                    // dhcp server不可用( 无法登陆它,可能没有关于它的配置信息,或者配置信息有误 )
                    subnetList   = new Vector();
                    ibootSrvList = new Vector();
                }    
            }
            
            if( netBootedHost == null ){ // select single netcard to iboot
                contained = dhcpOnClnt.containsKey( new String( selHostForNetBoot.mac ) );
                if( !contained ){
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
SanBootView.log.debug( getClass().getName(),"selected netboot MAC: "+ mac ); 
                    start_ip = host.getSrc_agnt_ip();
                    DestAgent da = getSelectedMC( nc );
                    if( da != null ){
                        start_ip = da.getDst_agent_ip();
                        dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac( DhcpClientInfo.getMacStr( mac ) );
                        
                        // get the 3rd dhcp info
                        isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+ResourceCenter.PREFIX_DST_AGNT + da.getDst_agent_id() + ResourceCenter.CONF_3RD_DHCP );
                        if( isOk ){
                            isUseOdyDhcp = false; //due to have the 3rd dhcp info config file on server-side
                            ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                            nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                        }else{
                            isUseOdyDhcp = true;
                        }
                        if( ip_3rd.equals("") )
                            ip_3rd = start_ip;
                        if( nextsrv_3rd.equals("") )
                            nextsrv_3rd= view.initor.getTxIP(start_ip);
                    }else{
                        isUseOdyDhcp = true;
                        ip_3rd = start_ip;
                        nextsrv_3rd = view.initor.getTxIP(start_ip);
                    }
                    
                    setDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,selHostForNetBoot.mac,isUseOdyDhcp,dhcpClntInfo,start_ip,ip_3rd,nextsrv_3rd );
                }else{
                    Object val = dhcpOnClnt.get( new String( selHostForNetBoot.mac ) );
                    dhcpSetPane = (InfoFromDhcpSetupPane)val;
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
                    setDhcpPane.setDhcpSetInfo( dhcpSetPane.isUseOdyDhcp,dhcpSetPane.dhcpClntInfo,mac ); 
                }
            }else{
                contained = dhcpOnClnt.containsKey( new String( rstIP ) ); 
                if( !contained ){
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
SanBootView.log.debug( getClass().getName(),"selected netboot MAC: "+ mac ); 
                    start_ip = host.getSrc_agnt_ip();
                    DestAgent da = getSelectedMC( nc );
                    if( da != null ){
                        start_ip = da.getDst_agent_ip();
                        dhcpClntInfo = view.initor.dhcpdb.getSelClntOnMac( DhcpClientInfo.getMacStr( mac ) );

                        // get the 3rd dhcp info
                        isOk = view.initor.mdb.get3rdDhcpInfo( ResourceCenter.CLT_IP_CONF+"/"+ResourceCenter.PREFIX_DST_AGNT + da.getDst_agent_id() + ResourceCenter.CONF_3RD_DHCP );
                        if( isOk ){
                            isUseOdyDhcp = false; //due to have the 3rd dhcp info config file on server-side
                            ip_3rd = view.initor.mdb.getIpFrom3rdDhcpInfo();
                            nextsrv_3rd = view.initor.mdb.getNextServerFrom3rdDhcpInfo();
                        }else{
                            isUseOdyDhcp = true;
                        }
                        if( ip_3rd.equals("") )
                            ip_3rd = start_ip;
                        if( nextsrv_3rd.equals("") )
                            nextsrv_3rd= view.initor.getTxIP(start_ip);                
                    }else{                    
                        isUseOdyDhcp = true;
                        ip_3rd = start_ip;
                        nextsrv_3rd = view.initor.getTxIP(start_ip);
                    }
                    
                    setDhcpPane.initDhcpSetupPane( ibootSrvList,subnetList,mac,isUseOdyDhcp,dhcpClntInfo,start_ip,ip_3rd,nextsrv_3rd ); 
                }else{
                    Object val = dhcpOnClnt.get( rstIP );
                    dhcpSetPane = (InfoFromDhcpSetupPane)val;
                    Object nc = selectNetCardPane.getSelectNetCard();
                    String mac="";
                    if( nc instanceof NetCard ){
                        mac = ((NetCard)nc).mac;
                    }else{
                        mac = ((UnixNetCard)nc).mac;
                    }
                    setDhcpPane.setDhcpSetInfo( dhcpSetPane.isUseOdyDhcp,dhcpSetPane.dhcpClntInfo,mac ); 
                }
            }
            
            setTipTextOnTopPane( SanBootView.res.getString("IbootForLinuxWizardDialog.title3") );
            removePaneFromContentPane( selectNetCardPane );
            addPaneOntoContentPane( setDhcpPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("IbootForLinuxWizardDialog.title3").trim() ) == 0 ){
            if( !setDhcpPane.checkDhcpInfoValidity() ){ 
                return;
            }
            
            Object selNC = selectNetCardPane.getSelectNetCard();
            if( selNC == null ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.notFoundBootMac")
                );
                return;
            }else{
                if( selNC instanceof NetCard ){
                    bootMac = ((NetCard)selNC).mac;
                }else{
                    bootMac = ((UnixNetCard)selNC).mac;
                }
            }
            
            // 进行网络启动的是其他主机或是指定的网卡
            DestAgent da = getSelectedMC( bootMac );
            if( da != null ){
                contained = oldBootVer.containsKey( bootMac );
                if( !contained ){
                    oldBootVerList = view.getBootVerForDestAgent( da.getDst_agent_id() );
                    oldBootVer.put( bootMac,oldBootVerList  );
                }else{
                    oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                }
            }else{
                contained = oldBootVer.containsKey( bootMac );
                if( !contained ){
                    oldBootVerList = view.getBootVerForDefault( host.getSrc_agnt_id() );
                    oldBootVer.put( bootMac,oldBootVerList );
                }else{
                    oldBootVerList = (BootVerList)oldBootVer.get( bootMac );
                }
            }
            
            if( bindList == null ){
                // 正在准备快照版本
                ProgressDialog initDiag = new ProgressDialog( 
                    view,
                    SanBootView.res.getString("View.pdiagTitle.getSnapVer"),
                    SanBootView.res.getString("View.pdiagTip.getSnapVer")
                );
                
                GetUnixRstVerForSrcAgent getRstVer = new GetUnixRstVerForSrcAgent( initDiag,view,host,mustCheckDiskExist,false );
                getRstVer.start();
                initDiag.mySetSize();
                initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
                initDiag.setVisible( true );

                bindList = getRstVer.getBindList();
            }
            selectSnapPane.setupTable( bindList, oldBootVerList.bootVerList );
                    
            setTipTextOnTopPane( SanBootView.res.getString("IbootForLinuxWizardDialog.title4") );     
            removePaneFromContentPane( setDhcpPane );
            addPaneOntoContentPane( selectSnapPane );
            refreshCenterPane();
            return;
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("IbootForLinuxWizardDialog.title4").trim() ) == 0 ){
            selectSnapPane.fireEditingStopMsg();
            
            if( !selectSnapPane.toRecoverOSDisk() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.notRecoverCDisk")
                );
                return;
            }

            if( !selectSnapPane.restoreAllDisk() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.mustRstAllDisk")
                );
                return;
            }

            if( !selectSnapPane.multiFsToRestore() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("FailoverWizardDialog.error.multiFsToRst")
                );
                return;
            }

            // 为所选的快照生成view
            ProgressDialog initDiag = new ProgressDialog( 
                view,
                SanBootView.res.getString("View.pdiagTitle.selRstVer"),
                SanBootView.res.getString("View.pdiagTip.selRstVer")
            );
            
            DhcpClientInfo dhcpCltInfo = setDhcpPane.getDhcpSetInfo();
            start_ip = setDhcpPane.isAutoSetup()? dhcpCltInfo.ip: dhcpCltInfo.ip_3rd;

            CrtUnixViewForSrcAgent crtView = new CrtUnixViewForSrcAgent( 
                this,
                initDiag,
                selectSnapPane.getSelectedSnap().toArray(),
                viewMap,
                view,
                bootMac,
                host,
                targetSrvName,
                partitionList,
                start_ip,
                false,
                setDhcpPane,
                original_boot_MAC,
                selectSnapPane.isUsingSwapWhenNetbooting()
            );
            crtView.start();
            initDiag.mySetSize();
            initDiag.setLocation( view.getCenterPoint( initDiag.getDefWidth(),initDiag.getDefHeight() ) );
            initDiag.setVisible( true );

            if( crtView.allFinish ){
                this.recordUWSRpt( crtView.allFinish );
                this.dispose();
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectBootVerDialog.log.ok")
                );
            }else{
                // 出错一次就记录一次
                this.recordUWSRpt( crtView.allFinish );
            }
        }
        
        if( getTipTitle().compareTo( SanBootView.res.getString("IbootForLinuxWizardDialog.title").trim() ) == 0 ){
            setTipTextOnTopPane( SanBootView.res.getString("IbootForLinuxWizardDialog.title1") );
            enableBackButton( true );
            removeCenterPane();
            addTopPaneOntoCenterPane();
            addContentPaneOntoCenterPane();
            addPaneOntoContentPane( selectHostForNetBoot );
            refreshCenterPane();
            return;
        }else{
            return;
        }
    }
    
    @Override public void cancelButtonProcess(){
        this.dispose();
    }
    
    public void realDRRecover(){
    }
    
    public boolean checkSnapNumber( String label,int rootid,int local_snap_id ){
        return this.selectSnapPane.checkSnapNumber( label,rootid,local_snap_id );
    }
    
    private DestAgent getSelectedMC( String mac ){
        ArrayList list = new ArrayList(1);
        NetCard nc = new NetCard();
        nc.mac = mac;
        list.add( nc );
        return getSelectedMC( list );
    }
    
    private DestAgent getSelectedMC( Object nc ){
        ArrayList list = new ArrayList(1);
        list.add( nc );
        return getSelectedMC( list );
    }
    
    private DestAgent getSelectedMC( ArrayList netCardList ){
        int i,j,size,size1;
        Object nc;
        NetCard wnc;
        UnixNetCard unc;
        String mac;
        DestAgent da;
        
        ArrayList netBootedHostList = getNetbootedHostOnSrcAgnt( host.getSrc_agnt_id() );
        size = netCardList.size();
        for( i=0; i<size; i++ ){
            nc = netCardList.get(i);
            if( nc instanceof NetCard ){
                wnc = (NetCard)nc;
                mac = DhcpClientInfo.getSimpleMac( wnc.mac );
            }else{
                unc = (UnixNetCard)nc;
                mac = DhcpClientInfo.getSimpleMac( unc.mac );
            }
            
            size1 = netBootedHostList.size();
SanBootView.log.debug( getClass().getName(),"netbooted host size: "+ size1 +" mac: "+ mac );            
            for( j=0; j<size1; j++ ){
                da = (DestAgent)netBootedHostList.get(j);
                if( da.getDst_agent_mac().equals( mac ) ){
SanBootView.log.debug( getClass().getName(),"dest agent ip: "+ da.getDst_agent_ip() );             
                    return da;
                }
            }
        }
        
        return null;
    }
    
    public ArrayList getNetbootedHostOnSrcAgnt( int srcAgntID ){
        boolean isok = view.initor.mdb.updateMDI();
        if( !isok ){
            return null;
        }else{
            ArrayList list = view.initor.mdb.getMDIFromCacheOnSrcAgntID( srcAgntID );
            int size = list.size();
            ArrayList rootidList = new ArrayList( size );
            for( int i=0; i<size; i++ ){
                MirrorDiskInfo mdi = (MirrorDiskInfo)list.get(i); 
                rootidList.add( new Integer( mdi.getSnap_rootid() ) );
            }
            
            ArrayList ret = view.getNetbootedHostOnHost( rootidList );
            return ret;
        }
    }

    private String getDhcpIP(){
        boolean useOdyDhcp = setDhcpPane.isAutoSetup();
        DhcpClientInfo  dhcpInfo = setDhcpPane.getDhcpSetInfo();
        if( useOdyDhcp ){
            return dhcpInfo.ip;
        }else{
            return dhcpInfo.ip_3rd;
        }
    }

    private String getTaskMsgForSuccess(){
        return SanBootView.res.getString("FailoverWizardDialog.error.drRecoverOK");
    }

    private void recordUWSRpt( boolean initOk ){
        String msg;

        UWSReport rpt = new UWSReport();

        Date date = new Date();
        GregorianCalendar today = new GregorianCalendar();
        today.setTime( date );

        int year  = today.get( Calendar.YEAR );
        String stime = year + "";
        int month = today.get( Calendar.MONTH ) + 1;
        if( month<10 ){
            stime+= "0" + month;
        }else{
            stime+=month;
        }
        int day   = today.get( Calendar.DAY_OF_MONTH );
        if( day <10 ){
            stime+= "0" + day;
        }else{
            stime+=day;
        }
        int hour  = today.get(Calendar.HOUR_OF_DAY);
        if( hour <10 ){
            stime+= "0" + hour;
        }else{
            stime+=hour;
        }
        int min   = today.get(Calendar.MINUTE);
        if( min <10 ){
            stime +="0"+min;
        }else{
            stime+=min;
        }
        int sec   = today.get(Calendar.SECOND);
        if( sec <10 ){
            stime+="0"+sec;
        }else{
            stime+=sec;
        }

        rpt.setSTime( stime );
        rpt.setClntName( host.getSrc_agnt_ip() );

        rpt.setTaskClntId(  host.getSrc_agnt_id() );
        rpt.setTask_clnt_type(  DestAgent.TYPE_SRC_AGNT );
        rpt.setTask_clnt_mac( DhcpClientInfo.getMacStr( this.bootMac ) );
        rpt.setTask_clnt_dhcp_ip( this.getDhcpIP() );

        rpt.setTType( UWSReport.TASK_TYPE_L2I );
        rpt.setTResult( initOk? UWSReport.TASK_RESULT_END:UWSReport.TASK_RESULT_FAIL );

        msg = logBuf.toString();
        if( msg.getBytes().length > 1014 ){
            byte[] arr = msg.getBytes();
            String newmsg = new String(arr,0,1014 );
            rpt.setTaskMsg( initOk? this.getTaskMsgForSuccess() : newmsg );
        }else{
            rpt.setTaskMsg( initOk? this.getTaskMsgForSuccess() : msg );
        }

        String fname = generateUWSRptTmpFile( rpt.prtMe() );
        if( fname != null ){
            if( !view.initor.mdb.addReport( fname ) ){
                // save in local host
                saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_L2I_RPT + stime );
            }
        }else{
            // save in local host
            saveUWSRpt( rpt.prtMe(), ResourceCenter.UWS_L2I_RPT + stime );
        }
    }

    private String generateUWSRptTmpFile( String contents ){
        String fname;

        File tmpFile = view.initor.mdb.createTmpFile( ResourceCenter.PREFIX,ResourceCenter.SUFFIX_USWTMP );
        if( tmpFile == null ){
            return null;
        }

        // 发送profile的内容
        if( !view.initor.mdb.sendFileToServer( tmpFile.getName(),contents ) ){
            tmpFile.delete();
            return null;
        }

        fname = ResourceCenter.TMP_DIR + tmpFile.getName();
        tmpFile.delete();
        return fname;
    }

    public void saveUWSRpt( String contents,String fname ){
        try{
            String path = InitApp.getUserWorkDir() + File.separator + fname;
            File f1 = new File( path );

            f1.createNewFile();

            PrintWriter out = new PrintWriter( new FileWriter(f1),true );
            out.print( contents );
            out.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
}